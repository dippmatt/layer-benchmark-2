
Glow_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006e14  08007190  08007190  00017190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800dfa4  0800dfa4  0001dfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  0800dfbc  0800dfbc  0001dfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e07c  0800e07c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e07c  0800e07c  0001e07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e080  0800e080  0001e080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800e084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000078  0800e0fc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000878  0800e0fc  00020878  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      0000011f  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040a05  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d1c  00000000  00000000  00060bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00031db7  00000000  00000000  000668ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ed0  00000000  00000000  000986a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00008028  00000000  00000000  00099578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029fd5  00000000  00000000  000a15a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022674  00000000  00000000  000cb575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00105d0a  00000000  00000000  000edbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b28  00000000  00000000  001f38f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macinfo 00000001  00000000  00000000  001f641c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_pubnames 00002118  00000000  00000000  001f641d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_pubtypes 00000025  00000000  00000000  001f8535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000078 	.word	0x20000078
 80001d4:	20000078 	.word	0x20000078
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000078 	.word	0x20000078
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000078 	.word	0x20000078
 8000220:	00000000 	.word	0x00000000
 8000224:	08007178 	.word	0x08007178

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	2000007c 	.word	0x2000007c
 8000244:	08007178 	.word	0x08007178

08000248 <model>:
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	af03      	add	r7, sp, #12
 800024c:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 8000250:	b099      	sub	sp, #100	; 0x64
 8000252:	4614      	mov	r4, r2

  ; size = 24874 bytes
}

code {
  0 %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.094564661 O:-128][0.000,24.114]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 15, @in 12, @out 4
 8000254:	f240 029c 	movw	r2, #156	; 0x9c
 8000258:	460e      	mov	r6, r1
 800025a:	f242 0338 	movw	r3, #8248	; 0x2038
 800025e:	f242 0c28 	movw	ip, #8232	; 0x2028
  1 %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<160>} // size: 160 // Users: @out 7, @out 4
  2 %instrument.alloc.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 6, @out 5, @out 3
  3 %instrument.before.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 { InstrRef: %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 = armcmcwqconvolution @out %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res, @in %serving_default_input_1_0, @in %model_conv2d_Conv2D, @in %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D, @out %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_scratch { FilterScales: [1.088128e-03, 4.003185e-04, 5.247105e-04, 1.094375e-03, ...], Kernels: [10, 4], Strides: [2, 2], Dilations: [1, 1], Pads: [4, 1, 5, 1], Group: 1, ScratchSize: 160, KernelName: arm_cm_conv2d_cwq_std_i8}, ID: 0, InstrumentKind: Before}
 8000262:	9018      	str	r0, [sp, #96]	; 0x60
  0 %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.094564661 O:-128][0.000,24.114]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 15, @in 12, @out 4
 8000264:	f2c2 0200 	movt	r2, #8192	; 0x2000
  3 %instrument.before.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 { InstrRef: %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 = armcmcwqconvolution @out %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res, @in %serving_default_input_1_0, @in %model_conv2d_Conv2D, @in %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D, @out %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_scratch { FilterScales: [1.088128e-03, 4.003185e-04, 5.247105e-04, 1.094375e-03, ...], Kernels: [10, 4], Strides: [2, 2], Dilations: [1, 1], Pads: [4, 1, 5, 1], Group: 1, ScratchSize: 160, KernelName: arm_cm_conv2d_cwq_std_i8}, ID: 0, InstrumentKind: Before}
 8000268:	eb04 080c 	add.w	r8, r4, ip
 800026c:	f504 5b00 	add.w	fp, r4, #8192	; 0x2000
 8000270:	9612      	str	r6, [sp, #72]	; 0x48
  0 %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.094564661 O:-128][0.000,24.114]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 15, @in 12, @out 4
 8000272:	6014      	str	r4, [r2, #0]
 8000274:	f240 0298 	movw	r2, #152	; 0x98
 8000278:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800027c:	6011      	str	r1, [r2, #0]
 800027e:	f240 0194 	movw	r1, #148	; 0x94
 8000282:	2203      	movs	r2, #3
 8000284:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000288:	6008      	str	r0, [r1, #0]
 800028a:	21a0      	movs	r1, #160	; 0xa0
  3 %instrument.before.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 { InstrRef: %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 = armcmcwqconvolution @out %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res, @in %serving_default_input_1_0, @in %model_conv2d_Conv2D, @in %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D, @out %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_scratch { FilterScales: [1.088128e-03, 4.003185e-04, 5.247105e-04, 1.094375e-03, ...], Kernels: [10, 4], Strides: [2, 2], Dilations: [1, 1], Pads: [4, 1, 5, 1], Group: 1, ScratchSize: 160, KernelName: arm_cm_conv2d_cwq_std_i8}, ID: 0, InstrumentKind: Before}
 800028c:	50e1      	str	r1, [r4, r3]
 800028e:	f242 0334 	movw	r3, #8244	; 0x2034
 8000292:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000296:	50e1      	str	r1, [r4, r3]
 8000298:	f242 0330 	movw	r3, #8240	; 0x2030
 800029c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a0:	50e1      	str	r1, [r4, r3]
 80002a2:	f242 032c 	movw	r3, #8236	; 0x202c
 80002a6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80002aa:	50e1      	str	r1, [r4, r3]
 80002ac:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80002b0:	f504 53fa 	add.w	r3, r4, #8000	; 0x1f40
 80002b4:	f844 100c 	str.w	r1, [r4, ip]
 80002b8:	f242 0110 	movw	r1, #8208	; 0x2010
 80002bc:	461d      	mov	r5, r3
 80002be:	5063      	str	r3, [r4, r1]
 80002c0:	f244 4140 	movw	r1, #17472	; 0x4440
 80002c4:	2302      	movs	r3, #2
 80002c6:	eb00 0a01 	add.w	sl, r0, r1
 80002ca:	f242 0108 	movw	r1, #8200	; 0x2008
 80002ce:	f844 a001 	str.w	sl, [r4, r1]
 80002d2:	f244 5140 	movw	r1, #17728	; 0x4540
 80002d6:	eb00 0901 	add.w	r9, r0, r1
 80002da:	f242 0104 	movw	r1, #8196	; 0x2004
 80002de:	2000      	movs	r0, #0
 80002e0:	f844 9001 	str.w	r9, [r4, r1]
 80002e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e8:	5066      	str	r6, [r4, r1]
 80002ea:	f242 010c 	movw	r1, #8204	; 0x200c
 80002ee:	5064      	str	r4, [r4, r1]
 80002f0:	219c      	movs	r1, #156	; 0x9c
 80002f2:	e9cd b800 	strd	fp, r8, [sp]
 80002f6:	f002 fecd 	bl	8003094 <glow_instrument_before>
 80002fa:	f24d 1e10 	movw	lr, #53520	; 0xd110
 80002fe:	2304      	movs	r3, #4
 8000300:	2101      	movs	r1, #1
 8000302:	2002      	movs	r0, #2
 8000304:	f04f 0c53 	mov.w	ip, #83	; 0x53
 8000308:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800030c:	9308      	str	r3, [sp, #32]
 800030e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8000312:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
 8000316:	f6c0 0e00 	movt	lr, #2048	; 0x800
 800031a:	200a      	movs	r0, #10
 800031c:	2331      	movs	r3, #49	; 0x31
 800031e:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
 8000322:	2219      	movs	r2, #25
 8000324:	9500      	str	r5, [sp, #0]
 8000326:	9513      	str	r5, [sp, #76]	; 0x4c
 8000328:	f04f 0c05 	mov.w	ip, #5
 800032c:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8000330:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8000334:	ab03      	add	r3, sp, #12
 8000336:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800033a:	e883 5006 	stmia.w	r3, {r1, r2, ip, lr}
 800033e:	9007      	str	r0, [sp, #28]
 8000340:	4630      	mov	r0, r6
 8000342:	4649      	mov	r1, r9
 8000344:	4652      	mov	r2, sl
 8000346:	4623      	mov	r3, r4
 8000348:	f006 fb6b 	bl	8006a22 <arm_cm_conv2d_cwq_std_i8>
 800034c:	2000      	movs	r0, #0
 800034e:	219c      	movs	r1, #156	; 0x9c
 8000350:	2203      	movs	r2, #3
 8000352:	2302      	movs	r3, #2
 8000354:	e9cd b800 	strd	fp, r8, [sp]
 8000358:	f002 fea2 	bl	80030a0 <glow_instrument_after>
 800035c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800035e:	f244 3040 	movw	r0, #17216	; 0x4340
 8000362:	f244 01f8 	movw	r1, #16632	; 0x40f8
 8000366:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800036a:	f44f 7380 	mov.w	r3, #256	; 0x100
  6 %instrument.dealloc.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 = deallocactivation @out %instrument.alloc.model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1 // size: 80
  7 %dealloc_model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_scratch = deallocactivation @out %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_scratch // size: 160
  8 %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.109320916 O:-128][0.000,27.877]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 24, @in 21, @out 12
  9 %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<576>} // size: 576 // Users: @out 16, @out 12
  10 %instrument.alloc.model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 14, @out 13, @out 11
  11 %instrument.before.model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1 { InstrRef: %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1 = armcmcwqconvolution @out %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res, @in %model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D_Reshape__1, @in %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D, @out %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_scratch { FilterScales: [1.704265e-02, 6.275627e-03, 1.281449e-02, 6.898101e-03, ...], Kernels: [3, 3], Strides: [1, 1], Dilations: [1, 1], Pads: [1, 1, 1, 1], Group: 64, ScratchSize: 576, KernelName: arm_cm_conv2d_cwq_dw_i8}, ID: 1, InstrumentKind: Before}
 800036e:	f504 5b7a 	add.w	fp, r4, #16000	; 0x3e80
 8000372:	eb06 0a00 	add.w	sl, r6, r0
 8000376:	f44f 7010 	mov.w	r0, #576	; 0x240
 800037a:	f506 48a7 	add.w	r8, r6, #21376	; 0x5380
 800037e:	5060      	str	r0, [r4, r1]
 8000380:	f244 01f4 	movw	r1, #16628	; 0x40f4
 8000384:	5062      	str	r2, [r4, r1]
 8000386:	f244 01f0 	movw	r1, #16624	; 0x40f0
 800038a:	5063      	str	r3, [r4, r1]
 800038c:	f244 01ec 	movw	r1, #16620	; 0x40ec
 8000390:	2302      	movs	r3, #2
 8000392:	5060      	str	r0, [r4, r1]
 8000394:	f244 00e8 	movw	r0, #16616	; 0x40e8
 8000398:	f244 01d0 	movw	r1, #16592	; 0x40d0
 800039c:	5022      	str	r2, [r4, r0]
 800039e:	f844 b001 	str.w	fp, [r4, r1]
 80003a2:	f244 01cc 	movw	r1, #16588	; 0x40cc
 80003a6:	f244 00e8 	movw	r0, #16616	; 0x40e8
 80003aa:	2203      	movs	r2, #3
 80003ac:	5065      	str	r5, [r4, r1]
 80003ae:	f244 01c8 	movw	r1, #16584	; 0x40c8
 80003b2:	4420      	add	r0, r4
 80003b4:	f844 a001 	str.w	sl, [r4, r1]
 80003b8:	f244 01c4 	movw	r1, #16580	; 0x40c4
 80003bc:	4681      	mov	r9, r0
 80003be:	f844 8001 	str.w	r8, [r4, r1]
 80003c2:	f244 01c0 	movw	r1, #16576	; 0x40c0
 80003c6:	1866      	adds	r6, r4, r1
 80003c8:	5064      	str	r4, [r4, r1]
 80003ca:	219c      	movs	r1, #156	; 0x9c
 80003cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80003ce:	e9cd 6000 	strd	r6, r0, [sp]
 80003d2:	9016      	str	r0, [sp, #88]	; 0x58
 80003d4:	2001      	movs	r0, #1
 80003d6:	f002 fe5d 	bl	8003094 <glow_instrument_before>
 80003da:	f24d 2010 	movw	r0, #53776	; 0xd210
 80003de:	2101      	movs	r1, #1
 80003e0:	2240      	movs	r2, #64	; 0x40
 80003e2:	465d      	mov	r5, fp
 80003e4:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80003e8:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 80003ec:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80003f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003f4:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 80003f8:	900e      	str	r0, [sp, #56]	; 0x38
 80003fa:	2119      	movs	r1, #25
 80003fc:	2005      	movs	r0, #5
 80003fe:	f8cd b000 	str.w	fp, [sp]
 8000402:	9101      	str	r1, [sp, #4]
 8000404:	9002      	str	r0, [sp, #8]
 8000406:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800040a:	9005      	str	r0, [sp, #20]
 800040c:	2003      	movs	r0, #3
 800040e:	4641      	mov	r1, r8
 8000410:	4652      	mov	r2, sl
 8000412:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000416:	4620      	mov	r0, r4
 8000418:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800041c:	465b      	mov	r3, fp
 800041e:	f006 f8a9 	bl	8006574 <arm_cm_conv2d_cwq_dw_i8>
 8000422:	2001      	movs	r0, #1
 8000424:	219c      	movs	r1, #156	; 0x9c
 8000426:	2203      	movs	r2, #3
 8000428:	2302      	movs	r3, #2
 800042a:	e9cd 6900 	strd	r6, r9, [sp]
 800042e:	f002 fe37 	bl	80030a0 <glow_instrument_after>
 8000432:	f643 60f8 	movw	r0, #16120	; 0x3ef8
  15 %dealloc_model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res = deallocactivation @out %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res // size: 8000
  16 %dealloc_model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = deallocactivation @out %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_scratch // size: 576
  17 %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.056051858 O:-128][0.000,14.293]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 33, @in 30, @out 21
  18 %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<1>} // size: 1 // Users: @out 25, @out 21
  19 %instrument.alloc.model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 23, @out 22, @out 20
  20 %instrument.before.model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1 { InstrRef: %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1 = armcmcwqconvolution @out %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_res, @in %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_conv2d_1_Conv2D, @in %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2DNew, @out %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_scratch { FilterScales: [3.470282e-03, 2.297024e-03, 3.607616e-03, 2.564785e-03, ...], Kernels: [1, 1], Strides: [1, 1], Dilations: [1, 1], Pads: [0, 0, 0, 0], Group: 1, ScratchSize: 0, KernelName: arm_cm_conv2d_cwq_1x1_i8}, ID: 2, InstrumentKind: Before}
 8000436:	2101      	movs	r1, #1
 8000438:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800043c:	46a8      	mov	r8, r5
 800043e:	2302      	movs	r3, #2
 8000440:	5021      	str	r1, [r4, r0]
 8000442:	f643 60f4 	movw	r0, #16116	; 0x3ef4
 8000446:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044a:	5022      	str	r2, [r4, r0]
 800044c:	f643 60f0 	movw	r0, #16112	; 0x3ef0
 8000450:	5021      	str	r1, [r4, r0]
 8000452:	f643 60ec 	movw	r0, #16108	; 0x3eec
 8000456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800045a:	5021      	str	r1, [r4, r0]
 800045c:	f643 60e8 	movw	r0, #16104	; 0x3ee8
 8000460:	f643 61e8 	movw	r1, #16104	; 0x3ee8
 8000464:	5022      	str	r2, [r4, r0]
 8000466:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8000468:	f643 60d0 	movw	r0, #16080	; 0x3ed0
 800046c:	5025      	str	r5, [r4, r0]
 800046e:	f643 60c8 	movw	r0, #16072	; 0x3ec8
 8000472:	1865      	adds	r5, r4, r1
 8000474:	f504 517b 	add.w	r1, r4, #16064	; 0x3ec0
 8000478:	f502 499f 	add.w	r9, r2, #20352	; 0x4f80
 800047c:	f502 5a4d 	add.w	sl, r2, #13120	; 0x3340
 8000480:	460e      	mov	r6, r1
 8000482:	2203      	movs	r2, #3
 8000484:	f844 9000 	str.w	r9, [r4, r0]
 8000488:	f643 60c4 	movw	r0, #16068	; 0x3ec4
 800048c:	f844 a000 	str.w	sl, [r4, r0]
 8000490:	f44f 507b 	mov.w	r0, #16064	; 0x3ec0
 8000494:	f844 b000 	str.w	fp, [r4, r0]
 8000498:	f643 60cc 	movw	r0, #16076	; 0x3ecc
 800049c:	5024      	str	r4, [r4, r0]
 800049e:	9100      	str	r1, [sp, #0]
 80004a0:	9501      	str	r5, [sp, #4]
 80004a2:	e9cd 1514 	strd	r1, r5, [sp, #80]	; 0x50
 80004a6:	2002      	movs	r0, #2
 80004a8:	219c      	movs	r1, #156	; 0x9c
 80004aa:	f002 fdf3 	bl	8003094 <glow_instrument_before>
 80004ae:	217d      	movs	r1, #125	; 0x7d
 80004b0:	f24d 3010 	movw	r0, #54032	; 0xd310
 80004b4:	464a      	mov	r2, r9
 80004b6:	4623      	mov	r3, r4
 80004b8:	e9cd 8100 	strd	r8, r1, [sp]
 80004bc:	2140      	movs	r1, #64	; 0x40
 80004be:	f6c0 0000 	movt	r0, #2048	; 0x800
 80004c2:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80004c6:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80004ca:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80004ce:	4658      	mov	r0, fp
 80004d0:	4651      	mov	r1, sl
 80004d2:	f005 fd82 	bl	8005fda <arm_cm_conv2d_cwq_1x1_i8>
 80004d6:	2002      	movs	r0, #2
 80004d8:	219c      	movs	r1, #156	; 0x9c
 80004da:	2203      	movs	r2, #3
 80004dc:	2302      	movs	r3, #2
 80004de:	e9cd 6500 	strd	r6, r5, [sp]
 80004e2:	f002 fddd 	bl	80030a0 <glow_instrument_after>
 80004e6:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 80004ea:	f245 50c0 	movw	r0, #21952	; 0x55c0
  24 %dealloc_model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_res = deallocactivation @out %model_activation_1_Relu_model_batch_normalization_1_FusedBatchNormV3_model_depthwise_conv2d_depthwise_model_depthwise_conv2d_BiasAdd_ReadVariableOp_model_depthwise_conv2d_BiasAdd_model_conv2d_4_Conv2D1__1_res // size: 8000
  25 %dealloc_model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_scratch = deallocactivation @out %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_scratch // size: 1
  26 %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.057007417 O:-128][0.000,14.537]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 42, @in 39, @out 30
  27 %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<576>} // size: 576 // Users: @out 34, @out 30
  28 %instrument.alloc.model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 32, @out 31, @out 29
  29 %instrument.before.model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1 { InstrRef: %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1 = armcmcwqconvolution @out %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_res, @in %model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_Reshape__1, @in %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D, @out %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_scratch { FilterScales: [8.279821e-03, 7.539401e-03, 8.631041e-03, 6.486666e-03, ...], Kernels: [3, 3], Strides: [1, 1], Dilations: [1, 1], Pads: [1, 1, 1, 1], Group: 64, ScratchSize: 576, KernelName: arm_cm_conv2d_cwq_dw_i8}, ID: 3, InstrumentKind: Before}
 80004ee:	f244 01f8 	movw	r1, #16632	; 0x40f8
 80004f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80004f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80004fc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80004fe:	eb0a 0900 	add.w	r9, sl, r0
 8000502:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000506:	5060      	str	r0, [r4, r1]
 8000508:	f244 01f4 	movw	r1, #16628	; 0x40f4
 800050c:	5062      	str	r2, [r4, r1]
 800050e:	f244 01f0 	movw	r1, #16624	; 0x40f0
 8000512:	5063      	str	r3, [r4, r1]
 8000514:	f244 01ec 	movw	r1, #16620	; 0x40ec
 8000518:	2302      	movs	r3, #2
 800051a:	5060      	str	r0, [r4, r1]
 800051c:	f244 00e8 	movw	r0, #16616	; 0x40e8
 8000520:	219c      	movs	r1, #156	; 0x9c
 8000522:	5022      	str	r2, [r4, r0]
 8000524:	f244 00d0 	movw	r0, #16592	; 0x40d0
 8000528:	2203      	movs	r2, #3
 800052a:	f844 8000 	str.w	r8, [r4, r0]
 800052e:	f244 00cc 	movw	r0, #16588	; 0x40cc
 8000532:	f844 b000 	str.w	fp, [r4, r0]
 8000536:	f50a 5b49 	add.w	fp, sl, #12864	; 0x3240
 800053a:	f244 00c8 	movw	r0, #16584	; 0x40c8
 800053e:	f844 b000 	str.w	fp, [r4, r0]
 8000542:	f244 00c4 	movw	r0, #16580	; 0x40c4
 8000546:	f844 9000 	str.w	r9, [r4, r0]
 800054a:	f244 00c0 	movw	r0, #16576	; 0x40c0
 800054e:	5024      	str	r4, [r4, r0]
 8000550:	2003      	movs	r0, #3
 8000552:	9600      	str	r6, [sp, #0]
 8000554:	9501      	str	r5, [sp, #4]
 8000556:	f002 fd9d 	bl	8003094 <glow_instrument_before>
 800055a:	f24d 4010 	movw	r0, #54288	; 0xd410
 800055e:	2101      	movs	r1, #1
 8000560:	2240      	movs	r2, #64	; 0x40
 8000562:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8000566:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 800056a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800056e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000572:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8000576:	900e      	str	r0, [sp, #56]	; 0x38
 8000578:	2119      	movs	r1, #25
 800057a:	2005      	movs	r0, #5
 800057c:	f8cd 8000 	str.w	r8, [sp]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	9002      	str	r0, [sp, #8]
 8000584:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8000588:	9005      	str	r0, [sp, #20]
 800058a:	2003      	movs	r0, #3
 800058c:	465a      	mov	r2, fp
 800058e:	4649      	mov	r1, r9
 8000590:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000594:	4620      	mov	r0, r4
 8000596:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800059a:	465b      	mov	r3, fp
 800059c:	f005 ffea 	bl	8006574 <arm_cm_conv2d_cwq_dw_i8>
 80005a0:	2003      	movs	r0, #3
 80005a2:	219c      	movs	r1, #156	; 0x9c
 80005a4:	2203      	movs	r2, #3
 80005a6:	2302      	movs	r3, #2
 80005a8:	e9cd 6500 	strd	r6, r5, [sp]
 80005ac:	f002 fd78 	bl	80030a0 <glow_instrument_after>
  33 %dealloc_model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_res = deallocactivation @out %model_activation_2_Relu_model_batch_normalization_2_FusedBatchNormV3_model_conv2d_1_BiasAdd_ReadVariableOp_model_conv2d_1_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_1_Conv2D1__1_res // size: 8000
  34 %dealloc_model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = deallocactivation @out %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_scratch // size: 576
  35 %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.046370927 O:-128][0.000,11.825]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 51, @in 48, @out 39
  36 %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<1>} // size: 1 // Users: @out 43, @out 39
  37 %instrument.alloc.model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 41, @out 40, @out 38
  38 %instrument.before.model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1 { InstrRef: %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1 = armcmcwqconvolution @out %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_res, @in %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_conv2d_2_Conv2D, @in %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2DNew, @out %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_scratch { FilterScales: [3.200909e-03, 4.007443e-03, 3.782516e-03, 3.498196e-03, ...], Kernels: [1, 1], Strides: [1, 1], Dilations: [1, 1], Pads: [0, 0, 0, 0], Group: 1, ScratchSize: 0, KernelName: arm_cm_conv2d_cwq_1x1_i8}, ID: 4, InstrumentKind: Before}
 80005b0:	f643 60f8 	movw	r0, #16120	; 0x3ef8
 80005b4:	2101      	movs	r1, #1
 80005b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ba:	46c1      	mov	r9, r8
 80005bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80005be:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80005c0:	2302      	movs	r3, #2
 80005c2:	5021      	str	r1, [r4, r0]
 80005c4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80005c8:	f643 61f4 	movw	r1, #16116	; 0x3ef4
 80005cc:	5060      	str	r0, [r4, r1]
 80005ce:	f643 61f0 	movw	r1, #16112	; 0x3ef0
 80005d2:	5062      	str	r2, [r4, r1]
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	f643 62ec 	movw	r2, #16108	; 0x3eec
 80005dc:	50a1      	str	r1, [r4, r2]
 80005de:	f643 61e8 	movw	r1, #16104	; 0x3ee8
 80005e2:	2203      	movs	r2, #3
 80005e4:	5060      	str	r0, [r4, r1]
 80005e6:	f643 60d0 	movw	r0, #16080	; 0x3ed0
 80005ea:	4651      	mov	r1, sl
 80005ec:	f50a 4aa1 	add.w	sl, sl, #20608	; 0x5080
 80005f0:	f844 8000 	str.w	r8, [r4, r0]
 80005f4:	f643 60c8 	movw	r0, #16072	; 0x3ec8
 80005f8:	f501 5809 	add.w	r8, r1, #8768	; 0x2240
 80005fc:	219c      	movs	r1, #156	; 0x9c
 80005fe:	f844 a000 	str.w	sl, [r4, r0]
 8000602:	f643 60c4 	movw	r0, #16068	; 0x3ec4
 8000606:	f844 8000 	str.w	r8, [r4, r0]
 800060a:	f44f 507b 	mov.w	r0, #16064	; 0x3ec0
 800060e:	f844 b000 	str.w	fp, [r4, r0]
 8000612:	f643 60cc 	movw	r0, #16076	; 0x3ecc
 8000616:	5024      	str	r4, [r4, r0]
 8000618:	2004      	movs	r0, #4
 800061a:	9500      	str	r5, [sp, #0]
 800061c:	9601      	str	r6, [sp, #4]
 800061e:	f002 fd39 	bl	8003094 <glow_instrument_before>
 8000622:	217d      	movs	r1, #125	; 0x7d
 8000624:	f24d 5010 	movw	r0, #54544	; 0xd510
 8000628:	f8cd 9000 	str.w	r9, [sp]
 800062c:	4652      	mov	r2, sl
 800062e:	4623      	mov	r3, r4
 8000630:	9101      	str	r1, [sp, #4]
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000638:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800063c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000640:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8000644:	4658      	mov	r0, fp
 8000646:	4641      	mov	r1, r8
 8000648:	f005 fcc7 	bl	8005fda <arm_cm_conv2d_cwq_1x1_i8>
 800064c:	2004      	movs	r0, #4
 800064e:	219c      	movs	r1, #156	; 0x9c
 8000650:	2203      	movs	r2, #3
 8000652:	2302      	movs	r3, #2
 8000654:	e9cd 5600 	strd	r5, r6, [sp]
 8000658:	f002 fd22 	bl	80030a0 <glow_instrument_after>
  42 %dealloc_model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_res = deallocactivation @out %model_activation_3_Relu_model_batch_normalization_3_FusedBatchNormV3_model_depthwise_conv2d_1_depthwise_model_depthwise_conv2d_1_BiasAdd_ReadVariableOp_model_depthwise_conv2d_1_BiasAdd_model_conv2d_4_Conv2D1__1_res // size: 8000
  43 %dealloc_model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_scratch = deallocactivation @out %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_scratch // size: 1
  44 %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.044109382 O:-128][0.000,11.248]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 60, @in 57, @out 48
  45 %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<576>} // size: 576 // Users: @out 52, @out 48
  46 %instrument.alloc.model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 50, @out 49, @out 47
  47 %instrument.before.model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1 { InstrRef: %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1 = armcmcwqconvolution @out %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_res, @in %model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_Reshape__1, @in %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D, @out %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_scratch { FilterScales: [6.402731e-03, 7.106075e-03, 4.995153e-03, 9.315152e-03, ...], Kernels: [3, 3], Strides: [1, 1], Dilations: [1, 1], Pads: [1, 1, 1, 1], Group: 64, ScratchSize: 576, KernelName: arm_cm_conv2d_cwq_dw_i8}, ID: 5, InstrumentKind: Before}
 800065c:	f244 00f8 	movw	r0, #16632	; 0x40f8
 8000660:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000664:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066c:	46c8      	mov	r8, r9
 800066e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8000670:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8000672:	5021      	str	r1, [r4, r0]
 8000674:	f244 00f4 	movw	r0, #16628	; 0x40f4
 8000678:	5022      	str	r2, [r4, r0]
 800067a:	f244 00f0 	movw	r0, #16624	; 0x40f0
 800067e:	5023      	str	r3, [r4, r0]
 8000680:	f244 00ec 	movw	r0, #16620	; 0x40ec
 8000684:	2302      	movs	r3, #2
 8000686:	5021      	str	r1, [r4, r0]
 8000688:	f244 00e8 	movw	r0, #16616	; 0x40e8
 800068c:	5022      	str	r2, [r4, r0]
 800068e:	f244 00d0 	movw	r0, #16592	; 0x40d0
 8000692:	2203      	movs	r2, #3
 8000694:	f844 9000 	str.w	r9, [r4, r0]
 8000698:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800069c:	f244 00cc 	movw	r0, #16588	; 0x40cc
 80006a0:	f844 b000 	str.w	fp, [r4, r0]
 80006a4:	f244 00c8 	movw	r0, #16584	; 0x40c8
 80006a8:	f509 5105 	add.w	r1, r9, #8512	; 0x2140
 80006ac:	f509 4ab0 	add.w	sl, r9, #22528	; 0x5800
 80006b0:	5021      	str	r1, [r4, r0]
 80006b2:	f244 00c4 	movw	r0, #16580	; 0x40c4
 80006b6:	9111      	str	r1, [sp, #68]	; 0x44
 80006b8:	219c      	movs	r1, #156	; 0x9c
 80006ba:	f844 a000 	str.w	sl, [r4, r0]
 80006be:	f244 00c0 	movw	r0, #16576	; 0x40c0
 80006c2:	5024      	str	r4, [r4, r0]
 80006c4:	2005      	movs	r0, #5
 80006c6:	9500      	str	r5, [sp, #0]
 80006c8:	9601      	str	r6, [sp, #4]
 80006ca:	f002 fce3 	bl	8003094 <glow_instrument_before>
 80006ce:	f24d 6010 	movw	r0, #54800	; 0xd610
 80006d2:	2101      	movs	r1, #1
 80006d4:	2240      	movs	r2, #64	; 0x40
 80006d6:	46c3      	mov	fp, r8
 80006d8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80006dc:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 80006e0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80006e4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80006e8:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 80006ec:	900e      	str	r0, [sp, #56]	; 0x38
 80006ee:	2119      	movs	r1, #25
 80006f0:	2005      	movs	r0, #5
 80006f2:	f8cd 8000 	str.w	r8, [sp]
 80006f6:	9101      	str	r1, [sp, #4]
 80006f8:	9002      	str	r0, [sp, #8]
 80006fa:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80006fe:	9005      	str	r0, [sp, #20]
 8000700:	2003      	movs	r0, #3
 8000702:	4651      	mov	r1, sl
 8000704:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000708:	4620      	mov	r0, r4
 800070a:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800070e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000710:	4643      	mov	r3, r8
 8000712:	f005 ff2f 	bl	8006574 <arm_cm_conv2d_cwq_dw_i8>
 8000716:	2005      	movs	r0, #5
 8000718:	219c      	movs	r1, #156	; 0x9c
 800071a:	2203      	movs	r2, #3
 800071c:	2302      	movs	r3, #2
 800071e:	e9cd 5600 	strd	r5, r6, [sp]
 8000722:	f002 fcbd 	bl	80030a0 <glow_instrument_after>
  51 %dealloc_model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_res = deallocactivation @out %model_activation_4_Relu_model_batch_normalization_4_FusedBatchNormV3_model_conv2d_2_BiasAdd_ReadVariableOp_model_conv2d_2_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_2_Conv2D1__1_res // size: 8000
  52 %dealloc_model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = deallocactivation @out %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_scratch // size: 576
  53 %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.031706695 O:-128][0.000,8.085]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 69, @in 66, @out 57
  54 %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<1>} // size: 1 // Users: @out 61, @out 57
  55 %instrument.alloc.model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 59, @out 58, @out 56
  56 %instrument.before.model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1 { InstrRef: %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1 = armcmcwqconvolution @out %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_res, @in %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_conv2d_3_Conv2D, @in %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2DNew, @out %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_scratch { FilterScales: [3.824396e-03, 3.438703e-03, 3.483579e-03, 2.761032e-03, ...], Kernels: [1, 1], Strides: [1, 1], Dilations: [1, 1], Pads: [0, 0, 0, 0], Group: 1, ScratchSize: 0, KernelName: arm_cm_conv2d_cwq_1x1_i8}, ID: 6, InstrumentKind: Before}
 8000726:	f643 60f8 	movw	r0, #16120	; 0x3ef8
 800072a:	2101      	movs	r1, #1
 800072c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000730:	46da      	mov	sl, fp
 8000732:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8000734:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000736:	2302      	movs	r3, #2
 8000738:	5021      	str	r1, [r4, r0]
 800073a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800073e:	f643 61f4 	movw	r1, #16116	; 0x3ef4
 8000742:	5060      	str	r0, [r4, r1]
 8000744:	f643 61f0 	movw	r1, #16112	; 0x3ef0
 8000748:	5062      	str	r2, [r4, r1]
 800074a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074e:	f643 62ec 	movw	r2, #16108	; 0x3eec
 8000752:	50a1      	str	r1, [r4, r2]
 8000754:	f643 61e8 	movw	r1, #16104	; 0x3ee8
 8000758:	2203      	movs	r2, #3
 800075a:	5060      	str	r0, [r4, r1]
 800075c:	f643 60d0 	movw	r0, #16080	; 0x3ed0
 8000760:	f509 41a3 	add.w	r1, r9, #20864	; 0x5180
 8000764:	f844 b000 	str.w	fp, [r4, r0]
 8000768:	f643 60c8 	movw	r0, #16072	; 0x3ec8
 800076c:	f509 5b8a 	add.w	fp, r9, #4416	; 0x1140
 8000770:	9111      	str	r1, [sp, #68]	; 0x44
 8000772:	5021      	str	r1, [r4, r0]
 8000774:	f643 60c4 	movw	r0, #16068	; 0x3ec4
 8000778:	219c      	movs	r1, #156	; 0x9c
 800077a:	f844 b000 	str.w	fp, [r4, r0]
 800077e:	f44f 507b 	mov.w	r0, #16064	; 0x3ec0
 8000782:	f844 8000 	str.w	r8, [r4, r0]
 8000786:	f643 60cc 	movw	r0, #16076	; 0x3ecc
 800078a:	5024      	str	r4, [r4, r0]
 800078c:	2006      	movs	r0, #6
 800078e:	9600      	str	r6, [sp, #0]
 8000790:	9501      	str	r5, [sp, #4]
 8000792:	f002 fc7f 	bl	8003094 <glow_instrument_before>
 8000796:	217d      	movs	r1, #125	; 0x7d
 8000798:	f24d 7010 	movw	r0, #55056	; 0xd710
 800079c:	f8cd a000 	str.w	sl, [sp]
 80007a0:	4623      	mov	r3, r4
 80007a2:	9101      	str	r1, [sp, #4]
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80007aa:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80007ae:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80007b2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80007b6:	4640      	mov	r0, r8
 80007b8:	4659      	mov	r1, fp
 80007ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80007bc:	f005 fc0d 	bl	8005fda <arm_cm_conv2d_cwq_1x1_i8>
 80007c0:	2006      	movs	r0, #6
 80007c2:	219c      	movs	r1, #156	; 0x9c
 80007c4:	2203      	movs	r2, #3
 80007c6:	2302      	movs	r3, #2
 80007c8:	e9cd 6500 	strd	r6, r5, [sp]
 80007cc:	f002 fc68 	bl	80030a0 <glow_instrument_after>
 80007d0:	f44f 7010 	mov.w	r0, #576	; 0x240
  60 %dealloc_model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_res = deallocactivation @out %model_activation_5_Relu_model_batch_normalization_5_FusedBatchNormV3_model_depthwise_conv2d_2_depthwise_model_depthwise_conv2d_2_BiasAdd_ReadVariableOp_model_depthwise_conv2d_2_BiasAdd_model_conv2d_4_Conv2D1__1_res // size: 8000
  61 %dealloc_model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_scratch = deallocactivation @out %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_scratch // size: 1
  62 %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.043833107 O:-128][0.000,11.177]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 78, @in 75, @out 66
  63 %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<576>} // size: 576 // Users: @out 70, @out 66
  64 %instrument.alloc.model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 68, @out 67, @out 65
  65 %instrument.before.model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1 { InstrRef: %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1 = armcmcwqconvolution @out %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_res, @in %model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_Reshape__1, @in %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D, @out %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_scratch { FilterScales: [3.832669e-03, 6.086221e-03, 4.455806e-03, 9.179379e-03, ...], Kernels: [3, 3], Strides: [1, 1], Dilations: [1, 1], Pads: [1, 1, 1, 1], Group: 64, ScratchSize: 576, KernelName: arm_cm_conv2d_cwq_dw_i8}, ID: 7, InstrumentKind: Before}
 80007d4:	f244 01f8 	movw	r1, #16632	; 0x40f8
 80007d8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80007dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e0:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 80007e4:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80007e6:	5060      	str	r0, [r4, r1]
 80007e8:	f244 01f4 	movw	r1, #16628	; 0x40f4
 80007ec:	5063      	str	r3, [r4, r1]
 80007ee:	f244 01f0 	movw	r1, #16624	; 0x40f0
 80007f2:	5062      	str	r2, [r4, r1]
 80007f4:	f244 01ec 	movw	r1, #16620	; 0x40ec
 80007f8:	2203      	movs	r2, #3
 80007fa:	5060      	str	r0, [r4, r1]
 80007fc:	f244 00e8 	movw	r0, #16616	; 0x40e8
 8000800:	4649      	mov	r1, r9
 8000802:	f509 5982 	add.w	r9, r9, #4160	; 0x1040
 8000806:	5023      	str	r3, [r4, r0]
 8000808:	f244 00d0 	movw	r0, #16592	; 0x40d0
 800080c:	2302      	movs	r3, #2
 800080e:	f844 a000 	str.w	sl, [r4, r0]
 8000812:	f244 00cc 	movw	r0, #16588	; 0x40cc
 8000816:	f844 8000 	str.w	r8, [r4, r0]
 800081a:	f244 00c8 	movw	r0, #16584	; 0x40c8
 800081e:	f844 9000 	str.w	r9, [r4, r0]
 8000822:	f645 2040 	movw	r0, #23104	; 0x5a40
 8000826:	180d      	adds	r5, r1, r0
 8000828:	f244 00c4 	movw	r0, #16580	; 0x40c4
 800082c:	219c      	movs	r1, #156	; 0x9c
 800082e:	5025      	str	r5, [r4, r0]
 8000830:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8000834:	5024      	str	r4, [r4, r0]
 8000836:	2007      	movs	r0, #7
 8000838:	f8cd b000 	str.w	fp, [sp]
 800083c:	9601      	str	r6, [sp, #4]
 800083e:	f002 fc29 	bl	8003094 <glow_instrument_before>
 8000842:	f64d 0010 	movw	r0, #55312	; 0xd810
 8000846:	2101      	movs	r1, #1
 8000848:	2240      	movs	r2, #64	; 0x40
 800084a:	4643      	mov	r3, r8
 800084c:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8000850:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 8000854:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000858:	f6c0 0000 	movt	r0, #2048	; 0x800
 800085c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8000860:	900e      	str	r0, [sp, #56]	; 0x38
 8000862:	2119      	movs	r1, #25
 8000864:	2005      	movs	r0, #5
 8000866:	f8cd a000 	str.w	sl, [sp]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	9002      	str	r0, [sp, #8]
 800086e:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8000872:	9005      	str	r0, [sp, #20]
 8000874:	2003      	movs	r0, #3
 8000876:	4629      	mov	r1, r5
 8000878:	464a      	mov	r2, r9
 800087a:	e9cd 0006 	strd	r0, r0, [sp, #24]
 800087e:	4620      	mov	r0, r4
 8000880:	f005 fe78 	bl	8006574 <arm_cm_conv2d_cwq_dw_i8>
 8000884:	2007      	movs	r0, #7
 8000886:	219c      	movs	r1, #156	; 0x9c
 8000888:	2203      	movs	r2, #3
 800088a:	2302      	movs	r3, #2
 800088c:	e9cd b600 	strd	fp, r6, [sp]
 8000890:	f002 fc06 	bl	80030a0 <glow_instrument_after>
  69 %dealloc_model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_res = deallocactivation @out %model_activation_6_Relu_model_batch_normalization_6_FusedBatchNormV3_model_conv2d_3_BiasAdd_ReadVariableOp_model_conv2d_3_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_3_Conv2D1__1_res // size: 8000
  70 %dealloc_model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = deallocactivation @out %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_scratch // size: 576
  71 %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.075606130 O:-128][0.000,19.280]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 86, @in 83, @out 75
  72 %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<1>} // size: 1 // Users: @out 79, @out 75
  73 %instrument.alloc.model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<80>} // size: 80 // Users: @out 77, @out 76, @out 74
  74 %instrument.before.model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1 = instrument @out %instrument.alloc.model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1 { InstrRef: %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1 = armcmcwqconvolution @out %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_res, @in %model_conv2d_4_Conv2D, @in %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2DNew, @out %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_scratch { FilterScales: [6.071951e-03, 7.354468e-03, 7.477025e-03, 6.460607e-03, ...], Kernels: [1, 1], Strides: [1, 1], Dilations: [1, 1], Pads: [0, 0, 0, 0], Group: 1, ScratchSize: 0, KernelName: arm_cm_conv2d_cwq_1x1_i8}, ID: 8, InstrumentKind: Before}
 8000894:	f643 60f8 	movw	r0, #16120	; 0x3ef8
 8000898:	2101      	movs	r1, #1
 800089a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089e:	46c1      	mov	r9, r8
 80008a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80008a2:	2302      	movs	r3, #2
 80008a4:	5021      	str	r1, [r4, r0]
 80008a6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80008aa:	f643 61f4 	movw	r1, #16116	; 0x3ef4
 80008ae:	5060      	str	r0, [r4, r1]
 80008b0:	f643 61f0 	movw	r1, #16112	; 0x3ef0
 80008b4:	5062      	str	r2, [r4, r1]
 80008b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ba:	f643 62ec 	movw	r2, #16108	; 0x3eec
 80008be:	50a1      	str	r1, [r4, r2]
 80008c0:	f643 61e8 	movw	r1, #16104	; 0x3ee8
 80008c4:	2203      	movs	r2, #3
 80008c6:	5060      	str	r0, [r4, r1]
 80008c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80008ca:	f643 60d0 	movw	r0, #16080	; 0x3ed0
 80008ce:	f844 a000 	str.w	sl, [r4, r0]
 80008d2:	f643 60c8 	movw	r0, #16072	; 0x3ec8
 80008d6:	f501 4ba5 	add.w	fp, r1, #21120	; 0x5280
 80008da:	f101 0640 	add.w	r6, r1, #64	; 0x40
 80008de:	219c      	movs	r1, #156	; 0x9c
 80008e0:	f844 b000 	str.w	fp, [r4, r0]
 80008e4:	f643 60c4 	movw	r0, #16068	; 0x3ec4
 80008e8:	5026      	str	r6, [r4, r0]
 80008ea:	f44f 507b 	mov.w	r0, #16064	; 0x3ec0
 80008ee:	f844 8000 	str.w	r8, [r4, r0]
 80008f2:	f643 60cc 	movw	r0, #16076	; 0x3ecc
 80008f6:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80008fa:	5024      	str	r4, [r4, r0]
 80008fc:	2008      	movs	r0, #8
 80008fe:	9501      	str	r5, [sp, #4]
 8000900:	f8cd 8000 	str.w	r8, [sp]
 8000904:	f002 fbc6 	bl	8003094 <glow_instrument_before>
 8000908:	217d      	movs	r1, #125	; 0x7d
 800090a:	f64d 1010 	movw	r0, #55568	; 0xd910
 800090e:	f8cd a000 	str.w	sl, [sp]
 8000912:	465a      	mov	r2, fp
 8000914:	4623      	mov	r3, r4
 8000916:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800091a:	9101      	str	r1, [sp, #4]
 800091c:	2140      	movs	r1, #64	; 0x40
 800091e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000922:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000926:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800092a:	e9cd 1004 	strd	r1, r0, [sp, #16]
 800092e:	4648      	mov	r0, r9
 8000930:	4631      	mov	r1, r6
 8000932:	f005 fb52 	bl	8005fda <arm_cm_conv2d_cwq_1x1_i8>
 8000936:	2008      	movs	r0, #8
 8000938:	219c      	movs	r1, #156	; 0x9c
 800093a:	2203      	movs	r2, #3
 800093c:	2302      	movs	r3, #2
 800093e:	e9cd 8500 	strd	r8, r5, [sp]
 8000942:	f002 fbad 	bl	80030a0 <glow_instrument_after>
 8000946:	f641 7094 	movw	r0, #8084	; 0x1f94
  77 %instrument.dealloc.model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1 = deallocactivation @out %instrument.alloc.model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1 // size: 80
  78 %dealloc_model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_res = deallocactivation @out %model_activation_7_Relu_model_batch_normalization_7_FusedBatchNormV3_model_depthwise_conv2d_3_depthwise_model_depthwise_conv2d_3_BiasAdd_ReadVariableOp_model_depthwise_conv2d_3_BiasAdd_model_conv2d_4_Conv2D1__1_res // size: 8000
  79 %dealloc_model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_scratch = deallocactivation @out %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_scratch // size: 1
  80 %model_average_pooling2d_AvgPool_res = allocactivation  { Ty: i8[S:0.075606130 O:-128][0.000,19.280]<1 x 1 x 1 x 64>} // size: 64 // Users: @in 87, @out 94, @out 83
  81 %instrument.alloc.model_average_pooling2d_AvgPool = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<32>} // size: 32 // Users: @out 85, @out 84, @out 82
  82 %instrument.before.model_average_pooling2d_AvgPool = instrument @out %instrument.alloc.model_average_pooling2d_AvgPool { InstrRef: %model_average_pooling2d_AvgPool = avgpool @out %model_average_pooling2d_AvgPool_res, @in %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_res { Kernels: [24, 5], Strides: [24, 5], Pads: [0, 0, 0, 0], Layout: 0, CountIncludePads: 0}, ID: 9, InstrumentKind: Before}
 800094a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800094e:	f504 56fc 	add.w	r6, r4, #8064	; 0x1f80
 8000952:	2201      	movs	r2, #1
 8000954:	2301      	movs	r3, #1
 8000956:	f04f 0840 	mov.w	r8, #64	; 0x40
 800095a:	f844 a000 	str.w	sl, [r4, r0]
 800095e:	f641 7090 	movw	r0, #8080	; 0x1f90
 8000962:	5021      	str	r1, [r4, r0]
 8000964:	f641 7184 	movw	r1, #8068	; 0x1f84
 8000968:	1825      	adds	r5, r4, r0
 800096a:	2009      	movs	r0, #9
 800096c:	f844 9001 	str.w	r9, [r4, r1]
 8000970:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000974:	5064      	str	r4, [r4, r1]
 8000976:	210f      	movs	r1, #15
 8000978:	e9cd 6500 	strd	r6, r5, [sp]
 800097c:	f002 fb8a 	bl	8003094 <glow_instrument_before>
  83 %model_average_pooling2d_AvgPool = avgpool @out %model_average_pooling2d_AvgPool_res, @in %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_res { Kernels: [24, 5], Strides: [24, 5], Pads: [0, 0, 0, 0], Layout: 0, CountIncludePads: 0}
 8000980:	4620      	mov	r0, r4
 8000982:	4649      	mov	r1, r9
 8000984:	f000 f864 	bl	8000a50 <libjit_avg_pool_i8_0_specialized>
 8000988:	2009      	movs	r0, #9
 800098a:	210f      	movs	r1, #15
 800098c:	2201      	movs	r2, #1
 800098e:	2301      	movs	r3, #1
 8000990:	e9cd 6500 	strd	r6, r5, [sp]
 8000994:	f002 fb84 	bl	80030a0 <glow_instrument_after>
 8000998:	2030      	movs	r0, #48	; 0x30
 800099a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800099e:	220c      	movs	r2, #12
  85 %instrument.dealloc.model_average_pooling2d_AvgPool = deallocactivation @out %instrument.alloc.model_average_pooling2d_AvgPool // size: 32
  86 %dealloc_model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_res = deallocactivation @out %model_activation_8_Relu_model_batch_normalization_8_FusedBatchNormV3_model_conv2d_4_BiasAdd_ReadVariableOp_model_conv2d_4_BiasAdd_model_conv2d_4_Conv2D1__1_res // size: 8000
  87 %model_average_pooling2d_AvgPool_res__2 = tensorview @in %model_average_pooling2d_AvgPool_res { Ty: i8[S:0.075606130 O:-128][0.000,19.280]<1 x 64>, Offsets: [0, 0, 0, 0]} // Users: @in 91
  88 %model_dense_MatMul_model_dense_BiasAdd__1_res = allocactivation  { Ty: i8[S:0.134887755 O:13][-19.019,15.377]<1 x 12>} // size: 12 // Users: @out 100, @in 97, @out 91
  89 %instrument.alloc.model_dense_MatMul_model_dense_BiasAdd__1 = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<64>} // size: 64 // Users: @out 93, @out 92, @out 90
  90 %instrument.before.model_dense_MatMul_model_dense_BiasAdd__1 = instrument @out %instrument.alloc.model_dense_MatMul_model_dense_BiasAdd__1 { InstrRef: %model_dense_MatMul_model_dense_BiasAdd__1 = armcmfullyconnected @out %model_dense_MatMul_model_dense_BiasAdd__1_res, @in %model_average_pooling2d_AvgPool_res__2, @in %model_dense_MatMul__2, @in %model_dense_BiasAdd_ReadVariableOp { ActivationMin: -3.402823e+38, ActivationMax: 3.402823e+38}, ID: 10, InstrumentKind: Before}
 80009a0:	4625      	mov	r5, r4
 80009a2:	2301      	movs	r3, #1
 80009a4:	f04f 0b0c 	mov.w	fp, #12
 80009a8:	e9c4 1019 	strd	r1, r0, [r4, #100]	; 0x64
 80009ac:	66e2      	str	r2, [r4, #108]	; 0x6c
 80009ae:	200a      	movs	r0, #10
 80009b0:	219d      	movs	r1, #157	; 0x9d
 80009b2:	2203      	movs	r2, #3
 80009b4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80009b6:	f506 4ab9 	add.w	sl, r6, #23680	; 0x5c80
 80009ba:	e9c4 9a10 	strd	r9, sl, [r4, #64]	; 0x40
 80009be:	e9c4 6412 	strd	r6, r4, [r4, #72]	; 0x48
 80009c2:	f845 8f60 	str.w	r8, [r5, #96]!
 80009c6:	f104 0840 	add.w	r8, r4, #64	; 0x40
 80009ca:	e9cd 8500 	strd	r8, r5, [sp]
 80009ce:	f002 fb61 	bl	8003094 <glow_instrument_before>
 80009d2:	2100      	movs	r1, #0
 80009d4:	2201      	movs	r2, #1
 80009d6:	200d      	movs	r0, #13
 80009d8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8000a4c <model+0x804>
 80009dc:	4623      	mov	r3, r4
 80009de:	9100      	str	r1, [sp, #0]
 80009e0:	e9cd 2b01 	strd	r2, fp, [sp, #4]
 80009e4:	2240      	movs	r2, #64	; 0x40
 80009e6:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80009ea:	9005      	str	r0, [sp, #20]
 80009ec:	4648      	mov	r0, r9
 80009ee:	4651      	mov	r1, sl
 80009f0:	4632      	mov	r2, r6
 80009f2:	f005 f821 	bl	8005a38 <arm_cm_conv2d_1x1_i8>
 80009f6:	200a      	movs	r0, #10
 80009f8:	219d      	movs	r1, #157	; 0x9d
 80009fa:	2203      	movs	r2, #3
 80009fc:	2301      	movs	r3, #1
 80009fe:	e9cd 8500 	strd	r8, r5, [sp]
 8000a02:	f002 fb4d 	bl	80030a0 <glow_instrument_after>
  91 %model_dense_MatMul_model_dense_BiasAdd__1 = armcmfullyconnected @out %model_dense_MatMul_model_dense_BiasAdd__1_res, @in %model_average_pooling2d_AvgPool_res__2, @in %model_dense_MatMul__2, @in %model_dense_BiasAdd_ReadVariableOp { ActivationMin: -3.402823e+38, ActivationMax: 3.402823e+38}
  92 %instrument.after.model_dense_MatMul_model_dense_BiasAdd__1 = instrument @out %instrument.alloc.model_dense_MatMul_model_dense_BiasAdd__1 { InstrRef: %model_dense_MatMul_model_dense_BiasAdd__1 = armcmfullyconnected @out %model_dense_MatMul_model_dense_BiasAdd__1_res, @in %model_average_pooling2d_AvgPool_res__2, @in %model_dense_MatMul__2, @in %model_dense_BiasAdd_ReadVariableOp { ActivationMin: -3.402823e+38, ActivationMax: 3.402823e+38}, ID: 10, InstrumentKind: After}
  93 %instrument.dealloc.model_dense_MatMul_model_dense_BiasAdd__1 = deallocactivation @out %instrument.alloc.model_dense_MatMul_model_dense_BiasAdd__1 // size: 64
  94 %dealloc_model_average_pooling2d_AvgPool_res = deallocactivation @out %model_average_pooling2d_AvgPool_res // size: 64
  95 %instrument.alloc.SOFTMAX = allocactivation  { Ty: i8[S:0.000000000 O:0][-0.000,0.000]<32>} // size: 32 // Users: @out 99, @out 98, @out 96
  96 %instrument.before.SOFTMAX = instrument @out %instrument.alloc.SOFTMAX { InstrRef: %SOFTMAX = softmax @out %StatefulPartitionedCall_0, @in %model_dense_MatMul_model_dense_BiasAdd__1_res, ID: 11, InstrumentKind: Before}
 8000a06:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000a08:	4626      	mov	r6, r4
 8000a0a:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
 8000a0e:	211d      	movs	r1, #29
 8000a10:	2201      	movs	r2, #1
 8000a12:	2301      	movs	r3, #1
 8000a14:	f500 7500 	add.w	r5, r0, #512	; 0x200
 8000a18:	200b      	movs	r0, #11
 8000a1a:	e9c4 4510 	strd	r4, r5, [r4, #64]	; 0x40
 8000a1e:	f846 bf50 	str.w	fp, [r6, #80]!
 8000a22:	e9cd 8600 	strd	r8, r6, [sp]
 8000a26:	f002 fb35 	bl	8003094 <glow_instrument_before>
  97 %SOFTMAX = softmax @out %StatefulPartitionedCall_0, @in %model_dense_MatMul_model_dense_BiasAdd__1_res
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	4629      	mov	r1, r5
 8000a2e:	f000 f8ce 	bl	8000bce <libjit_softmax_i8_1_specialized>
 8000a32:	200b      	movs	r0, #11
 8000a34:	211d      	movs	r1, #29
 8000a36:	2201      	movs	r2, #1
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e9cd 8600 	strd	r8, r6, [sp]
 8000a3e:	f002 fb2f 	bl	80030a0 <glow_instrument_after>
  0 %model_activation_Relu_model_batch_normalization_FusedBatchNormV3_model_conv2d_BiasAdd_ReadVariableOp_model_conv2d_BiasAdd_model_conv2d_4_Conv2D_model_conv2d_Conv2D1__1_res = allocactivation  { Ty: i8[S:0.094564661 O:-128][0.000,24.114]<1 x 25 x 5 x 64>} // size: 8000 // Users: @out 15, @in 12, @out 4
 8000a42:	2000      	movs	r0, #0
 8000a44:	b019      	add	sp, #100	; 0x64
 8000a46:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 8000a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4c:	3b932ba9 	.word	0x3b932ba9

08000a50 <libjit_avg_pool_i8_0_specialized>:
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	af03      	add	r7, sp, #12
 8000a54:	e92d 0b00 	stmdb	sp!, {r8, r9, fp}
 8000a58:	f648 0c89 	movw	ip, #34953	; 0x8889
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	f04f 0800 	mov.w	r8, #0
 8000a64:	f6c8 0c88 	movt	ip, #34952	; 0x8888
 8000a68:	e025      	b.n	8000ab6 <libjit_avg_pool_i8_0_specialized+0x66>
 8000a6a:	bf00      	nop
 8000a6c:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	f100 0001 	add.w	r0, r0, #1
 8000a76:	bfc8      	it	gt
 8000a78:	223c      	movgt	r2, #60	; 0x3c
 8000a7a:	4432      	add	r2, r6
 8000a7c:	fb5c 2302 	smmla	r3, ip, r2, r2
 8000a80:	2a77      	cmp	r2, #119	; 0x77
 8000a82:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000a86:	ea4f 14a3 	mov.w	r4, r3, asr #6
 8000a8a:	eb04 73d3 	add.w	r3, r4, r3, lsr #31
 8000a8e:	bfc8      	it	gt
 8000a90:	f1a3 0280 	subgt.w	r2, r3, #128	; 0x80
 8000a94:	2a7f      	cmp	r2, #127	; 0x7f
 8000a96:	bfa8      	it	ge
 8000a98:	227f      	movge	r2, #127	; 0x7f
 8000a9a:	f11e 0e01 	adds.w	lr, lr, #1
 8000a9e:	f801 2b01 	strb.w	r2, [r1], #1
 8000aa2:	f148 0800 	adc.w	r8, r8, #0
 8000aa6:	f1be 0240 	subs.w	r2, lr, #64	; 0x40
 8000aaa:	f178 0200 	sbcs.w	r2, r8, #0
 8000aae:	bf24      	itt	cs
 8000ab0:	e8bd 0b00 	ldmiacs.w	sp!, {r8, r9, fp}
 8000ab4:	bdf0      	popcs	{r4, r5, r6, r7, pc}
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f04f 0900 	mov.w	r9, #0
 8000abc:	2500      	movs	r5, #0
 8000abe:	2600      	movs	r6, #0
 8000ac0:	5683      	ldrsb	r3, [r0, r2]
 8000ac2:	f119 0908 	adds.w	r9, r9, #8
 8000ac6:	f145 0500 	adc.w	r5, r5, #0
 8000aca:	4433      	add	r3, r6
 8000acc:	1886      	adds	r6, r0, r2
 8000ace:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 8000ad2:	f996 4040 	ldrsb.w	r4, [r6, #64]	; 0x40
 8000ad6:	4423      	add	r3, r4
 8000ad8:	f996 4080 	ldrsb.w	r4, [r6, #128]	; 0x80
 8000adc:	4423      	add	r3, r4
 8000ade:	f996 40c0 	ldrsb.w	r4, [r6, #192]	; 0xc0
 8000ae2:	4423      	add	r3, r4
 8000ae4:	f996 4100 	ldrsb.w	r4, [r6, #256]	; 0x100
 8000ae8:	4423      	add	r3, r4
 8000aea:	f996 4140 	ldrsb.w	r4, [r6, #320]	; 0x140
 8000aee:	4423      	add	r3, r4
 8000af0:	f996 4180 	ldrsb.w	r4, [r6, #384]	; 0x180
 8000af4:	4423      	add	r3, r4
 8000af6:	f996 41c0 	ldrsb.w	r4, [r6, #448]	; 0x1c0
 8000afa:	4423      	add	r3, r4
 8000afc:	f996 4200 	ldrsb.w	r4, [r6, #512]	; 0x200
 8000b00:	4423      	add	r3, r4
 8000b02:	f996 4240 	ldrsb.w	r4, [r6, #576]	; 0x240
 8000b06:	4423      	add	r3, r4
 8000b08:	f996 4280 	ldrsb.w	r4, [r6, #640]	; 0x280
 8000b0c:	4423      	add	r3, r4
 8000b0e:	f996 42c0 	ldrsb.w	r4, [r6, #704]	; 0x2c0
 8000b12:	4423      	add	r3, r4
 8000b14:	f996 4300 	ldrsb.w	r4, [r6, #768]	; 0x300
 8000b18:	4423      	add	r3, r4
 8000b1a:	f996 4340 	ldrsb.w	r4, [r6, #832]	; 0x340
 8000b1e:	4423      	add	r3, r4
 8000b20:	f996 4380 	ldrsb.w	r4, [r6, #896]	; 0x380
 8000b24:	4423      	add	r3, r4
 8000b26:	f996 43c0 	ldrsb.w	r4, [r6, #960]	; 0x3c0
 8000b2a:	4423      	add	r3, r4
 8000b2c:	f996 4400 	ldrsb.w	r4, [r6, #1024]	; 0x400
 8000b30:	4423      	add	r3, r4
 8000b32:	f996 4440 	ldrsb.w	r4, [r6, #1088]	; 0x440
 8000b36:	4423      	add	r3, r4
 8000b38:	f996 4480 	ldrsb.w	r4, [r6, #1152]	; 0x480
 8000b3c:	4423      	add	r3, r4
 8000b3e:	f996 44c0 	ldrsb.w	r4, [r6, #1216]	; 0x4c0
 8000b42:	4423      	add	r3, r4
 8000b44:	f996 4500 	ldrsb.w	r4, [r6, #1280]	; 0x500
 8000b48:	4423      	add	r3, r4
 8000b4a:	f996 4540 	ldrsb.w	r4, [r6, #1344]	; 0x540
 8000b4e:	4423      	add	r3, r4
 8000b50:	f996 4580 	ldrsb.w	r4, [r6, #1408]	; 0x580
 8000b54:	4423      	add	r3, r4
 8000b56:	f996 45c0 	ldrsb.w	r4, [r6, #1472]	; 0x5c0
 8000b5a:	4423      	add	r3, r4
 8000b5c:	f996 4600 	ldrsb.w	r4, [r6, #1536]	; 0x600
 8000b60:	4423      	add	r3, r4
 8000b62:	f996 4640 	ldrsb.w	r4, [r6, #1600]	; 0x640
 8000b66:	4423      	add	r3, r4
 8000b68:	f996 4680 	ldrsb.w	r4, [r6, #1664]	; 0x680
 8000b6c:	4423      	add	r3, r4
 8000b6e:	f996 46c0 	ldrsb.w	r4, [r6, #1728]	; 0x6c0
 8000b72:	4423      	add	r3, r4
 8000b74:	f996 4700 	ldrsb.w	r4, [r6, #1792]	; 0x700
 8000b78:	4423      	add	r3, r4
 8000b7a:	f996 4740 	ldrsb.w	r4, [r6, #1856]	; 0x740
 8000b7e:	4423      	add	r3, r4
 8000b80:	f996 4780 	ldrsb.w	r4, [r6, #1920]	; 0x780
 8000b84:	4423      	add	r3, r4
 8000b86:	f996 47c0 	ldrsb.w	r4, [r6, #1984]	; 0x7c0
 8000b8a:	4423      	add	r3, r4
 8000b8c:	f996 4800 	ldrsb.w	r4, [r6, #2048]	; 0x800
 8000b90:	4423      	add	r3, r4
 8000b92:	f996 4840 	ldrsb.w	r4, [r6, #2112]	; 0x840
 8000b96:	4423      	add	r3, r4
 8000b98:	f996 4880 	ldrsb.w	r4, [r6, #2176]	; 0x880
 8000b9c:	4423      	add	r3, r4
 8000b9e:	f996 48c0 	ldrsb.w	r4, [r6, #2240]	; 0x8c0
 8000ba2:	4423      	add	r3, r4
 8000ba4:	f996 4900 	ldrsb.w	r4, [r6, #2304]	; 0x900
 8000ba8:	4423      	add	r3, r4
 8000baa:	f996 4940 	ldrsb.w	r4, [r6, #2368]	; 0x940
 8000bae:	4423      	add	r3, r4
 8000bb0:	f996 4980 	ldrsb.w	r4, [r6, #2432]	; 0x980
 8000bb4:	4423      	add	r3, r4
 8000bb6:	f996 49c0 	ldrsb.w	r4, [r6, #2496]	; 0x9c0
 8000bba:	4423      	add	r3, r4
 8000bbc:	f503 56a0 	add.w	r6, r3, #5120	; 0x1400
 8000bc0:	f1b9 0318 	subs.w	r3, r9, #24
 8000bc4:	f175 0300 	sbcs.w	r3, r5, #0
 8000bc8:	f4ff af7a 	bcc.w	8000ac0 <libjit_avg_pool_i8_0_specialized+0x70>
 8000bcc:	e74e      	b.n	8000a6c <libjit_avg_pool_i8_0_specialized+0x1c>

08000bce <libjit_softmax_i8_1_specialized>:
 8000bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd0:	af03      	add	r7, sp, #12
 8000bd2:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	4606      	mov	r6, r0
 8000bda:	f990 4000 	ldrsb.w	r4, [r0]
 8000bde:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8000be2:	9101      	str	r1, [sp, #4]
 8000be4:	9007      	str	r0, [sp, #28]
 8000be6:	4284      	cmp	r4, r0
 8000be8:	bfc8      	it	gt
 8000bea:	4620      	movgt	r0, r4
 8000bec:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8000bf0:	b241      	sxtb	r1, r0
 8000bf2:	9206      	str	r2, [sp, #24]
 8000bf4:	4291      	cmp	r1, r2
 8000bf6:	bfd8      	it	le
 8000bf8:	4610      	movle	r0, r2
 8000bfa:	f996 c003 	ldrsb.w	ip, [r6, #3]
 8000bfe:	b241      	sxtb	r1, r0
 8000c00:	4561      	cmp	r1, ip
 8000c02:	bfd8      	it	le
 8000c04:	4660      	movle	r0, ip
 8000c06:	f996 b004 	ldrsb.w	fp, [r6, #4]
 8000c0a:	b241      	sxtb	r1, r0
 8000c0c:	4559      	cmp	r1, fp
 8000c0e:	bfd8      	it	le
 8000c10:	4658      	movle	r0, fp
 8000c12:	f996 9005 	ldrsb.w	r9, [r6, #5]
 8000c16:	b241      	sxtb	r1, r0
 8000c18:	4549      	cmp	r1, r9
 8000c1a:	bfd8      	it	le
 8000c1c:	4648      	movle	r0, r9
 8000c1e:	f996 8006 	ldrsb.w	r8, [r6, #6]
 8000c22:	b241      	sxtb	r1, r0
 8000c24:	4541      	cmp	r1, r8
 8000c26:	bfd8      	it	le
 8000c28:	4640      	movle	r0, r8
 8000c2a:	f996 5007 	ldrsb.w	r5, [r6, #7]
 8000c2e:	b241      	sxtb	r1, r0
 8000c30:	42a9      	cmp	r1, r5
 8000c32:	bfd8      	it	le
 8000c34:	4628      	movle	r0, r5
 8000c36:	f996 2008 	ldrsb.w	r2, [r6, #8]
 8000c3a:	b241      	sxtb	r1, r0
 8000c3c:	4291      	cmp	r1, r2
 8000c3e:	bfd8      	it	le
 8000c40:	4610      	movle	r0, r2
 8000c42:	f996 3009 	ldrsb.w	r3, [r6, #9]
 8000c46:	b241      	sxtb	r1, r0
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	bfd8      	it	le
 8000c4c:	4618      	movle	r0, r3
 8000c4e:	f996 e00a 	ldrsb.w	lr, [r6, #10]
 8000c52:	b241      	sxtb	r1, r0
 8000c54:	4571      	cmp	r1, lr
 8000c56:	bfd8      	it	le
 8000c58:	4670      	movle	r0, lr
 8000c5a:	f996 100b 	ldrsb.w	r1, [r6, #11]
 8000c5e:	9602      	str	r6, [sp, #8]
 8000c60:	b246      	sxtb	r6, r0
 8000c62:	428e      	cmp	r6, r1
 8000c64:	f64d 2610 	movw	r6, #55824	; 0xda10
 8000c68:	bfd8      	it	le
 8000c6a:	4608      	movle	r0, r1
 8000c6c:	fa4f fa80 	sxtb.w	sl, r0
 8000c70:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000c74:	eba4 000a 	sub.w	r0, r4, sl
 8000c78:	eba5 050a 	sub.w	r5, r5, sl
 8000c7c:	eba2 020a 	sub.w	r2, r2, sl
 8000c80:	eba1 010a 	sub.w	r1, r1, sl
 8000c84:	f506 747f 	add.w	r4, r6, #1020	; 0x3fc
 8000c88:	9e07      	ldr	r6, [sp, #28]
 8000c8a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8000c8e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8000c92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000c96:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8000c9a:	eba6 060a 	sub.w	r6, r6, sl
 8000c9e:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000ca2:	08f6      	lsrs	r6, r6, #3
 8000ca4:	eb06 00d0 	add.w	r0, r6, r0, lsr #3
 8000ca8:	9e06      	ldr	r6, [sp, #24]
 8000caa:	eba6 060a 	sub.w	r6, r6, sl
 8000cae:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000cb2:	eb00 00d6 	add.w	r0, r0, r6, lsr #3
 8000cb6:	ebac 060a 	sub.w	r6, ip, sl
 8000cba:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000cbe:	eb00 00d6 	add.w	r0, r0, r6, lsr #3
 8000cc2:	ebab 060a 	sub.w	r6, fp, sl
 8000cc6:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000cca:	eb00 00d6 	add.w	r0, r0, r6, lsr #3
 8000cce:	eba9 060a 	sub.w	r6, r9, sl
 8000cd2:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000cd6:	eb00 00d6 	add.w	r0, r0, r6, lsr #3
 8000cda:	eba8 060a 	sub.w	r6, r8, sl
 8000cde:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000ce2:	eb00 00d6 	add.w	r0, r0, r6, lsr #3
 8000ce6:	eb00 00d5 	add.w	r0, r0, r5, lsr #3
 8000cea:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000cee:	eba3 020a 	sub.w	r2, r3, sl
 8000cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000cf6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000cfa:	ebae 020a 	sub.w	r2, lr, sl
 8000cfe:	46d6      	mov	lr, sl
 8000d00:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000d04:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000d08:	eb00 01d1 	add.w	r1, r0, r1, lsr #3
 8000d0c:	2004      	movs	r0, #4
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	db16      	blt.n	8000d40 <libjit_softmax_i8_1_specialized+0x172>
 8000d12:	bf00      	nop
 8000d14:	004a      	lsls	r2, r1, #1
 8000d16:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8000d1a:	dd0b      	ble.n	8000d34 <libjit_softmax_i8_1_specialized+0x166>
 8000d1c:	008a      	lsls	r2, r1, #2
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	db0a      	blt.n	8000d38 <libjit_softmax_i8_1_specialized+0x16a>
 8000d22:	00ca      	lsls	r2, r1, #3
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	db09      	blt.n	8000d3c <libjit_softmax_i8_1_specialized+0x16e>
 8000d28:	0109      	lsls	r1, r1, #4
 8000d2a:	3804      	subs	r0, #4
 8000d2c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8000d30:	dcf0      	bgt.n	8000d14 <libjit_softmax_i8_1_specialized+0x146>
 8000d32:	e005      	b.n	8000d40 <libjit_softmax_i8_1_specialized+0x172>
 8000d34:	3801      	subs	r0, #1
 8000d36:	e002      	b.n	8000d3e <libjit_softmax_i8_1_specialized+0x170>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	e000      	b.n	8000d3e <libjit_softmax_i8_1_specialized+0x170>
 8000d3c:	3803      	subs	r0, #3
 8000d3e:	4611      	mov	r1, r2
 8000d40:	f100 0225 	add.w	r2, r0, #37	; 0x25
 8000d44:	2301      	movs	r3, #1
 8000d46:	3026      	adds	r0, #38	; 0x26
 8000d48:	f04f 0c00 	mov.w	ip, #0
 8000d4c:	9400      	str	r4, [sp, #0]
 8000d4e:	f8cd e020 	str.w	lr, [sp, #32]
 8000d52:	4093      	lsls	r3, r2
 8000d54:	0c0a      	lsrs	r2, r1, #16
 8000d56:	0c49      	lsrs	r1, r1, #17
 8000d58:	f1a0 0920 	sub.w	r9, r0, #32
 8000d5c:	9007      	str	r0, [sp, #28]
 8000d5e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8000d62:	9306      	str	r3, [sp, #24]
 8000d64:	fbb1 f1f2 	udiv	r1, r1, r2
 8000d68:	9105      	str	r1, [sp, #20]
 8000d6a:	17d9      	asrs	r1, r3, #31
 8000d6c:	9104      	str	r1, [sp, #16]
 8000d6e:	f1c0 0120 	rsb	r1, r0, #32
 8000d72:	9103      	str	r1, [sp, #12]
 8000d74:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8000d78:	9d00      	ldr	r5, [sp, #0]
 8000d7a:	f1b9 0f00 	cmp.w	r9, #0
 8000d7e:	f06f 0a7f 	mvn.w	sl, #127	; 0x7f
 8000d82:	f918 100c 	ldrsb.w	r1, [r8, ip]
 8000d86:	44e0      	add	r8, ip
 8000d88:	eba1 010e 	sub.w	r1, r1, lr
 8000d8c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8000d90:	e9dd 6204 	ldrd	r6, r2, [sp, #16]
 8000d94:	9c03      	ldr	r4, [sp, #12]
 8000d96:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8000d9a:	4670      	mov	r0, lr
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	fbe1 0602 	umlal	r0, r6, r1, r2
 8000da2:	9a07      	ldr	r2, [sp, #28]
 8000da4:	fa06 f104 	lsl.w	r1, r6, r4
 8000da8:	fa20 f002 	lsr.w	r0, r0, r2
 8000dac:	ea40 0001 	orr.w	r0, r0, r1
 8000db0:	f04f 017f 	mov.w	r1, #127	; 0x7f
 8000db4:	bfa8      	it	ge
 8000db6:	fa26 f009 	lsrge.w	r0, r6, r9
 8000dba:	3880      	subs	r0, #128	; 0x80
 8000dbc:	287f      	cmp	r0, #127	; 0x7f
 8000dbe:	bfa8      	it	ge
 8000dc0:	4608      	movge	r0, r1
 8000dc2:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000dc6:	f110 0f80 	cmn.w	r0, #128	; 0x80
 8000dca:	bfd8      	it	le
 8000dcc:	4608      	movle	r0, r1
 8000dce:	f8dd b004 	ldr.w	fp, [sp, #4]
 8000dd2:	9908      	ldr	r1, [sp, #32]
 8000dd4:	9a04      	ldr	r2, [sp, #16]
 8000dd6:	f1b9 0f00 	cmp.w	r9, #0
 8000dda:	f80b 000c 	strb.w	r0, [fp, ip]
 8000dde:	4616      	mov	r6, r2
 8000de0:	f998 0001 	ldrsb.w	r0, [r8, #1]
 8000de4:	eba0 0001 	sub.w	r0, r0, r1
 8000de8:	4671      	mov	r1, lr
 8000dea:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8000dee:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8000df2:	fbe0 1603 	umlal	r1, r6, r0, r3
 8000df6:	fa06 f004 	lsl.w	r0, r6, r4
 8000dfa:	fa21 f10e 	lsr.w	r1, r1, lr
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f04f 017f 	mov.w	r1, #127	; 0x7f
 8000e06:	bfa8      	it	ge
 8000e08:	fa26 f009 	lsrge.w	r0, r6, r9
 8000e0c:	3880      	subs	r0, #128	; 0x80
 8000e0e:	287f      	cmp	r0, #127	; 0x7f
 8000e10:	bfa8      	it	ge
 8000e12:	4608      	movge	r0, r1
 8000e14:	f110 0f80 	cmn.w	r0, #128	; 0x80
 8000e18:	bfd8      	it	le
 8000e1a:	4650      	movle	r0, sl
 8000e1c:	eb0b 0a0c 	add.w	sl, fp, ip
 8000e20:	9908      	ldr	r1, [sp, #32]
 8000e22:	9b06      	ldr	r3, [sp, #24]
 8000e24:	4693      	mov	fp, r2
 8000e26:	f10c 0c06 	add.w	ip, ip, #6
 8000e2a:	f88a 0001 	strb.w	r0, [sl, #1]
 8000e2e:	f1b9 0f00 	cmp.w	r9, #0
 8000e32:	f998 0002 	ldrsb.w	r0, [r8, #2]
 8000e36:	461e      	mov	r6, r3
 8000e38:	eba0 0001 	sub.w	r0, r0, r1
 8000e3c:	9905      	ldr	r1, [sp, #20]
 8000e3e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8000e42:	fbe0 6b01 	umlal	r6, fp, r0, r1
 8000e46:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e4a:	fa0b f004 	lsl.w	r0, fp, r4
 8000e4e:	46c6      	mov	lr, r8
 8000e50:	ea40 0006 	orr.w	r0, r0, r6
 8000e54:	f04f 067f 	mov.w	r6, #127	; 0x7f
 8000e58:	bfa8      	it	ge
 8000e5a:	fa2b f009 	lsrge.w	r0, fp, r9
 8000e5e:	468b      	mov	fp, r1
 8000e60:	3880      	subs	r0, #128	; 0x80
 8000e62:	287f      	cmp	r0, #127	; 0x7f
 8000e64:	bfa8      	it	ge
 8000e66:	4630      	movge	r0, r6
 8000e68:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8000e6c:	f110 0f80 	cmn.w	r0, #128	; 0x80
 8000e70:	bfd8      	it	le
 8000e72:	4630      	movle	r0, r6
 8000e74:	f88a 0002 	strb.w	r0, [sl, #2]
 8000e78:	9c08      	ldr	r4, [sp, #32]
 8000e7a:	461e      	mov	r6, r3
 8000e7c:	f998 0003 	ldrsb.w	r0, [r8, #3]
 8000e80:	46a8      	mov	r8, r5
 8000e82:	f1b9 0f00 	cmp.w	r9, #0
 8000e86:	eba0 0004 	sub.w	r0, r0, r4
 8000e8a:	4614      	mov	r4, r2
 8000e8c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8000e90:	4615      	mov	r5, r2
 8000e92:	9a03      	ldr	r2, [sp, #12]
 8000e94:	fbe0 6401 	umlal	r6, r4, r0, r1
 8000e98:	9907      	ldr	r1, [sp, #28]
 8000e9a:	fa04 f002 	lsl.w	r0, r4, r2
 8000e9e:	fa26 f601 	lsr.w	r6, r6, r1
 8000ea2:	ea40 0006 	orr.w	r0, r0, r6
 8000ea6:	462e      	mov	r6, r5
 8000ea8:	bfa8      	it	ge
 8000eaa:	fa24 f009 	lsrge.w	r0, r4, r9
 8000eae:	247f      	movs	r4, #127	; 0x7f
 8000eb0:	3880      	subs	r0, #128	; 0x80
 8000eb2:	287f      	cmp	r0, #127	; 0x7f
 8000eb4:	bfa8      	it	ge
 8000eb6:	4620      	movge	r0, r4
 8000eb8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 8000ebc:	f110 0f80 	cmn.w	r0, #128	; 0x80
 8000ec0:	bfd8      	it	le
 8000ec2:	4620      	movle	r0, r4
 8000ec4:	f88a 0003 	strb.w	r0, [sl, #3]
 8000ec8:	9c08      	ldr	r4, [sp, #32]
 8000eca:	f99e 0004 	ldrsb.w	r0, [lr, #4]
 8000ece:	f1b9 0f00 	cmp.w	r9, #0
 8000ed2:	eba0 0004 	sub.w	r0, r0, r4
 8000ed6:	461c      	mov	r4, r3
 8000ed8:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8000edc:	fbe0 460b 	umlal	r4, r6, r0, fp
 8000ee0:	fa06 f002 	lsl.w	r0, r6, r2
 8000ee4:	fa24 f401 	lsr.w	r4, r4, r1
 8000ee8:	ea40 0004 	orr.w	r0, r0, r4
 8000eec:	f04f 047f 	mov.w	r4, #127	; 0x7f
 8000ef0:	bfa8      	it	ge
 8000ef2:	fa26 f009 	lsrge.w	r0, r6, r9
 8000ef6:	462e      	mov	r6, r5
 8000ef8:	3880      	subs	r0, #128	; 0x80
 8000efa:	287f      	cmp	r0, #127	; 0x7f
 8000efc:	bfa8      	it	ge
 8000efe:	4620      	movge	r0, r4
 8000f00:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 8000f04:	f110 0f80 	cmn.w	r0, #128	; 0x80
 8000f08:	bfd8      	it	le
 8000f0a:	4620      	movle	r0, r4
 8000f0c:	f88a 0004 	strb.w	r0, [sl, #4]
 8000f10:	9c08      	ldr	r4, [sp, #32]
 8000f12:	f99e 0005 	ldrsb.w	r0, [lr, #5]
 8000f16:	f1b9 0f00 	cmp.w	r9, #0
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	eba0 0004 	sub.w	r0, r0, r4
 8000f20:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8000f24:	fbe0 360b 	umlal	r3, r6, r0, fp
 8000f28:	fa23 f401 	lsr.w	r4, r3, r1
 8000f2c:	fa06 f002 	lsl.w	r0, r6, r2
 8000f30:	f04f 017f 	mov.w	r1, #127	; 0x7f
 8000f34:	ea40 0004 	orr.w	r0, r0, r4
 8000f38:	bfa8      	it	ge
 8000f3a:	fa26 f009 	lsrge.w	r0, r6, r9
 8000f3e:	3880      	subs	r0, #128	; 0x80
 8000f40:	287f      	cmp	r0, #127	; 0x7f
 8000f42:	bfa8      	it	ge
 8000f44:	4608      	movge	r0, r1
 8000f46:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000f4a:	f110 0f80 	cmn.w	r0, #128	; 0x80
 8000f4e:	bfd8      	it	le
 8000f50:	4608      	movle	r0, r1
 8000f52:	f88a 0005 	strb.w	r0, [sl, #5]
 8000f56:	f1bc 0f0c 	cmp.w	ip, #12
 8000f5a:	f47f af0b 	bne.w	8000d74 <libjit_softmax_i8_1_specialized+0x1a6>
 8000f5e:	b009      	add	sp, #36	; 0x24
 8000f60:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 8000f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000f68 <__errno>:
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <__errno+0x8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000000 	.word	0x20000000

08000f74 <__libc_init_array>:
 8000f74:	b570      	push	{r4, r5, r6, lr}
 8000f76:	4e0d      	ldr	r6, [pc, #52]	; (8000fac <__libc_init_array+0x38>)
 8000f78:	4d0d      	ldr	r5, [pc, #52]	; (8000fb0 <__libc_init_array+0x3c>)
 8000f7a:	1b76      	subs	r6, r6, r5
 8000f7c:	10b6      	asrs	r6, r6, #2
 8000f7e:	d006      	beq.n	8000f8e <__libc_init_array+0x1a>
 8000f80:	2400      	movs	r4, #0
 8000f82:	3401      	adds	r4, #1
 8000f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f88:	4798      	blx	r3
 8000f8a:	42a6      	cmp	r6, r4
 8000f8c:	d1f9      	bne.n	8000f82 <__libc_init_array+0xe>
 8000f8e:	4e09      	ldr	r6, [pc, #36]	; (8000fb4 <__libc_init_array+0x40>)
 8000f90:	4d09      	ldr	r5, [pc, #36]	; (8000fb8 <__libc_init_array+0x44>)
 8000f92:	1b76      	subs	r6, r6, r5
 8000f94:	f006 f8f0 	bl	8007178 <_init>
 8000f98:	10b6      	asrs	r6, r6, #2
 8000f9a:	d006      	beq.n	8000faa <__libc_init_array+0x36>
 8000f9c:	2400      	movs	r4, #0
 8000f9e:	3401      	adds	r4, #1
 8000fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fa4:	4798      	blx	r3
 8000fa6:	42a6      	cmp	r6, r4
 8000fa8:	d1f9      	bne.n	8000f9e <__libc_init_array+0x2a>
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
 8000fac:	0800e07c 	.word	0x0800e07c
 8000fb0:	0800e07c 	.word	0x0800e07c
 8000fb4:	0800e080 	.word	0x0800e080
 8000fb8:	0800e07c 	.word	0x0800e07c

08000fbc <memcpy>:
 8000fbc:	4684      	mov	ip, r0
 8000fbe:	ea41 0300 	orr.w	r3, r1, r0
 8000fc2:	f013 0303 	ands.w	r3, r3, #3
 8000fc6:	d16d      	bne.n	80010a4 <memcpy+0xe8>
 8000fc8:	3a40      	subs	r2, #64	; 0x40
 8000fca:	d341      	bcc.n	8001050 <memcpy+0x94>
 8000fcc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fd0:	f840 3b04 	str.w	r3, [r0], #4
 8000fd4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fd8:	f840 3b04 	str.w	r3, [r0], #4
 8000fdc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fe0:	f840 3b04 	str.w	r3, [r0], #4
 8000fe4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fe8:	f840 3b04 	str.w	r3, [r0], #4
 8000fec:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ff0:	f840 3b04 	str.w	r3, [r0], #4
 8000ff4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ff8:	f840 3b04 	str.w	r3, [r0], #4
 8000ffc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001000:	f840 3b04 	str.w	r3, [r0], #4
 8001004:	f851 3b04 	ldr.w	r3, [r1], #4
 8001008:	f840 3b04 	str.w	r3, [r0], #4
 800100c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001010:	f840 3b04 	str.w	r3, [r0], #4
 8001014:	f851 3b04 	ldr.w	r3, [r1], #4
 8001018:	f840 3b04 	str.w	r3, [r0], #4
 800101c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001020:	f840 3b04 	str.w	r3, [r0], #4
 8001024:	f851 3b04 	ldr.w	r3, [r1], #4
 8001028:	f840 3b04 	str.w	r3, [r0], #4
 800102c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001030:	f840 3b04 	str.w	r3, [r0], #4
 8001034:	f851 3b04 	ldr.w	r3, [r1], #4
 8001038:	f840 3b04 	str.w	r3, [r0], #4
 800103c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001040:	f840 3b04 	str.w	r3, [r0], #4
 8001044:	f851 3b04 	ldr.w	r3, [r1], #4
 8001048:	f840 3b04 	str.w	r3, [r0], #4
 800104c:	3a40      	subs	r2, #64	; 0x40
 800104e:	d2bd      	bcs.n	8000fcc <memcpy+0x10>
 8001050:	3230      	adds	r2, #48	; 0x30
 8001052:	d311      	bcc.n	8001078 <memcpy+0xbc>
 8001054:	f851 3b04 	ldr.w	r3, [r1], #4
 8001058:	f840 3b04 	str.w	r3, [r0], #4
 800105c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001060:	f840 3b04 	str.w	r3, [r0], #4
 8001064:	f851 3b04 	ldr.w	r3, [r1], #4
 8001068:	f840 3b04 	str.w	r3, [r0], #4
 800106c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001070:	f840 3b04 	str.w	r3, [r0], #4
 8001074:	3a10      	subs	r2, #16
 8001076:	d2ed      	bcs.n	8001054 <memcpy+0x98>
 8001078:	320c      	adds	r2, #12
 800107a:	d305      	bcc.n	8001088 <memcpy+0xcc>
 800107c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001080:	f840 3b04 	str.w	r3, [r0], #4
 8001084:	3a04      	subs	r2, #4
 8001086:	d2f9      	bcs.n	800107c <memcpy+0xc0>
 8001088:	3204      	adds	r2, #4
 800108a:	d008      	beq.n	800109e <memcpy+0xe2>
 800108c:	07d2      	lsls	r2, r2, #31
 800108e:	bf1c      	itt	ne
 8001090:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001094:	f800 3b01 	strbne.w	r3, [r0], #1
 8001098:	d301      	bcc.n	800109e <memcpy+0xe2>
 800109a:	880b      	ldrh	r3, [r1, #0]
 800109c:	8003      	strh	r3, [r0, #0]
 800109e:	4660      	mov	r0, ip
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2a08      	cmp	r2, #8
 80010a6:	d313      	bcc.n	80010d0 <memcpy+0x114>
 80010a8:	078b      	lsls	r3, r1, #30
 80010aa:	d08d      	beq.n	8000fc8 <memcpy+0xc>
 80010ac:	f010 0303 	ands.w	r3, r0, #3
 80010b0:	d08a      	beq.n	8000fc8 <memcpy+0xc>
 80010b2:	f1c3 0304 	rsb	r3, r3, #4
 80010b6:	1ad2      	subs	r2, r2, r3
 80010b8:	07db      	lsls	r3, r3, #31
 80010ba:	bf1c      	itt	ne
 80010bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80010c0:	f800 3b01 	strbne.w	r3, [r0], #1
 80010c4:	d380      	bcc.n	8000fc8 <memcpy+0xc>
 80010c6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80010ca:	f820 3b02 	strh.w	r3, [r0], #2
 80010ce:	e77b      	b.n	8000fc8 <memcpy+0xc>
 80010d0:	3a04      	subs	r2, #4
 80010d2:	d3d9      	bcc.n	8001088 <memcpy+0xcc>
 80010d4:	3a01      	subs	r2, #1
 80010d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010da:	f800 3b01 	strb.w	r3, [r0], #1
 80010de:	d2f9      	bcs.n	80010d4 <memcpy+0x118>
 80010e0:	780b      	ldrb	r3, [r1, #0]
 80010e2:	7003      	strb	r3, [r0, #0]
 80010e4:	784b      	ldrb	r3, [r1, #1]
 80010e6:	7043      	strb	r3, [r0, #1]
 80010e8:	788b      	ldrb	r3, [r1, #2]
 80010ea:	7083      	strb	r3, [r0, #2]
 80010ec:	4660      	mov	r0, ip
 80010ee:	4770      	bx	lr

080010f0 <memset>:
 80010f0:	b4f0      	push	{r4, r5, r6, r7}
 80010f2:	0786      	lsls	r6, r0, #30
 80010f4:	d046      	beq.n	8001184 <memset+0x94>
 80010f6:	1e54      	subs	r4, r2, #1
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d03c      	beq.n	8001176 <memset+0x86>
 80010fc:	b2ca      	uxtb	r2, r1
 80010fe:	4603      	mov	r3, r0
 8001100:	e002      	b.n	8001108 <memset+0x18>
 8001102:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8001106:	d336      	bcc.n	8001176 <memset+0x86>
 8001108:	f803 2b01 	strb.w	r2, [r3], #1
 800110c:	079d      	lsls	r5, r3, #30
 800110e:	d1f8      	bne.n	8001102 <memset+0x12>
 8001110:	2c03      	cmp	r4, #3
 8001112:	d929      	bls.n	8001168 <memset+0x78>
 8001114:	b2cd      	uxtb	r5, r1
 8001116:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800111a:	2c0f      	cmp	r4, #15
 800111c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001120:	d933      	bls.n	800118a <memset+0x9a>
 8001122:	f1a4 0610 	sub.w	r6, r4, #16
 8001126:	0936      	lsrs	r6, r6, #4
 8001128:	f103 0720 	add.w	r7, r3, #32
 800112c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8001130:	f103 0210 	add.w	r2, r3, #16
 8001134:	e942 5504 	strd	r5, r5, [r2, #-16]
 8001138:	e942 5502 	strd	r5, r5, [r2, #-8]
 800113c:	3210      	adds	r2, #16
 800113e:	42ba      	cmp	r2, r7
 8001140:	d1f8      	bne.n	8001134 <memset+0x44>
 8001142:	1c72      	adds	r2, r6, #1
 8001144:	f014 0f0c 	tst.w	r4, #12
 8001148:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800114c:	f004 060f 	and.w	r6, r4, #15
 8001150:	d013      	beq.n	800117a <memset+0x8a>
 8001152:	1f33      	subs	r3, r6, #4
 8001154:	f023 0303 	bic.w	r3, r3, #3
 8001158:	3304      	adds	r3, #4
 800115a:	4413      	add	r3, r2
 800115c:	f842 5b04 	str.w	r5, [r2], #4
 8001160:	4293      	cmp	r3, r2
 8001162:	d1fb      	bne.n	800115c <memset+0x6c>
 8001164:	f006 0403 	and.w	r4, r6, #3
 8001168:	b12c      	cbz	r4, 8001176 <memset+0x86>
 800116a:	b2c9      	uxtb	r1, r1
 800116c:	441c      	add	r4, r3
 800116e:	f803 1b01 	strb.w	r1, [r3], #1
 8001172:	429c      	cmp	r4, r3
 8001174:	d1fb      	bne.n	800116e <memset+0x7e>
 8001176:	bcf0      	pop	{r4, r5, r6, r7}
 8001178:	4770      	bx	lr
 800117a:	4634      	mov	r4, r6
 800117c:	4613      	mov	r3, r2
 800117e:	2c00      	cmp	r4, #0
 8001180:	d1f3      	bne.n	800116a <memset+0x7a>
 8001182:	e7f8      	b.n	8001176 <memset+0x86>
 8001184:	4614      	mov	r4, r2
 8001186:	4603      	mov	r3, r0
 8001188:	e7c2      	b.n	8001110 <memset+0x20>
 800118a:	461a      	mov	r2, r3
 800118c:	4626      	mov	r6, r4
 800118e:	e7e0      	b.n	8001152 <memset+0x62>

08001190 <_siprintf_r>:
 8001190:	b40c      	push	{r2, r3}
 8001192:	b570      	push	{r4, r5, r6, lr}
 8001194:	b09c      	sub	sp, #112	; 0x70
 8001196:	ac20      	add	r4, sp, #128	; 0x80
 8001198:	4e0b      	ldr	r6, [pc, #44]	; (80011c8 <_siprintf_r+0x38>)
 800119a:	f854 2b04 	ldr.w	r2, [r4], #4
 800119e:	9102      	str	r1, [sp, #8]
 80011a0:	4623      	mov	r3, r4
 80011a2:	9106      	str	r1, [sp, #24]
 80011a4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80011a8:	a902      	add	r1, sp, #8
 80011aa:	9401      	str	r4, [sp, #4]
 80011ac:	9507      	str	r5, [sp, #28]
 80011ae:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80011b2:	f000 f909 	bl	80013c8 <_svfiprintf_r>
 80011b6:	9b02      	ldr	r3, [sp, #8]
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	b01c      	add	sp, #112	; 0x70
 80011be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80011c2:	b002      	add	sp, #8
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	ffff0208 	.word	0xffff0208

080011cc <siprintf>:
 80011cc:	b40e      	push	{r1, r2, r3}
 80011ce:	b530      	push	{r4, r5, lr}
 80011d0:	b09c      	sub	sp, #112	; 0x70
 80011d2:	ab1f      	add	r3, sp, #124	; 0x7c
 80011d4:	4c0c      	ldr	r4, [pc, #48]	; (8001208 <siprintf+0x3c>)
 80011d6:	4d0d      	ldr	r5, [pc, #52]	; (800120c <siprintf+0x40>)
 80011d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	4601      	mov	r1, r0
 80011e0:	9102      	str	r1, [sp, #8]
 80011e2:	9106      	str	r1, [sp, #24]
 80011e4:	6820      	ldr	r0, [r4, #0]
 80011e6:	a902      	add	r1, sp, #8
 80011e8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80011ec:	9407      	str	r4, [sp, #28]
 80011ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80011f2:	f000 f8e9 	bl	80013c8 <_svfiprintf_r>
 80011f6:	9b02      	ldr	r3, [sp, #8]
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	b01c      	add	sp, #112	; 0x70
 80011fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001202:	b003      	add	sp, #12
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000000 	.word	0x20000000
 800120c:	ffff0208 	.word	0xffff0208

08001210 <__ssputs_r>:
 8001210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001214:	688e      	ldr	r6, [r1, #8]
 8001216:	461d      	mov	r5, r3
 8001218:	42ae      	cmp	r6, r5
 800121a:	460c      	mov	r4, r1
 800121c:	680b      	ldr	r3, [r1, #0]
 800121e:	4617      	mov	r7, r2
 8001220:	d836      	bhi.n	8001290 <__ssputs_r+0x80>
 8001222:	4680      	mov	r8, r0
 8001224:	8988      	ldrh	r0, [r1, #12]
 8001226:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800122a:	d10e      	bne.n	800124a <__ssputs_r+0x3a>
 800122c:	4635      	mov	r5, r6
 800122e:	4618      	mov	r0, r3
 8001230:	462a      	mov	r2, r5
 8001232:	4639      	mov	r1, r7
 8001234:	f000 fc34 	bl	8001aa0 <memmove>
 8001238:	68a2      	ldr	r2, [r4, #8]
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	1b96      	subs	r6, r2, r6
 800123e:	442b      	add	r3, r5
 8001240:	60a6      	str	r6, [r4, #8]
 8001242:	6023      	str	r3, [r4, #0]
 8001244:	2000      	movs	r0, #0
 8001246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124a:	e9d1 1604 	ldrd	r1, r6, [r1, #16]
 800124e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8001252:	eba3 0901 	sub.w	r9, r3, r1
 8001256:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800125a:	1c6b      	adds	r3, r5, #1
 800125c:	1076      	asrs	r6, r6, #1
 800125e:	444b      	add	r3, r9
 8001260:	42b3      	cmp	r3, r6
 8001262:	4632      	mov	r2, r6
 8001264:	bf84      	itt	hi
 8001266:	461e      	movhi	r6, r3
 8001268:	4632      	movhi	r2, r6
 800126a:	0543      	lsls	r3, r0, #21
 800126c:	d512      	bpl.n	8001294 <__ssputs_r+0x84>
 800126e:	4611      	mov	r1, r2
 8001270:	4640      	mov	r0, r8
 8001272:	f000 fcd3 	bl	8001c1c <_malloc_r>
 8001276:	4682      	mov	sl, r0
 8001278:	b300      	cbz	r0, 80012bc <__ssputs_r+0xac>
 800127a:	464a      	mov	r2, r9
 800127c:	6921      	ldr	r1, [r4, #16]
 800127e:	f7ff fe9d 	bl	8000fbc <memcpy>
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	81a3      	strh	r3, [r4, #12]
 800128e:	e006      	b.n	800129e <__ssputs_r+0x8e>
 8001290:	462e      	mov	r6, r5
 8001292:	e7cc      	b.n	800122e <__ssputs_r+0x1e>
 8001294:	4640      	mov	r0, r8
 8001296:	f000 fd25 	bl	8001ce4 <_realloc_r>
 800129a:	4682      	mov	sl, r0
 800129c:	b150      	cbz	r0, 80012b4 <__ssputs_r+0xa4>
 800129e:	eba6 0209 	sub.w	r2, r6, r9
 80012a2:	eb0a 0309 	add.w	r3, sl, r9
 80012a6:	6166      	str	r6, [r4, #20]
 80012a8:	f8c4 a010 	str.w	sl, [r4, #16]
 80012ac:	6023      	str	r3, [r4, #0]
 80012ae:	60a2      	str	r2, [r4, #8]
 80012b0:	462e      	mov	r6, r5
 80012b2:	e7bc      	b.n	800122e <__ssputs_r+0x1e>
 80012b4:	6921      	ldr	r1, [r4, #16]
 80012b6:	4640      	mov	r0, r8
 80012b8:	f000 fc5a 	bl	8001b70 <_free_r>
 80012bc:	230c      	movs	r3, #12
 80012be:	f8c8 3000 	str.w	r3, [r8]
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c8:	81a3      	strh	r3, [r4, #12]
 80012ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ce:	e7ba      	b.n	8001246 <__ssputs_r+0x36>

080012d0 <__ssprint_r>:
 80012d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012d4:	6893      	ldr	r3, [r2, #8]
 80012d6:	b083      	sub	sp, #12
 80012d8:	4690      	mov	r8, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06d      	beq.n	80013ba <__ssprint_r+0xea>
 80012de:	6817      	ldr	r7, [r2, #0]
 80012e0:	688d      	ldr	r5, [r1, #8]
 80012e2:	4682      	mov	sl, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	6808      	ldr	r0, [r1, #0]
 80012e8:	3708      	adds	r7, #8
 80012ea:	e043      	b.n	8001374 <__ssprint_r+0xa4>
 80012ec:	89a3      	ldrh	r3, [r4, #12]
 80012ee:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80012f2:	d02e      	beq.n	8001352 <__ssprint_r+0x82>
 80012f4:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 80012f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012fc:	eba0 0b01 	sub.w	fp, r0, r1
 8001300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001304:	eb0b 0006 	add.w	r0, fp, r6
 8001308:	106d      	asrs	r5, r5, #1
 800130a:	3001      	adds	r0, #1
 800130c:	42a8      	cmp	r0, r5
 800130e:	462a      	mov	r2, r5
 8001310:	bf84      	itt	hi
 8001312:	4605      	movhi	r5, r0
 8001314:	462a      	movhi	r2, r5
 8001316:	055b      	lsls	r3, r3, #21
 8001318:	d536      	bpl.n	8001388 <__ssprint_r+0xb8>
 800131a:	4611      	mov	r1, r2
 800131c:	4650      	mov	r0, sl
 800131e:	f000 fc7d 	bl	8001c1c <_malloc_r>
 8001322:	2800      	cmp	r0, #0
 8001324:	d03a      	beq.n	800139c <__ssprint_r+0xcc>
 8001326:	465a      	mov	r2, fp
 8001328:	6921      	ldr	r1, [r4, #16]
 800132a:	9001      	str	r0, [sp, #4]
 800132c:	f7ff fe46 	bl	8000fbc <memcpy>
 8001330:	89a2      	ldrh	r2, [r4, #12]
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800133c:	81a2      	strh	r2, [r4, #12]
 800133e:	eba5 020b 	sub.w	r2, r5, fp
 8001342:	eb03 000b 	add.w	r0, r3, fp
 8001346:	6165      	str	r5, [r4, #20]
 8001348:	6123      	str	r3, [r4, #16]
 800134a:	6020      	str	r0, [r4, #0]
 800134c:	60a2      	str	r2, [r4, #8]
 800134e:	4635      	mov	r5, r6
 8001350:	46b3      	mov	fp, r6
 8001352:	465a      	mov	r2, fp
 8001354:	4649      	mov	r1, r9
 8001356:	f000 fba3 	bl	8001aa0 <memmove>
 800135a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800135e:	68a2      	ldr	r2, [r4, #8]
 8001360:	6820      	ldr	r0, [r4, #0]
 8001362:	1b55      	subs	r5, r2, r5
 8001364:	4458      	add	r0, fp
 8001366:	1b9e      	subs	r6, r3, r6
 8001368:	60a5      	str	r5, [r4, #8]
 800136a:	6020      	str	r0, [r4, #0]
 800136c:	f8c8 6008 	str.w	r6, [r8, #8]
 8001370:	b31e      	cbz	r6, 80013ba <__ssprint_r+0xea>
 8001372:	3708      	adds	r7, #8
 8001374:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 8001378:	46ab      	mov	fp, r5
 800137a:	2e00      	cmp	r6, #0
 800137c:	d0f9      	beq.n	8001372 <__ssprint_r+0xa2>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d2b4      	bcs.n	80012ec <__ssprint_r+0x1c>
 8001382:	4635      	mov	r5, r6
 8001384:	46b3      	mov	fp, r6
 8001386:	e7e4      	b.n	8001352 <__ssprint_r+0x82>
 8001388:	4650      	mov	r0, sl
 800138a:	f000 fcab 	bl	8001ce4 <_realloc_r>
 800138e:	4603      	mov	r3, r0
 8001390:	2800      	cmp	r0, #0
 8001392:	d1d4      	bne.n	800133e <__ssprint_r+0x6e>
 8001394:	6921      	ldr	r1, [r4, #16]
 8001396:	4650      	mov	r0, sl
 8001398:	f000 fbea 	bl	8001b70 <_free_r>
 800139c:	230c      	movs	r3, #12
 800139e:	f8ca 3000 	str.w	r3, [sl]
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ae:	81a3      	strh	r3, [r4, #12]
 80013b0:	e9c8 2201 	strd	r2, r2, [r8, #4]
 80013b4:	b003      	add	sp, #12
 80013b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ba:	2000      	movs	r0, #0
 80013bc:	f8c8 0004 	str.w	r0, [r8, #4]
 80013c0:	b003      	add	sp, #12
 80013c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013c6:	bf00      	nop

080013c8 <_svfiprintf_r>:
 80013c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013cc:	4690      	mov	r8, r2
 80013ce:	898a      	ldrh	r2, [r1, #12]
 80013d0:	b09f      	sub	sp, #124	; 0x7c
 80013d2:	0614      	lsls	r4, r2, #24
 80013d4:	468b      	mov	fp, r1
 80013d6:	9002      	str	r0, [sp, #8]
 80013d8:	d503      	bpl.n	80013e2 <_svfiprintf_r+0x1a>
 80013da:	690a      	ldr	r2, [r1, #16]
 80013dc:	2a00      	cmp	r2, #0
 80013de:	f000 810b 	beq.w	80015f8 <_svfiprintf_r+0x230>
 80013e2:	9305      	str	r3, [sp, #20]
 80013e4:	2330      	movs	r3, #48	; 0x30
 80013e6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 80013ea:	f898 3000 	ldrb.w	r3, [r8]
 80013ee:	4e8e      	ldr	r6, [pc, #568]	; (8001628 <_svfiprintf_r+0x260>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	2220      	movs	r2, #32
 80013f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80013f6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 80013fa:	2701      	movs	r7, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8084 	beq.w	800150a <_svfiprintf_r+0x142>
 8001402:	2b25      	cmp	r3, #37	; 0x25
 8001404:	f000 80f6 	beq.w	80015f4 <_svfiprintf_r+0x22c>
 8001408:	4645      	mov	r5, r8
 800140a:	e003      	b.n	8001414 <_svfiprintf_r+0x4c>
 800140c:	2b25      	cmp	r3, #37	; 0x25
 800140e:	f000 8086 	beq.w	800151e <_svfiprintf_r+0x156>
 8001412:	4625      	mov	r5, r4
 8001414:	786b      	ldrb	r3, [r5, #1]
 8001416:	1c6c      	adds	r4, r5, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f7      	bne.n	800140c <_svfiprintf_r+0x44>
 800141c:	ebb4 0a08 	subs.w	sl, r4, r8
 8001420:	d073      	beq.n	800150a <_svfiprintf_r+0x142>
 8001422:	4642      	mov	r2, r8
 8001424:	4653      	mov	r3, sl
 8001426:	4659      	mov	r1, fp
 8001428:	9802      	ldr	r0, [sp, #8]
 800142a:	f7ff fef1 	bl	8001210 <__ssputs_r>
 800142e:	3001      	adds	r0, #1
 8001430:	d06b      	beq.n	800150a <_svfiprintf_r+0x142>
 8001432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001434:	786a      	ldrb	r2, [r5, #1]
 8001436:	4453      	add	r3, sl
 8001438:	930b      	str	r3, [sp, #44]	; 0x2c
 800143a:	2a00      	cmp	r2, #0
 800143c:	d065      	beq.n	800150a <_svfiprintf_r+0x142>
 800143e:	2300      	movs	r3, #0
 8001440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001444:	3401      	adds	r4, #1
 8001446:	9306      	str	r3, [sp, #24]
 8001448:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800144c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8001450:	931c      	str	r3, [sp, #112]	; 0x70
 8001452:	9207      	str	r2, [sp, #28]
 8001454:	e005      	b.n	8001462 <_svfiprintf_r+0x9a>
 8001456:	9a06      	ldr	r2, [sp, #24]
 8001458:	fa07 f303 	lsl.w	r3, r7, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	462c      	mov	r4, r5
 8001460:	9306      	str	r3, [sp, #24]
 8001462:	4625      	mov	r5, r4
 8001464:	2205      	movs	r2, #5
 8001466:	f815 1b01 	ldrb.w	r1, [r5], #1
 800146a:	4630      	mov	r0, r6
 800146c:	f000 fac8 	bl	8001a00 <memchr>
 8001470:	46aa      	mov	sl, r5
 8001472:	1b83      	subs	r3, r0, r6
 8001474:	2800      	cmp	r0, #0
 8001476:	d1ee      	bne.n	8001456 <_svfiprintf_r+0x8e>
 8001478:	9b06      	ldr	r3, [sp, #24]
 800147a:	06d9      	lsls	r1, r3, #27
 800147c:	bf44      	itt	mi
 800147e:	2220      	movmi	r2, #32
 8001480:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001484:	7821      	ldrb	r1, [r4, #0]
 8001486:	071a      	lsls	r2, r3, #28
 8001488:	bf44      	itt	mi
 800148a:	222b      	movmi	r2, #43	; 0x2b
 800148c:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001490:	292a      	cmp	r1, #42	; 0x2a
 8001492:	d148      	bne.n	8001526 <_svfiprintf_r+0x15e>
 8001494:	9a05      	ldr	r2, [sp, #20]
 8001496:	6811      	ldr	r1, [r2, #0]
 8001498:	3204      	adds	r2, #4
 800149a:	2900      	cmp	r1, #0
 800149c:	9205      	str	r2, [sp, #20]
 800149e:	db7e      	blt.n	800159e <_svfiprintf_r+0x1d6>
 80014a0:	9109      	str	r1, [sp, #36]	; 0x24
 80014a2:	7861      	ldrb	r1, [r4, #1]
 80014a4:	1ca5      	adds	r5, r4, #2
 80014a6:	292e      	cmp	r1, #46	; 0x2e
 80014a8:	d056      	beq.n	8001558 <_svfiprintf_r+0x190>
 80014aa:	4c60      	ldr	r4, [pc, #384]	; (800162c <_svfiprintf_r+0x264>)
 80014ac:	2203      	movs	r2, #3
 80014ae:	4620      	mov	r0, r4
 80014b0:	f000 faa6 	bl	8001a00 <memchr>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d068      	beq.n	800158a <_svfiprintf_r+0x1c2>
 80014b8:	1b00      	subs	r0, r0, r4
 80014ba:	9b06      	ldr	r3, [sp, #24]
 80014bc:	2440      	movs	r4, #64	; 0x40
 80014be:	fa04 f000 	lsl.w	r0, r4, r0
 80014c2:	4303      	orrs	r3, r0
 80014c4:	9306      	str	r3, [sp, #24]
 80014c6:	f105 0801 	add.w	r8, r5, #1
 80014ca:	7829      	ldrb	r1, [r5, #0]
 80014cc:	4858      	ldr	r0, [pc, #352]	; (8001630 <_svfiprintf_r+0x268>)
 80014ce:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80014d2:	2206      	movs	r2, #6
 80014d4:	f000 fa94 	bl	8001a00 <memchr>
 80014d8:	2800      	cmp	r0, #0
 80014da:	d066      	beq.n	80015aa <_svfiprintf_r+0x1e2>
 80014dc:	4b55      	ldr	r3, [pc, #340]	; (8001634 <_svfiprintf_r+0x26c>)
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d056      	beq.n	8001590 <_svfiprintf_r+0x1c8>
 80014e2:	ab05      	add	r3, sp, #20
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	465a      	mov	r2, fp
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <_svfiprintf_r+0x270>)
 80014ea:	9802      	ldr	r0, [sp, #8]
 80014ec:	a906      	add	r1, sp, #24
 80014ee:	f3af 8000 	nop.w
 80014f2:	4681      	mov	r9, r0
 80014f4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80014f8:	d007      	beq.n	800150a <_svfiprintf_r+0x142>
 80014fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014fc:	444b      	add	r3, r9
 80014fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001500:	f898 3000 	ldrb.w	r3, [r8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f47f af7c 	bne.w	8001402 <_svfiprintf_r+0x3a>
 800150a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800150e:	065b      	lsls	r3, r3, #25
 8001510:	bf54      	ite	pl
 8001512:	980b      	ldrpl	r0, [sp, #44]	; 0x2c
 8001514:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
 8001518:	b01f      	add	sp, #124	; 0x7c
 800151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800151e:	ebb4 0a08 	subs.w	sl, r4, r8
 8001522:	d08c      	beq.n	800143e <_svfiprintf_r+0x76>
 8001524:	e77d      	b.n	8001422 <_svfiprintf_r+0x5a>
 8001526:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800152a:	2a09      	cmp	r2, #9
 800152c:	bf88      	it	hi
 800152e:	46a2      	movhi	sl, r4
 8001530:	d8b9      	bhi.n	80014a6 <_svfiprintf_r+0xde>
 8001532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001534:	e001      	b.n	800153a <_svfiprintf_r+0x172>
 8001536:	462c      	mov	r4, r5
 8001538:	3501      	adds	r5, #1
 800153a:	7829      	ldrb	r1, [r5, #0]
 800153c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001540:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001544:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001548:	2a09      	cmp	r2, #9
 800154a:	46aa      	mov	sl, r5
 800154c:	d9f3      	bls.n	8001536 <_svfiprintf_r+0x16e>
 800154e:	292e      	cmp	r1, #46	; 0x2e
 8001550:	f104 0502 	add.w	r5, r4, #2
 8001554:	9309      	str	r3, [sp, #36]	; 0x24
 8001556:	d1a8      	bne.n	80014aa <_svfiprintf_r+0xe2>
 8001558:	f89a 1001 	ldrb.w	r1, [sl, #1]
 800155c:	292a      	cmp	r1, #42	; 0x2a
 800155e:	d12e      	bne.n	80015be <_svfiprintf_r+0x1f6>
 8001560:	9b05      	ldr	r3, [sp, #20]
 8001562:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	9207      	str	r2, [sp, #28]
 800156a:	3304      	adds	r3, #4
 800156c:	2a00      	cmp	r2, #0
 800156e:	9305      	str	r3, [sp, #20]
 8001570:	f10a 0503 	add.w	r5, sl, #3
 8001574:	f10a 0302 	add.w	r3, sl, #2
 8001578:	db37      	blt.n	80015ea <_svfiprintf_r+0x222>
 800157a:	4c2c      	ldr	r4, [pc, #176]	; (800162c <_svfiprintf_r+0x264>)
 800157c:	2203      	movs	r2, #3
 800157e:	4620      	mov	r0, r4
 8001580:	469a      	mov	sl, r3
 8001582:	f000 fa3d 	bl	8001a00 <memchr>
 8001586:	2800      	cmp	r0, #0
 8001588:	d196      	bne.n	80014b8 <_svfiprintf_r+0xf0>
 800158a:	46a8      	mov	r8, r5
 800158c:	4655      	mov	r5, sl
 800158e:	e79c      	b.n	80014ca <_svfiprintf_r+0x102>
 8001590:	9b05      	ldr	r3, [sp, #20]
 8001592:	3307      	adds	r3, #7
 8001594:	f023 0307 	bic.w	r3, r3, #7
 8001598:	3308      	adds	r3, #8
 800159a:	9305      	str	r3, [sp, #20]
 800159c:	e7ad      	b.n	80014fa <_svfiprintf_r+0x132>
 800159e:	4249      	negs	r1, r1
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	9109      	str	r1, [sp, #36]	; 0x24
 80015a6:	9306      	str	r3, [sp, #24]
 80015a8:	e77b      	b.n	80014a2 <_svfiprintf_r+0xda>
 80015aa:	ab05      	add	r3, sp, #20
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	465a      	mov	r2, fp
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <_svfiprintf_r+0x270>)
 80015b2:	9802      	ldr	r0, [sp, #8]
 80015b4:	a906      	add	r1, sp, #24
 80015b6:	f000 f8d7 	bl	8001768 <_printf_i>
 80015ba:	4681      	mov	r9, r0
 80015bc:	e79a      	b.n	80014f4 <_svfiprintf_r+0x12c>
 80015be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80015c2:	2300      	movs	r3, #0
 80015c4:	2a09      	cmp	r2, #9
 80015c6:	9307      	str	r3, [sp, #28]
 80015c8:	d901      	bls.n	80015ce <_svfiprintf_r+0x206>
 80015ca:	e023      	b.n	8001614 <_svfiprintf_r+0x24c>
 80015cc:	4655      	mov	r5, sl
 80015ce:	7869      	ldrb	r1, [r5, #1]
 80015d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80015d8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80015dc:	2a09      	cmp	r2, #9
 80015de:	f105 0a01 	add.w	sl, r5, #1
 80015e2:	d9f3      	bls.n	80015cc <_svfiprintf_r+0x204>
 80015e4:	3502      	adds	r5, #2
 80015e6:	9307      	str	r3, [sp, #28]
 80015e8:	e75f      	b.n	80014aa <_svfiprintf_r+0xe2>
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ee:	469a      	mov	sl, r3
 80015f0:	9207      	str	r2, [sp, #28]
 80015f2:	e75a      	b.n	80014aa <_svfiprintf_r+0xe2>
 80015f4:	4644      	mov	r4, r8
 80015f6:	e722      	b.n	800143e <_svfiprintf_r+0x76>
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	9303      	str	r3, [sp, #12]
 80015fc:	f000 fb0e 	bl	8001c1c <_malloc_r>
 8001600:	9b03      	ldr	r3, [sp, #12]
 8001602:	f8cb 0000 	str.w	r0, [fp]
 8001606:	f8cb 0010 	str.w	r0, [fp, #16]
 800160a:	b130      	cbz	r0, 800161a <_svfiprintf_r+0x252>
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	f8cb 2014 	str.w	r2, [fp, #20]
 8001612:	e6e6      	b.n	80013e2 <_svfiprintf_r+0x1a>
 8001614:	46aa      	mov	sl, r5
 8001616:	3501      	adds	r5, #1
 8001618:	e747      	b.n	80014aa <_svfiprintf_r+0xe2>
 800161a:	9a02      	ldr	r2, [sp, #8]
 800161c:	230c      	movs	r3, #12
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001624:	e778      	b.n	8001518 <_svfiprintf_r+0x150>
 8001626:	bf00      	nop
 8001628:	0800df68 	.word	0x0800df68
 800162c:	0800df70 	.word	0x0800df70
 8001630:	0800df74 	.word	0x0800df74
 8001634:	00000000 	.word	0x00000000
 8001638:	08001211 	.word	0x08001211

0800163c <_printf_common>:
 800163c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001640:	460c      	mov	r4, r1
 8001642:	4691      	mov	r9, r2
 8001644:	690a      	ldr	r2, [r1, #16]
 8001646:	6889      	ldr	r1, [r1, #8]
 8001648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800164c:	428a      	cmp	r2, r1
 800164e:	bfb8      	it	lt
 8001650:	460a      	movlt	r2, r1
 8001652:	f8c9 2000 	str.w	r2, [r9]
 8001656:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 800165a:	4606      	mov	r6, r0
 800165c:	461f      	mov	r7, r3
 800165e:	b111      	cbz	r1, 8001666 <_printf_common+0x2a>
 8001660:	3201      	adds	r2, #1
 8001662:	f8c9 2000 	str.w	r2, [r9]
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	0699      	lsls	r1, r3, #26
 800166a:	d55c      	bpl.n	8001726 <_printf_common+0xea>
 800166c:	f8d9 2000 	ldr.w	r2, [r9]
 8001670:	3202      	adds	r2, #2
 8001672:	f8c9 2000 	str.w	r2, [r9]
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	f013 0f06 	tst.w	r3, #6
 800167c:	4619      	mov	r1, r3
 800167e:	d11d      	bne.n	80016bc <_printf_common+0x80>
 8001680:	68e1      	ldr	r1, [r4, #12]
 8001682:	1a8a      	subs	r2, r1, r2
 8001684:	2a00      	cmp	r2, #0
 8001686:	bfd8      	it	le
 8001688:	4619      	movle	r1, r3
 800168a:	dd17      	ble.n	80016bc <_printf_common+0x80>
 800168c:	f104 0a19 	add.w	sl, r4, #25
 8001690:	2500      	movs	r5, #0
 8001692:	e005      	b.n	80016a0 <_printf_common+0x64>
 8001694:	68e3      	ldr	r3, [r4, #12]
 8001696:	f8d9 2000 	ldr.w	r2, [r9]
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	42ab      	cmp	r3, r5
 800169e:	dd0c      	ble.n	80016ba <_printf_common+0x7e>
 80016a0:	2301      	movs	r3, #1
 80016a2:	4652      	mov	r2, sl
 80016a4:	4639      	mov	r1, r7
 80016a6:	4630      	mov	r0, r6
 80016a8:	47c0      	blx	r8
 80016aa:	3001      	adds	r0, #1
 80016ac:	f105 0501 	add.w	r5, r5, #1
 80016b0:	d1f0      	bne.n	8001694 <_printf_common+0x58>
 80016b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016ba:	6821      	ldr	r1, [r4, #0]
 80016bc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80016c0:	3300      	adds	r3, #0
 80016c2:	bf18      	it	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	068a      	lsls	r2, r1, #26
 80016c8:	d50a      	bpl.n	80016e0 <_printf_common+0xa4>
 80016ca:	18e1      	adds	r1, r4, r3
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	2030      	movs	r0, #48	; 0x30
 80016d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016d4:	4422      	add	r2, r4
 80016d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016de:	3302      	adds	r3, #2
 80016e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80016e4:	4639      	mov	r1, r7
 80016e6:	4630      	mov	r0, r6
 80016e8:	47c0      	blx	r8
 80016ea:	3001      	adds	r0, #1
 80016ec:	d0e1      	beq.n	80016b2 <_printf_common+0x76>
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	68a2      	ldr	r2, [r4, #8]
 80016f2:	6921      	ldr	r1, [r4, #16]
 80016f4:	f003 0306 	and.w	r3, r3, #6
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d01d      	beq.n	8001738 <_printf_common+0xfc>
 80016fc:	428a      	cmp	r2, r1
 80016fe:	dd26      	ble.n	800174e <_printf_common+0x112>
 8001700:	f04f 0900 	mov.w	r9, #0
 8001704:	1a52      	subs	r2, r2, r1
 8001706:	4491      	add	r9, r2
 8001708:	341a      	adds	r4, #26
 800170a:	2500      	movs	r5, #0
 800170c:	e001      	b.n	8001712 <_printf_common+0xd6>
 800170e:	454d      	cmp	r5, r9
 8001710:	da1d      	bge.n	800174e <_printf_common+0x112>
 8001712:	2301      	movs	r3, #1
 8001714:	4622      	mov	r2, r4
 8001716:	4639      	mov	r1, r7
 8001718:	4630      	mov	r0, r6
 800171a:	47c0      	blx	r8
 800171c:	3001      	adds	r0, #1
 800171e:	f105 0501 	add.w	r5, r5, #1
 8001722:	d1f4      	bne.n	800170e <_printf_common+0xd2>
 8001724:	e7c5      	b.n	80016b2 <_printf_common+0x76>
 8001726:	f013 0f06 	tst.w	r3, #6
 800172a:	d013      	beq.n	8001754 <_printf_common+0x118>
 800172c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001730:	3300      	adds	r3, #0
 8001732:	bf18      	it	ne
 8001734:	2301      	movne	r3, #1
 8001736:	e7d3      	b.n	80016e0 <_printf_common+0xa4>
 8001738:	f8d9 0000 	ldr.w	r0, [r9]
 800173c:	68e3      	ldr	r3, [r4, #12]
 800173e:	428a      	cmp	r2, r1
 8001740:	eba3 0300 	sub.w	r3, r3, r0
 8001744:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
 8001748:	dcdc      	bgt.n	8001704 <_printf_common+0xc8>
 800174a:	2b00      	cmp	r3, #0
 800174c:	dcdc      	bgt.n	8001708 <_printf_common+0xcc>
 800174e:	2000      	movs	r0, #0
 8001750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001754:	68e1      	ldr	r1, [r4, #12]
 8001756:	f8d9 2000 	ldr.w	r2, [r9]
 800175a:	1a8a      	subs	r2, r1, r2
 800175c:	2a00      	cmp	r2, #0
 800175e:	bfd8      	it	le
 8001760:	4619      	movle	r1, r3
 8001762:	dc93      	bgt.n	800168c <_printf_common+0x50>
 8001764:	e7aa      	b.n	80016bc <_printf_common+0x80>
 8001766:	bf00      	nop

08001768 <_printf_i>:
 8001768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800176c:	460c      	mov	r4, r1
 800176e:	7e09      	ldrb	r1, [r1, #24]
 8001770:	b085      	sub	sp, #20
 8001772:	296e      	cmp	r1, #110	; 0x6e
 8001774:	4606      	mov	r6, r0
 8001776:	4617      	mov	r7, r2
 8001778:	980c      	ldr	r0, [sp, #48]	; 0x30
 800177a:	4698      	mov	r8, r3
 800177c:	f104 0e43 	add.w	lr, r4, #67	; 0x43
 8001780:	d06d      	beq.n	800185e <_printf_i+0xf6>
 8001782:	d939      	bls.n	80017f8 <_printf_i+0x90>
 8001784:	2973      	cmp	r1, #115	; 0x73
 8001786:	f000 80f6 	beq.w	8001976 <_printf_i+0x20e>
 800178a:	d944      	bls.n	8001816 <_printf_i+0xae>
 800178c:	2975      	cmp	r1, #117	; 0x75
 800178e:	f000 8104 	beq.w	800199a <_printf_i+0x232>
 8001792:	2978      	cmp	r1, #120	; 0x78
 8001794:	f040 8111 	bne.w	80019ba <_printf_i+0x252>
 8001798:	2378      	movs	r3, #120	; 0x78
 800179a:	6822      	ldr	r2, [r4, #0]
 800179c:	f8df c258 	ldr.w	ip, [pc, #600]	; 80019f8 <_printf_i+0x290>
 80017a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80017a4:	6801      	ldr	r1, [r0, #0]
 80017a6:	0615      	lsls	r5, r2, #24
 80017a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017ac:	6001      	str	r1, [r0, #0]
 80017ae:	f140 80a1 	bpl.w	80018f4 <_printf_i+0x18c>
 80017b2:	07d1      	lsls	r1, r2, #31
 80017b4:	bf44      	itt	mi
 80017b6:	f042 0220 	orrmi.w	r2, r2, #32
 80017ba:	6022      	strmi	r2, [r4, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8093 	beq.w	80018e8 <_printf_i+0x180>
 80017c2:	2210      	movs	r2, #16
 80017c4:	2100      	movs	r1, #0
 80017c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017ca:	6860      	ldr	r0, [r4, #4]
 80017cc:	60a0      	str	r0, [r4, #8]
 80017ce:	2800      	cmp	r0, #0
 80017d0:	f2c0 80c8 	blt.w	8001964 <_printf_i+0x1fc>
 80017d4:	6821      	ldr	r1, [r4, #0]
 80017d6:	f021 0104 	bic.w	r1, r1, #4
 80017da:	6021      	str	r1, [r4, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 80a3 	bne.w	8001928 <_printf_i+0x1c0>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	f040 80c0 	bne.w	8001968 <_printf_i+0x200>
 80017e8:	4675      	mov	r5, lr
 80017ea:	2a08      	cmp	r2, #8
 80017ec:	f000 80ac 	beq.w	8001948 <_printf_i+0x1e0>
 80017f0:	ebae 0305 	sub.w	r3, lr, r5
 80017f4:	6123      	str	r3, [r4, #16]
 80017f6:	e041      	b.n	800187c <_printf_i+0x114>
 80017f8:	2963      	cmp	r1, #99	; 0x63
 80017fa:	f000 80e5 	beq.w	80019c8 <_printf_i+0x260>
 80017fe:	d81a      	bhi.n	8001836 <_printf_i+0xce>
 8001800:	2900      	cmp	r1, #0
 8001802:	d038      	beq.n	8001876 <_printf_i+0x10e>
 8001804:	2958      	cmp	r1, #88	; 0x58
 8001806:	f040 80d8 	bne.w	80019ba <_printf_i+0x252>
 800180a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800180e:	6822      	ldr	r2, [r4, #0]
 8001810:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 80019fc <_printf_i+0x294>
 8001814:	e7c6      	b.n	80017a4 <_printf_i+0x3c>
 8001816:	296f      	cmp	r1, #111	; 0x6f
 8001818:	f000 80bf 	beq.w	800199a <_printf_i+0x232>
 800181c:	2970      	cmp	r1, #112	; 0x70
 800181e:	f040 80cc 	bne.w	80019ba <_printf_i+0x252>
 8001822:	6822      	ldr	r2, [r4, #0]
 8001824:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80019f8 <_printf_i+0x290>
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	2378      	movs	r3, #120	; 0x78
 800182e:	6022      	str	r2, [r4, #0]
 8001830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001834:	e7b6      	b.n	80017a4 <_printf_i+0x3c>
 8001836:	2964      	cmp	r1, #100	; 0x64
 8001838:	d002      	beq.n	8001840 <_printf_i+0xd8>
 800183a:	2969      	cmp	r1, #105	; 0x69
 800183c:	f040 80bd 	bne.w	80019ba <_printf_i+0x252>
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	6803      	ldr	r3, [r0, #0]
 8001844:	0611      	lsls	r1, r2, #24
 8001846:	f103 0504 	add.w	r5, r3, #4
 800184a:	d557      	bpl.n	80018fc <_printf_i+0x194>
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	6005      	str	r5, [r0, #0]
 8001850:	460b      	mov	r3, r1
 8001852:	2900      	cmp	r1, #0
 8001854:	db59      	blt.n	800190a <_printf_i+0x1a2>
 8001856:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80019fc <_printf_i+0x294>
 800185a:	220a      	movs	r2, #10
 800185c:	e7b5      	b.n	80017ca <_printf_i+0x62>
 800185e:	6803      	ldr	r3, [r0, #0]
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	6961      	ldr	r1, [r4, #20]
 8001864:	1d1d      	adds	r5, r3, #4
 8001866:	6005      	str	r5, [r0, #0]
 8001868:	0615      	lsls	r5, r2, #24
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	d402      	bmi.n	8001874 <_printf_i+0x10c>
 800186e:	0650      	lsls	r0, r2, #25
 8001870:	f100 80bd 	bmi.w	80019ee <_printf_i+0x286>
 8001874:	6019      	str	r1, [r3, #0]
 8001876:	2300      	movs	r3, #0
 8001878:	4675      	mov	r5, lr
 800187a:	6123      	str	r3, [r4, #16]
 800187c:	f8cd 8000 	str.w	r8, [sp]
 8001880:	463b      	mov	r3, r7
 8001882:	aa03      	add	r2, sp, #12
 8001884:	4621      	mov	r1, r4
 8001886:	4630      	mov	r0, r6
 8001888:	f7ff fed8 	bl	800163c <_printf_common>
 800188c:	3001      	adds	r0, #1
 800188e:	d020      	beq.n	80018d2 <_printf_i+0x16a>
 8001890:	462a      	mov	r2, r5
 8001892:	6923      	ldr	r3, [r4, #16]
 8001894:	4639      	mov	r1, r7
 8001896:	4630      	mov	r0, r6
 8001898:	47c0      	blx	r8
 800189a:	3001      	adds	r0, #1
 800189c:	d019      	beq.n	80018d2 <_printf_i+0x16a>
 800189e:	6822      	ldr	r2, [r4, #0]
 80018a0:	9803      	ldr	r0, [sp, #12]
 80018a2:	68e3      	ldr	r3, [r4, #12]
 80018a4:	0792      	lsls	r2, r2, #30
 80018a6:	d519      	bpl.n	80018dc <_printf_i+0x174>
 80018a8:	1a1a      	subs	r2, r3, r0
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	dd16      	ble.n	80018dc <_printf_i+0x174>
 80018ae:	f104 0919 	add.w	r9, r4, #25
 80018b2:	2500      	movs	r5, #0
 80018b4:	e004      	b.n	80018c0 <_printf_i+0x158>
 80018b6:	68e3      	ldr	r3, [r4, #12]
 80018b8:	9803      	ldr	r0, [sp, #12]
 80018ba:	1a1a      	subs	r2, r3, r0
 80018bc:	42aa      	cmp	r2, r5
 80018be:	dd0d      	ble.n	80018dc <_printf_i+0x174>
 80018c0:	2301      	movs	r3, #1
 80018c2:	464a      	mov	r2, r9
 80018c4:	4639      	mov	r1, r7
 80018c6:	4630      	mov	r0, r6
 80018c8:	47c0      	blx	r8
 80018ca:	3001      	adds	r0, #1
 80018cc:	f105 0501 	add.w	r5, r5, #1
 80018d0:	d1f1      	bne.n	80018b6 <_printf_i+0x14e>
 80018d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d6:	b005      	add	sp, #20
 80018d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018dc:	4298      	cmp	r0, r3
 80018de:	bfb8      	it	lt
 80018e0:	4618      	movlt	r0, r3
 80018e2:	b005      	add	sp, #20
 80018e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018e8:	6822      	ldr	r2, [r4, #0]
 80018ea:	f022 0220 	bic.w	r2, r2, #32
 80018ee:	6022      	str	r2, [r4, #0]
 80018f0:	2210      	movs	r2, #16
 80018f2:	e767      	b.n	80017c4 <_printf_i+0x5c>
 80018f4:	0650      	lsls	r0, r2, #25
 80018f6:	bf48      	it	mi
 80018f8:	b29b      	uxthmi	r3, r3
 80018fa:	e75a      	b.n	80017b2 <_printf_i+0x4a>
 80018fc:	0651      	lsls	r1, r2, #25
 80018fe:	d5a5      	bpl.n	800184c <_printf_i+0xe4>
 8001900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001904:	6005      	str	r5, [r0, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	e7a3      	b.n	8001852 <_printf_i+0xea>
 800190a:	6861      	ldr	r1, [r4, #4]
 800190c:	60a1      	str	r1, [r4, #8]
 800190e:	202d      	movs	r0, #45	; 0x2d
 8001910:	2900      	cmp	r1, #0
 8001912:	f1c3 0300 	rsb	r3, r3, #0
 8001916:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800191a:	db02      	blt.n	8001922 <_printf_i+0x1ba>
 800191c:	f022 0204 	bic.w	r2, r2, #4
 8001920:	6022      	str	r2, [r4, #0]
 8001922:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80019fc <_printf_i+0x294>
 8001926:	220a      	movs	r2, #10
 8001928:	4675      	mov	r5, lr
 800192a:	e000      	b.n	800192e <_printf_i+0x1c6>
 800192c:	460b      	mov	r3, r1
 800192e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001932:	fb02 3011 	mls	r0, r2, r1, r3
 8001936:	4293      	cmp	r3, r2
 8001938:	f81c 0000 	ldrb.w	r0, [ip, r0]
 800193c:	f805 0d01 	strb.w	r0, [r5, #-1]!
 8001940:	d2f4      	bcs.n	800192c <_printf_i+0x1c4>
 8001942:	2a08      	cmp	r2, #8
 8001944:	f47f af54 	bne.w	80017f0 <_printf_i+0x88>
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	07db      	lsls	r3, r3, #31
 800194c:	f57f af50 	bpl.w	80017f0 <_printf_i+0x88>
 8001950:	6862      	ldr	r2, [r4, #4]
 8001952:	6923      	ldr	r3, [r4, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	f73f af4b 	bgt.w	80017f0 <_printf_i+0x88>
 800195a:	2330      	movs	r3, #48	; 0x30
 800195c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8001960:	3d01      	subs	r5, #1
 8001962:	e745      	b.n	80017f0 <_printf_i+0x88>
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1df      	bne.n	8001928 <_printf_i+0x1c0>
 8001968:	f89c 3000 	ldrb.w	r3, [ip]
 800196c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001974:	e739      	b.n	80017ea <_printf_i+0x82>
 8001976:	6803      	ldr	r3, [r0, #0]
 8001978:	6862      	ldr	r2, [r4, #4]
 800197a:	1d19      	adds	r1, r3, #4
 800197c:	6001      	str	r1, [r0, #0]
 800197e:	681d      	ldr	r5, [r3, #0]
 8001980:	2100      	movs	r1, #0
 8001982:	4628      	mov	r0, r5
 8001984:	f000 f83c 	bl	8001a00 <memchr>
 8001988:	2800      	cmp	r0, #0
 800198a:	d032      	beq.n	80019f2 <_printf_i+0x28a>
 800198c:	1b40      	subs	r0, r0, r5
 800198e:	6060      	str	r0, [r4, #4]
 8001990:	6120      	str	r0, [r4, #16]
 8001992:	2300      	movs	r3, #0
 8001994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001998:	e770      	b.n	800187c <_printf_i+0x114>
 800199a:	6822      	ldr	r2, [r4, #0]
 800199c:	6803      	ldr	r3, [r0, #0]
 800199e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80019a2:	f103 0504 	add.w	r5, r3, #4
 80019a6:	d01a      	beq.n	80019de <_printf_i+0x276>
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6005      	str	r5, [r0, #0]
 80019ac:	296f      	cmp	r1, #111	; 0x6f
 80019ae:	bf0c      	ite	eq
 80019b0:	2208      	moveq	r2, #8
 80019b2:	220a      	movne	r2, #10
 80019b4:	f8df c044 	ldr.w	ip, [pc, #68]	; 80019fc <_printf_i+0x294>
 80019b8:	e704      	b.n	80017c4 <_printf_i+0x5c>
 80019ba:	2301      	movs	r3, #1
 80019bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80019c0:	6123      	str	r3, [r4, #16]
 80019c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019c6:	e7e4      	b.n	8001992 <_printf_i+0x22a>
 80019c8:	6803      	ldr	r3, [r0, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	1d19      	adds	r1, r3, #4
 80019ce:	2301      	movs	r3, #1
 80019d0:	6001      	str	r1, [r0, #0]
 80019d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019d6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80019da:	6123      	str	r3, [r4, #16]
 80019dc:	e7d9      	b.n	8001992 <_printf_i+0x22a>
 80019de:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019e2:	bf0d      	iteet	eq
 80019e4:	681b      	ldreq	r3, [r3, #0]
 80019e6:	6005      	strne	r5, [r0, #0]
 80019e8:	881b      	ldrhne	r3, [r3, #0]
 80019ea:	6005      	streq	r5, [r0, #0]
 80019ec:	e7de      	b.n	80019ac <_printf_i+0x244>
 80019ee:	8019      	strh	r1, [r3, #0]
 80019f0:	e741      	b.n	8001876 <_printf_i+0x10e>
 80019f2:	6860      	ldr	r0, [r4, #4]
 80019f4:	e7cc      	b.n	8001990 <_printf_i+0x228>
 80019f6:	bf00      	nop
 80019f8:	0800df90 	.word	0x0800df90
 80019fc:	0800df7c 	.word	0x0800df7c

08001a00 <memchr>:
 8001a00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001a04:	2a10      	cmp	r2, #16
 8001a06:	db2b      	blt.n	8001a60 <memchr+0x60>
 8001a08:	f010 0f07 	tst.w	r0, #7
 8001a0c:	d008      	beq.n	8001a20 <memchr+0x20>
 8001a0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001a12:	3a01      	subs	r2, #1
 8001a14:	428b      	cmp	r3, r1
 8001a16:	d02d      	beq.n	8001a74 <memchr+0x74>
 8001a18:	f010 0f07 	tst.w	r0, #7
 8001a1c:	b342      	cbz	r2, 8001a70 <memchr+0x70>
 8001a1e:	d1f6      	bne.n	8001a0e <memchr+0xe>
 8001a20:	b4f0      	push	{r4, r5, r6, r7}
 8001a22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001a26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001a2a:	f022 0407 	bic.w	r4, r2, #7
 8001a2e:	f07f 0700 	mvns.w	r7, #0
 8001a32:	2300      	movs	r3, #0
 8001a34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001a38:	3c08      	subs	r4, #8
 8001a3a:	ea85 0501 	eor.w	r5, r5, r1
 8001a3e:	ea86 0601 	eor.w	r6, r6, r1
 8001a42:	fa85 f547 	uadd8	r5, r5, r7
 8001a46:	faa3 f587 	sel	r5, r3, r7
 8001a4a:	fa86 f647 	uadd8	r6, r6, r7
 8001a4e:	faa5 f687 	sel	r6, r5, r7
 8001a52:	b98e      	cbnz	r6, 8001a78 <memchr+0x78>
 8001a54:	d1ee      	bne.n	8001a34 <memchr+0x34>
 8001a56:	bcf0      	pop	{r4, r5, r6, r7}
 8001a58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001a5c:	f002 0207 	and.w	r2, r2, #7
 8001a60:	b132      	cbz	r2, 8001a70 <memchr+0x70>
 8001a62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001a66:	3a01      	subs	r2, #1
 8001a68:	ea83 0301 	eor.w	r3, r3, r1
 8001a6c:	b113      	cbz	r3, 8001a74 <memchr+0x74>
 8001a6e:	d1f8      	bne.n	8001a62 <memchr+0x62>
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr
 8001a74:	3801      	subs	r0, #1
 8001a76:	4770      	bx	lr
 8001a78:	2d00      	cmp	r5, #0
 8001a7a:	bf06      	itte	eq
 8001a7c:	4635      	moveq	r5, r6
 8001a7e:	3803      	subeq	r0, #3
 8001a80:	3807      	subne	r0, #7
 8001a82:	f015 0f01 	tst.w	r5, #1
 8001a86:	d107      	bne.n	8001a98 <memchr+0x98>
 8001a88:	3001      	adds	r0, #1
 8001a8a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001a8e:	bf02      	ittt	eq
 8001a90:	3001      	addeq	r0, #1
 8001a92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001a96:	3001      	addeq	r0, #1
 8001a98:	bcf0      	pop	{r4, r5, r6, r7}
 8001a9a:	3801      	subs	r0, #1
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <memmove>:
 8001aa0:	4288      	cmp	r0, r1
 8001aa2:	b4f0      	push	{r4, r5, r6, r7}
 8001aa4:	d90d      	bls.n	8001ac2 <memmove+0x22>
 8001aa6:	188b      	adds	r3, r1, r2
 8001aa8:	4283      	cmp	r3, r0
 8001aaa:	d90a      	bls.n	8001ac2 <memmove+0x22>
 8001aac:	1884      	adds	r4, r0, r2
 8001aae:	b132      	cbz	r2, 8001abe <memmove+0x1e>
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001aba:	4299      	cmp	r1, r3
 8001abc:	d1f9      	bne.n	8001ab2 <memmove+0x12>
 8001abe:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	2a0f      	cmp	r2, #15
 8001ac4:	d80e      	bhi.n	8001ae4 <memmove+0x44>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	1e54      	subs	r4, r2, #1
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	d0f7      	beq.n	8001abe <memmove+0x1e>
 8001ace:	3401      	adds	r4, #1
 8001ad0:	440c      	add	r4, r1
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ad8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001adc:	42a1      	cmp	r1, r4
 8001ade:	d1f9      	bne.n	8001ad4 <memmove+0x34>
 8001ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	ea40 0301 	orr.w	r3, r0, r1
 8001ae8:	079b      	lsls	r3, r3, #30
 8001aea:	d13b      	bne.n	8001b64 <memmove+0xc4>
 8001aec:	f1a2 0710 	sub.w	r7, r2, #16
 8001af0:	093f      	lsrs	r7, r7, #4
 8001af2:	f101 0620 	add.w	r6, r1, #32
 8001af6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8001afa:	f101 0310 	add.w	r3, r1, #16
 8001afe:	f100 0410 	add.w	r4, r0, #16
 8001b02:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8001b06:	f844 5c10 	str.w	r5, [r4, #-16]
 8001b0a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8001b0e:	f844 5c0c 	str.w	r5, [r4, #-12]
 8001b12:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8001b16:	f844 5c08 	str.w	r5, [r4, #-8]
 8001b1a:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8001b1e:	f844 5c04 	str.w	r5, [r4, #-4]
 8001b22:	3310      	adds	r3, #16
 8001b24:	42b3      	cmp	r3, r6
 8001b26:	f104 0410 	add.w	r4, r4, #16
 8001b2a:	d1ea      	bne.n	8001b02 <memmove+0x62>
 8001b2c:	1c7b      	adds	r3, r7, #1
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	f012 0f0c 	tst.w	r2, #12
 8001b34:	4419      	add	r1, r3
 8001b36:	f002 050f 	and.w	r5, r2, #15
 8001b3a:	4403      	add	r3, r0
 8001b3c:	d015      	beq.n	8001b6a <memmove+0xca>
 8001b3e:	3d04      	subs	r5, #4
 8001b40:	08ad      	lsrs	r5, r5, #2
 8001b42:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 8001b46:	1f1c      	subs	r4, r3, #4
 8001b48:	460e      	mov	r6, r1
 8001b4a:	f856 7b04 	ldr.w	r7, [r6], #4
 8001b4e:	f844 7f04 	str.w	r7, [r4, #4]!
 8001b52:	4564      	cmp	r4, ip
 8001b54:	d1f9      	bne.n	8001b4a <memmove+0xaa>
 8001b56:	3501      	adds	r5, #1
 8001b58:	00ad      	lsls	r5, r5, #2
 8001b5a:	442b      	add	r3, r5
 8001b5c:	4429      	add	r1, r5
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	e7b1      	b.n	8001ac8 <memmove+0x28>
 8001b64:	1e54      	subs	r4, r2, #1
 8001b66:	4603      	mov	r3, r0
 8001b68:	e7b1      	b.n	8001ace <memmove+0x2e>
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	e7ac      	b.n	8001ac8 <memmove+0x28>
 8001b6e:	bf00      	nop

08001b70 <_free_r>:
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d03c      	beq.n	8001bee <_free_r+0x7e>
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b7a:	1f0c      	subs	r4, r1, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bfb8      	it	lt
 8001b80:	18e4      	addlt	r4, r4, r3
 8001b82:	4605      	mov	r5, r0
 8001b84:	f000 f8e6 	bl	8001d54 <__malloc_lock>
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <_free_r+0xa8>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	b12a      	cbz	r2, 8001b9a <_free_r+0x2a>
 8001b8e:	42a2      	cmp	r2, r4
 8001b90:	d90d      	bls.n	8001bae <_free_r+0x3e>
 8001b92:	6821      	ldr	r1, [r4, #0]
 8001b94:	1860      	adds	r0, r4, r1
 8001b96:	4282      	cmp	r2, r0
 8001b98:	d023      	beq.n	8001be2 <_free_r+0x72>
 8001b9a:	6062      	str	r2, [r4, #4]
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	601c      	str	r4, [r3, #0]
 8001ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ba4:	f000 b8d8 	b.w	8001d58 <__malloc_unlock>
 8001ba8:	42a3      	cmp	r3, r4
 8001baa:	d803      	bhi.n	8001bb4 <_free_r+0x44>
 8001bac:	461a      	mov	r2, r3
 8001bae:	6853      	ldr	r3, [r2, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f9      	bne.n	8001ba8 <_free_r+0x38>
 8001bb4:	6811      	ldr	r1, [r2, #0]
 8001bb6:	1850      	adds	r0, r2, r1
 8001bb8:	42a0      	cmp	r0, r4
 8001bba:	d019      	beq.n	8001bf0 <_free_r+0x80>
 8001bbc:	d824      	bhi.n	8001c08 <_free_r+0x98>
 8001bbe:	6821      	ldr	r1, [r4, #0]
 8001bc0:	1860      	adds	r0, r4, r1
 8001bc2:	4283      	cmp	r3, r0
 8001bc4:	d006      	beq.n	8001bd4 <_free_r+0x64>
 8001bc6:	6063      	str	r3, [r4, #4]
 8001bc8:	6054      	str	r4, [r2, #4]
 8001bca:	4628      	mov	r0, r5
 8001bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bd0:	f000 b8c2 	b.w	8001d58 <__malloc_unlock>
 8001bd4:	e9d3 0300 	ldrd	r0, r3, [r3]
 8001bd8:	4401      	add	r1, r0
 8001bda:	6063      	str	r3, [r4, #4]
 8001bdc:	6021      	str	r1, [r4, #0]
 8001bde:	6054      	str	r4, [r2, #4]
 8001be0:	e7f3      	b.n	8001bca <_free_r+0x5a>
 8001be2:	e9d2 0200 	ldrd	r0, r2, [r2]
 8001be6:	4401      	add	r1, r0
 8001be8:	6062      	str	r2, [r4, #4]
 8001bea:	6021      	str	r1, [r4, #0]
 8001bec:	e7d6      	b.n	8001b9c <_free_r+0x2c>
 8001bee:	4770      	bx	lr
 8001bf0:	6820      	ldr	r0, [r4, #0]
 8001bf2:	4401      	add	r1, r0
 8001bf4:	1850      	adds	r0, r2, r1
 8001bf6:	4283      	cmp	r3, r0
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	d1e6      	bne.n	8001bca <_free_r+0x5a>
 8001bfc:	e9d3 0300 	ldrd	r0, r3, [r3]
 8001c00:	4401      	add	r1, r0
 8001c02:	6053      	str	r3, [r2, #4]
 8001c04:	6011      	str	r1, [r2, #0]
 8001c06:	e7e0      	b.n	8001bca <_free_r+0x5a>
 8001c08:	230c      	movs	r3, #12
 8001c0a:	602b      	str	r3, [r5, #0]
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c12:	f000 b8a1 	b.w	8001d58 <__malloc_unlock>
 8001c16:	bf00      	nop
 8001c18:	200000a0 	.word	0x200000a0

08001c1c <_malloc_r>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	1ccd      	adds	r5, r1, #3
 8001c20:	f025 0503 	bic.w	r5, r5, #3
 8001c24:	3508      	adds	r5, #8
 8001c26:	2d0c      	cmp	r5, #12
 8001c28:	bf38      	it	cc
 8001c2a:	250c      	movcc	r5, #12
 8001c2c:	2d00      	cmp	r5, #0
 8001c2e:	4606      	mov	r6, r0
 8001c30:	db33      	blt.n	8001c9a <_malloc_r+0x7e>
 8001c32:	42a9      	cmp	r1, r5
 8001c34:	d831      	bhi.n	8001c9a <_malloc_r+0x7e>
 8001c36:	4f2a      	ldr	r7, [pc, #168]	; (8001ce0 <_malloc_r+0xc4>)
 8001c38:	f000 f88c 	bl	8001d54 <__malloc_lock>
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b152      	cbz	r2, 8001c56 <_malloc_r+0x3a>
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	1b5b      	subs	r3, r3, r5
 8001c44:	d404      	bmi.n	8001c50 <_malloc_r+0x34>
 8001c46:	e03f      	b.n	8001cc8 <_malloc_r+0xac>
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	1b5b      	subs	r3, r3, r5
 8001c4c:	d529      	bpl.n	8001ca2 <_malloc_r+0x86>
 8001c4e:	4622      	mov	r2, r4
 8001c50:	6854      	ldr	r4, [r2, #4]
 8001c52:	2c00      	cmp	r4, #0
 8001c54:	d1f8      	bne.n	8001c48 <_malloc_r+0x2c>
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	2900      	cmp	r1, #0
 8001c5a:	d03b      	beq.n	8001cd4 <_malloc_r+0xb8>
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	4630      	mov	r0, r6
 8001c60:	f000 f866 	bl	8001d30 <_sbrk_r>
 8001c64:	1c43      	adds	r3, r0, #1
 8001c66:	d028      	beq.n	8001cba <_malloc_r+0x9e>
 8001c68:	1cc4      	adds	r4, r0, #3
 8001c6a:	f024 0403 	bic.w	r4, r4, #3
 8001c6e:	42a0      	cmp	r0, r4
 8001c70:	d005      	beq.n	8001c7e <_malloc_r+0x62>
 8001c72:	1a21      	subs	r1, r4, r0
 8001c74:	4630      	mov	r0, r6
 8001c76:	f000 f85b 	bl	8001d30 <_sbrk_r>
 8001c7a:	3001      	adds	r0, #1
 8001c7c:	d01d      	beq.n	8001cba <_malloc_r+0x9e>
 8001c7e:	6025      	str	r5, [r4, #0]
 8001c80:	4630      	mov	r0, r6
 8001c82:	f000 f869 	bl	8001d58 <__malloc_unlock>
 8001c86:	f104 000b 	add.w	r0, r4, #11
 8001c8a:	f020 0007 	bic.w	r0, r0, #7
 8001c8e:	1d23      	adds	r3, r4, #4
 8001c90:	1ac2      	subs	r2, r0, r3
 8001c92:	d001      	beq.n	8001c98 <_malloc_r+0x7c>
 8001c94:	1a1b      	subs	r3, r3, r0
 8001c96:	50a3      	str	r3, [r4, r2]
 8001c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	6032      	str	r2, [r6, #0]
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ca2:	2b0b      	cmp	r3, #11
 8001ca4:	d805      	bhi.n	8001cb2 <_malloc_r+0x96>
 8001ca6:	42a2      	cmp	r2, r4
 8001ca8:	6863      	ldr	r3, [r4, #4]
 8001caa:	d011      	beq.n	8001cd0 <_malloc_r+0xb4>
 8001cac:	6053      	str	r3, [r2, #4]
 8001cae:	e7e7      	b.n	8001c80 <_malloc_r+0x64>
 8001cb0:	4614      	mov	r4, r2
 8001cb2:	6023      	str	r3, [r4, #0]
 8001cb4:	441c      	add	r4, r3
 8001cb6:	6025      	str	r5, [r4, #0]
 8001cb8:	e7e2      	b.n	8001c80 <_malloc_r+0x64>
 8001cba:	230c      	movs	r3, #12
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	6033      	str	r3, [r6, #0]
 8001cc0:	f000 f84a 	bl	8001d58 <__malloc_unlock>
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc8:	2b0b      	cmp	r3, #11
 8001cca:	d8f1      	bhi.n	8001cb0 <_malloc_r+0x94>
 8001ccc:	6853      	ldr	r3, [r2, #4]
 8001cce:	4614      	mov	r4, r2
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	e7d5      	b.n	8001c80 <_malloc_r+0x64>
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f000 f82b 	bl	8001d30 <_sbrk_r>
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	e7be      	b.n	8001c5c <_malloc_r+0x40>
 8001cde:	bf00      	nop
 8001ce0:	200000a0 	.word	0x200000a0

08001ce4 <_realloc_r>:
 8001ce4:	b309      	cbz	r1, 8001d2a <_realloc_r+0x46>
 8001ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce8:	4614      	mov	r4, r2
 8001cea:	b1ca      	cbz	r2, 8001d20 <_realloc_r+0x3c>
 8001cec:	4606      	mov	r6, r0
 8001cee:	460d      	mov	r5, r1
 8001cf0:	f000 f834 	bl	8001d5c <_malloc_usable_size_r>
 8001cf4:	42a0      	cmp	r0, r4
 8001cf6:	d302      	bcc.n	8001cfe <_realloc_r+0x1a>
 8001cf8:	462f      	mov	r7, r5
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cfe:	4621      	mov	r1, r4
 8001d00:	4630      	mov	r0, r6
 8001d02:	f7ff ff8b 	bl	8001c1c <_malloc_r>
 8001d06:	4607      	mov	r7, r0
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d0f6      	beq.n	8001cfa <_realloc_r+0x16>
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7ff f954 	bl	8000fbc <memcpy>
 8001d14:	4630      	mov	r0, r6
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7ff ff2a 	bl	8001b70 <_free_r>
 8001d1c:	4638      	mov	r0, r7
 8001d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d20:	4627      	mov	r7, r4
 8001d22:	f7ff ff25 	bl	8001b70 <_free_r>
 8001d26:	4638      	mov	r0, r7
 8001d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	f7ff bf76 	b.w	8001c1c <_malloc_r>

08001d30 <_sbrk_r>:
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	4c07      	ldr	r4, [pc, #28]	; (8001d50 <_sbrk_r+0x20>)
 8001d34:	2300      	movs	r3, #0
 8001d36:	4605      	mov	r5, r0
 8001d38:	4608      	mov	r0, r1
 8001d3a:	6023      	str	r3, [r4, #0]
 8001d3c:	f001 fd10 	bl	8003760 <_sbrk>
 8001d40:	1c43      	adds	r3, r0, #1
 8001d42:	d000      	beq.n	8001d46 <_sbrk_r+0x16>
 8001d44:	bd38      	pop	{r3, r4, r5, pc}
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0fb      	beq.n	8001d44 <_sbrk_r+0x14>
 8001d4c:	602b      	str	r3, [r5, #0]
 8001d4e:	bd38      	pop	{r3, r4, r5, pc}
 8001d50:	20000874 	.word	0x20000874

08001d54 <__malloc_lock>:
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop

08001d58 <__malloc_unlock>:
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <_malloc_usable_size_r>:
 8001d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d60:	1f18      	subs	r0, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bfbc      	itt	lt
 8001d66:	580b      	ldrlt	r3, [r1, r0]
 8001d68:	18c0      	addlt	r0, r0, r3
 8001d6a:	4770      	bx	lr

08001d6c <__aeabi_uldivmod>:
 8001d6c:	b953      	cbnz	r3, 8001d84 <__aeabi_uldivmod+0x18>
 8001d6e:	b94a      	cbnz	r2, 8001d84 <__aeabi_uldivmod+0x18>
 8001d70:	2900      	cmp	r1, #0
 8001d72:	bf08      	it	eq
 8001d74:	2800      	cmpeq	r0, #0
 8001d76:	bf1c      	itt	ne
 8001d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001d7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001d80:	f001 b8c0 	b.w	8002f04 <__aeabi_idiv0>
 8001d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8001d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001d8c:	f000 f806 	bl	8001d9c <__udivmoddi4>
 8001d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001d98:	b004      	add	sp, #16
 8001d9a:	4770      	bx	lr

08001d9c <__udivmoddi4>:
 8001d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001da0:	9d08      	ldr	r5, [sp, #32]
 8001da2:	4604      	mov	r4, r0
 8001da4:	468c      	mov	ip, r1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 8083 	bne.w	8001eb2 <__udivmoddi4+0x116>
 8001dac:	428a      	cmp	r2, r1
 8001dae:	4617      	mov	r7, r2
 8001db0:	d947      	bls.n	8001e42 <__udivmoddi4+0xa6>
 8001db2:	fab2 f282 	clz	r2, r2
 8001db6:	b142      	cbz	r2, 8001dca <__udivmoddi4+0x2e>
 8001db8:	f1c2 0020 	rsb	r0, r2, #32
 8001dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8001dc0:	4091      	lsls	r1, r2
 8001dc2:	4097      	lsls	r7, r2
 8001dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8001dc8:	4094      	lsls	r4, r2
 8001dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001dce:	0c23      	lsrs	r3, r4, #16
 8001dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8001dd4:	fa1f fe87 	uxth.w	lr, r7
 8001dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8001ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001de0:	fb06 f10e 	mul.w	r1, r6, lr
 8001de4:	4299      	cmp	r1, r3
 8001de6:	d909      	bls.n	8001dfc <__udivmoddi4+0x60>
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8001dee:	f080 8119 	bcs.w	8002024 <__udivmoddi4+0x288>
 8001df2:	4299      	cmp	r1, r3
 8001df4:	f240 8116 	bls.w	8002024 <__udivmoddi4+0x288>
 8001df8:	3e02      	subs	r6, #2
 8001dfa:	443b      	add	r3, r7
 8001dfc:	1a5b      	subs	r3, r3, r1
 8001dfe:	b2a4      	uxth	r4, r4
 8001e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8001e04:	fb08 3310 	mls	r3, r8, r0, r3
 8001e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001e10:	45a6      	cmp	lr, r4
 8001e12:	d909      	bls.n	8001e28 <__udivmoddi4+0x8c>
 8001e14:	193c      	adds	r4, r7, r4
 8001e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001e1a:	f080 8105 	bcs.w	8002028 <__udivmoddi4+0x28c>
 8001e1e:	45a6      	cmp	lr, r4
 8001e20:	f240 8102 	bls.w	8002028 <__udivmoddi4+0x28c>
 8001e24:	3802      	subs	r0, #2
 8001e26:	443c      	add	r4, r7
 8001e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001e2c:	eba4 040e 	sub.w	r4, r4, lr
 8001e30:	2600      	movs	r6, #0
 8001e32:	b11d      	cbz	r5, 8001e3c <__udivmoddi4+0xa0>
 8001e34:	40d4      	lsrs	r4, r2
 8001e36:	2300      	movs	r3, #0
 8001e38:	e9c5 4300 	strd	r4, r3, [r5]
 8001e3c:	4631      	mov	r1, r6
 8001e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e42:	b902      	cbnz	r2, 8001e46 <__udivmoddi4+0xaa>
 8001e44:	deff      	udf	#255	; 0xff
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	2a00      	cmp	r2, #0
 8001e4c:	d150      	bne.n	8001ef0 <__udivmoddi4+0x154>
 8001e4e:	1bcb      	subs	r3, r1, r7
 8001e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001e54:	fa1f f887 	uxth.w	r8, r7
 8001e58:	2601      	movs	r6, #1
 8001e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8001e5e:	0c21      	lsrs	r1, r4, #16
 8001e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8001e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001e68:	fb08 f30c 	mul.w	r3, r8, ip
 8001e6c:	428b      	cmp	r3, r1
 8001e6e:	d907      	bls.n	8001e80 <__udivmoddi4+0xe4>
 8001e70:	1879      	adds	r1, r7, r1
 8001e72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001e76:	d202      	bcs.n	8001e7e <__udivmoddi4+0xe2>
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	f200 80e9 	bhi.w	8002050 <__udivmoddi4+0x2b4>
 8001e7e:	4684      	mov	ip, r0
 8001e80:	1ac9      	subs	r1, r1, r3
 8001e82:	b2a3      	uxth	r3, r4
 8001e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8001e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8001e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001e90:	fb08 f800 	mul.w	r8, r8, r0
 8001e94:	45a0      	cmp	r8, r4
 8001e96:	d907      	bls.n	8001ea8 <__udivmoddi4+0x10c>
 8001e98:	193c      	adds	r4, r7, r4
 8001e9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001e9e:	d202      	bcs.n	8001ea6 <__udivmoddi4+0x10a>
 8001ea0:	45a0      	cmp	r8, r4
 8001ea2:	f200 80d9 	bhi.w	8002058 <__udivmoddi4+0x2bc>
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	eba4 0408 	sub.w	r4, r4, r8
 8001eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001eb0:	e7bf      	b.n	8001e32 <__udivmoddi4+0x96>
 8001eb2:	428b      	cmp	r3, r1
 8001eb4:	d909      	bls.n	8001eca <__udivmoddi4+0x12e>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	f000 80b1 	beq.w	800201e <__udivmoddi4+0x282>
 8001ebc:	2600      	movs	r6, #0
 8001ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8001ec2:	4630      	mov	r0, r6
 8001ec4:	4631      	mov	r1, r6
 8001ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eca:	fab3 f683 	clz	r6, r3
 8001ece:	2e00      	cmp	r6, #0
 8001ed0:	d14a      	bne.n	8001f68 <__udivmoddi4+0x1cc>
 8001ed2:	428b      	cmp	r3, r1
 8001ed4:	d302      	bcc.n	8001edc <__udivmoddi4+0x140>
 8001ed6:	4282      	cmp	r2, r0
 8001ed8:	f200 80b8 	bhi.w	800204c <__udivmoddi4+0x2b0>
 8001edc:	1a84      	subs	r4, r0, r2
 8001ede:	eb61 0103 	sbc.w	r1, r1, r3
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	468c      	mov	ip, r1
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d0a8      	beq.n	8001e3c <__udivmoddi4+0xa0>
 8001eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8001eee:	e7a5      	b.n	8001e3c <__udivmoddi4+0xa0>
 8001ef0:	f1c2 0320 	rsb	r3, r2, #32
 8001ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8001ef8:	4097      	lsls	r7, r2
 8001efa:	fa01 f002 	lsl.w	r0, r1, r2
 8001efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001f02:	40d9      	lsrs	r1, r3
 8001f04:	4330      	orrs	r0, r6
 8001f06:	0c03      	lsrs	r3, r0, #16
 8001f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8001f0c:	fa1f f887 	uxth.w	r8, r7
 8001f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8001f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001f18:	fb06 f108 	mul.w	r1, r6, r8
 8001f1c:	4299      	cmp	r1, r3
 8001f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8001f22:	d909      	bls.n	8001f38 <__udivmoddi4+0x19c>
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8001f2a:	f080 808d 	bcs.w	8002048 <__udivmoddi4+0x2ac>
 8001f2e:	4299      	cmp	r1, r3
 8001f30:	f240 808a 	bls.w	8002048 <__udivmoddi4+0x2ac>
 8001f34:	3e02      	subs	r6, #2
 8001f36:	443b      	add	r3, r7
 8001f38:	1a5b      	subs	r3, r3, r1
 8001f3a:	b281      	uxth	r1, r0
 8001f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8001f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001f48:	fb00 f308 	mul.w	r3, r0, r8
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d907      	bls.n	8001f60 <__udivmoddi4+0x1c4>
 8001f50:	1879      	adds	r1, r7, r1
 8001f52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001f56:	d273      	bcs.n	8002040 <__udivmoddi4+0x2a4>
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	d971      	bls.n	8002040 <__udivmoddi4+0x2a4>
 8001f5c:	3802      	subs	r0, #2
 8001f5e:	4439      	add	r1, r7
 8001f60:	1acb      	subs	r3, r1, r3
 8001f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001f66:	e778      	b.n	8001e5a <__udivmoddi4+0xbe>
 8001f68:	f1c6 0c20 	rsb	ip, r6, #32
 8001f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8001f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8001f74:	431c      	orrs	r4, r3
 8001f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8001f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8001f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8001f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8001f86:	431f      	orrs	r7, r3
 8001f88:	0c3b      	lsrs	r3, r7, #16
 8001f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8001f8e:	fa1f f884 	uxth.w	r8, r4
 8001f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8001f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8001f9e:	458a      	cmp	sl, r1
 8001fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8001fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8001fa8:	d908      	bls.n	8001fbc <__udivmoddi4+0x220>
 8001faa:	1861      	adds	r1, r4, r1
 8001fac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001fb0:	d248      	bcs.n	8002044 <__udivmoddi4+0x2a8>
 8001fb2:	458a      	cmp	sl, r1
 8001fb4:	d946      	bls.n	8002044 <__udivmoddi4+0x2a8>
 8001fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8001fba:	4421      	add	r1, r4
 8001fbc:	eba1 010a 	sub.w	r1, r1, sl
 8001fc0:	b2bf      	uxth	r7, r7
 8001fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8001fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8001fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001fce:	fb00 f808 	mul.w	r8, r0, r8
 8001fd2:	45b8      	cmp	r8, r7
 8001fd4:	d907      	bls.n	8001fe6 <__udivmoddi4+0x24a>
 8001fd6:	19e7      	adds	r7, r4, r7
 8001fd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001fdc:	d22e      	bcs.n	800203c <__udivmoddi4+0x2a0>
 8001fde:	45b8      	cmp	r8, r7
 8001fe0:	d92c      	bls.n	800203c <__udivmoddi4+0x2a0>
 8001fe2:	3802      	subs	r0, #2
 8001fe4:	4427      	add	r7, r4
 8001fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001fea:	eba7 0708 	sub.w	r7, r7, r8
 8001fee:	fba0 8902 	umull	r8, r9, r0, r2
 8001ff2:	454f      	cmp	r7, r9
 8001ff4:	46c6      	mov	lr, r8
 8001ff6:	4649      	mov	r1, r9
 8001ff8:	d31a      	bcc.n	8002030 <__udivmoddi4+0x294>
 8001ffa:	d017      	beq.n	800202c <__udivmoddi4+0x290>
 8001ffc:	b15d      	cbz	r5, 8002016 <__udivmoddi4+0x27a>
 8001ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8002002:	eb67 0701 	sbc.w	r7, r7, r1
 8002006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800200a:	40f2      	lsrs	r2, r6
 800200c:	ea4c 0202 	orr.w	r2, ip, r2
 8002010:	40f7      	lsrs	r7, r6
 8002012:	e9c5 2700 	strd	r2, r7, [r5]
 8002016:	2600      	movs	r6, #0
 8002018:	4631      	mov	r1, r6
 800201a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800201e:	462e      	mov	r6, r5
 8002020:	4628      	mov	r0, r5
 8002022:	e70b      	b.n	8001e3c <__udivmoddi4+0xa0>
 8002024:	4606      	mov	r6, r0
 8002026:	e6e9      	b.n	8001dfc <__udivmoddi4+0x60>
 8002028:	4618      	mov	r0, r3
 800202a:	e6fd      	b.n	8001e28 <__udivmoddi4+0x8c>
 800202c:	4543      	cmp	r3, r8
 800202e:	d2e5      	bcs.n	8001ffc <__udivmoddi4+0x260>
 8002030:	ebb8 0e02 	subs.w	lr, r8, r2
 8002034:	eb69 0104 	sbc.w	r1, r9, r4
 8002038:	3801      	subs	r0, #1
 800203a:	e7df      	b.n	8001ffc <__udivmoddi4+0x260>
 800203c:	4608      	mov	r0, r1
 800203e:	e7d2      	b.n	8001fe6 <__udivmoddi4+0x24a>
 8002040:	4660      	mov	r0, ip
 8002042:	e78d      	b.n	8001f60 <__udivmoddi4+0x1c4>
 8002044:	4681      	mov	r9, r0
 8002046:	e7b9      	b.n	8001fbc <__udivmoddi4+0x220>
 8002048:	4666      	mov	r6, ip
 800204a:	e775      	b.n	8001f38 <__udivmoddi4+0x19c>
 800204c:	4630      	mov	r0, r6
 800204e:	e74a      	b.n	8001ee6 <__udivmoddi4+0x14a>
 8002050:	f1ac 0c02 	sub.w	ip, ip, #2
 8002054:	4439      	add	r1, r7
 8002056:	e713      	b.n	8001e80 <__udivmoddi4+0xe4>
 8002058:	3802      	subs	r0, #2
 800205a:	443c      	add	r4, r7
 800205c:	e724      	b.n	8001ea8 <__udivmoddi4+0x10c>
 800205e:	bf00      	nop

08002060 <selfrel_offset31>:
 8002060:	6803      	ldr	r3, [r0, #0]
 8002062:	005a      	lsls	r2, r3, #1
 8002064:	bf4c      	ite	mi
 8002066:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800206a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800206e:	4418      	add	r0, r3
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <search_EIT_table>:
 8002074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002078:	b329      	cbz	r1, 80020c6 <search_EIT_table+0x52>
 800207a:	1e4f      	subs	r7, r1, #1
 800207c:	4604      	mov	r4, r0
 800207e:	4615      	mov	r5, r2
 8002080:	463e      	mov	r6, r7
 8002082:	f04f 0800 	mov.w	r8, #0
 8002086:	eb08 0106 	add.w	r1, r8, r6
 800208a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800208e:	1049      	asrs	r1, r1, #1
 8002090:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8002094:	4648      	mov	r0, r9
 8002096:	f7ff ffe3 	bl	8002060 <selfrel_offset31>
 800209a:	4603      	mov	r3, r0
 800209c:	00c8      	lsls	r0, r1, #3
 800209e:	3008      	adds	r0, #8
 80020a0:	428f      	cmp	r7, r1
 80020a2:	4420      	add	r0, r4
 80020a4:	d009      	beq.n	80020ba <search_EIT_table+0x46>
 80020a6:	42ab      	cmp	r3, r5
 80020a8:	d809      	bhi.n	80020be <search_EIT_table+0x4a>
 80020aa:	f7ff ffd9 	bl	8002060 <selfrel_offset31>
 80020ae:	3801      	subs	r0, #1
 80020b0:	42a8      	cmp	r0, r5
 80020b2:	d20a      	bcs.n	80020ca <search_EIT_table+0x56>
 80020b4:	f101 0801 	add.w	r8, r1, #1
 80020b8:	e7e5      	b.n	8002086 <search_EIT_table+0x12>
 80020ba:	42ab      	cmp	r3, r5
 80020bc:	d905      	bls.n	80020ca <search_EIT_table+0x56>
 80020be:	4588      	cmp	r8, r1
 80020c0:	d001      	beq.n	80020c6 <search_EIT_table+0x52>
 80020c2:	1e4e      	subs	r6, r1, #1
 80020c4:	e7df      	b.n	8002086 <search_EIT_table+0x12>
 80020c6:	f04f 0900 	mov.w	r9, #0
 80020ca:	4648      	mov	r0, r9
 80020cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020d0 <__gnu_unwind_get_pr_addr>:
 80020d0:	2801      	cmp	r0, #1
 80020d2:	d007      	beq.n	80020e4 <__gnu_unwind_get_pr_addr+0x14>
 80020d4:	2802      	cmp	r0, #2
 80020d6:	d007      	beq.n	80020e8 <__gnu_unwind_get_pr_addr+0x18>
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <__gnu_unwind_get_pr_addr+0x1c>)
 80020da:	2800      	cmp	r0, #0
 80020dc:	bf0c      	ite	eq
 80020de:	4618      	moveq	r0, r3
 80020e0:	2000      	movne	r0, #0
 80020e2:	4770      	bx	lr
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <__gnu_unwind_get_pr_addr+0x20>)
 80020e6:	4770      	bx	lr
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <__gnu_unwind_get_pr_addr+0x24>)
 80020ea:	4770      	bx	lr
 80020ec:	08002795 	.word	0x08002795
 80020f0:	08002799 	.word	0x08002799
 80020f4:	0800279d 	.word	0x0800279d

080020f8 <get_eit_entry>:
 80020f8:	b530      	push	{r4, r5, lr}
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <get_eit_entry+0x90>)
 80020fc:	b083      	sub	sp, #12
 80020fe:	4604      	mov	r4, r0
 8002100:	1e8d      	subs	r5, r1, #2
 8002102:	b33b      	cbz	r3, 8002154 <get_eit_entry+0x5c>
 8002104:	a901      	add	r1, sp, #4
 8002106:	4628      	mov	r0, r5
 8002108:	f3af 8000 	nop.w
 800210c:	b1e8      	cbz	r0, 800214a <get_eit_entry+0x52>
 800210e:	9901      	ldr	r1, [sp, #4]
 8002110:	462a      	mov	r2, r5
 8002112:	f7ff ffaf 	bl	8002074 <search_EIT_table>
 8002116:	4601      	mov	r1, r0
 8002118:	b1b8      	cbz	r0, 800214a <get_eit_entry+0x52>
 800211a:	f7ff ffa1 	bl	8002060 <selfrel_offset31>
 800211e:	684b      	ldr	r3, [r1, #4]
 8002120:	64a0      	str	r0, [r4, #72]	; 0x48
 8002122:	2b01      	cmp	r3, #1
 8002124:	d02b      	beq.n	800217e <get_eit_entry+0x86>
 8002126:	2b00      	cmp	r3, #0
 8002128:	f101 0004 	add.w	r0, r1, #4
 800212c:	db23      	blt.n	8002176 <get_eit_entry+0x7e>
 800212e:	f7ff ff97 	bl	8002060 <selfrel_offset31>
 8002132:	2300      	movs	r3, #0
 8002134:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8002138:	6803      	ldr	r3, [r0, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db10      	blt.n	8002160 <get_eit_entry+0x68>
 800213e:	f7ff ff8f 	bl	8002060 <selfrel_offset31>
 8002142:	6120      	str	r0, [r4, #16]
 8002144:	2000      	movs	r0, #0
 8002146:	b003      	add	sp, #12
 8002148:	bd30      	pop	{r4, r5, pc}
 800214a:	2300      	movs	r3, #0
 800214c:	2009      	movs	r0, #9
 800214e:	6123      	str	r3, [r4, #16]
 8002150:	b003      	add	sp, #12
 8002152:	bd30      	pop	{r4, r5, pc}
 8002154:	490d      	ldr	r1, [pc, #52]	; (800218c <get_eit_entry+0x94>)
 8002156:	480e      	ldr	r0, [pc, #56]	; (8002190 <get_eit_entry+0x98>)
 8002158:	1a09      	subs	r1, r1, r0
 800215a:	10c9      	asrs	r1, r1, #3
 800215c:	9101      	str	r1, [sp, #4]
 800215e:	e7d7      	b.n	8002110 <get_eit_entry+0x18>
 8002160:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8002164:	f7ff ffb4 	bl	80020d0 <__gnu_unwind_get_pr_addr>
 8002168:	2800      	cmp	r0, #0
 800216a:	6120      	str	r0, [r4, #16]
 800216c:	bf14      	ite	ne
 800216e:	2000      	movne	r0, #0
 8002170:	2009      	moveq	r0, #9
 8002172:	b003      	add	sp, #12
 8002174:	bd30      	pop	{r4, r5, pc}
 8002176:	2301      	movs	r3, #1
 8002178:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800217c:	e7dc      	b.n	8002138 <get_eit_entry+0x40>
 800217e:	2300      	movs	r3, #0
 8002180:	6123      	str	r3, [r4, #16]
 8002182:	2005      	movs	r0, #5
 8002184:	e7df      	b.n	8002146 <get_eit_entry+0x4e>
 8002186:	bf00      	nop
 8002188:	00000000 	.word	0x00000000
 800218c:	0800e07c 	.word	0x0800e07c
 8002190:	0800dfbc 	.word	0x0800dfbc

08002194 <restore_non_core_regs>:
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	07da      	lsls	r2, r3, #31
 8002198:	b510      	push	{r4, lr}
 800219a:	4604      	mov	r4, r0
 800219c:	d406      	bmi.n	80021ac <restore_non_core_regs+0x18>
 800219e:	079b      	lsls	r3, r3, #30
 80021a0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80021a4:	d509      	bpl.n	80021ba <restore_non_core_regs+0x26>
 80021a6:	f000 fc4b 	bl	8002a40 <__gnu_Unwind_Restore_VFP_D>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	0759      	lsls	r1, r3, #29
 80021ae:	d509      	bpl.n	80021c4 <restore_non_core_regs+0x30>
 80021b0:	071a      	lsls	r2, r3, #28
 80021b2:	d50e      	bpl.n	80021d2 <restore_non_core_regs+0x3e>
 80021b4:	06db      	lsls	r3, r3, #27
 80021b6:	d513      	bpl.n	80021e0 <restore_non_core_regs+0x4c>
 80021b8:	bd10      	pop	{r4, pc}
 80021ba:	f000 fc39 	bl	8002a30 <__gnu_Unwind_Restore_VFP>
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	0759      	lsls	r1, r3, #29
 80021c2:	d4f5      	bmi.n	80021b0 <restore_non_core_regs+0x1c>
 80021c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80021c8:	f000 fc42 	bl	8002a50 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	071a      	lsls	r2, r3, #28
 80021d0:	d4f0      	bmi.n	80021b4 <restore_non_core_regs+0x20>
 80021d2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80021d6:	f000 fc43 	bl	8002a60 <__gnu_Unwind_Restore_WMMXD>
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	06db      	lsls	r3, r3, #27
 80021de:	d4eb      	bmi.n	80021b8 <restore_non_core_regs+0x24>
 80021e0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80021e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021e8:	f000 bc7e 	b.w	8002ae8 <__gnu_Unwind_Restore_WMMXC>

080021ec <_Unwind_decode_typeinfo_ptr.isra.0>:
 80021ec:	4603      	mov	r3, r0
 80021ee:	6800      	ldr	r0, [r0, #0]
 80021f0:	b100      	cbz	r0, 80021f4 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80021f2:	4418      	add	r0, r3
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop

080021f8 <__gnu_unwind_24bit.isra.0>:
 80021f8:	2009      	movs	r0, #9
 80021fa:	4770      	bx	lr

080021fc <_Unwind_DebugHook>:
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <unwind_phase2>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	4604      	mov	r4, r0
 8002204:	460e      	mov	r6, r1
 8002206:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff ff75 	bl	80020f8 <get_eit_entry>
 800220e:	4605      	mov	r5, r0
 8002210:	b988      	cbnz	r0, 8002236 <unwind_phase2+0x36>
 8002212:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002214:	6163      	str	r3, [r4, #20]
 8002216:	4632      	mov	r2, r6
 8002218:	6923      	ldr	r3, [r4, #16]
 800221a:	4621      	mov	r1, r4
 800221c:	2001      	movs	r0, #1
 800221e:	4798      	blx	r3
 8002220:	2808      	cmp	r0, #8
 8002222:	d0f0      	beq.n	8002206 <unwind_phase2+0x6>
 8002224:	2807      	cmp	r0, #7
 8002226:	d106      	bne.n	8002236 <unwind_phase2+0x36>
 8002228:	4628      	mov	r0, r5
 800222a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800222c:	f7ff ffe6 	bl	80021fc <_Unwind_DebugHook>
 8002230:	1d30      	adds	r0, r6, #4
 8002232:	f000 fbf1 	bl	8002a18 <__restore_core_regs>
 8002236:	f000 fe67 	bl	8002f08 <abort>
 800223a:	bf00      	nop

0800223c <unwind_phase2_forced>:
 800223c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002240:	1d0d      	adds	r5, r1, #4
 8002242:	4606      	mov	r6, r0
 8002244:	4614      	mov	r4, r2
 8002246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002248:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800224c:	f10d 0c0c 	add.w	ip, sp, #12
 8002250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002256:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002260:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002264:	ad02      	add	r5, sp, #8
 8002266:	68f7      	ldr	r7, [r6, #12]
 8002268:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800226c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002270:	2300      	movs	r3, #0
 8002272:	602b      	str	r3, [r5, #0]
 8002274:	e021      	b.n	80022ba <unwind_phase2_forced+0x7e>
 8002276:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002278:	6173      	str	r3, [r6, #20]
 800227a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800227e:	4629      	mov	r1, r5
 8002280:	a87a      	add	r0, sp, #488	; 0x1e8
 8002282:	f7fe fe9b 	bl	8000fbc <memcpy>
 8002286:	6933      	ldr	r3, [r6, #16]
 8002288:	aa7a      	add	r2, sp, #488	; 0x1e8
 800228a:	4631      	mov	r1, r6
 800228c:	4650      	mov	r0, sl
 800228e:	4798      	blx	r3
 8002290:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8002292:	e9cd 5800 	strd	r5, r8, [sp]
 8002296:	4621      	mov	r1, r4
 8002298:	646b      	str	r3, [r5, #68]	; 0x44
 800229a:	4681      	mov	r9, r0
 800229c:	4633      	mov	r3, r6
 800229e:	4632      	mov	r2, r6
 80022a0:	2001      	movs	r0, #1
 80022a2:	47b8      	blx	r7
 80022a4:	4604      	mov	r4, r0
 80022a6:	b9e8      	cbnz	r0, 80022e4 <unwind_phase2_forced+0xa8>
 80022a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80022ac:	a97a      	add	r1, sp, #488	; 0x1e8
 80022ae:	4628      	mov	r0, r5
 80022b0:	f7fe fe84 	bl	8000fbc <memcpy>
 80022b4:	f1b9 0f08 	cmp.w	r9, #8
 80022b8:	d11b      	bne.n	80022f2 <unwind_phase2_forced+0xb6>
 80022ba:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80022bc:	4630      	mov	r0, r6
 80022be:	f7ff ff1b 	bl	80020f8 <get_eit_entry>
 80022c2:	3409      	adds	r4, #9
 80022c4:	fa5f fa84 	uxtb.w	sl, r4
 80022c8:	4681      	mov	r9, r0
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d0d3      	beq.n	8002276 <unwind_phase2_forced+0x3a>
 80022ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80022d0:	f04a 0110 	orr.w	r1, sl, #16
 80022d4:	e9cd 5800 	strd	r5, r8, [sp]
 80022d8:	4632      	mov	r2, r6
 80022da:	646b      	str	r3, [r5, #68]	; 0x44
 80022dc:	2001      	movs	r0, #1
 80022de:	4633      	mov	r3, r6
 80022e0:	47b8      	blx	r7
 80022e2:	b108      	cbz	r0, 80022e8 <unwind_phase2_forced+0xac>
 80022e4:	f04f 0909 	mov.w	r9, #9
 80022e8:	4648      	mov	r0, r9
 80022ea:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80022ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f2:	f1b9 0f07 	cmp.w	r9, #7
 80022f6:	d1f5      	bne.n	80022e4 <unwind_phase2_forced+0xa8>
 80022f8:	4620      	mov	r0, r4
 80022fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80022fc:	f7ff ff7e 	bl	80021fc <_Unwind_DebugHook>
 8002300:	a803      	add	r0, sp, #12
 8002302:	f000 fb89 	bl	8002a18 <__restore_core_regs>
 8002306:	bf00      	nop

08002308 <_Unwind_GetCFA>:
 8002308:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800230a:	4770      	bx	lr

0800230c <__gnu_Unwind_RaiseException>:
 800230c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002310:	640b      	str	r3, [r1, #64]	; 0x40
 8002312:	1d0e      	adds	r6, r1, #4
 8002314:	460f      	mov	r7, r1
 8002316:	4605      	mov	r5, r0
 8002318:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800231a:	b0f9      	sub	sp, #484	; 0x1e4
 800231c:	ac01      	add	r4, sp, #4
 800231e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002320:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002324:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002328:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800232c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002334:	9600      	str	r6, [sp, #0]
 8002336:	e006      	b.n	8002346 <__gnu_Unwind_RaiseException+0x3a>
 8002338:	692b      	ldr	r3, [r5, #16]
 800233a:	466a      	mov	r2, sp
 800233c:	4629      	mov	r1, r5
 800233e:	4798      	blx	r3
 8002340:	2808      	cmp	r0, #8
 8002342:	4604      	mov	r4, r0
 8002344:	d108      	bne.n	8002358 <__gnu_Unwind_RaiseException+0x4c>
 8002346:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002348:	4628      	mov	r0, r5
 800234a:	f7ff fed5 	bl	80020f8 <get_eit_entry>
 800234e:	2800      	cmp	r0, #0
 8002350:	d0f2      	beq.n	8002338 <__gnu_Unwind_RaiseException+0x2c>
 8002352:	2009      	movs	r0, #9
 8002354:	b079      	add	sp, #484	; 0x1e4
 8002356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002358:	4668      	mov	r0, sp
 800235a:	f7ff ff1b 	bl	8002194 <restore_non_core_regs>
 800235e:	2c06      	cmp	r4, #6
 8002360:	d1f7      	bne.n	8002352 <__gnu_Unwind_RaiseException+0x46>
 8002362:	4639      	mov	r1, r7
 8002364:	4628      	mov	r0, r5
 8002366:	f7ff ff4b 	bl	8002200 <unwind_phase2>
 800236a:	bf00      	nop

0800236c <__gnu_Unwind_ForcedUnwind>:
 800236c:	b430      	push	{r4, r5}
 800236e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8002370:	60c1      	str	r1, [r0, #12]
 8002372:	6182      	str	r2, [r0, #24]
 8002374:	4619      	mov	r1, r3
 8002376:	641d      	str	r5, [r3, #64]	; 0x40
 8002378:	2200      	movs	r2, #0
 800237a:	bc30      	pop	{r4, r5}
 800237c:	e75e      	b.n	800223c <unwind_phase2_forced>
 800237e:	bf00      	nop

08002380 <__gnu_Unwind_Resume>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	68c6      	ldr	r6, [r0, #12]
 8002384:	6943      	ldr	r3, [r0, #20]
 8002386:	640b      	str	r3, [r1, #64]	; 0x40
 8002388:	b9ae      	cbnz	r6, 80023b6 <__gnu_Unwind_Resume+0x36>
 800238a:	6903      	ldr	r3, [r0, #16]
 800238c:	460a      	mov	r2, r1
 800238e:	4604      	mov	r4, r0
 8002390:	460d      	mov	r5, r1
 8002392:	4601      	mov	r1, r0
 8002394:	2002      	movs	r0, #2
 8002396:	4798      	blx	r3
 8002398:	2807      	cmp	r0, #7
 800239a:	d005      	beq.n	80023a8 <__gnu_Unwind_Resume+0x28>
 800239c:	2808      	cmp	r0, #8
 800239e:	d10f      	bne.n	80023c0 <__gnu_Unwind_Resume+0x40>
 80023a0:	4629      	mov	r1, r5
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7ff ff2c 	bl	8002200 <unwind_phase2>
 80023a8:	4630      	mov	r0, r6
 80023aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80023ac:	f7ff ff26 	bl	80021fc <_Unwind_DebugHook>
 80023b0:	1d28      	adds	r0, r5, #4
 80023b2:	f000 fb31 	bl	8002a18 <__restore_core_regs>
 80023b6:	2201      	movs	r2, #1
 80023b8:	f7ff ff40 	bl	800223c <unwind_phase2_forced>
 80023bc:	f000 fda4 	bl	8002f08 <abort>
 80023c0:	f000 fda2 	bl	8002f08 <abort>

080023c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80023c4:	68c2      	ldr	r2, [r0, #12]
 80023c6:	b11a      	cbz	r2, 80023d0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80023c8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80023ca:	640a      	str	r2, [r1, #64]	; 0x40
 80023cc:	2200      	movs	r2, #0
 80023ce:	e735      	b.n	800223c <unwind_phase2_forced>
 80023d0:	e79c      	b.n	800230c <__gnu_Unwind_RaiseException>
 80023d2:	bf00      	nop

080023d4 <_Unwind_Complete>:
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop

080023d8 <_Unwind_DeleteException>:
 80023d8:	6883      	ldr	r3, [r0, #8]
 80023da:	4601      	mov	r1, r0
 80023dc:	b10b      	cbz	r3, 80023e2 <_Unwind_DeleteException+0xa>
 80023de:	2001      	movs	r0, #1
 80023e0:	4718      	bx	r3
 80023e2:	4770      	bx	lr

080023e4 <_Unwind_VRS_Get>:
 80023e4:	2901      	cmp	r1, #1
 80023e6:	d012      	beq.n	800240e <_Unwind_VRS_Get+0x2a>
 80023e8:	d809      	bhi.n	80023fe <_Unwind_VRS_Get+0x1a>
 80023ea:	b973      	cbnz	r3, 800240a <_Unwind_VRS_Get+0x26>
 80023ec:	2a0f      	cmp	r2, #15
 80023ee:	d80c      	bhi.n	800240a <_Unwind_VRS_Get+0x26>
 80023f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80023f4:	4618      	mov	r0, r3
 80023f6:	6853      	ldr	r3, [r2, #4]
 80023f8:	9a00      	ldr	r2, [sp, #0]
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4770      	bx	lr
 80023fe:	3903      	subs	r1, #3
 8002400:	2901      	cmp	r1, #1
 8002402:	bf94      	ite	ls
 8002404:	2001      	movls	r0, #1
 8002406:	2002      	movhi	r0, #2
 8002408:	4770      	bx	lr
 800240a:	2002      	movs	r0, #2
 800240c:	4770      	bx	lr
 800240e:	4608      	mov	r0, r1
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <_Unwind_GetGR>:
 8002414:	b510      	push	{r4, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	2300      	movs	r3, #0
 800241a:	ac03      	add	r4, sp, #12
 800241c:	460a      	mov	r2, r1
 800241e:	9400      	str	r4, [sp, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	f7ff ffdf 	bl	80023e4 <_Unwind_VRS_Get>
 8002426:	9803      	ldr	r0, [sp, #12]
 8002428:	b004      	add	sp, #16
 800242a:	bd10      	pop	{r4, pc}

0800242c <_Unwind_VRS_Set>:
 800242c:	2901      	cmp	r1, #1
 800242e:	d012      	beq.n	8002456 <_Unwind_VRS_Set+0x2a>
 8002430:	d809      	bhi.n	8002446 <_Unwind_VRS_Set+0x1a>
 8002432:	b973      	cbnz	r3, 8002452 <_Unwind_VRS_Set+0x26>
 8002434:	2a0f      	cmp	r2, #15
 8002436:	d80c      	bhi.n	8002452 <_Unwind_VRS_Set+0x26>
 8002438:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800243c:	9a00      	ldr	r2, [sp, #0]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	6042      	str	r2, [r0, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	4770      	bx	lr
 8002446:	3903      	subs	r1, #3
 8002448:	2901      	cmp	r1, #1
 800244a:	bf94      	ite	ls
 800244c:	2001      	movls	r0, #1
 800244e:	2002      	movhi	r0, #2
 8002450:	4770      	bx	lr
 8002452:	2002      	movs	r0, #2
 8002454:	4770      	bx	lr
 8002456:	4608      	mov	r0, r1
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <_Unwind_SetGR>:
 800245c:	b510      	push	{r4, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	2300      	movs	r3, #0
 8002462:	ac03      	add	r4, sp, #12
 8002464:	9203      	str	r2, [sp, #12]
 8002466:	9400      	str	r4, [sp, #0]
 8002468:	460a      	mov	r2, r1
 800246a:	4619      	mov	r1, r3
 800246c:	f7ff ffde 	bl	800242c <_Unwind_VRS_Set>
 8002470:	b004      	add	sp, #16
 8002472:	bd10      	pop	{r4, pc}

08002474 <__gnu_Unwind_Backtrace>:
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002476:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	1d15      	adds	r5, r2, #4
 800247c:	468c      	mov	ip, r1
 800247e:	4606      	mov	r6, r0
 8002480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002482:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8002486:	ac17      	add	r4, sp, #92	; 0x5c
 8002488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800248c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002492:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002496:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800249a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800249e:	4665      	mov	r5, ip
 80024a0:	9716      	str	r7, [sp, #88]	; 0x58
 80024a2:	e010      	b.n	80024c6 <__gnu_Unwind_Backtrace+0x52>
 80024a4:	f7ff ffda 	bl	800245c <_Unwind_SetGR>
 80024a8:	4629      	mov	r1, r5
 80024aa:	a816      	add	r0, sp, #88	; 0x58
 80024ac:	47b0      	blx	r6
 80024ae:	4603      	mov	r3, r0
 80024b0:	aa16      	add	r2, sp, #88	; 0x58
 80024b2:	4669      	mov	r1, sp
 80024b4:	2008      	movs	r0, #8
 80024b6:	b983      	cbnz	r3, 80024da <__gnu_Unwind_Backtrace+0x66>
 80024b8:	9b04      	ldr	r3, [sp, #16]
 80024ba:	4798      	blx	r3
 80024bc:	2805      	cmp	r0, #5
 80024be:	4604      	mov	r4, r0
 80024c0:	d00c      	beq.n	80024dc <__gnu_Unwind_Backtrace+0x68>
 80024c2:	2809      	cmp	r0, #9
 80024c4:	d009      	beq.n	80024da <__gnu_Unwind_Backtrace+0x66>
 80024c6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80024c8:	4668      	mov	r0, sp
 80024ca:	f7ff fe15 	bl	80020f8 <get_eit_entry>
 80024ce:	4603      	mov	r3, r0
 80024d0:	466a      	mov	r2, sp
 80024d2:	210c      	movs	r1, #12
 80024d4:	a816      	add	r0, sp, #88	; 0x58
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0e4      	beq.n	80024a4 <__gnu_Unwind_Backtrace+0x30>
 80024da:	2409      	movs	r4, #9
 80024dc:	a816      	add	r0, sp, #88	; 0x58
 80024de:	f7ff fe59 	bl	8002194 <restore_non_core_regs>
 80024e2:	4620      	mov	r0, r4
 80024e4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	bf00      	nop

080024ec <__gnu_unwind_pr_common>:
 80024ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f0:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	460d      	mov	r5, r1
 80024f6:	f854 1b04 	ldr.w	r1, [r4], #4
 80024fa:	9406      	str	r4, [sp, #24]
 80024fc:	4617      	mov	r7, r2
 80024fe:	f000 0803 	and.w	r8, r0, #3
 8002502:	461e      	mov	r6, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d079      	beq.n	80025fc <__gnu_unwind_pr_common+0x110>
 8002508:	0c0b      	lsrs	r3, r1, #16
 800250a:	b2da      	uxtb	r2, r3
 800250c:	0409      	lsls	r1, r1, #16
 800250e:	f88d 301d 	strb.w	r3, [sp, #29]
 8002512:	2302      	movs	r3, #2
 8002514:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8002518:	9105      	str	r1, [sp, #20]
 800251a:	f88d 301c 	strb.w	r3, [sp, #28]
 800251e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8002520:	f1b8 0f02 	cmp.w	r8, #2
 8002524:	bf08      	it	eq
 8002526:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8002528:	f013 0301 	ands.w	r3, r3, #1
 800252c:	d00c      	beq.n	8002548 <__gnu_unwind_pr_common+0x5c>
 800252e:	4638      	mov	r0, r7
 8002530:	a905      	add	r1, sp, #20
 8002532:	f000 fb73 	bl	8002c1c <__gnu_unwind_execute>
 8002536:	b918      	cbnz	r0, 8002540 <__gnu_unwind_pr_common+0x54>
 8002538:	2008      	movs	r0, #8
 800253a:	b009      	add	sp, #36	; 0x24
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002540:	2009      	movs	r0, #9
 8002542:	b009      	add	sp, #36	; 0x24
 8002544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002548:	f8d4 a000 	ldr.w	sl, [r4]
 800254c:	f1ba 0f00 	cmp.w	sl, #0
 8002550:	d0ed      	beq.n	800252e <__gnu_unwind_pr_common+0x42>
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	f000 0308 	and.w	r3, r0, #8
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	2e02      	cmp	r6, #2
 800255c:	d04a      	beq.n	80025f4 <__gnu_unwind_pr_common+0x108>
 800255e:	f8b4 a000 	ldrh.w	sl, [r4]
 8002562:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8002566:	3404      	adds	r4, #4
 8002568:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800256a:	f029 0b01 	bic.w	fp, r9, #1
 800256e:	210f      	movs	r1, #15
 8002570:	4638      	mov	r0, r7
 8002572:	4493      	add	fp, r2
 8002574:	f7ff ff4e 	bl	8002414 <_Unwind_GetGR>
 8002578:	4583      	cmp	fp, r0
 800257a:	d839      	bhi.n	80025f0 <__gnu_unwind_pr_common+0x104>
 800257c:	f02a 0201 	bic.w	r2, sl, #1
 8002580:	445a      	add	r2, fp
 8002582:	4282      	cmp	r2, r0
 8002584:	bf94      	ite	ls
 8002586:	2000      	movls	r0, #0
 8002588:	2001      	movhi	r0, #1
 800258a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	f00a 0a01 	and.w	sl, sl, #1
 8002596:	ea43 030a 	orr.w	r3, r3, sl
 800259a:	2b01      	cmp	r3, #1
 800259c:	d049      	beq.n	8002632 <__gnu_unwind_pr_common+0x146>
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d032      	beq.n	8002608 <__gnu_unwind_pr_common+0x11c>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1cc      	bne.n	8002540 <__gnu_unwind_pr_common+0x54>
 80025a6:	f1b8 0f00 	cmp.w	r8, #0
 80025aa:	d002      	beq.n	80025b2 <__gnu_unwind_pr_common+0xc6>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	f040 80cd 	bne.w	800274c <__gnu_unwind_pr_common+0x260>
 80025b2:	3404      	adds	r4, #4
 80025b4:	f8d4 a000 	ldr.w	sl, [r4]
 80025b8:	f1ba 0f00 	cmp.w	sl, #0
 80025bc:	d1cd      	bne.n	800255a <__gnu_unwind_pr_common+0x6e>
 80025be:	a905      	add	r1, sp, #20
 80025c0:	4638      	mov	r0, r7
 80025c2:	f000 fb2b 	bl	8002c1c <__gnu_unwind_execute>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d1ba      	bne.n	8002540 <__gnu_unwind_pr_common+0x54>
 80025ca:	9b01      	ldr	r3, [sp, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0b3      	beq.n	8002538 <__gnu_unwind_pr_common+0x4c>
 80025d0:	210f      	movs	r1, #15
 80025d2:	4638      	mov	r0, r7
 80025d4:	f7ff ff1e 	bl	8002414 <_Unwind_GetGR>
 80025d8:	210e      	movs	r1, #14
 80025da:	4602      	mov	r2, r0
 80025dc:	4638      	mov	r0, r7
 80025de:	f7ff ff3d 	bl	800245c <_Unwind_SetGR>
 80025e2:	4638      	mov	r0, r7
 80025e4:	4a6a      	ldr	r2, [pc, #424]	; (8002790 <__gnu_unwind_pr_common+0x2a4>)
 80025e6:	210f      	movs	r1, #15
 80025e8:	f7ff ff38 	bl	800245c <_Unwind_SetGR>
 80025ec:	2007      	movs	r0, #7
 80025ee:	e7a8      	b.n	8002542 <__gnu_unwind_pr_common+0x56>
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7ca      	b.n	800258a <__gnu_unwind_pr_common+0x9e>
 80025f4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80025f8:	3408      	adds	r4, #8
 80025fa:	e7b5      	b.n	8002568 <__gnu_unwind_pr_common+0x7c>
 80025fc:	0209      	lsls	r1, r1, #8
 80025fe:	2303      	movs	r3, #3
 8002600:	9105      	str	r1, [sp, #20]
 8002602:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002606:	e78a      	b.n	800251e <__gnu_unwind_pr_common+0x32>
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800260e:	f1b8 0f00 	cmp.w	r8, #0
 8002612:	d145      	bne.n	80026a0 <__gnu_unwind_pr_common+0x1b4>
 8002614:	b128      	cbz	r0, 8002622 <__gnu_unwind_pr_common+0x136>
 8002616:	9a02      	ldr	r2, [sp, #8]
 8002618:	2a00      	cmp	r2, #0
 800261a:	d05c      	beq.n	80026d6 <__gnu_unwind_pr_common+0x1ea>
 800261c:	f1bb 0f00 	cmp.w	fp, #0
 8002620:	d074      	beq.n	800270c <__gnu_unwind_pr_common+0x220>
 8002622:	2b00      	cmp	r3, #0
 8002624:	da00      	bge.n	8002628 <__gnu_unwind_pr_common+0x13c>
 8002626:	3404      	adds	r4, #4
 8002628:	f10b 0b01 	add.w	fp, fp, #1
 800262c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8002630:	e7c0      	b.n	80025b4 <__gnu_unwind_pr_common+0xc8>
 8002632:	f1b8 0f00 	cmp.w	r8, #0
 8002636:	d119      	bne.n	800266c <__gnu_unwind_pr_common+0x180>
 8002638:	b1b0      	cbz	r0, 8002668 <__gnu_unwind_pr_common+0x17c>
 800263a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800263e:	1c99      	adds	r1, r3, #2
 8002640:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8002644:	f43f af7c 	beq.w	8002540 <__gnu_unwind_pr_common+0x54>
 8002648:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800264c:	3301      	adds	r3, #1
 800264e:	9104      	str	r1, [sp, #16]
 8002650:	f000 8090 	beq.w	8002774 <__gnu_unwind_pr_common+0x288>
 8002654:	1d20      	adds	r0, r4, #4
 8002656:	f7ff fdc9 	bl	80021ec <_Unwind_decode_typeinfo_ptr.isra.0>
 800265a:	ab04      	add	r3, sp, #16
 800265c:	4601      	mov	r1, r0
 800265e:	4628      	mov	r0, r5
 8002660:	f3af 8000 	nop.w
 8002664:	2800      	cmp	r0, #0
 8002666:	d15b      	bne.n	8002720 <__gnu_unwind_pr_common+0x234>
 8002668:	3408      	adds	r4, #8
 800266a:	e7a3      	b.n	80025b4 <__gnu_unwind_pr_common+0xc8>
 800266c:	210d      	movs	r1, #13
 800266e:	4638      	mov	r0, r7
 8002670:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8002674:	f7ff fece 	bl	8002414 <_Unwind_GetGR>
 8002678:	4581      	cmp	r9, r0
 800267a:	d1f5      	bne.n	8002668 <__gnu_unwind_pr_common+0x17c>
 800267c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800267e:	429c      	cmp	r4, r3
 8002680:	d1f2      	bne.n	8002668 <__gnu_unwind_pr_common+0x17c>
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff fcec 	bl	8002060 <selfrel_offset31>
 8002688:	210f      	movs	r1, #15
 800268a:	4602      	mov	r2, r0
 800268c:	4638      	mov	r0, r7
 800268e:	f7ff fee5 	bl	800245c <_Unwind_SetGR>
 8002692:	4638      	mov	r0, r7
 8002694:	462a      	mov	r2, r5
 8002696:	2100      	movs	r1, #0
 8002698:	f7ff fee0 	bl	800245c <_Unwind_SetGR>
 800269c:	2007      	movs	r0, #7
 800269e:	e750      	b.n	8002542 <__gnu_unwind_pr_common+0x56>
 80026a0:	210d      	movs	r1, #13
 80026a2:	4638      	mov	r0, r7
 80026a4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80026a8:	f7ff feb4 	bl	8002414 <_Unwind_GetGR>
 80026ac:	4581      	cmp	r9, r0
 80026ae:	d001      	beq.n	80026b4 <__gnu_unwind_pr_common+0x1c8>
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	e7b6      	b.n	8002622 <__gnu_unwind_pr_common+0x136>
 80026b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80026b6:	429c      	cmp	r4, r3
 80026b8:	d1fa      	bne.n	80026b0 <__gnu_unwind_pr_common+0x1c4>
 80026ba:	2204      	movs	r2, #4
 80026bc:	2100      	movs	r1, #0
 80026be:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 80026c2:	18a3      	adds	r3, r4, r2
 80026c4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80026c8:	636b      	str	r3, [r5, #52]	; 0x34
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	428b      	cmp	r3, r1
 80026ce:	db59      	blt.n	8002784 <__gnu_unwind_pr_common+0x298>
 80026d0:	2301      	movs	r3, #1
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	e7a8      	b.n	8002628 <__gnu_unwind_pr_common+0x13c>
 80026d6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80026da:	f8cd 800c 	str.w	r8, [sp, #12]
 80026de:	f104 0a04 	add.w	sl, r4, #4
 80026e2:	46b0      	mov	r8, r6
 80026e4:	4691      	mov	r9, r2
 80026e6:	461e      	mov	r6, r3
 80026e8:	e00d      	b.n	8002706 <__gnu_unwind_pr_common+0x21a>
 80026ea:	9604      	str	r6, [sp, #16]
 80026ec:	f7ff fd7e 	bl	80021ec <_Unwind_decode_typeinfo_ptr.isra.0>
 80026f0:	ab04      	add	r3, sp, #16
 80026f2:	4601      	mov	r1, r0
 80026f4:	2200      	movs	r2, #0
 80026f6:	4628      	mov	r0, r5
 80026f8:	f3af 8000 	nop.w
 80026fc:	f109 0901 	add.w	r9, r9, #1
 8002700:	f10a 0a04 	add.w	sl, sl, #4
 8002704:	b9e8      	cbnz	r0, 8002742 <__gnu_unwind_pr_common+0x256>
 8002706:	45d9      	cmp	r9, fp
 8002708:	4650      	mov	r0, sl
 800270a:	d1ee      	bne.n	80026ea <__gnu_unwind_pr_common+0x1fe>
 800270c:	4638      	mov	r0, r7
 800270e:	210d      	movs	r1, #13
 8002710:	f7ff fe80 	bl	8002414 <_Unwind_GetGR>
 8002714:	9b04      	ldr	r3, [sp, #16]
 8002716:	6228      	str	r0, [r5, #32]
 8002718:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 800271c:	2006      	movs	r0, #6
 800271e:	e710      	b.n	8002542 <__gnu_unwind_pr_common+0x56>
 8002720:	4681      	mov	r9, r0
 8002722:	210d      	movs	r1, #13
 8002724:	4638      	mov	r0, r7
 8002726:	f7ff fe75 	bl	8002414 <_Unwind_GetGR>
 800272a:	f1b9 0f02 	cmp.w	r9, #2
 800272e:	6228      	str	r0, [r5, #32]
 8002730:	d125      	bne.n	800277e <__gnu_unwind_pr_common+0x292>
 8002732:	462b      	mov	r3, r5
 8002734:	9a04      	ldr	r2, [sp, #16]
 8002736:	f843 2f2c 	str.w	r2, [r3, #44]!
 800273a:	626b      	str	r3, [r5, #36]	; 0x24
 800273c:	62ac      	str	r4, [r5, #40]	; 0x28
 800273e:	2006      	movs	r0, #6
 8002740:	e6ff      	b.n	8002542 <__gnu_unwind_pr_common+0x56>
 8002742:	4646      	mov	r6, r8
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800274a:	e76a      	b.n	8002622 <__gnu_unwind_pr_common+0x136>
 800274c:	4620      	mov	r0, r4
 800274e:	f7ff fc87 	bl	8002060 <selfrel_offset31>
 8002752:	3404      	adds	r4, #4
 8002754:	4602      	mov	r2, r0
 8002756:	63ac      	str	r4, [r5, #56]	; 0x38
 8002758:	4628      	mov	r0, r5
 800275a:	4614      	mov	r4, r2
 800275c:	f3af 8000 	nop.w
 8002760:	2800      	cmp	r0, #0
 8002762:	f43f aeed 	beq.w	8002540 <__gnu_unwind_pr_common+0x54>
 8002766:	4638      	mov	r0, r7
 8002768:	4622      	mov	r2, r4
 800276a:	210f      	movs	r1, #15
 800276c:	f7ff fe76 	bl	800245c <_Unwind_SetGR>
 8002770:	2007      	movs	r0, #7
 8002772:	e6e6      	b.n	8002542 <__gnu_unwind_pr_common+0x56>
 8002774:	4638      	mov	r0, r7
 8002776:	210d      	movs	r1, #13
 8002778:	f7ff fe4c 	bl	8002414 <_Unwind_GetGR>
 800277c:	6228      	str	r0, [r5, #32]
 800277e:	9b04      	ldr	r3, [sp, #16]
 8002780:	626b      	str	r3, [r5, #36]	; 0x24
 8002782:	e7db      	b.n	800273c <__gnu_unwind_pr_common+0x250>
 8002784:	f10b 0001 	add.w	r0, fp, #1
 8002788:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800278c:	e77a      	b.n	8002684 <__gnu_unwind_pr_common+0x198>
 800278e:	bf00      	nop
 8002790:	00000000 	.word	0x00000000

08002794 <__aeabi_unwind_cpp_pr0>:
 8002794:	2300      	movs	r3, #0
 8002796:	e6a9      	b.n	80024ec <__gnu_unwind_pr_common>

08002798 <__aeabi_unwind_cpp_pr1>:
 8002798:	2301      	movs	r3, #1
 800279a:	e6a7      	b.n	80024ec <__gnu_unwind_pr_common>

0800279c <__aeabi_unwind_cpp_pr2>:
 800279c:	2302      	movs	r3, #2
 800279e:	e6a5      	b.n	80024ec <__gnu_unwind_pr_common>

080027a0 <_Unwind_VRS_Pop>:
 80027a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027a4:	4606      	mov	r6, r0
 80027a6:	b0c3      	sub	sp, #268	; 0x10c
 80027a8:	4615      	mov	r5, r2
 80027aa:	461c      	mov	r4, r3
 80027ac:	2904      	cmp	r1, #4
 80027ae:	f200 80b9 	bhi.w	8002924 <_Unwind_VRS_Pop+0x184>
 80027b2:	e8df f001 	tbb	[pc, r1]
 80027b6:	539a      	.short	0x539a
 80027b8:	29b7      	.short	0x29b7
 80027ba:	03          	.byte	0x03
 80027bb:	00          	.byte	0x00
 80027bc:	2c00      	cmp	r4, #0
 80027be:	f040 80b1 	bne.w	8002924 <_Unwind_VRS_Pop+0x184>
 80027c2:	2a10      	cmp	r2, #16
 80027c4:	f200 80ae 	bhi.w	8002924 <_Unwind_VRS_Pop+0x184>
 80027c8:	6803      	ldr	r3, [r0, #0]
 80027ca:	06d8      	lsls	r0, r3, #27
 80027cc:	f100 80f3 	bmi.w	80029b6 <_Unwind_VRS_Pop+0x216>
 80027d0:	af20      	add	r7, sp, #128	; 0x80
 80027d2:	4638      	mov	r0, r7
 80027d4:	f000 f992 	bl	8002afc <__gnu_Unwind_Save_WMMXC>
 80027d8:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80027da:	2300      	movs	r3, #0
 80027dc:	2401      	movs	r4, #1
 80027de:	fa04 f203 	lsl.w	r2, r4, r3
 80027e2:	422a      	tst	r2, r5
 80027e4:	4601      	mov	r1, r0
 80027e6:	d004      	beq.n	80027f2 <_Unwind_VRS_Pop+0x52>
 80027e8:	f851 2b04 	ldr.w	r2, [r1], #4
 80027ec:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80027f0:	4608      	mov	r0, r1
 80027f2:	3301      	adds	r3, #1
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d1f2      	bne.n	80027de <_Unwind_VRS_Pop+0x3e>
 80027f8:	63b0      	str	r0, [r6, #56]	; 0x38
 80027fa:	4638      	mov	r0, r7
 80027fc:	f000 f974 	bl	8002ae8 <__gnu_Unwind_Restore_WMMXC>
 8002800:	2000      	movs	r0, #0
 8002802:	b043      	add	sp, #268	; 0x10c
 8002804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002808:	2c03      	cmp	r4, #3
 800280a:	f040 808b 	bne.w	8002924 <_Unwind_VRS_Pop+0x184>
 800280e:	b294      	uxth	r4, r2
 8002810:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8002814:	2b10      	cmp	r3, #16
 8002816:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800281a:	f200 8083 	bhi.w	8002924 <_Unwind_VRS_Pop+0x184>
 800281e:	6803      	ldr	r3, [r0, #0]
 8002820:	071f      	lsls	r7, r3, #28
 8002822:	f100 80d0 	bmi.w	80029c6 <_Unwind_VRS_Pop+0x226>
 8002826:	af20      	add	r7, sp, #128	; 0x80
 8002828:	4638      	mov	r0, r7
 800282a:	f000 f93b 	bl	8002aa4 <__gnu_Unwind_Save_WMMXD>
 800282e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8002832:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8002834:	b154      	cbz	r4, 800284c <_Unwind_VRS_Pop+0xac>
 8002836:	460b      	mov	r3, r1
 8002838:	1ae8      	subs	r0, r5, r3
 800283a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800283e:	00e4      	lsls	r4, r4, #3
 8002840:	581a      	ldr	r2, [r3, r0]
 8002842:	f843 2b04 	str.w	r2, [r3], #4
 8002846:	428b      	cmp	r3, r1
 8002848:	d1fa      	bne.n	8002840 <_Unwind_VRS_Pop+0xa0>
 800284a:	4425      	add	r5, r4
 800284c:	4638      	mov	r0, r7
 800284e:	63b5      	str	r5, [r6, #56]	; 0x38
 8002850:	f000 f906 	bl	8002a60 <__gnu_Unwind_Restore_WMMXD>
 8002854:	2000      	movs	r0, #0
 8002856:	b043      	add	sp, #268	; 0x10c
 8002858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800285c:	2c01      	cmp	r4, #1
 800285e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8002862:	b295      	uxth	r5, r2
 8002864:	d05a      	beq.n	800291c <_Unwind_VRS_Pop+0x17c>
 8002866:	2c05      	cmp	r4, #5
 8002868:	d15c      	bne.n	8002924 <_Unwind_VRS_Pop+0x184>
 800286a:	eb08 0905 	add.w	r9, r8, r5
 800286e:	f1b9 0f20 	cmp.w	r9, #32
 8002872:	d857      	bhi.n	8002924 <_Unwind_VRS_Pop+0x184>
 8002874:	f1b8 0f0f 	cmp.w	r8, #15
 8002878:	d977      	bls.n	800296a <_Unwind_VRS_Pop+0x1ca>
 800287a:	46a9      	mov	r9, r5
 800287c:	2d00      	cmp	r5, #0
 800287e:	f040 8088 	bne.w	8002992 <_Unwind_VRS_Pop+0x1f2>
 8002882:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002884:	b36d      	cbz	r5, 80028e2 <_Unwind_VRS_Pop+0x142>
 8002886:	af20      	add	r7, sp, #128	; 0x80
 8002888:	f04f 0900 	mov.w	r9, #0
 800288c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8002890:	3f04      	subs	r7, #4
 8002892:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002896:	f853 1b04 	ldr.w	r1, [r3], #4
 800289a:	f847 1f04 	str.w	r1, [r7, #4]!
 800289e:	42ab      	cmp	r3, r5
 80028a0:	d1f9      	bne.n	8002896 <_Unwind_VRS_Pop+0xf6>
 80028a2:	f1b9 0f00 	cmp.w	r9, #0
 80028a6:	d00f      	beq.n	80028c8 <_Unwind_VRS_Pop+0x128>
 80028a8:	466f      	mov	r7, sp
 80028aa:	4641      	mov	r1, r8
 80028ac:	2910      	cmp	r1, #16
 80028ae:	bf38      	it	cc
 80028b0:	2110      	movcc	r1, #16
 80028b2:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80028b6:	3984      	subs	r1, #132	; 0x84
 80028b8:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80028bc:	f853 0b04 	ldr.w	r0, [r3], #4
 80028c0:	f841 0f04 	str.w	r0, [r1, #4]!
 80028c4:	42ab      	cmp	r3, r5
 80028c6:	d1f9      	bne.n	80028bc <_Unwind_VRS_Pop+0x11c>
 80028c8:	2c01      	cmp	r4, #1
 80028ca:	f000 8084 	beq.w	80029d6 <_Unwind_VRS_Pop+0x236>
 80028ce:	f1b8 0f0f 	cmp.w	r8, #15
 80028d2:	63b5      	str	r5, [r6, #56]	; 0x38
 80028d4:	d945      	bls.n	8002962 <_Unwind_VRS_Pop+0x1c2>
 80028d6:	f1b9 0f00 	cmp.w	r9, #0
 80028da:	d002      	beq.n	80028e2 <_Unwind_VRS_Pop+0x142>
 80028dc:	4668      	mov	r0, sp
 80028de:	f000 f8b7 	bl	8002a50 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80028e2:	2000      	movs	r0, #0
 80028e4:	b043      	add	sp, #268	; 0x10c
 80028e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028ea:	b9dc      	cbnz	r4, 8002924 <_Unwind_VRS_Pop+0x184>
 80028ec:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80028ee:	4623      	mov	r3, r4
 80028f0:	2001      	movs	r0, #1
 80028f2:	b294      	uxth	r4, r2
 80028f4:	f106 0c04 	add.w	ip, r6, #4
 80028f8:	fa00 f203 	lsl.w	r2, r0, r3
 80028fc:	4222      	tst	r2, r4
 80028fe:	4639      	mov	r1, r7
 8002900:	d004      	beq.n	800290c <_Unwind_VRS_Pop+0x16c>
 8002902:	f851 2b04 	ldr.w	r2, [r1], #4
 8002906:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 800290a:	460f      	mov	r7, r1
 800290c:	3301      	adds	r3, #1
 800290e:	2b10      	cmp	r3, #16
 8002910:	d1f2      	bne.n	80028f8 <_Unwind_VRS_Pop+0x158>
 8002912:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8002916:	d1e4      	bne.n	80028e2 <_Unwind_VRS_Pop+0x142>
 8002918:	63b7      	str	r7, [r6, #56]	; 0x38
 800291a:	e004      	b.n	8002926 <_Unwind_VRS_Pop+0x186>
 800291c:	eb08 0305 	add.w	r3, r8, r5
 8002920:	2b10      	cmp	r3, #16
 8002922:	d903      	bls.n	800292c <_Unwind_VRS_Pop+0x18c>
 8002924:	2002      	movs	r0, #2
 8002926:	b043      	add	sp, #268	; 0x10c
 8002928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800292c:	f1b8 0f0f 	cmp.w	r8, #15
 8002930:	d8f8      	bhi.n	8002924 <_Unwind_VRS_Pop+0x184>
 8002932:	6833      	ldr	r3, [r6, #0]
 8002934:	07da      	lsls	r2, r3, #31
 8002936:	d506      	bpl.n	8002946 <_Unwind_VRS_Pop+0x1a6>
 8002938:	4630      	mov	r0, r6
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	f840 3b48 	str.w	r3, [r0], #72
 8002942:	f000 f879 	bl	8002a38 <__gnu_Unwind_Save_VFP>
 8002946:	af20      	add	r7, sp, #128	; 0x80
 8002948:	4638      	mov	r0, r7
 800294a:	f000 f875 	bl	8002a38 <__gnu_Unwind_Save_VFP>
 800294e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002950:	2d00      	cmp	r5, #0
 8002952:	d199      	bne.n	8002888 <_Unwind_VRS_Pop+0xe8>
 8002954:	461d      	mov	r5, r3
 8002956:	3504      	adds	r5, #4
 8002958:	63b5      	str	r5, [r6, #56]	; 0x38
 800295a:	4638      	mov	r0, r7
 800295c:	f000 f868 	bl	8002a30 <__gnu_Unwind_Restore_VFP>
 8002960:	e7bf      	b.n	80028e2 <_Unwind_VRS_Pop+0x142>
 8002962:	a820      	add	r0, sp, #128	; 0x80
 8002964:	f000 f86c 	bl	8002a40 <__gnu_Unwind_Restore_VFP_D>
 8002968:	e7b5      	b.n	80028d6 <_Unwind_VRS_Pop+0x136>
 800296a:	f1b9 0f10 	cmp.w	r9, #16
 800296e:	d940      	bls.n	80029f2 <_Unwind_VRS_Pop+0x252>
 8002970:	f1a9 0910 	sub.w	r9, r9, #16
 8002974:	6833      	ldr	r3, [r6, #0]
 8002976:	07d9      	lsls	r1, r3, #31
 8002978:	d508      	bpl.n	800298c <_Unwind_VRS_Pop+0x1ec>
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	4630      	mov	r0, r6
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	f840 3b48 	str.w	r3, [r0], #72
 8002988:	f000 f85e 	bl	8002a48 <__gnu_Unwind_Save_VFP_D>
 800298c:	f1b9 0f00 	cmp.w	r9, #0
 8002990:	d032      	beq.n	80029f8 <_Unwind_VRS_Pop+0x258>
 8002992:	6833      	ldr	r3, [r6, #0]
 8002994:	075a      	lsls	r2, r3, #29
 8002996:	d420      	bmi.n	80029da <_Unwind_VRS_Pop+0x23a>
 8002998:	f1b8 0f0f 	cmp.w	r8, #15
 800299c:	d925      	bls.n	80029ea <_Unwind_VRS_Pop+0x24a>
 800299e:	466f      	mov	r7, sp
 80029a0:	4638      	mov	r0, r7
 80029a2:	f1c8 0510 	rsb	r5, r8, #16
 80029a6:	f000 f857 	bl	8002a58 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80029aa:	2d00      	cmp	r5, #0
 80029ac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80029ae:	f77f af7c 	ble.w	80028aa <_Unwind_VRS_Pop+0x10a>
 80029b2:	af20      	add	r7, sp, #128	; 0x80
 80029b4:	e76a      	b.n	800288c <_Unwind_VRS_Pop+0xec>
 80029b6:	f023 0310 	bic.w	r3, r3, #16
 80029ba:	6033      	str	r3, [r6, #0]
 80029bc:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 80029c0:	f000 f89c 	bl	8002afc <__gnu_Unwind_Save_WMMXC>
 80029c4:	e704      	b.n	80027d0 <_Unwind_VRS_Pop+0x30>
 80029c6:	f023 0308 	bic.w	r3, r3, #8
 80029ca:	6003      	str	r3, [r0, #0]
 80029cc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 80029d0:	f000 f868 	bl	8002aa4 <__gnu_Unwind_Save_WMMXD>
 80029d4:	e727      	b.n	8002826 <_Unwind_VRS_Pop+0x86>
 80029d6:	af20      	add	r7, sp, #128	; 0x80
 80029d8:	e7bd      	b.n	8002956 <_Unwind_VRS_Pop+0x1b6>
 80029da:	4630      	mov	r0, r6
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	f840 3bd0 	str.w	r3, [r0], #208
 80029e4:	f000 f838 	bl	8002a58 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80029e8:	e7d6      	b.n	8002998 <_Unwind_VRS_Pop+0x1f8>
 80029ea:	a820      	add	r0, sp, #128	; 0x80
 80029ec:	f000 f82c 	bl	8002a48 <__gnu_Unwind_Save_VFP_D>
 80029f0:	e7d5      	b.n	800299e <_Unwind_VRS_Pop+0x1fe>
 80029f2:	f04f 0900 	mov.w	r9, #0
 80029f6:	e7bd      	b.n	8002974 <_Unwind_VRS_Pop+0x1d4>
 80029f8:	f1b8 0f0f 	cmp.w	r8, #15
 80029fc:	f63f af41 	bhi.w	8002882 <_Unwind_VRS_Pop+0xe2>
 8002a00:	af20      	add	r7, sp, #128	; 0x80
 8002a02:	4638      	mov	r0, r7
 8002a04:	f000 f820 	bl	8002a48 <__gnu_Unwind_Save_VFP_D>
 8002a08:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002a0a:	2d00      	cmp	r5, #0
 8002a0c:	f47f af3c 	bne.w	8002888 <_Unwind_VRS_Pop+0xe8>
 8002a10:	4638      	mov	r0, r7
 8002a12:	f000 f815 	bl	8002a40 <__gnu_Unwind_Restore_VFP_D>
 8002a16:	e764      	b.n	80028e2 <_Unwind_VRS_Pop+0x142>

08002a18 <__restore_core_regs>:
 8002a18:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8002a1c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8002a20:	469c      	mov	ip, r3
 8002a22:	46a6      	mov	lr, r4
 8002a24:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8002a28:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002a2c:	46e5      	mov	sp, ip
 8002a2e:	bd00      	pop	{pc}

08002a30 <__gnu_Unwind_Restore_VFP>:
 8002a30:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop

08002a38 <__gnu_Unwind_Save_VFP>:
 8002a38:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop

08002a40 <__gnu_Unwind_Restore_VFP_D>:
 8002a40:	ec90 0b20 	vldmia	r0, {d0-d15}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop

08002a48 <__gnu_Unwind_Save_VFP_D>:
 8002a48:	ec80 0b20 	vstmia	r0, {d0-d15}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8002a50:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop

08002a58 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8002a58:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <__gnu_Unwind_Restore_WMMXD>:
 8002a60:	ecf0 0102 	ldfe	f0, [r0], #8
 8002a64:	ecf0 1102 	ldfe	f1, [r0], #8
 8002a68:	ecf0 2102 	ldfe	f2, [r0], #8
 8002a6c:	ecf0 3102 	ldfe	f3, [r0], #8
 8002a70:	ecf0 4102 	ldfe	f4, [r0], #8
 8002a74:	ecf0 5102 	ldfe	f5, [r0], #8
 8002a78:	ecf0 6102 	ldfe	f6, [r0], #8
 8002a7c:	ecf0 7102 	ldfe	f7, [r0], #8
 8002a80:	ecf0 8102 	ldfp	f0, [r0], #8
 8002a84:	ecf0 9102 	ldfp	f1, [r0], #8
 8002a88:	ecf0 a102 	ldfp	f2, [r0], #8
 8002a8c:	ecf0 b102 	ldfp	f3, [r0], #8
 8002a90:	ecf0 c102 	ldfp	f4, [r0], #8
 8002a94:	ecf0 d102 	ldfp	f5, [r0], #8
 8002a98:	ecf0 e102 	ldfp	f6, [r0], #8
 8002a9c:	ecf0 f102 	ldfp	f7, [r0], #8
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <__gnu_Unwind_Save_WMMXD>:
 8002aa4:	ece0 0102 	stfe	f0, [r0], #8
 8002aa8:	ece0 1102 	stfe	f1, [r0], #8
 8002aac:	ece0 2102 	stfe	f2, [r0], #8
 8002ab0:	ece0 3102 	stfe	f3, [r0], #8
 8002ab4:	ece0 4102 	stfe	f4, [r0], #8
 8002ab8:	ece0 5102 	stfe	f5, [r0], #8
 8002abc:	ece0 6102 	stfe	f6, [r0], #8
 8002ac0:	ece0 7102 	stfe	f7, [r0], #8
 8002ac4:	ece0 8102 	stfp	f0, [r0], #8
 8002ac8:	ece0 9102 	stfp	f1, [r0], #8
 8002acc:	ece0 a102 	stfp	f2, [r0], #8
 8002ad0:	ece0 b102 	stfp	f3, [r0], #8
 8002ad4:	ece0 c102 	stfp	f4, [r0], #8
 8002ad8:	ece0 d102 	stfp	f5, [r0], #8
 8002adc:	ece0 e102 	stfp	f6, [r0], #8
 8002ae0:	ece0 f102 	stfp	f7, [r0], #8
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <__gnu_Unwind_Restore_WMMXC>:
 8002ae8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8002aec:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8002af0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8002af4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop

08002afc <__gnu_Unwind_Save_WMMXC>:
 8002afc:	fca0 8101 	stc2	1, cr8, [r0], #4
 8002b00:	fca0 9101 	stc2	1, cr9, [r0], #4
 8002b04:	fca0 a101 	stc2	1, cr10, [r0], #4
 8002b08:	fca0 b101 	stc2	1, cr11, [r0], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <_Unwind_RaiseException>:
 8002b10:	46ec      	mov	ip, sp
 8002b12:	b500      	push	{lr}
 8002b14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8002b18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8002b24:	a901      	add	r1, sp, #4
 8002b26:	f7ff fbf1 	bl	800230c <__gnu_Unwind_RaiseException>
 8002b2a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002b2e:	b012      	add	sp, #72	; 0x48
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop

08002b34 <_Unwind_Resume>:
 8002b34:	46ec      	mov	ip, sp
 8002b36:	b500      	push	{lr}
 8002b38:	e92d 5000 	stmdb	sp!, {ip, lr}
 8002b3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e92d 000c 	stmdb	sp!, {r2, r3}
 8002b48:	a901      	add	r1, sp, #4
 8002b4a:	f7ff fc19 	bl	8002380 <__gnu_Unwind_Resume>
 8002b4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002b52:	b012      	add	sp, #72	; 0x48
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop

08002b58 <_Unwind_Resume_or_Rethrow>:
 8002b58:	46ec      	mov	ip, sp
 8002b5a:	b500      	push	{lr}
 8002b5c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8002b60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e92d 000c 	stmdb	sp!, {r2, r3}
 8002b6c:	a901      	add	r1, sp, #4
 8002b6e:	f7ff fc29 	bl	80023c4 <__gnu_Unwind_Resume_or_Rethrow>
 8002b72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002b76:	b012      	add	sp, #72	; 0x48
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop

08002b7c <_Unwind_ForcedUnwind>:
 8002b7c:	46ec      	mov	ip, sp
 8002b7e:	b500      	push	{lr}
 8002b80:	e92d 5000 	stmdb	sp!, {ip, lr}
 8002b84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8002b90:	ab01      	add	r3, sp, #4
 8002b92:	f7ff fbeb 	bl	800236c <__gnu_Unwind_ForcedUnwind>
 8002b96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002b9a:	b012      	add	sp, #72	; 0x48
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <_Unwind_Backtrace>:
 8002ba0:	46ec      	mov	ip, sp
 8002ba2:	b500      	push	{lr}
 8002ba4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8002ba8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8002bb4:	aa01      	add	r2, sp, #4
 8002bb6:	f7ff fc5d 	bl	8002474 <__gnu_Unwind_Backtrace>
 8002bba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002bbe:	b012      	add	sp, #72	; 0x48
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <next_unwind_byte>:
 8002bc4:	7a02      	ldrb	r2, [r0, #8]
 8002bc6:	b97a      	cbnz	r2, 8002be8 <next_unwind_byte+0x24>
 8002bc8:	7a43      	ldrb	r3, [r0, #9]
 8002bca:	b1a3      	cbz	r3, 8002bf6 <next_unwind_byte+0x32>
 8002bcc:	6842      	ldr	r2, [r0, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b410      	push	{r4}
 8002bd2:	7243      	strb	r3, [r0, #9]
 8002bd4:	6813      	ldr	r3, [r2, #0]
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	1d14      	adds	r4, r2, #4
 8002bda:	7201      	strb	r1, [r0, #8]
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	6044      	str	r4, [r0, #4]
 8002be0:	6002      	str	r2, [r0, #0]
 8002be2:	bc10      	pop	{r4}
 8002be4:	0e18      	lsrs	r0, r3, #24
 8002be6:	4770      	bx	lr
 8002be8:	6803      	ldr	r3, [r0, #0]
 8002bea:	3a01      	subs	r2, #1
 8002bec:	7202      	strb	r2, [r0, #8]
 8002bee:	021a      	lsls	r2, r3, #8
 8002bf0:	6002      	str	r2, [r0, #0]
 8002bf2:	0e18      	lsrs	r0, r3, #24
 8002bf4:	4770      	bx	lr
 8002bf6:	20b0      	movs	r0, #176	; 0xb0
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <_Unwind_GetGR.constprop.0>:
 8002bfc:	b500      	push	{lr}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	aa03      	add	r2, sp, #12
 8002c02:	2300      	movs	r3, #0
 8002c04:	9200      	str	r2, [sp, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	220c      	movs	r2, #12
 8002c0a:	f7ff fbeb 	bl	80023e4 <_Unwind_VRS_Get>
 8002c0e:	9803      	ldr	r0, [sp, #12]
 8002c10:	b005      	add	sp, #20
 8002c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c16:	bf00      	nop

08002c18 <unwind_UCB_from_context>:
 8002c18:	e7f0      	b.n	8002bfc <_Unwind_GetGR.constprop.0>
 8002c1a:	bf00      	nop

08002c1c <__gnu_unwind_execute>:
 8002c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c20:	4605      	mov	r5, r0
 8002c22:	b085      	sub	sp, #20
 8002c24:	460e      	mov	r6, r1
 8002c26:	f04f 0800 	mov.w	r8, #0
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	f7ff ffca 	bl	8002bc4 <next_unwind_byte>
 8002c30:	28b0      	cmp	r0, #176	; 0xb0
 8002c32:	4604      	mov	r4, r0
 8002c34:	f000 80b2 	beq.w	8002d9c <__gnu_unwind_execute+0x180>
 8002c38:	0607      	lsls	r7, r0, #24
 8002c3a:	d520      	bpl.n	8002c7e <__gnu_unwind_execute+0x62>
 8002c3c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d04d      	beq.n	8002ce0 <__gnu_unwind_execute+0xc4>
 8002c44:	2b90      	cmp	r3, #144	; 0x90
 8002c46:	d036      	beq.n	8002cb6 <__gnu_unwind_execute+0x9a>
 8002c48:	2ba0      	cmp	r3, #160	; 0xa0
 8002c4a:	d060      	beq.n	8002d0e <__gnu_unwind_execute+0xf2>
 8002c4c:	2bb0      	cmp	r3, #176	; 0xb0
 8002c4e:	d074      	beq.n	8002d3a <__gnu_unwind_execute+0x11e>
 8002c50:	2bc0      	cmp	r3, #192	; 0xc0
 8002c52:	f000 808b 	beq.w	8002d6c <__gnu_unwind_execute+0x150>
 8002c56:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8002c5a:	2bd0      	cmp	r3, #208	; 0xd0
 8002c5c:	d10b      	bne.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002c5e:	f000 0207 	and.w	r2, r0, #7
 8002c62:	3201      	adds	r2, #1
 8002c64:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002c68:	2305      	movs	r3, #5
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f7ff fd97 	bl	80027a0 <_Unwind_VRS_Pop>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d0d9      	beq.n	8002c2a <__gnu_unwind_execute+0xe>
 8002c76:	2009      	movs	r0, #9
 8002c78:	b005      	add	sp, #20
 8002c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c7e:	f10d 090c 	add.w	r9, sp, #12
 8002c82:	2300      	movs	r3, #0
 8002c84:	4619      	mov	r1, r3
 8002c86:	0087      	lsls	r7, r0, #2
 8002c88:	f8cd 9000 	str.w	r9, [sp]
 8002c8c:	220d      	movs	r2, #13
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f7ff fba8 	bl	80023e4 <_Unwind_VRS_Get>
 8002c94:	b2ff      	uxtb	r7, r7
 8002c96:	9b03      	ldr	r3, [sp, #12]
 8002c98:	f8cd 9000 	str.w	r9, [sp]
 8002c9c:	3704      	adds	r7, #4
 8002c9e:	0660      	lsls	r0, r4, #25
 8002ca0:	bf4c      	ite	mi
 8002ca2:	1bdf      	submi	r7, r3, r7
 8002ca4:	18ff      	addpl	r7, r7, r3
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	4619      	mov	r1, r3
 8002caa:	220d      	movs	r2, #13
 8002cac:	4628      	mov	r0, r5
 8002cae:	9703      	str	r7, [sp, #12]
 8002cb0:	f7ff fbbc 	bl	800242c <_Unwind_VRS_Set>
 8002cb4:	e7b9      	b.n	8002c2a <__gnu_unwind_execute+0xe>
 8002cb6:	f000 030d 	and.w	r3, r0, #13
 8002cba:	2b0d      	cmp	r3, #13
 8002cbc:	d0db      	beq.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002cbe:	af03      	add	r7, sp, #12
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f000 020f 	and.w	r2, r0, #15
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	9700      	str	r7, [sp, #0]
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f7ff fb8a 	bl	80023e4 <_Unwind_VRS_Get>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9700      	str	r7, [sp, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	220d      	movs	r2, #13
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f7ff fba7 	bl	800242c <_Unwind_VRS_Set>
 8002cde:	e7a4      	b.n	8002c2a <__gnu_unwind_execute+0xe>
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f7ff ff6f 	bl	8002bc4 <next_unwind_byte>
 8002ce6:	0224      	lsls	r4, r4, #8
 8002ce8:	4320      	orrs	r0, r4
 8002cea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002cee:	d0c2      	beq.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002cf0:	0104      	lsls	r4, r0, #4
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	b2a2      	uxth	r2, r4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f7ff fd51 	bl	80027a0 <_Unwind_VRS_Pop>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d1b9      	bne.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002d02:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8002d06:	bf18      	it	ne
 8002d08:	f04f 0801 	movne.w	r8, #1
 8002d0c:	e78d      	b.n	8002c2a <__gnu_unwind_execute+0xe>
 8002d0e:	43c2      	mvns	r2, r0
 8002d10:	f002 0307 	and.w	r3, r2, #7
 8002d14:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8002d18:	411a      	asrs	r2, r3
 8002d1a:	0701      	lsls	r1, r0, #28
 8002d1c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	bf48      	it	mi
 8002d26:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f7ff fd37 	bl	80027a0 <_Unwind_VRS_Pop>
 8002d32:	2800      	cmp	r0, #0
 8002d34:	f43f af79 	beq.w	8002c2a <__gnu_unwind_execute+0xe>
 8002d38:	e79d      	b.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002d3a:	28b1      	cmp	r0, #177	; 0xb1
 8002d3c:	d033      	beq.n	8002da6 <__gnu_unwind_execute+0x18a>
 8002d3e:	28b2      	cmp	r0, #178	; 0xb2
 8002d40:	f000 808b 	beq.w	8002e5a <__gnu_unwind_execute+0x23e>
 8002d44:	28b3      	cmp	r0, #179	; 0xb3
 8002d46:	d039      	beq.n	8002dbc <__gnu_unwind_execute+0x1a0>
 8002d48:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8002d4c:	2bb4      	cmp	r3, #180	; 0xb4
 8002d4e:	d092      	beq.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002d50:	f000 0207 	and.w	r2, r0, #7
 8002d54:	3201      	adds	r2, #1
 8002d56:	2301      	movs	r3, #1
 8002d58:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f7ff fd1e 	bl	80027a0 <_Unwind_VRS_Pop>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	f43f af60 	beq.w	8002c2a <__gnu_unwind_execute+0xe>
 8002d6a:	e784      	b.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002d6c:	28c6      	cmp	r0, #198	; 0xc6
 8002d6e:	d042      	beq.n	8002df6 <__gnu_unwind_execute+0x1da>
 8002d70:	28c7      	cmp	r0, #199	; 0xc7
 8002d72:	d04c      	beq.n	8002e0e <__gnu_unwind_execute+0x1f2>
 8002d74:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8002d78:	2bc0      	cmp	r3, #192	; 0xc0
 8002d7a:	d05b      	beq.n	8002e34 <__gnu_unwind_execute+0x218>
 8002d7c:	28c8      	cmp	r0, #200	; 0xc8
 8002d7e:	d060      	beq.n	8002e42 <__gnu_unwind_execute+0x226>
 8002d80:	28c9      	cmp	r0, #201	; 0xc9
 8002d82:	f47f af78 	bne.w	8002c76 <__gnu_unwind_execute+0x5a>
 8002d86:	4630      	mov	r0, r6
 8002d88:	f7ff ff1c 	bl	8002bc4 <next_unwind_byte>
 8002d8c:	0302      	lsls	r2, r0, #12
 8002d8e:	f000 000f 	and.w	r0, r0, #15
 8002d92:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8002d96:	3001      	adds	r0, #1
 8002d98:	4302      	orrs	r2, r0
 8002d9a:	e765      	b.n	8002c68 <__gnu_unwind_execute+0x4c>
 8002d9c:	f1b8 0f00 	cmp.w	r8, #0
 8002da0:	d018      	beq.n	8002dd4 <__gnu_unwind_execute+0x1b8>
 8002da2:	2000      	movs	r0, #0
 8002da4:	e768      	b.n	8002c78 <__gnu_unwind_execute+0x5c>
 8002da6:	4630      	mov	r0, r6
 8002da8:	f7ff ff0c 	bl	8002bc4 <next_unwind_byte>
 8002dac:	4602      	mov	r2, r0
 8002dae:	2800      	cmp	r0, #0
 8002db0:	f43f af61 	beq.w	8002c76 <__gnu_unwind_execute+0x5a>
 8002db4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8002db8:	d0d0      	beq.n	8002d5c <__gnu_unwind_execute+0x140>
 8002dba:	e75c      	b.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f7ff ff01 	bl	8002bc4 <next_unwind_byte>
 8002dc2:	0301      	lsls	r1, r0, #12
 8002dc4:	f000 000f 	and.w	r0, r0, #15
 8002dc8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8002dcc:	1c42      	adds	r2, r0, #1
 8002dce:	2301      	movs	r3, #1
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	e7c3      	b.n	8002d5c <__gnu_unwind_execute+0x140>
 8002dd4:	ac03      	add	r4, sp, #12
 8002dd6:	4643      	mov	r3, r8
 8002dd8:	220e      	movs	r2, #14
 8002dda:	4641      	mov	r1, r8
 8002ddc:	9400      	str	r4, [sp, #0]
 8002dde:	4628      	mov	r0, r5
 8002de0:	f7ff fb00 	bl	80023e4 <_Unwind_VRS_Get>
 8002de4:	9400      	str	r4, [sp, #0]
 8002de6:	4628      	mov	r0, r5
 8002de8:	4643      	mov	r3, r8
 8002dea:	220f      	movs	r2, #15
 8002dec:	4641      	mov	r1, r8
 8002dee:	f7ff fb1d 	bl	800242c <_Unwind_VRS_Set>
 8002df2:	4640      	mov	r0, r8
 8002df4:	e740      	b.n	8002c78 <__gnu_unwind_execute+0x5c>
 8002df6:	4630      	mov	r0, r6
 8002df8:	f7ff fee4 	bl	8002bc4 <next_unwind_byte>
 8002dfc:	0301      	lsls	r1, r0, #12
 8002dfe:	f000 000f 	and.w	r0, r0, #15
 8002e02:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8002e06:	1c42      	adds	r2, r0, #1
 8002e08:	2303      	movs	r3, #3
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	e7a6      	b.n	8002d5c <__gnu_unwind_execute+0x140>
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f7ff fed8 	bl	8002bc4 <next_unwind_byte>
 8002e14:	4602      	mov	r2, r0
 8002e16:	2800      	cmp	r0, #0
 8002e18:	f43f af2d 	beq.w	8002c76 <__gnu_unwind_execute+0x5a>
 8002e1c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8002e20:	f47f af29 	bne.w	8002c76 <__gnu_unwind_execute+0x5a>
 8002e24:	2104      	movs	r1, #4
 8002e26:	4628      	mov	r0, r5
 8002e28:	f7ff fcba 	bl	80027a0 <_Unwind_VRS_Pop>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	f43f aefc 	beq.w	8002c2a <__gnu_unwind_execute+0xe>
 8002e32:	e720      	b.n	8002c76 <__gnu_unwind_execute+0x5a>
 8002e34:	f000 020f 	and.w	r2, r0, #15
 8002e38:	3201      	adds	r2, #1
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8002e40:	e78c      	b.n	8002d5c <__gnu_unwind_execute+0x140>
 8002e42:	4630      	mov	r0, r6
 8002e44:	f7ff febe 	bl	8002bc4 <next_unwind_byte>
 8002e48:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8002e4c:	f000 030f 	and.w	r3, r0, #15
 8002e50:	3210      	adds	r2, #16
 8002e52:	3301      	adds	r3, #1
 8002e54:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8002e58:	e706      	b.n	8002c68 <__gnu_unwind_execute+0x4c>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f10d 090c 	add.w	r9, sp, #12
 8002e60:	220d      	movs	r2, #13
 8002e62:	4619      	mov	r1, r3
 8002e64:	f8cd 9000 	str.w	r9, [sp]
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f7ff fabb 	bl	80023e4 <_Unwind_VRS_Get>
 8002e6e:	4630      	mov	r0, r6
 8002e70:	f7ff fea8 	bl	8002bc4 <next_unwind_byte>
 8002e74:	0602      	lsls	r2, r0, #24
 8002e76:	f04f 0702 	mov.w	r7, #2
 8002e7a:	d50c      	bpl.n	8002e96 <__gnu_unwind_execute+0x27a>
 8002e7c:	9b03      	ldr	r3, [sp, #12]
 8002e7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002e82:	40b8      	lsls	r0, r7
 8002e84:	4403      	add	r3, r0
 8002e86:	4630      	mov	r0, r6
 8002e88:	9303      	str	r3, [sp, #12]
 8002e8a:	f7ff fe9b 	bl	8002bc4 <next_unwind_byte>
 8002e8e:	0603      	lsls	r3, r0, #24
 8002e90:	f107 0707 	add.w	r7, r7, #7
 8002e94:	d4f2      	bmi.n	8002e7c <__gnu_unwind_execute+0x260>
 8002e96:	9b03      	ldr	r3, [sp, #12]
 8002e98:	f8cd 9000 	str.w	r9, [sp]
 8002e9c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8002ea0:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8002ea4:	40bc      	lsls	r4, r7
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	4414      	add	r4, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	220d      	movs	r2, #13
 8002eae:	4628      	mov	r0, r5
 8002eb0:	9403      	str	r4, [sp, #12]
 8002eb2:	f7ff fabb 	bl	800242c <_Unwind_VRS_Set>
 8002eb6:	e6b8      	b.n	8002c2a <__gnu_unwind_execute+0xe>

08002eb8 <__gnu_unwind_frame>:
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	6853      	ldr	r3, [r2, #4]
 8002ec0:	2403      	movs	r4, #3
 8002ec2:	f88d 400c 	strb.w	r4, [sp, #12]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	f102 0408 	add.w	r4, r2, #8
 8002ecc:	4608      	mov	r0, r1
 8002ece:	79d2      	ldrb	r2, [r2, #7]
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	a901      	add	r1, sp, #4
 8002ed4:	9402      	str	r4, [sp, #8]
 8002ed6:	f88d 200d 	strb.w	r2, [sp, #13]
 8002eda:	f7ff fe9f 	bl	8002c1c <__gnu_unwind_execute>
 8002ede:	b004      	add	sp, #16
 8002ee0:	bd10      	pop	{r4, pc}
 8002ee2:	bf00      	nop

08002ee4 <_Unwind_GetRegionStart>:
 8002ee4:	b508      	push	{r3, lr}
 8002ee6:	f7ff fe97 	bl	8002c18 <unwind_UCB_from_context>
 8002eea:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002eec:	bd08      	pop	{r3, pc}
 8002eee:	bf00      	nop

08002ef0 <_Unwind_GetLanguageSpecificData>:
 8002ef0:	b508      	push	{r3, lr}
 8002ef2:	f7ff fe91 	bl	8002c18 <unwind_UCB_from_context>
 8002ef6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002ef8:	79c3      	ldrb	r3, [r0, #7]
 8002efa:	3302      	adds	r3, #2
 8002efc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002f00:	bd08      	pop	{r3, pc}
 8002f02:	bf00      	nop

08002f04 <__aeabi_idiv0>:
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop

08002f08 <abort>:
 8002f08:	b508      	push	{r3, lr}
 8002f0a:	2006      	movs	r0, #6
 8002f0c:	f000 f88a 	bl	8003024 <raise>
 8002f10:	2001      	movs	r0, #1
 8002f12:	f000 fc1f 	bl	8003754 <_exit>
 8002f16:	bf00      	nop

08002f18 <_init_signal_r.part.0>:
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	f7fe fe7d 	bl	8001c1c <_malloc_r>
 8002f22:	6460      	str	r0, [r4, #68]	; 0x44
 8002f24:	b140      	cbz	r0, 8002f38 <_init_signal_r.part.0+0x20>
 8002f26:	1f03      	subs	r3, r0, #4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	307c      	adds	r0, #124	; 0x7c
 8002f2c:	f843 2f04 	str.w	r2, [r3, #4]!
 8002f30:	4283      	cmp	r3, r0
 8002f32:	d1fb      	bne.n	8002f2c <_init_signal_r.part.0+0x14>
 8002f34:	2000      	movs	r0, #0
 8002f36:	bd10      	pop	{r4, pc}
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop

08002f40 <_init_signal_r>:
 8002f40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f42:	b10b      	cbz	r3, 8002f48 <_init_signal_r+0x8>
 8002f44:	2000      	movs	r0, #0
 8002f46:	4770      	bx	lr
 8002f48:	e7e6      	b.n	8002f18 <_init_signal_r.part.0>
 8002f4a:	bf00      	nop

08002f4c <_signal_r>:
 8002f4c:	291f      	cmp	r1, #31
 8002f4e:	b570      	push	{r4, r5, r6, lr}
 8002f50:	4605      	mov	r5, r0
 8002f52:	d808      	bhi.n	8002f66 <_signal_r+0x1a>
 8002f54:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f56:	4616      	mov	r6, r2
 8002f58:	460c      	mov	r4, r1
 8002f5a:	b14b      	cbz	r3, 8002f70 <_signal_r+0x24>
 8002f5c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002f60:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	2216      	movs	r2, #22
 8002f68:	6002      	str	r2, [r0, #0]
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	f7ff ffd2 	bl	8002f18 <_init_signal_r.part.0>
 8002f74:	b908      	cbnz	r0, 8002f7a <_signal_r+0x2e>
 8002f76:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002f78:	e7f0      	b.n	8002f5c <_signal_r+0x10>
 8002f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}

08002f80 <_raise_r>:
 8002f80:	291f      	cmp	r1, #31
 8002f82:	b538      	push	{r3, r4, r5, lr}
 8002f84:	d821      	bhi.n	8002fca <_raise_r+0x4a>
 8002f86:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f88:	4605      	mov	r5, r0
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	b16a      	cbz	r2, 8002faa <_raise_r+0x2a>
 8002f8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002f92:	b153      	cbz	r3, 8002faa <_raise_r+0x2a>
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d016      	beq.n	8002fc6 <_raise_r+0x46>
 8002f98:	1c59      	adds	r1, r3, #1
 8002f9a:	d010      	beq.n	8002fbe <_raise_r+0x3e>
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8002fa4:	4798      	blx	r3
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	bd38      	pop	{r3, r4, r5, pc}
 8002faa:	4628      	mov	r0, r5
 8002fac:	f000 f870 	bl	8003090 <_getpid_r>
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	4601      	mov	r1, r0
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fba:	f000 b855 	b.w	8003068 <_kill_r>
 8002fbe:	2316      	movs	r3, #22
 8002fc0:	6003      	str	r3, [r0, #0]
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	bd38      	pop	{r3, r4, r5, pc}
 8002fca:	2316      	movs	r3, #22
 8002fcc:	6003      	str	r3, [r0, #0]
 8002fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}

08002fd4 <__sigtramp_r>:
 8002fd4:	291f      	cmp	r1, #31
 8002fd6:	d821      	bhi.n	800301c <__sigtramp_r+0x48>
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fdc:	4605      	mov	r5, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	b183      	cbz	r3, 8003004 <__sigtramp_r+0x30>
 8002fe2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8002fe6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002fea:	b14a      	cbz	r2, 8003000 <__sigtramp_r+0x2c>
 8002fec:	1c51      	adds	r1, r2, #1
 8002fee:	d010      	beq.n	8003012 <__sigtramp_r+0x3e>
 8002ff0:	2a01      	cmp	r2, #1
 8002ff2:	d00c      	beq.n	800300e <__sigtramp_r+0x3a>
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	601d      	str	r5, [r3, #0]
 8002ffa:	4790      	blx	r2
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	2001      	movs	r0, #1
 8003002:	bd38      	pop	{r3, r4, r5, pc}
 8003004:	f7ff ff88 	bl	8002f18 <_init_signal_r.part.0>
 8003008:	b928      	cbnz	r0, 8003016 <__sigtramp_r+0x42>
 800300a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800300c:	e7e9      	b.n	8002fe2 <__sigtramp_r+0xe>
 800300e:	2003      	movs	r0, #3
 8003010:	bd38      	pop	{r3, r4, r5, pc}
 8003012:	2002      	movs	r0, #2
 8003014:	bd38      	pop	{r3, r4, r5, pc}
 8003016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <raise>:
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <raise+0xc>)
 8003026:	4601      	mov	r1, r0
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	f7ff bfa9 	b.w	8002f80 <_raise_r>
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000

08003034 <signal>:
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <signal+0xc>)
 8003036:	460a      	mov	r2, r1
 8003038:	4601      	mov	r1, r0
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	f7ff bf86 	b.w	8002f4c <_signal_r>
 8003040:	20000000 	.word	0x20000000

08003044 <_init_signal>:
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <_init_signal+0x10>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800304a:	b10b      	cbz	r3, 8003050 <_init_signal+0xc>
 800304c:	2000      	movs	r0, #0
 800304e:	4770      	bx	lr
 8003050:	e762      	b.n	8002f18 <_init_signal_r.part.0>
 8003052:	bf00      	nop
 8003054:	20000000 	.word	0x20000000

08003058 <__sigtramp>:
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <__sigtramp+0xc>)
 800305a:	4601      	mov	r1, r0
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f7ff bfb9 	b.w	8002fd4 <__sigtramp_r>
 8003062:	bf00      	nop
 8003064:	20000000 	.word	0x20000000

08003068 <_kill_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	460b      	mov	r3, r1
 800306c:	4c07      	ldr	r4, [pc, #28]	; (800308c <_kill_r+0x24>)
 800306e:	4605      	mov	r5, r0
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	2300      	movs	r3, #0
 8003076:	6023      	str	r3, [r4, #0]
 8003078:	f000 fb64 	bl	8003744 <_kill>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d000      	beq.n	8003082 <_kill_r+0x1a>
 8003080:	bd38      	pop	{r3, r4, r5, pc}
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0fb      	beq.n	8003080 <_kill_r+0x18>
 8003088:	602b      	str	r3, [r5, #0]
 800308a:	bd38      	pop	{r3, r4, r5, pc}
 800308c:	20000874 	.word	0x20000874

08003090 <_getpid_r>:
 8003090:	f000 bb56 	b.w	8003740 <_getpid>

08003094 <glow_instrument_before>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void glow_instrument_before(int id, int kind, int opInp, int opOut, uint8_t **opAddr, int *opSize){
	PROFILING_EVENT("START");
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <glow_instrument_before+0x8>)
 8003096:	f000 b9a7 	b.w	80033e8 <PROFILING_EVENT>
 800309a:	bf00      	nop
 800309c:	0800de10 	.word	0x0800de10

080030a0 <glow_instrument_after>:
}
void glow_instrument_after(int id, int kind, int opInp, int opOut, uint8_t **opAddr, int *opSize){
	PROFILING_EVENT("STOP");
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <glow_instrument_after+0x8>)
 80030a2:	f000 b9a1 	b.w	80033e8 <PROFILING_EVENT>
 80030a6:	bf00      	nop
 80030a8:	0800de18 	.word	0x0800de18

080030ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030ac:	b530      	push	{r4, r5, lr}
 80030ae:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b0:	a805      	add	r0, sp, #20
 80030b2:	2244      	movs	r2, #68	; 0x44
 80030b4:	2100      	movs	r1, #0
 80030b6:	f7fe f81b 	bl	80010f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030ba:	2000      	movs	r0, #0
 80030bc:	e9cd 0000 	strd	r0, r0, [sp]
 80030c0:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80030c4:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80030c6:	f000 fe2f 	bl	8003d28 <HAL_PWREx_ControlVoltageScaling>
 80030ca:	b108      	cbz	r0, 80030d0 <SystemClock_Config+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ce:	e7fe      	b.n	80030ce <SystemClock_Config+0x22>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80030d0:	2322      	movs	r3, #34	; 0x22
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030d6:	2140      	movs	r1, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80030d8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030da:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030dc:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 30;
 80030de:	221e      	movs	r2, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80030e2:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030e4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030e8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80030ec:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030ee:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80030f0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030f2:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 30;
 80030f4:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f6:	f000 ff41 	bl	8003f7c <HAL_RCC_OscConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	b108      	cbz	r0, 8003102 <SystemClock_Config+0x56>
 80030fe:	b672      	cpsid	i
  while (1)
 8003100:	e7fe      	b.n	8003100 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003102:	240f      	movs	r4, #15
 8003104:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003106:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800310e:	4668      	mov	r0, sp
 8003110:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003112:	e9cd 4500 	strd	r4, r5, [sp]
 8003116:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800311a:	f001 fa45 	bl	80045a8 <HAL_RCC_ClockConfig>
 800311e:	b108      	cbz	r0, 8003124 <SystemClock_Config+0x78>
 8003120:	b672      	cpsid	i
  while (1)
 8003122:	e7fe      	b.n	8003122 <SystemClock_Config+0x76>
}
 8003124:	b017      	add	sp, #92	; 0x5c
 8003126:	bd30      	pop	{r4, r5, pc}

08003128 <main>:
{
 8003128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800312c:	f5ad 4d23 	sub.w	sp, sp, #41728	; 0xa300
 8003130:	b09b      	sub	sp, #108	; 0x6c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003132:	2600      	movs	r6, #0
{
 8003134:	ac1a      	add	r4, sp, #104	; 0x68
  HAL_Init();
 8003136:	f000 fb8f 	bl	8003858 <HAL_Init>
  SystemClock_Config();
 800313a:	f7ff ffb7 	bl	80030ac <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313e:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8003142:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003146:	4d86      	ldr	r5, [pc, #536]	; (8003360 <main+0x238>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f844 6c50 	str.w	r6, [r4, #-80]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800314c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  hlpuart1.Instance = LPUART1;
 800314e:	4f85      	ldr	r7, [pc, #532]	; (8003364 <main+0x23c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003156:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	f844 3c68 	str.w	r3, [r4, #-104]
 8003160:	f854 3c68 	ldr.w	r3, [r4, #-104]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003164:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800316c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	f844 3c64 	str.w	r3, [r4, #-100]
 8003176:	f854 3c64 	ldr.w	r3, [r4, #-100]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003182:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	f844 3c60 	str.w	r3, [r4, #-96]
 800318c:	f854 3c60 	ldr.w	r3, [r4, #-96]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003190:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003192:	f043 0308 	orr.w	r3, r3, #8
 8003196:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003198:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	f844 3c5c 	str.w	r3, [r4, #-92]
 80031a2:	f854 3c5c 	ldr.w	r3, [r4, #-92]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031a6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80031a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ac:	64eb      	str	r3, [r5, #76]	; 0x4c
 80031ae:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	f844 3c58 	str.w	r3, [r4, #-88]
 80031b8:	f854 3c58 	ldr.w	r3, [r4, #-88]
  HAL_PWREx_EnableVddIO2();
 80031bc:	f000 fe3a 	bl	8003e34 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80031c2:	4869      	ldr	r0, [pc, #420]	; (8003368 <main+0x240>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	64eb      	str	r3, [r5, #76]	; 0x4c
 80031ca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	f844 3c54 	str.w	r3, [r4, #-84]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80031d4:	4632      	mov	r2, r6
 80031d6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	f854 3c54 	ldr.w	r3, [r4, #-84]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80031de:	f000 fce1 	bl	8003ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80031e2:	4862      	ldr	r0, [pc, #392]	; (800336c <main+0x244>)
 80031e4:	4632      	mov	r2, r6
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	f000 fcdc 	bl	8003ba4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80031ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031f4:	e944 2314 	strd	r2, r3, [r4, #-80]	; 0x50
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031f8:	485d      	ldr	r0, [pc, #372]	; (8003370 <main+0x248>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031fc:	a906      	add	r1, sp, #24
 80031fe:	f000 fbc5 	bl	800398c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003202:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8003206:	2301      	movs	r3, #1
 8003208:	e944 2314 	strd	r2, r3, [r4, #-80]	; 0x50
 800320c:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003210:	4855      	ldr	r0, [pc, #340]	; (8003368 <main+0x240>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003212:	f04f 0900 	mov.w	r9, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003216:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003218:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321c:	f000 fbb6 	bl	800398c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003220:	2220      	movs	r2, #32
 8003222:	2300      	movs	r3, #0
 8003224:	e944 2314 	strd	r2, r3, [r4, #-80]	; 0x50
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003228:	4850      	ldr	r0, [pc, #320]	; (800336c <main+0x244>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800322c:	a906      	add	r1, sp, #24
 800322e:	f000 fbad 	bl	800398c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003232:	2301      	movs	r3, #1
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	e944 2314 	strd	r2, r3, [r4, #-80]	; 0x50
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800323a:	484c      	ldr	r0, [pc, #304]	; (800336c <main+0x244>)
 800323c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800323e:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003242:	f000 fba3 	bl	800398c <HAL_GPIO_Init>
  hlpuart1.Instance = LPUART1;
 8003246:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <main+0x24c>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003248:	60be      	str	r6, [r7, #8]
  hlpuart1.Init.BaudRate = 115200;
 800324a:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800324e:	250c      	movs	r5, #12
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003250:	4638      	mov	r0, r7
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003252:	e9c7 6603 	strd	r6, r6, [r7, #12]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003256:	e9c7 6608 	strd	r6, r6, [r7, #32]
  hlpuart1.Init.BaudRate = 115200;
 800325a:	e9c7 3800 	strd	r3, r8, [r7]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800325e:	61be      	str	r6, [r7, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003260:	62be      	str	r6, [r7, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003262:	667e      	str	r6, [r7, #100]	; 0x64
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003264:	617d      	str	r5, [r7, #20]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003266:	f002 f957 	bl	8005518 <HAL_UART_Init>
 800326a:	b108      	cbz	r0, 8003270 <main+0x148>
 800326c:	b672      	cpsid	i
  while (1)
 800326e:	e7fe      	b.n	800326e <main+0x146>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003270:	4601      	mov	r1, r0
 8003272:	4638      	mov	r0, r7
 8003274:	f002 f9da 	bl	800562c <HAL_UARTEx_SetTxFifoThreshold>
 8003278:	b108      	cbz	r0, 800327e <main+0x156>
 800327a:	b672      	cpsid	i
  while (1)
 800327c:	e7fe      	b.n	800327c <main+0x154>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800327e:	4601      	mov	r1, r0
 8003280:	4638      	mov	r0, r7
 8003282:	f002 fa11 	bl	80056a8 <HAL_UARTEx_SetRxFifoThreshold>
 8003286:	b108      	cbz	r0, 800328c <main+0x164>
 8003288:	b672      	cpsid	i
  while (1)
 800328a:	e7fe      	b.n	800328a <main+0x162>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800328c:	4638      	mov	r0, r7
 800328e:	f002 f9af 	bl	80055f0 <HAL_UARTEx_DisableFifoMode>
 8003292:	4603      	mov	r3, r0
 8003294:	b108      	cbz	r0, 800329a <main+0x172>
 8003296:	b672      	cpsid	i
  while (1)
 8003298:	e7fe      	b.n	8003298 <main+0x170>
  huart3.Instance = USART3;
 800329a:	4e37      	ldr	r6, [pc, #220]	; (8003378 <main+0x250>)
 800329c:	4a37      	ldr	r2, [pc, #220]	; (800337c <main+0x254>)
  huart3.Init.BaudRate = 115200;
 800329e:	f8c6 8004 	str.w	r8, [r6, #4]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032a2:	4630      	mov	r0, r6
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032a4:	e9c6 3302 	strd	r3, r3, [r6, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032a8:	e9c6 3504 	strd	r3, r5, [r6, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032ac:	e9c6 3306 	strd	r3, r3, [r6, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032b0:	e9c6 3308 	strd	r3, r3, [r6, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b4:	62b3      	str	r3, [r6, #40]	; 0x28
  huart3.Instance = USART3;
 80032b6:	6032      	str	r2, [r6, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032b8:	f002 f92e 	bl	8005518 <HAL_UART_Init>
 80032bc:	b108      	cbz	r0, 80032c2 <main+0x19a>
 80032be:	b672      	cpsid	i
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <main+0x198>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032c2:	4601      	mov	r1, r0
 80032c4:	4630      	mov	r0, r6
 80032c6:	f002 f9b1 	bl	800562c <HAL_UARTEx_SetTxFifoThreshold>
 80032ca:	b108      	cbz	r0, 80032d0 <main+0x1a8>
 80032cc:	b672      	cpsid	i
  while (1)
 80032ce:	e7fe      	b.n	80032ce <main+0x1a6>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032d0:	4601      	mov	r1, r0
 80032d2:	4630      	mov	r0, r6
 80032d4:	f002 f9e8 	bl	80056a8 <HAL_UARTEx_SetRxFifoThreshold>
 80032d8:	b108      	cbz	r0, 80032de <main+0x1b6>
 80032da:	b672      	cpsid	i
  while (1)
 80032dc:	e7fe      	b.n	80032dc <main+0x1b4>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80032de:	4630      	mov	r0, r6
 80032e0:	f002 f986 	bl	80055f0 <HAL_UARTEx_DisableFifoMode>
 80032e4:	b108      	cbz	r0, 80032ea <main+0x1c2>
 80032e6:	b672      	cpsid	i
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <main+0x1c0>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <main+0x258>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80032ec:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80032ee:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80032f2:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80032f6:	6318      	str	r0, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80032f8:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80032fa:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80032fc:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80032fe:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003300:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003302:	e9c3 1206 	strd	r1, r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003306:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800330a:	f000 fc51 	bl	8003bb0 <HAL_PCD_Init>
 800330e:	4605      	mov	r5, r0
 8003310:	b108      	cbz	r0, 8003316 <main+0x1ee>
 8003312:	b672      	cpsid	i
  while (1)
 8003314:	e7fe      	b.n	8003314 <main+0x1ec>
	  GLOW_MEM_ALIGN(MODEL_MEM_ALIGN)
 8003316:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
	  uint8_t constantWeight[MODEL_CONSTANT_MEM_SIZE] = {
 800331a:	491a      	ldr	r1, [pc, #104]	; (8003384 <main+0x25c>)
 800331c:	f44f 42bf 	mov.w	r2, #24448	; 0x5f80
 8003320:	4620      	mov	r0, r4
 8003322:	f7fd fe4b 	bl	8000fbc <memcpy>
	  PROFILING_START("MAIN loop timing");
 8003326:	4818      	ldr	r0, [pc, #96]	; (8003388 <main+0x260>)
 8003328:	f000 f836 	bl	8003398 <PROFILING_START>
 800332c:	b672      	cpsid	i
	  PROFILING_EVENT("BEGIN");
 800332e:	4817      	ldr	r0, [pc, #92]	; (800338c <main+0x264>)
 8003330:	f000 f85a 	bl	80033e8 <PROFILING_EVENT>
	  model_return = model(constantWeight, mutableWeight, activations);
 8003334:	f504 4120 	add.w	r1, r4, #40960	; 0xa000
 8003338:	31c0      	adds	r1, #192	; 0xc0
 800333a:	f504 42bf 	add.w	r2, r4, #24448	; 0x5f80
 800333e:	4620      	mov	r0, r4
 8003340:	f7fc ff82 	bl	8000248 <model>
	  PROFILING_EVENT("END");
 8003344:	4812      	ldr	r0, [pc, #72]	; (8003390 <main+0x268>)
 8003346:	f000 f84f 	bl	80033e8 <PROFILING_EVENT>
  __ASM volatile ("cpsie i" : : : "memory");
 800334a:	b662      	cpsie	i
	  PROFILING_STOP(&hlpuart1);
 800334c:	4638      	mov	r0, r7
 800334e:	f000 f865 	bl	800341c <PROFILING_STOP>
}
 8003352:	4628      	mov	r0, r5
 8003354:	f50d 4d23 	add.w	sp, sp, #41728	; 0xa300
 8003358:	b01b      	add	sp, #108	; 0x6c
 800335a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	200007e0 	.word	0x200007e0
 8003368:	48000400 	.word	0x48000400
 800336c:	48001800 	.word	0x48001800
 8003370:	48000800 	.word	0x48000800
 8003374:	40008000 	.word	0x40008000
 8003378:	20000244 	.word	0x20000244
 800337c:	40004800 	.word	0x40004800
 8003380:	200002d4 	.word	0x200002d4
 8003384:	08007190 	.word	0x08007190
 8003388:	0800de20 	.word	0x0800de20
 800338c:	0800de34 	.word	0x0800de34
 8003390:	0800de3c 	.word	0x0800de3c

08003394 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003394:	b672      	cpsid	i
  while (1)
 8003396:	e7fe      	b.n	8003396 <Error_Handler+0x2>

08003398 <PROFILING_START>:
 *
 * @param profile_name Profiler name
 */
void PROFILING_START(const char *profile_name)
{
  prof_name = profile_name;
 8003398:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <PROFILING_START+0x34>)
  event_count = 0;
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <PROFILING_START+0x38>)

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800339c:	490d      	ldr	r1, [pc, #52]	; (80033d4 <PROFILING_START+0x3c>)
{
 800339e:	b430      	push	{r4, r5}
  prof_name = profile_name;
 80033a0:	6010      	str	r0, [r2, #0]
  event_count = 0;
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80033a6:	68ca      	ldr	r2, [r1, #12]
  *LAR = 0xC5ACCE55;
 80033a8:	4d0b      	ldr	r5, [pc, #44]	; (80033d8 <PROFILING_START+0x40>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable counter
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <PROFILING_START+0x44>)
  *LAR = 0xC5ACCE55;
 80033ac:	4c0c      	ldr	r4, [pc, #48]	; (80033e0 <PROFILING_START+0x48>)
  //DWT->CYCCNT  = time_start = 0;
  time_start = DWT->CYCCNT;
 80033ae:	480d      	ldr	r0, [pc, #52]	; (80033e4 <PROFILING_START+0x4c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80033b0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80033b4:	60ca      	str	r2, [r1, #12]
  *LAR = 0xC5ACCE55;
 80033b6:	682a      	ldr	r2, [r5, #0]
 80033b8:	6014      	str	r4, [r2, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable counter
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
  time_start = DWT->CYCCNT;
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	6003      	str	r3, [r0, #0]
}
 80033c6:	bc30      	pop	{r4, r5}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000170 	.word	0x20000170
 80033d0:	20000068 	.word	0x20000068
 80033d4:	e000edf0 	.word	0xe000edf0
 80033d8:	20000064 	.word	0x20000064
 80033dc:	e0001000 	.word	0xe0001000
 80033e0:	c5acce55 	.word	0xc5acce55
 80033e4:	2000023c 	.word	0x2000023c

080033e8 <PROFILING_EVENT>:
 *
 * @param event Event name
 */
void PROFILING_EVENT(const char *event)
{
  if (event_count == __PROF_STOPED)
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <PROFILING_EVENT+0x24>)
 80033ea:	7813      	ldrb	r3, [r2, #0]
    return;

  if (event_count < MAX_EVENT_COUNT)
 80033ec:	2b31      	cmp	r3, #49	; 0x31
 80033ee:	d900      	bls.n	80033f2 <PROFILING_EVENT+0xa>
 80033f0:	4770      	bx	lr
{
 80033f2:	b430      	push	{r4, r5}
  {
    time_event[event_count] = DWT->CYCCNT;
 80033f4:	4d06      	ldr	r5, [pc, #24]	; (8003410 <PROFILING_EVENT+0x28>)
 80033f6:	4c07      	ldr	r4, [pc, #28]	; (8003414 <PROFILING_EVENT+0x2c>)
    event_name[event_count] = event;
 80033f8:	4907      	ldr	r1, [pc, #28]	; (8003418 <PROFILING_EVENT+0x30>)
    time_event[event_count] = DWT->CYCCNT;
 80033fa:	686d      	ldr	r5, [r5, #4]
 80033fc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    event_name[event_count] = event;
 8003400:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    event_count++;
 8003404:	3301      	adds	r3, #1
 8003406:	7013      	strb	r3, [r2, #0]
  }
}
 8003408:	bc30      	pop	{r4, r5}
 800340a:	4770      	bx	lr
 800340c:	20000068 	.word	0x20000068
 8003410:	e0001000 	.word	0xe0001000
 8003414:	20000174 	.word	0x20000174
 8003418:	200000a8 	.word	0x200000a8

0800341c <PROFILING_STOP>:

/**
 * @brief Stop profiler. Print event table to ITM Stimulus Port 0
 */
void PROFILING_STOP(UART_HandleTypeDef *huart2)
{
 800341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t timestamp;
  int32_t delta_t;

  tick_per_1us = SystemCoreClock / 1000000;

  if (event_count == __PROF_STOPED)
 8003420:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <PROFILING_STOP+0xd4>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2bff      	cmp	r3, #255	; 0xff
{
 8003426:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
  if (event_count == __PROF_STOPED)
 800342a:	d057      	beq.n	80034dc <PROFILING_STOP+0xc0>
  tick_per_1us = SystemCoreClock / 1000000;
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <PROFILING_STOP+0xd8>)
 800342e:	4680      	mov	r8, r0
    return;
  }

  //DEBUG_PRINTF("Profiling \"%s\" sequence: \r\n"
  //             "--Event-----------------------|--timestamp--|----delta_t---\r\n", prof_name);
  uint8_t *init[100] = {};
 8003430:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003434:	2100      	movs	r1, #0
 8003436:	a81e      	add	r0, sp, #120	; 0x78
  tick_per_1us = SystemCoreClock / 1000000;
 8003438:	681c      	ldr	r4, [r3, #0]
  uint8_t *init[100] = {};
 800343a:	f7fd fe59 	bl	80010f0 <memset>
  sprintf(init, "Profiling \"%s\" sequence: \r\n--Event-----------------------|--timestamp--|----delta_t---\r\n", prof_name);
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <PROFILING_STOP+0xdc>)
 8003440:	492e      	ldr	r1, [pc, #184]	; (80034fc <PROFILING_STOP+0xe0>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	a81e      	add	r0, sp, #120	; 0x78
 8003446:	f7fd fec1 	bl	80011cc <siprintf>
  HAL_UART_Transmit (huart2, init, sizeof (init), 10);
 800344a:	230a      	movs	r3, #10
 800344c:	a91e      	add	r1, sp, #120	; 0x78
 800344e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003452:	4640      	mov	r0, r8
 8003454:	f001 ff9a 	bl	800538c <HAL_UART_Transmit>
  time_prev = 0;

  for (int i = 0; i < event_count; i++)
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <PROFILING_STOP+0xd4>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b38b      	cbz	r3, 80034c2 <PROFILING_STOP+0xa6>
  tick_per_1us = SystemCoreClock / 1000000;
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <PROFILING_STOP+0xe4>)
 8003460:	4f28      	ldr	r7, [pc, #160]	; (8003504 <PROFILING_STOP+0xe8>)
 8003462:	4e29      	ldr	r6, [pc, #164]	; (8003508 <PROFILING_STOP+0xec>)
 8003464:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003514 <PROFILING_STOP+0xf8>
    timestamp = (time_event[i] - time_start) / tick_per_1us;
    delta_t = timestamp - time_prev;
    time_prev = timestamp;
    //DEBUG_PRINTF("%-30s:%9d µs | +%9d µs\r\n", event_name[i], timestamp, delta_t);
    uint8_t data[100] = {};
	sprintf(data, "%-30s:%9d µs | +%9d µs\r\n", event_name[i], timestamp, delta_t);
 8003468:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8003518 <PROFILING_STOP+0xfc>
  tick_per_1us = SystemCoreClock / 1000000;
 800346c:	fba3 3404 	umull	r3, r4, r3, r4
 8003470:	0ca3      	lsrs	r3, r4, #18
  for (int i = 0; i < event_count; i++)
 8003472:	2500      	movs	r5, #0
  tick_per_1us = SystemCoreClock / 1000000;
 8003474:	9303      	str	r3, [sp, #12]
  time_prev = 0;
 8003476:	462c      	mov	r4, r5
    timestamp = (time_event[i] - time_start) / tick_per_1us;
 8003478:	f857 3b04 	ldr.w	r3, [r7], #4
    uint8_t data[100] = {};
 800347c:	2200      	movs	r2, #0
 800347e:	46a3      	mov	fp, r4
    timestamp = (time_event[i] - time_start) / tick_per_1us;
 8003480:	f8da 4000 	ldr.w	r4, [sl]
    uint8_t data[100] = {};
 8003484:	9205      	str	r2, [sp, #20]
 8003486:	2100      	movs	r1, #0
 8003488:	2260      	movs	r2, #96	; 0x60
 800348a:	a806      	add	r0, sp, #24
    timestamp = (time_event[i] - time_start) / tick_per_1us;
 800348c:	1b1c      	subs	r4, r3, r4
 800348e:	9b03      	ldr	r3, [sp, #12]
 8003490:	fbb4 f4f3 	udiv	r4, r4, r3
    uint8_t data[100] = {};
 8003494:	f7fd fe2c 	bl	80010f0 <memset>
    delta_t = timestamp - time_prev;
 8003498:	eba4 030b 	sub.w	r3, r4, fp
	sprintf(data, "%-30s:%9d µs | +%9d µs\r\n", event_name[i], timestamp, delta_t);
 800349c:	f856 2b04 	ldr.w	r2, [r6], #4
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4649      	mov	r1, r9
 80034a4:	4623      	mov	r3, r4
 80034a6:	a805      	add	r0, sp, #20
 80034a8:	f7fd fe90 	bl	80011cc <siprintf>
    HAL_UART_Transmit (huart2, data, sizeof (data), 10);
 80034ac:	230a      	movs	r3, #10
 80034ae:	2264      	movs	r2, #100	; 0x64
 80034b0:	a905      	add	r1, sp, #20
 80034b2:	4640      	mov	r0, r8
 80034b4:	f001 ff6a 	bl	800538c <HAL_UART_Transmit>
  for (int i = 0; i < event_count; i++)
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <PROFILING_STOP+0xd4>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	3501      	adds	r5, #1
 80034be:	42ab      	cmp	r3, r5
 80034c0:	dcda      	bgt.n	8003478 <PROFILING_STOP+0x5c>
  }
  //DEBUG_PRINTF("\r\n");
  HAL_UART_Transmit (huart2, "\r\n", sizeof ("\r\n"), 10);
 80034c2:	4912      	ldr	r1, [pc, #72]	; (800350c <PROFILING_STOP+0xf0>)
 80034c4:	4640      	mov	r0, r8
 80034c6:	230a      	movs	r3, #10
 80034c8:	2203      	movs	r2, #3
 80034ca:	f001 ff5f 	bl	800538c <HAL_UART_Transmit>
  event_count = __PROF_STOPED;
 80034ce:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <PROFILING_STOP+0xd4>)
 80034d0:	23ff      	movs	r3, #255	; 0xff
 80034d2:	7013      	strb	r3, [r2, #0]
}
 80034d4:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 80034d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	HAL_UART_Transmit (huart2, warning, sizeof (warning), 10);
 80034dc:	490c      	ldr	r1, [pc, #48]	; (8003510 <PROFILING_STOP+0xf4>)
 80034de:	230a      	movs	r3, #10
 80034e0:	2204      	movs	r2, #4
 80034e2:	f001 ff53 	bl	800538c <HAL_UART_Transmit>
}
 80034e6:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ee:	bf00      	nop
 80034f0:	20000068 	.word	0x20000068
 80034f4:	2000006c 	.word	0x2000006c
 80034f8:	20000170 	.word	0x20000170
 80034fc:	0800de6c 	.word	0x0800de6c
 8003500:	431bde83 	.word	0x431bde83
 8003504:	20000174 	.word	0x20000174
 8003508:	200000a8 	.word	0x200000a8
 800350c:	0800de68 	.word	0x0800de68
 8003510:	0800de40 	.word	0x0800de40
 8003514:	2000023c 	.word	0x2000023c
 8003518:	0800dec8 	.word	0x0800dec8

0800351c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_MspInit+0x2c>)
 800351e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	661a      	str	r2, [r3, #96]	; 0x60
 8003526:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003528:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	f002 0201 	and.w	r2, r2, #1
 800352e:	9200      	str	r2, [sp, #0]
 8003530:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003534:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003538:	659a      	str	r2, [r3, #88]	; 0x58
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003544:	b002      	add	sp, #8
 8003546:	4770      	bx	lr
 8003548:	40021000 	.word	0x40021000

0800354c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800354c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354e:	2400      	movs	r4, #0
{
 8003550:	b0af      	sub	sp, #188	; 0xbc
 8003552:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003554:	2294      	movs	r2, #148	; 0x94
 8003556:	4621      	mov	r1, r4
 8003558:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800355e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003562:	9408      	str	r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003564:	f7fd fdc4 	bl	80010f0 <memset>
  if(huart->Instance==LPUART1)
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	4a33      	ldr	r2, [pc, #204]	; (8003638 <HAL_UART_MspInit+0xec>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_UART_MspInit+0x2e>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8003570:	4a32      	ldr	r2, [pc, #200]	; (800363c <HAL_UART_MspInit+0xf0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02f      	beq.n	80035d6 <HAL_UART_MspInit+0x8a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003576:	b02f      	add	sp, #188	; 0xbc
 8003578:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800357a:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800357c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800357e:	941d      	str	r4, [sp, #116]	; 0x74
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003580:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003582:	f001 fa5f 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 8003586:	2800      	cmp	r0, #0
 8003588:	d150      	bne.n	800362c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800358a:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_UART_MspInit+0xf4>)
 800358c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
 8003594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003596:	f002 0201 	and.w	r2, r2, #1
 800359a:	9200      	str	r2, [sp, #0]
 800359c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800359e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80035a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80035b0:	f44f 76c0 	mov.w	r6, #384	; 0x180
    HAL_PWREx_EnableVddIO2();
 80035b4:	f000 fc3e 	bl	8003e34 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80035b8:	2702      	movs	r7, #2
 80035ba:	2200      	movs	r2, #0
 80035bc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035be:	4821      	ldr	r0, [pc, #132]	; (8003644 <HAL_UART_MspInit+0xf8>)
 80035c0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80035c2:	2408      	movs	r4, #8
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80035c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80035c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80035cc:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035ce:	f000 f9dd 	bl	800398c <HAL_GPIO_Init>
}
 80035d2:	b02f      	add	sp, #188	; 0xbc
 80035d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035d6:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035d8:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80035da:	941a      	str	r4, [sp, #104]	; 0x68
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035dc:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035de:	f001 fa31 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 80035e2:	bb30      	cbnz	r0, 8003632 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035e4:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e6:	4818      	ldr	r0, [pc, #96]	; (8003648 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80035e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58
 80035f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035f2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80035f6:	9202      	str	r2, [sp, #8]
 80035f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035fc:	f042 0208 	orr.w	r2, r2, #8
 8003600:	64da      	str	r2, [r3, #76]	; 0x4c
 8003602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800360a:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800360c:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800360e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003610:	2200      	movs	r2, #0
 8003612:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003614:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003616:	f44f 7440 	mov.w	r4, #768	; 0x300
 800361a:	2502      	movs	r5, #2
 800361c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003620:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003624:	f000 f9b2 	bl	800398c <HAL_GPIO_Init>
}
 8003628:	b02f      	add	sp, #188	; 0xbc
 800362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800362c:	f7ff feb2 	bl	8003394 <Error_Handler>
 8003630:	e7ab      	b.n	800358a <HAL_UART_MspInit+0x3e>
      Error_Handler();
 8003632:	f7ff feaf 	bl	8003394 <Error_Handler>
 8003636:	e7d5      	b.n	80035e4 <HAL_UART_MspInit+0x98>
 8003638:	40008000 	.word	0x40008000
 800363c:	40004800 	.word	0x40004800
 8003640:	40021000 	.word	0x40021000
 8003644:	48001800 	.word	0x48001800
 8003648:	48000c00 	.word	0x48000c00

0800364c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364e:	2400      	movs	r4, #0
{
 8003650:	b0af      	sub	sp, #188	; 0xbc
 8003652:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003654:	4621      	mov	r1, r4
 8003656:	a809      	add	r0, sp, #36	; 0x24
 8003658:	2294      	movs	r2, #148	; 0x94
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800365e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003662:	9408      	str	r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003664:	f7fd fd44 	bl	80010f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366e:	d001      	beq.n	8003674 <HAL_PCD_MspInit+0x28>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003670:	b02f      	add	sp, #188	; 0xbc
 8003672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003678:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800367a:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800367c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800367e:	f001 f9e1 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 8003682:	2800      	cmp	r0, #0
 8003684:	d144      	bne.n	8003710 <HAL_PCD_MspInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003686:	4c24      	ldr	r4, [pc, #144]	; (8003718 <HAL_PCD_MspInit+0xcc>)
 8003688:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003690:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003698:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
 800369c:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800369e:	200a      	movs	r0, #10
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80036a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80036a6:	2200      	movs	r2, #0
 80036a8:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80036aa:	9008      	str	r0, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80036b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b4:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80036b6:	f44f 7600 	mov.w	r6, #512	; 0x200
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f000 f967 	bl	800398c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80036be:	2700      	movs	r7, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	2300      	movs	r3, #0
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80036c2:	a904      	add	r1, sp, #16
 80036c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80036ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80036ce:	f000 f95d 	bl	800398c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80036d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80036da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e0:	9302      	str	r3, [sp, #8]
 80036e2:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	d40f      	bmi.n	800370a <HAL_PCD_MspInit+0xbe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80036f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 80036fc:	f000 fb92 	bl	8003e24 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	65a3      	str	r3, [r4, #88]	; 0x58
 8003708:	e7b2      	b.n	8003670 <HAL_PCD_MspInit+0x24>
      HAL_PWREx_EnableVddUSB();
 800370a:	f000 fb8b 	bl	8003e24 <HAL_PWREx_EnableVddUSB>
}
 800370e:	e7af      	b.n	8003670 <HAL_PCD_MspInit+0x24>
      Error_Handler();
 8003710:	f7ff fe40 	bl	8003394 <Error_Handler>
 8003714:	e7b7      	b.n	8003686 <HAL_PCD_MspInit+0x3a>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000

0800371c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800371c:	e7fe      	b.n	800371c <NMI_Handler>
 800371e:	bf00      	nop

08003720 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003720:	e7fe      	b.n	8003720 <HardFault_Handler>
 8003722:	bf00      	nop

08003724 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003724:	e7fe      	b.n	8003724 <MemManage_Handler>
 8003726:	bf00      	nop

08003728 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003728:	e7fe      	b.n	8003728 <BusFault_Handler>
 800372a:	bf00      	nop

0800372c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800372c:	e7fe      	b.n	800372c <UsageFault_Handler>
 800372e:	bf00      	nop

08003730 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <DebugMon_Handler>:
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <PendSV_Handler>:
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop

0800373c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800373c:	f000 b89c 	b.w	8003878 <HAL_IncTick>

08003740 <_getpid>:
 8003740:	2001      	movs	r0, #1
 8003742:	4770      	bx	lr

08003744 <_kill>:
 8003744:	b508      	push	{r3, lr}
 8003746:	f7fd fc0f 	bl	8000f68 <__errno>
 800374a:	2316      	movs	r3, #22
 800374c:	6003      	str	r3, [r0, #0]
 800374e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003752:	bd08      	pop	{r3, pc}

08003754 <_exit>:
 8003754:	b508      	push	{r3, lr}
 8003756:	f7fd fc07 	bl	8000f68 <__errno>
 800375a:	2316      	movs	r3, #22
 800375c:	6003      	str	r3, [r0, #0]
 800375e:	e7fe      	b.n	800375e <_exit+0xa>

08003760 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003760:	490c      	ldr	r1, [pc, #48]	; (8003794 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003762:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8003764:	680b      	ldr	r3, [r1, #0]
{
 8003766:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003768:	4c0c      	ldr	r4, [pc, #48]	; (800379c <_sbrk+0x3c>)
 800376a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800376c:	b12b      	cbz	r3, 800377a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800376e:	4418      	add	r0, r3
 8003770:	4290      	cmp	r0, r2
 8003772:	d807      	bhi.n	8003784 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003774:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8003776:	4618      	mov	r0, r3
 8003778:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <_sbrk+0x40>)
 800377c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800377e:	4418      	add	r0, r3
 8003780:	4290      	cmp	r0, r2
 8003782:	d9f7      	bls.n	8003774 <_sbrk+0x14>
    errno = ENOMEM;
 8003784:	f7fd fbf0 	bl	8000f68 <__errno>
 8003788:	230c      	movs	r3, #12
 800378a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800378c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd10      	pop	{r4, pc}
 8003794:	20000240 	.word	0x20000240
 8003798:	200a0000 	.word	0x200a0000
 800379c:	00000400 	.word	0x00000400
 80037a0:	20000878 	.word	0x20000878

080037a4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80037a4:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <SystemInit+0x10>)
 80037a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037bc:	f7ff fff2 	bl	80037a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037c0:	480c      	ldr	r0, [pc, #48]	; (80037f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80037c2:	490d      	ldr	r1, [pc, #52]	; (80037f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037c4:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <LoopForever+0xe>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c8:	e002      	b.n	80037d0 <LoopCopyDataInit>

080037ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ce:	3304      	adds	r3, #4

080037d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037d4:	d3f9      	bcc.n	80037ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037d8:	4c0a      	ldr	r4, [pc, #40]	; (8003804 <LoopForever+0x16>)
  movs r3, #0
 80037da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037dc:	e001      	b.n	80037e2 <LoopFillZerobss>

080037de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e0:	3204      	adds	r2, #4

080037e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037e4:	d3fb      	bcc.n	80037de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037e6:	f7fd fbc5 	bl	8000f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037ea:	f7ff fc9d 	bl	8003128 <main>

080037ee <LoopForever>:

LoopForever:
    b LoopForever
 80037ee:	e7fe      	b.n	80037ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80037f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80037fc:	0800e084 	.word	0x0800e084
  ldr r2, =_sbss
 8003800:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003804:	20000878 	.word	0x20000878

08003808 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003808:	e7fe      	b.n	8003808 <ADC1_IRQHandler>
	...

0800380c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800380c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <HAL_InitTick+0x40>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b90b      	cbnz	r3, 8003818 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003814:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003816:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003818:	490d      	ldr	r1, [pc, #52]	; (8003850 <HAL_InitTick+0x44>)
 800381a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800381e:	4605      	mov	r5, r0
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	6808      	ldr	r0, [r1, #0]
 8003826:	fbb0 f0f3 	udiv	r0, r0, r3
 800382a:	f000 f895 	bl	8003958 <HAL_SYSTICK_Config>
 800382e:	4604      	mov	r4, r0
 8003830:	2800      	cmp	r0, #0
 8003832:	d1ef      	bne.n	8003814 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003834:	2d0f      	cmp	r5, #15
 8003836:	d8ed      	bhi.n	8003814 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003838:	4602      	mov	r2, r0
 800383a:	4629      	mov	r1, r5
 800383c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003840:	f000 f852 	bl	80038e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_InitTick+0x48>)
 8003846:	4620      	mov	r0, r4
 8003848:	601d      	str	r5, [r3, #0]
}
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	20000070 	.word	0x20000070
 8003850:	2000006c 	.word	0x2000006c
 8003854:	20000074 	.word	0x20000074

08003858 <HAL_Init>:
{
 8003858:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800385a:	2003      	movs	r0, #3
 800385c:	f000 f830 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003860:	2000      	movs	r0, #0
 8003862:	f7ff ffd3 	bl	800380c <HAL_InitTick>
 8003866:	b110      	cbz	r0, 800386e <HAL_Init+0x16>
    status = HAL_ERROR;
 8003868:	2401      	movs	r4, #1
}
 800386a:	4620      	mov	r0, r4
 800386c:	bd10      	pop	{r4, pc}
 800386e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003870:	f7ff fe54 	bl	800351c <HAL_MspInit>
}
 8003874:	4620      	mov	r0, r4
 8003876:	bd10      	pop	{r4, pc}

08003878 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003878:	4a03      	ldr	r2, [pc, #12]	; (8003888 <HAL_IncTick+0x10>)
 800387a:	4b04      	ldr	r3, [pc, #16]	; (800388c <HAL_IncTick+0x14>)
 800387c:	6811      	ldr	r1, [r2, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	440b      	add	r3, r1
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000870 	.word	0x20000870
 800388c:	20000070 	.word	0x20000070

08003890 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003890:	4b01      	ldr	r3, [pc, #4]	; (8003898 <HAL_GetTick+0x8>)
 8003892:	6818      	ldr	r0, [r3, #0]
}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000870 	.word	0x20000870

0800389c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80038a0:	f7ff fff6 	bl	8003890 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038a4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80038a6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80038a8:	d002      	beq.n	80038b0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_Delay+0x20>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038b0:	f7ff ffee 	bl	8003890 <HAL_GetTick>
 80038b4:	1b43      	subs	r3, r0, r5
 80038b6:	42a3      	cmp	r3, r4
 80038b8:	d3fa      	bcc.n	80038b0 <HAL_Delay+0x14>
  {
  }
}
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	20000070 	.word	0x20000070

080038c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c0:	4908      	ldr	r1, [pc, #32]	; (80038e4 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80038c2:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c6:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80038cc:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ce:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80038dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80038e0:	60cb      	str	r3, [r1, #12]
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_NVIC_SetPriority+0x68>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f0:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f2:	f1c3 0507 	rsb	r5, r3, #7
 80038f6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f8:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	bf28      	it	cs
 80038fe:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003900:	2c06      	cmp	r4, #6
 8003902:	d919      	bls.n	8003938 <HAL_NVIC_SetPriority+0x50>
 8003904:	3b03      	subs	r3, #3
 8003906:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800390a:	409c      	lsls	r4, r3
 800390c:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003914:	40ac      	lsls	r4, r5
 8003916:	ea21 0104 	bic.w	r1, r1, r4
 800391a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800391c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003922:	db0c      	blt.n	800393e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003924:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003928:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800392c:	0109      	lsls	r1, r1, #4
 800392e:	b2c9      	uxtb	r1, r1
 8003930:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003934:	bc30      	pop	{r4, r5}
 8003936:	4770      	bx	lr
 8003938:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	4613      	mov	r3, r2
 800393c:	e7e8      	b.n	8003910 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_NVIC_SetPriority+0x6c>)
 8003940:	f000 000f 	and.w	r0, r0, #15
 8003944:	0109      	lsls	r1, r1, #4
 8003946:	4403      	add	r3, r0
 8003948:	b2c9      	uxtb	r1, r1
 800394a:	7619      	strb	r1, [r3, #24]
 800394c:	bc30      	pop	{r4, r5}
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00
 8003954:	e000ecfc 	.word	0xe000ecfc

08003958 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003958:	3801      	subs	r0, #1
 800395a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800395e:	d20e      	bcs.n	800397e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003964:	4c08      	ldr	r4, [pc, #32]	; (8003988 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003966:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003968:	20f0      	movs	r0, #240	; 0xf0
 800396a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800396e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003970:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003972:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003974:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8003976:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800397e:	2001      	movs	r0, #1
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	e000e010 	.word	0xe000e010
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003990:	680c      	ldr	r4, [r1, #0]
{
 8003992:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003994:	2c00      	cmp	r4, #0
 8003996:	f000 808d 	beq.w	8003ab4 <HAL_GPIO_Init+0x128>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	f8df b200 	ldr.w	fp, [pc, #512]	; 8003b9c <HAL_GPIO_Init+0x210>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800399e:	f8df a200 	ldr.w	sl, [pc, #512]	; 8003ba0 <HAL_GPIO_Init+0x214>
  uint32_t position = 0x00u;
 80039a2:	2300      	movs	r3, #0
 80039a4:	4688      	mov	r8, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039a6:	f04f 0c01 	mov.w	ip, #1
 80039aa:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80039ae:	ea1c 0904 	ands.w	r9, ip, r4
 80039b2:	d07a      	beq.n	8003aaa <HAL_GPIO_Init+0x11e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80039b8:	f005 0203 	and.w	r2, r5, #3
 80039bc:	1e51      	subs	r1, r2, #1
 80039be:	2901      	cmp	r1, #1
 80039c0:	ea4f 0743 	mov.w	r7, r3, lsl #1
 80039c4:	d979      	bls.n	8003aba <HAL_GPIO_Init+0x12e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c6:	2a03      	cmp	r2, #3
 80039c8:	f040 80b7 	bne.w	8003b3a <HAL_GPIO_Init+0x1ae>
 80039cc:	40ba      	lsls	r2, r7
 80039ce:	43d1      	mvns	r1, r2
 80039d0:	9100      	str	r1, [sp, #0]
      temp = GPIOx->MODER;
 80039d2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039d4:	9900      	ldr	r1, [sp, #0]
 80039d6:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039d8:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039da:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80039de:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039e0:	d063      	beq.n	8003aaa <HAL_GPIO_Init+0x11e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e2:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	f8cb 2060 	str.w	r2, [fp, #96]	; 0x60
 80039ee:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 80039f2:	f023 0103 	bic.w	r1, r3, #3
 80039f6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80039fa:	f002 0201 	and.w	r2, r2, #1
 80039fe:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8003a02:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a04:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a08:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a0a:	688f      	ldr	r7, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a0c:	00b6      	lsls	r6, r6, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	40b2      	lsls	r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a12:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a16:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a1a:	d01f      	beq.n	8003a5c <HAL_GPIO_Init+0xd0>
 8003a1c:	4f58      	ldr	r7, [pc, #352]	; (8003b80 <HAL_GPIO_Init+0x1f4>)
 8003a1e:	42b8      	cmp	r0, r7
 8003a20:	f000 8095 	beq.w	8003b4e <HAL_GPIO_Init+0x1c2>
 8003a24:	4f57      	ldr	r7, [pc, #348]	; (8003b84 <HAL_GPIO_Init+0x1f8>)
 8003a26:	42b8      	cmp	r0, r7
 8003a28:	f000 8096 	beq.w	8003b58 <HAL_GPIO_Init+0x1cc>
 8003a2c:	4f56      	ldr	r7, [pc, #344]	; (8003b88 <HAL_GPIO_Init+0x1fc>)
 8003a2e:	42b8      	cmp	r0, r7
 8003a30:	f000 8088 	beq.w	8003b44 <HAL_GPIO_Init+0x1b8>
 8003a34:	4f55      	ldr	r7, [pc, #340]	; (8003b8c <HAL_GPIO_Init+0x200>)
 8003a36:	42b8      	cmp	r0, r7
 8003a38:	f000 8098 	beq.w	8003b6c <HAL_GPIO_Init+0x1e0>
 8003a3c:	4f54      	ldr	r7, [pc, #336]	; (8003b90 <HAL_GPIO_Init+0x204>)
 8003a3e:	42b8      	cmp	r0, r7
 8003a40:	f000 8099 	beq.w	8003b76 <HAL_GPIO_Init+0x1ea>
 8003a44:	4f53      	ldr	r7, [pc, #332]	; (8003b94 <HAL_GPIO_Init+0x208>)
 8003a46:	42b8      	cmp	r0, r7
 8003a48:	f000 808b 	beq.w	8003b62 <HAL_GPIO_Init+0x1d6>
 8003a4c:	4f52      	ldr	r7, [pc, #328]	; (8003b98 <HAL_GPIO_Init+0x20c>)
 8003a4e:	42b8      	cmp	r0, r7
 8003a50:	bf0c      	ite	eq
 8003a52:	2707      	moveq	r7, #7
 8003a54:	2708      	movne	r7, #8
 8003a56:	fa07 f606 	lsl.w	r6, r7, r6
 8003a5a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a5c:	608a      	str	r2, [r1, #8]
        temp = EXTI->RTSR1;
 8003a5e:	f8da 2008 	ldr.w	r2, [sl, #8]
        temp &= ~(iocurrent);
 8003a62:	ea6f 0609 	mvn.w	r6, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a66:	02e9      	lsls	r1, r5, #11
        temp &= ~(iocurrent);
 8003a68:	bf54      	ite	pl
 8003a6a:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003a6c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8003a70:	f8ca 2008 	str.w	r2, [sl, #8]

        temp = EXTI->FTSR1;
 8003a74:	f8da 100c 	ldr.w	r1, [sl, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a78:	02aa      	lsls	r2, r5, #10
        temp &= ~(iocurrent);
 8003a7a:	bf54      	ite	pl
 8003a7c:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8003a7e:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->FTSR1 = temp;
 8003a82:	f8ca 100c 	str.w	r1, [sl, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a86:	f8da 1004 	ldr.w	r1, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a8a:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8003a8c:	bf54      	ite	pl
 8003a8e:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8003a90:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->EMR1 = temp;
 8003a94:	f8ca 1004 	str.w	r1, [sl, #4]

        temp = EXTI->IMR1;
 8003a98:	f8da 2000 	ldr.w	r2, [sl]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a9c:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8003a9e:	bf54      	ite	pl
 8003aa0:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003aa2:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8003aa6:	f8ca 2000 	str.w	r2, [sl]
      }
    }

    position++;
 8003aaa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aac:	fa34 f203 	lsrs.w	r2, r4, r3
 8003ab0:	f47f af79 	bne.w	80039a6 <HAL_GPIO_Init+0x1a>
  }
}
 8003ab4:	b005      	add	sp, #20
 8003ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003aba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003abc:	2103      	movs	r1, #3
 8003abe:	40b9      	lsls	r1, r7
 8003ac0:	ea26 0e01 	bic.w	lr, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ac4:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003ac8:	40be      	lsls	r6, r7
 8003aca:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8003ace:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ad0:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad4:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ad8:	ea2e 0c0c 	bic.w	ip, lr, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003adc:	409e      	lsls	r6, r3
 8003ade:	ea46 060c 	orr.w	r6, r6, ip
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ae2:	43c9      	mvns	r1, r1
 8003ae4:	9100      	str	r1, [sp, #0]
        GPIOx->OTYPER = temp;
 8003ae6:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8003ae8:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aea:	ea06 0c01 	and.w	ip, r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aee:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8003af2:	40be      	lsls	r6, r7
 8003af4:	ea46 060c 	orr.w	r6, r6, ip
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af8:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003afa:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afc:	d001      	beq.n	8003b02 <HAL_GPIO_Init+0x176>
 8003afe:	40ba      	lsls	r2, r7
 8003b00:	e767      	b.n	80039d2 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8003b02:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003b06:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b0a:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003b0e:	f8de 1020 	ldr.w	r1, [lr, #32]
 8003b12:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b14:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003b18:	210f      	movs	r1, #15
 8003b1a:	fa01 f60c 	lsl.w	r6, r1, ip
 8003b1e:	9901      	ldr	r1, [sp, #4]
 8003b20:	ea21 0606 	bic.w	r6, r1, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b24:	f8d8 1010 	ldr.w	r1, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b28:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b2a:	fa01 f60c 	lsl.w	r6, r1, ip
 8003b2e:	9901      	ldr	r1, [sp, #4]
 8003b30:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8003b32:	40ba      	lsls	r2, r7
 8003b34:	f8ce 6020 	str.w	r6, [lr, #32]
 8003b38:	e74b      	b.n	80039d2 <HAL_GPIO_Init+0x46>
 8003b3a:	2103      	movs	r1, #3
 8003b3c:	40b9      	lsls	r1, r7
 8003b3e:	43c9      	mvns	r1, r1
 8003b40:	9100      	str	r1, [sp, #0]
 8003b42:	e7d1      	b.n	8003ae8 <HAL_GPIO_Init+0x15c>
 8003b44:	2703      	movs	r7, #3
 8003b46:	fa07 f606 	lsl.w	r6, r7, r6
 8003b4a:	4332      	orrs	r2, r6
 8003b4c:	e786      	b.n	8003a5c <HAL_GPIO_Init+0xd0>
 8003b4e:	2701      	movs	r7, #1
 8003b50:	fa07 f606 	lsl.w	r6, r7, r6
 8003b54:	4332      	orrs	r2, r6
 8003b56:	e781      	b.n	8003a5c <HAL_GPIO_Init+0xd0>
 8003b58:	2702      	movs	r7, #2
 8003b5a:	fa07 f606 	lsl.w	r6, r7, r6
 8003b5e:	4332      	orrs	r2, r6
 8003b60:	e77c      	b.n	8003a5c <HAL_GPIO_Init+0xd0>
 8003b62:	2706      	movs	r7, #6
 8003b64:	fa07 f606 	lsl.w	r6, r7, r6
 8003b68:	4332      	orrs	r2, r6
 8003b6a:	e777      	b.n	8003a5c <HAL_GPIO_Init+0xd0>
 8003b6c:	2704      	movs	r7, #4
 8003b6e:	fa07 f606 	lsl.w	r6, r7, r6
 8003b72:	4332      	orrs	r2, r6
 8003b74:	e772      	b.n	8003a5c <HAL_GPIO_Init+0xd0>
 8003b76:	2705      	movs	r7, #5
 8003b78:	fa07 f606 	lsl.w	r6, r7, r6
 8003b7c:	4332      	orrs	r2, r6
 8003b7e:	e76d      	b.n	8003a5c <HAL_GPIO_Init+0xd0>
 8003b80:	48000400 	.word	0x48000400
 8003b84:	48000800 	.word	0x48000800
 8003b88:	48000c00 	.word	0x48000c00
 8003b8c:	48001000 	.word	0x48001000
 8003b90:	48001400 	.word	0x48001400
 8003b94:	48001800 	.word	0x48001800
 8003b98:	48001c00 	.word	0x48001c00
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40010400 	.word	0x40010400

08003ba4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba4:	b10a      	cbz	r2, 8003baa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ba6:	6181      	str	r1, [r0, #24]
 8003ba8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003baa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop

08003bb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	f000 8086 	beq.w	8003cc6 <HAL_PCD_Init+0x116>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bba:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8003bbe:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d077      	beq.n	8003cba <HAL_PCD_Init+0x10a>
 8003bca:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bd4:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bd6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8003bda:	bf08      	it	eq
 8003bdc:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8003bde:	f001 fde1 	bl	80057a4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003be2:	f856 cb10 	ldr.w	ip, [r6], #16
 8003be6:	4637      	mov	r7, r6
 8003be8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003bea:	466c      	mov	r4, sp
 8003bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bf2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003bf6:	e884 0003 	stmia.w	r4, {r0, r1}
 8003bfa:	1d2f      	adds	r7, r5, #4
 8003bfc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003c00:	4660      	mov	r0, ip
 8003c02:	f001 fd8f 	bl	8005724 <USB_CoreInit>
 8003c06:	4604      	mov	r4, r0
 8003c08:	b130      	cbz	r0, 8003c18 <HAL_PCD_Init+0x68>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8003c0a:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c0c:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8003c0e:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c10:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8003c14:	b00b      	add	sp, #44	; 0x2c
 8003c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c18:	4601      	mov	r1, r0
 8003c1a:	6828      	ldr	r0, [r5, #0]
 8003c1c:	f001 fdca 	bl	80057b4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c20:	6868      	ldr	r0, [r5, #4]
 8003c22:	b358      	cbz	r0, 8003c7c <HAL_PCD_Init+0xcc>
 8003c24:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8003c26:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c2a:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8003c2c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8003c30:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c34:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c40:	fa5f f28c 	uxtb.w	r2, ip
 8003c44:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c46:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8003c4a:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c4e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c52:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c54:	d3ea      	bcc.n	8003c2c <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8003c56:	2200      	movs	r2, #0
 8003c58:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8003c5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c60:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8003c62:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c66:	b2cc      	uxtb	r4, r1
 8003c68:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c6a:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8003c6e:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c72:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7a:	d3ed      	bcc.n	8003c58 <HAL_PCD_Init+0xa8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c7e:	466c      	mov	r4, sp
 8003c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c86:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003c8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8003c8e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003c92:	6828      	ldr	r0, [r5, #0]
 8003c94:	f001 fdc6 	bl	8005824 <USB_DevInit>
 8003c98:	4604      	mov	r4, r0
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d1b5      	bne.n	8003c0a <HAL_PCD_Init+0x5a>
  if (hpcd->Init.lpm_enable == 1U)
 8003c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8003ca0:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ca4:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8003ca6:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8003ca8:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8003cac:	d00f      	beq.n	8003cce <HAL_PCD_Init+0x11e>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cae:	6828      	ldr	r0, [r5, #0]
 8003cb0:	f001 feb4 	bl	8005a1c <USB_DevDisconnect>
}
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	b00b      	add	sp, #44	; 0x2c
 8003cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003cba:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8003cbe:	f7ff fcc5 	bl	800364c <HAL_PCD_MspInit>
 8003cc2:	6828      	ldr	r0, [r5, #0]
 8003cc4:	e782      	b.n	8003bcc <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8003cc6:	2401      	movs	r4, #1
}
 8003cc8:	4620      	mov	r0, r4
 8003cca:	b00b      	add	sp, #44	; 0x2c
 8003ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 f802 	bl	8003cd8 <HAL_PCDEx_ActivateLPM>
 8003cd4:	e7eb      	b.n	8003cae <HAL_PCD_Init+0xfe>
 8003cd6:	bf00      	nop

08003cd8 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd8:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8003cda:	2100      	movs	r1, #0
{
 8003cdc:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8003cde:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ce2:	6993      	ldr	r3, [r2, #24]
  hpcd->lpm_active = 1U;
 8003ce4:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  hpcd->lpm_active = 1U;
 8003cea:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cee:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cf0:	6d53      	ldr	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	f043 0303 	orr.w	r3, r3, #3
}
 8003cfe:	4608      	mov	r0, r1
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d00:	6553      	str	r3, [r2, #84]	; 0x54
}
 8003d02:	4770      	bx	lr

08003d04 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_PWREx_GetVoltageRange+0x20>)
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003d0c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003d10:	d006      	beq.n	8003d20 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d12:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d16:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8003d1a:	bf18      	it	ne
 8003d1c:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40007000 	.word	0x40007000

08003d28 <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d28:	4a3b      	ldr	r2, [pc, #236]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8003d2a:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d2c:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d2e:	b968      	cbnz	r0, 8003d4c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d38:	d014      	beq.n	8003d64 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d3a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003d3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    }
  }
#endif

  return HAL_OK;
}
 8003d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d4a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003d50:	d02f      	beq.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d5a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003d5c:	2000      	movs	r0, #0
}
 8003d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d62:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d64:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d68:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003d6a:	482d      	ldr	r0, [pc, #180]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d6c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003d70:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d74:	6811      	ldr	r1, [r2, #0]
 8003d76:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003d7a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003d7e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d80:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d82:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d84:	2332      	movs	r3, #50	; 0x32
 8003d86:	fb03 f304 	mul.w	r3, r3, r4
 8003d8a:	fba0 0303 	umull	r0, r3, r0, r3
 8003d8e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d90:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d92:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d96:	d506      	bpl.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003d98:	e000      	b.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x74>
 8003d9a:	b123      	cbz	r3, 8003da6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003d9c:	6951      	ldr	r1, [r2, #20]
 8003d9e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003da0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da4:	d4f9      	bmi.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003da6:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	055c      	lsls	r4, r3, #21
 8003dac:	d5d6      	bpl.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8003dae:	2003      	movs	r0, #3
 8003db0:	e7c9      	b.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	d009      	beq.n	8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8003dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8003dc8:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8003dce:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003dd6:	4812      	ldr	r0, [pc, #72]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003ddc:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de0:	6811      	ldr	r1, [r2, #0]
 8003de2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003de6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003dea:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dec:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dee:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003df0:	2332      	movs	r3, #50	; 0x32
 8003df2:	fb03 f304 	mul.w	r3, r3, r4
 8003df6:	fba0 0303 	umull	r0, r3, r0, r3
 8003dfa:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfc:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dfe:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e02:	d5d0      	bpl.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003e04:	e001      	b.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0xe2>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0cd      	beq.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003e0a:	6951      	ldr	r1, [r2, #20]
 8003e0c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003e0e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e12:	d5c8      	bpl.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003e14:	e7f7      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0xde>
 8003e16:	bf00      	nop
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	2000006c 	.word	0x2000006c
 8003e20:	431bde83 	.word	0x431bde83

08003e24 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e24:	4a02      	ldr	r2, [pc, #8]	; (8003e30 <HAL_PWREx_EnableVddUSB+0xc>)
 8003e26:	6853      	ldr	r3, [r2, #4]
 8003e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e2c:	6053      	str	r3, [r2, #4]
}
 8003e2e:	4770      	bx	lr
 8003e30:	40007000 	.word	0x40007000

08003e34 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e34:	4a02      	ldr	r2, [pc, #8]	; (8003e40 <HAL_PWREx_EnableVddIO2+0xc>)
 8003e36:	6853      	ldr	r3, [r2, #4]
 8003e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e3c:	6053      	str	r3, [r2, #4]
}
 8003e3e:	4770      	bx	lr
 8003e40:	40007000 	.word	0x40007000

08003e44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e44:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e46:	4d1e      	ldr	r5, [pc, #120]	; (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003e48:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e4a:	00db      	lsls	r3, r3, #3
{
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e50:	d51b      	bpl.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x46>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e52:	f7ff ff57 	bl	8003d04 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e56:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003e5a:	d028      	beq.n	8003eae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003e5c:	2c7f      	cmp	r4, #127	; 0x7f
 8003e5e:	d812      	bhi.n	8003e86 <RCC_SetFlashLatencyFromMSIRange+0x42>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003e60:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8003e64:	fab4 f484 	clz	r4, r4
 8003e68:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e6a:	4916      	ldr	r1, [pc, #88]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003e6c:	680b      	ldr	r3, [r1, #0]
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	4323      	orrs	r3, r4
 8003e74:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e76:	6808      	ldr	r0, [r1, #0]
 8003e78:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003e7c:	1b00      	subs	r0, r0, r4
 8003e7e:	bf18      	it	ne
 8003e80:	2001      	movne	r0, #1
 8003e82:	b003      	add	sp, #12
 8003e84:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e86:	2402      	movs	r4, #2
 8003e88:	e7ef      	b.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x26>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e8a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	65ab      	str	r3, [r5, #88]	; 0x58
 8003e92:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003e9c:	f7ff ff32 	bl	8003d04 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eac:	d1d6      	bne.n	8003e5c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8003eae:	2c80      	cmp	r4, #128	; 0x80
 8003eb0:	d904      	bls.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0x78>
      if(msirange > RCC_MSIRANGE_10)
 8003eb2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eb4:	bf8c      	ite	hi
 8003eb6:	2402      	movhi	r4, #2
 8003eb8:	2401      	movls	r4, #1
 8003eba:	e7d6      	b.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ebc:	2400      	movs	r4, #0
 8003ebe:	e7d4      	b.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x26>
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40022000 	.word	0x40022000

08003ec8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003eca:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ecc:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ece:	f013 030c 	ands.w	r3, r3, #12
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1e>
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d038      	beq.n	8003f4a <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d034      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	4824      	ldr	r0, [pc, #144]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ee0:	bf18      	it	ne
 8003ee2:	2000      	movne	r0, #0
 8003ee4:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ee6:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ee8:	6811      	ldr	r1, [r2, #0]
 8003eea:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eec:	bf54      	ite	pl
 8003eee:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ef2:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8003ef4:	491f      	ldr	r1, [pc, #124]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ef6:	bf54      	ite	pl
 8003ef8:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003efc:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8003f00:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f04:	b303      	cbz	r3, 8003f48 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d12d      	bne.n	8003f66 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d025      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x9a>
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	bf08      	it	eq
 8003f1c:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f20:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f22:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f2a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f2e:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f32:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f34:	3101      	adds	r1, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f36:	fb00 f002 	mul.w	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f3a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f3c:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 8003f40:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f44:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003f46:	480c      	ldr	r0, [pc, #48]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8003f48:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f4a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f4e:	2a01      	cmp	r2, #1
 8003f50:	d0c9      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003f5a:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f5c:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8003f60:	d1d9      	bne.n	8003f16 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8003f62:	4805      	ldr	r0, [pc, #20]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f64:	e7db      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x56>
 8003f66:	2000      	movs	r0, #0
  return sysclockfreq;
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	007a1200 	.word	0x007a1200
 8003f74:	0800defc 	.word	0x0800defc
 8003f78:	00f42400 	.word	0x00f42400

08003f7c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	f000 827b 	beq.w	8004478 <HAL_RCC_OscConfig+0x4fc>
{
 8003f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4ab5      	ldr	r2, [pc, #724]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f88:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f8a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f8c:	68d6      	ldr	r6, [r2, #12]
 8003f8e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f90:	06d8      	lsls	r0, r3, #27
{
 8003f92:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f94:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f98:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f9c:	d52e      	bpl.n	8003ffc <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	f000 811d 	beq.w	80041de <HAL_RCC_OscConfig+0x262>
 8003fa4:	2d0c      	cmp	r5, #12
 8003fa6:	f000 8117 	beq.w	80041d8 <HAL_RCC_OscConfig+0x25c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003faa:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8003fac:	4fab      	ldr	r7, [pc, #684]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 819a 	beq.w	80042e8 <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003fbc:	f7ff fc68 	bl	8003890 <HAL_GetTick>
 8003fc0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc2:	e006      	b.n	8003fd2 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fc4:	f7ff fc64 	bl	8003890 <HAL_GetTick>
 8003fc8:	eba0 0008 	sub.w	r0, r0, r8
 8003fcc:	2802      	cmp	r0, #2
 8003fce:	f200 819b 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	079b      	lsls	r3, r3, #30
 8003fd6:	d5f5      	bpl.n	8003fc4 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f043 0308 	orr.w	r3, r3, #8
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6a22      	ldr	r2, [r4, #32]
 8003fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69e2      	ldr	r2, [r4, #28]
 8003ff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffc:	07d9      	lsls	r1, r3, #31
 8003ffe:	f100 80c2 	bmi.w	8004186 <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004002:	0799      	lsls	r1, r3, #30
 8004004:	d523      	bpl.n	800404e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004006:	2d04      	cmp	r5, #4
 8004008:	f000 815e 	beq.w	80042c8 <HAL_RCC_OscConfig+0x34c>
 800400c:	2d0c      	cmp	r5, #12
 800400e:	f000 8158 	beq.w	80042c2 <HAL_RCC_OscConfig+0x346>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004012:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004014:	4e91      	ldr	r6, [pc, #580]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 81d2 	beq.w	80043c0 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_HSI_ENABLE();
 800401c:	6833      	ldr	r3, [r6, #0]
 800401e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004022:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004024:	f7ff fc34 	bl	8003890 <HAL_GetTick>
 8004028:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402a:	e005      	b.n	8004038 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402c:	f7ff fc30 	bl	8003890 <HAL_GetTick>
 8004030:	1bc0      	subs	r0, r0, r7
 8004032:	2802      	cmp	r0, #2
 8004034:	f200 8168 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004038:	6833      	ldr	r3, [r6, #0]
 800403a:	055b      	lsls	r3, r3, #21
 800403c:	d5f6      	bpl.n	800402c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	6873      	ldr	r3, [r6, #4]
 8004040:	6922      	ldr	r2, [r4, #16]
 8004042:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004046:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800404a:	6073      	str	r3, [r6, #4]
 800404c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404e:	0719      	lsls	r1, r3, #28
 8004050:	d519      	bpl.n	8004086 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004052:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004054:	4e81      	ldr	r6, [pc, #516]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 811f 	beq.w	800429a <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_LSI_ENABLE();
 800405c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004068:	f7ff fc12 	bl	8003890 <HAL_GetTick>
 800406c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800406e:	e005      	b.n	800407c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004070:	f7ff fc0e 	bl	8003890 <HAL_GetTick>
 8004074:	1bc0      	subs	r0, r0, r7
 8004076:	2802      	cmp	r0, #2
 8004078:	f200 8146 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004080:	079a      	lsls	r2, r3, #30
 8004082:	d5f5      	bpl.n	8004070 <HAL_RCC_OscConfig+0xf4>
 8004084:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004086:	075e      	lsls	r6, r3, #29
 8004088:	d53f      	bpl.n	800410a <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800408a:	4b74      	ldr	r3, [pc, #464]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
 800408c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800408e:	00d0      	lsls	r0, r2, #3
 8004090:	f100 8194 	bmi.w	80043bc <HAL_RCC_OscConfig+0x440>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004096:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800409a:	659a      	str	r2, [r3, #88]	; 0x58
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80040a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a8:	4f6d      	ldr	r7, [pc, #436]	; (8004260 <HAL_RCC_OscConfig+0x2e4>)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	05d9      	lsls	r1, r3, #23
 80040ae:	f140 81e5 	bpl.w	800447c <HAL_RCC_OscConfig+0x500>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f000 8195 	beq.w	80043e4 <HAL_RCC_OscConfig+0x468>
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	f000 8209 	beq.w	80044d2 <HAL_RCC_OscConfig+0x556>
 80040c0:	4f66      	ldr	r7, [pc, #408]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
 80040c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80040ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 8189 	bne.w	80043f2 <HAL_RCC_OscConfig+0x476>
      tickstart = HAL_GetTick();
 80040e0:	f7ff fbd6 	bl	8003890 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80040e8:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040ea:	e006      	b.n	80040fa <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7ff fbd0 	bl	8003890 <HAL_GetTick>
 80040f0:	eba0 0008 	sub.w	r0, r0, r8
 80040f4:	4548      	cmp	r0, r9
 80040f6:	f200 8107 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040fe:	0798      	lsls	r0, r3, #30
 8004100:	d4f4      	bmi.n	80040ec <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8004102:	2e00      	cmp	r6, #0
 8004104:	f040 81cc 	bne.w	80044a0 <HAL_RCC_OscConfig+0x524>
 8004108:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800410a:	0699      	lsls	r1, r3, #26
 800410c:	d518      	bpl.n	8004140 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800410e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004110:	4e52      	ldr	r6, [pc, #328]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 819b 	beq.w	800444e <HAL_RCC_OscConfig+0x4d2>
      __HAL_RCC_HSI48_ENABLE();
 8004118:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004124:	f7ff fbb4 	bl	8003890 <HAL_GetTick>
 8004128:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800412a:	e005      	b.n	8004138 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800412c:	f7ff fbb0 	bl	8003890 <HAL_GetTick>
 8004130:	1bc0      	subs	r0, r0, r7
 8004132:	2802      	cmp	r0, #2
 8004134:	f200 80e8 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004138:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800413c:	079a      	lsls	r2, r3, #30
 800413e:	d5f5      	bpl.n	800412c <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004140:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8138 	beq.w	80043b8 <HAL_RCC_OscConfig+0x43c>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004148:	2b02      	cmp	r3, #2
 800414a:	f000 81d0 	beq.w	80044ee <HAL_RCC_OscConfig+0x572>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800414e:	2d0c      	cmp	r5, #12
 8004150:	f000 8093 	beq.w	800427a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_DISABLE();
 8004154:	4c41      	ldr	r4, [pc, #260]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800415e:	f7ff fb97 	bl	8003890 <HAL_GetTick>
 8004162:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004164:	e005      	b.n	8004172 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004166:	f7ff fb93 	bl	8003890 <HAL_GetTick>
 800416a:	1b40      	subs	r0, r0, r5
 800416c:	2802      	cmp	r0, #2
 800416e:	f200 80cb 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8004178:	d1f5      	bne.n	8004166 <HAL_RCC_OscConfig+0x1ea>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800417a:	68e1      	ldr	r1, [r4, #12]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <HAL_RCC_OscConfig+0x2e8>)
 800417e:	400a      	ands	r2, r1
  return HAL_OK;
 8004180:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004182:	60e2      	str	r2, [r4, #12]
 8004184:	e07a      	b.n	800427c <HAL_RCC_OscConfig+0x300>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004186:	2d08      	cmp	r5, #8
 8004188:	d07d      	beq.n	8004286 <HAL_RCC_OscConfig+0x30a>
 800418a:	2d0c      	cmp	r5, #12
 800418c:	d079      	beq.n	8004282 <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	f000 80bc 	beq.w	8004310 <HAL_RCC_OscConfig+0x394>
 8004198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800419c:	f000 818c 	beq.w	80044b8 <HAL_RCC_OscConfig+0x53c>
 80041a0:	4f2e      	ldr	r7, [pc, #184]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041a8:	603a      	str	r2, [r7, #0]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041b0:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f040 80b1 	bne.w	800431a <HAL_RCC_OscConfig+0x39e>
        tickstart = HAL_GetTick();
 80041b8:	f7ff fb6a 	bl	8003890 <HAL_GetTick>
 80041bc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041be:	e006      	b.n	80041ce <HAL_RCC_OscConfig+0x252>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7ff fb66 	bl	8003890 <HAL_GetTick>
 80041c4:	eba0 0008 	sub.w	r0, r0, r8
 80041c8:	2864      	cmp	r0, #100	; 0x64
 80041ca:	f200 809d 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	0398      	lsls	r0, r3, #14
 80041d2:	d4f5      	bmi.n	80041c0 <HAL_RCC_OscConfig+0x244>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	e714      	b.n	8004002 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041d8:	2e01      	cmp	r6, #1
 80041da:	f47f aee6 	bne.w	8003faa <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041de:	4b1f      	ldr	r3, [pc, #124]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	0799      	lsls	r1, r3, #30
 80041e4:	d446      	bmi.n	8004274 <HAL_RCC_OscConfig+0x2f8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
 80041e8:	6a20      	ldr	r0, [r4, #32]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	0712      	lsls	r2, r2, #28
 80041ee:	bf56      	itet	pl
 80041f0:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80041f4:	681b      	ldrmi	r3, [r3, #0]
 80041f6:	091b      	lsrpl	r3, r3, #4
 80041f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fc:	4298      	cmp	r0, r3
 80041fe:	f200 810e 	bhi.w	800441e <HAL_RCC_OscConfig+0x4a2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f042 0208 	orr.w	r2, r2, #8
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004212:	4302      	orrs	r2, r0
 8004214:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	69e1      	ldr	r1, [r4, #28]
 800421a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800421e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004222:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004224:	2d00      	cmp	r5, #0
 8004226:	f000 8141 	beq.w	80044ac <HAL_RCC_OscConfig+0x530>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800422a:	f7ff fe4d 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 800422e:	4a0b      	ldr	r2, [pc, #44]	; (800425c <HAL_RCC_OscConfig+0x2e0>)
 8004230:	490d      	ldr	r1, [pc, #52]	; (8004268 <HAL_RCC_OscConfig+0x2ec>)
 8004232:	6892      	ldr	r2, [r2, #8]
 8004234:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004238:	4603      	mov	r3, r0
 800423a:	5c8a      	ldrb	r2, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 800423c:	480b      	ldr	r0, [pc, #44]	; (800426c <HAL_RCC_OscConfig+0x2f0>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800423e:	490c      	ldr	r1, [pc, #48]	; (8004270 <HAL_RCC_OscConfig+0x2f4>)
        status = HAL_InitTick(uwTickPrio);
 8004240:	6800      	ldr	r0, [r0, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004242:	f002 021f 	and.w	r2, r2, #31
 8004246:	40d3      	lsrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 800424a:	f7ff fadf 	bl	800380c <HAL_InitTick>
        if(status != HAL_OK)
 800424e:	b9a8      	cbnz	r0, 800427c <HAL_RCC_OscConfig+0x300>
 8004250:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004252:	07d9      	lsls	r1, r3, #31
 8004254:	f57f aed5 	bpl.w	8004002 <HAL_RCC_OscConfig+0x86>
 8004258:	e795      	b.n	8004186 <HAL_RCC_OscConfig+0x20a>
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	40007000 	.word	0x40007000
 8004264:	feeefffc 	.word	0xfeeefffc
 8004268:	0800dee4 	.word	0x0800dee4
 800426c:	20000074 	.word	0x20000074
 8004270:	2000006c 	.word	0x2000006c
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004274:	69a3      	ldr	r3, [r4, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1b5      	bne.n	80041e6 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
 800427a:	2001      	movs	r0, #1
}
 800427c:	b003      	add	sp, #12
 800427e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004282:	2e03      	cmp	r6, #3
 8004284:	d183      	bne.n	800418e <HAL_RCC_OscConfig+0x212>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004286:	4aa8      	ldr	r2, [pc, #672]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	0392      	lsls	r2, r2, #14
 800428c:	f57f aeb9 	bpl.w	8004002 <HAL_RCC_OscConfig+0x86>
 8004290:	6862      	ldr	r2, [r4, #4]
 8004292:	2a00      	cmp	r2, #0
 8004294:	f47f aeb5 	bne.w	8004002 <HAL_RCC_OscConfig+0x86>
 8004298:	e7ef      	b.n	800427a <HAL_RCC_OscConfig+0x2fe>
      __HAL_RCC_LSI_DISABLE();
 800429a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80042a6:	f7ff faf3 	bl	8003890 <HAL_GetTick>
 80042aa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ac:	e004      	b.n	80042b8 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ae:	f7ff faef 	bl	8003890 <HAL_GetTick>
 80042b2:	1bc0      	subs	r0, r0, r7
 80042b4:	2802      	cmp	r0, #2
 80042b6:	d827      	bhi.n	8004308 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80042bc:	079b      	lsls	r3, r3, #30
 80042be:	d4f6      	bmi.n	80042ae <HAL_RCC_OscConfig+0x332>
 80042c0:	e6e0      	b.n	8004084 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042c2:	2e02      	cmp	r6, #2
 80042c4:	f47f aea5 	bne.w	8004012 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042c8:	4a97      	ldr	r2, [pc, #604]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	0552      	lsls	r2, r2, #21
 80042ce:	d502      	bpl.n	80042d6 <HAL_RCC_OscConfig+0x35a>
 80042d0:	68e2      	ldr	r2, [r4, #12]
 80042d2:	2a00      	cmp	r2, #0
 80042d4:	d0d1      	beq.n	800427a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4994      	ldr	r1, [pc, #592]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 80042d8:	6920      	ldr	r0, [r4, #16]
 80042da:	684a      	ldr	r2, [r1, #4]
 80042dc:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80042e0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80042e4:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e6:	e6b2      	b.n	800404e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80042f0:	f7ff face 	bl	8003890 <HAL_GetTick>
 80042f4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	0798      	lsls	r0, r3, #30
 80042fa:	d5a9      	bpl.n	8004250 <HAL_RCC_OscConfig+0x2d4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042fc:	f7ff fac8 	bl	8003890 <HAL_GetTick>
 8004300:	eba0 0008 	sub.w	r0, r0, r8
 8004304:	2802      	cmp	r0, #2
 8004306:	d9f6      	bls.n	80042f6 <HAL_RCC_OscConfig+0x37a>
            return HAL_TIMEOUT;
 8004308:	2003      	movs	r0, #3
}
 800430a:	b003      	add	sp, #12
 800430c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004310:	4a85      	ldr	r2, [pc, #532]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800431a:	f7ff fab9 	bl	8003890 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800431e:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8004528 <HAL_RCC_OscConfig+0x5ac>
        tickstart = HAL_GetTick();
 8004322:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004324:	e004      	b.n	8004330 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004326:	f7ff fab3 	bl	8003890 <HAL_GetTick>
 800432a:	1bc0      	subs	r0, r0, r7
 800432c:	2864      	cmp	r0, #100	; 0x64
 800432e:	d8eb      	bhi.n	8004308 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004330:	f8d8 3000 	ldr.w	r3, [r8]
 8004334:	039b      	lsls	r3, r3, #14
 8004336:	d5f6      	bpl.n	8004326 <HAL_RCC_OscConfig+0x3aa>
 8004338:	e74c      	b.n	80041d4 <HAL_RCC_OscConfig+0x258>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800433a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800433c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004340:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004346:	f040 80da 	bne.w	80044fe <HAL_RCC_OscConfig+0x582>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800434a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800434c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004350:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004354:	f040 80d3 	bne.w	80044fe <HAL_RCC_OscConfig+0x582>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004358:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800435a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800435e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004362:	f040 80cc 	bne.w	80044fe <HAL_RCC_OscConfig+0x582>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004366:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004368:	0852      	lsrs	r2, r2, #1
 800436a:	3a01      	subs	r2, #1
 800436c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004370:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004374:	f040 80c3 	bne.w	80044fe <HAL_RCC_OscConfig+0x582>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004378:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800437a:	0852      	lsrs	r2, r2, #1
 800437c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004380:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004382:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004386:	f040 80ba 	bne.w	80044fe <HAL_RCC_OscConfig+0x582>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	6833      	ldr	r3, [r6, #0]
 800438c:	019a      	lsls	r2, r3, #6
 800438e:	d413      	bmi.n	80043b8 <HAL_RCC_OscConfig+0x43c>
          __HAL_RCC_PLL_ENABLE();
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004396:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004398:	68f3      	ldr	r3, [r6, #12]
 800439a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439e:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 80043a0:	f7ff fa76 	bl	8003890 <HAL_GetTick>
 80043a4:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a6:	e004      	b.n	80043b2 <HAL_RCC_OscConfig+0x436>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a8:	f7ff fa72 	bl	8003890 <HAL_GetTick>
 80043ac:	1b00      	subs	r0, r0, r4
 80043ae:	2802      	cmp	r0, #2
 80043b0:	d8aa      	bhi.n	8004308 <HAL_RCC_OscConfig+0x38c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	6833      	ldr	r3, [r6, #0]
 80043b4:	019b      	lsls	r3, r3, #6
 80043b6:	d5f7      	bpl.n	80043a8 <HAL_RCC_OscConfig+0x42c>
  return HAL_OK;
 80043b8:	2000      	movs	r0, #0
 80043ba:	e75f      	b.n	800427c <HAL_RCC_OscConfig+0x300>
    FlagStatus       pwrclkchanged = RESET;
 80043bc:	2600      	movs	r6, #0
 80043be:	e673      	b.n	80040a8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80043c8:	f7ff fa62 	bl	8003890 <HAL_GetTick>
 80043cc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ce:	e004      	b.n	80043da <HAL_RCC_OscConfig+0x45e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d0:	f7ff fa5e 	bl	8003890 <HAL_GetTick>
 80043d4:	1bc0      	subs	r0, r0, r7
 80043d6:	2802      	cmp	r0, #2
 80043d8:	d896      	bhi.n	8004308 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043da:	6833      	ldr	r3, [r6, #0]
 80043dc:	0558      	lsls	r0, r3, #21
 80043de:	d4f7      	bmi.n	80043d0 <HAL_RCC_OscConfig+0x454>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	e634      	b.n	800404e <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e4:	4a50      	ldr	r2, [pc, #320]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 80043e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80043f2:	f7ff fa4d 	bl	8003890 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8004528 <HAL_RCC_OscConfig+0x5ac>
      tickstart = HAL_GetTick();
 80043fa:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004400:	e005      	b.n	800440e <HAL_RCC_OscConfig+0x492>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7ff fa45 	bl	8003890 <HAL_GetTick>
 8004406:	1bc0      	subs	r0, r0, r7
 8004408:	4548      	cmp	r0, r9
 800440a:	f63f af7d 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440e:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8004412:	079b      	lsls	r3, r3, #30
 8004414:	d5f5      	bpl.n	8004402 <HAL_RCC_OscConfig+0x486>
    if(pwrclkchanged == SET)
 8004416:	2e00      	cmp	r6, #0
 8004418:	f43f ae76 	beq.w	8004108 <HAL_RCC_OscConfig+0x18c>
 800441c:	e040      	b.n	80044a0 <HAL_RCC_OscConfig+0x524>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441e:	f7ff fd11 	bl	8003e44 <RCC_SetFlashLatencyFromMSIRange>
 8004422:	2800      	cmp	r0, #0
 8004424:	f47f af29 	bne.w	800427a <HAL_RCC_OscConfig+0x2fe>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004428:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f042 0208 	orr.w	r2, r2, #8
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	6a21      	ldr	r1, [r4, #32]
 8004436:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800443a:	430a      	orrs	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	69e1      	ldr	r1, [r4, #28]
 8004442:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004446:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	e6ed      	b.n	800422a <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_HSI48_DISABLE();
 800444e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800445a:	f7ff fa19 	bl	8003890 <HAL_GetTick>
 800445e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004460:	e005      	b.n	800446e <HAL_RCC_OscConfig+0x4f2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004462:	f7ff fa15 	bl	8003890 <HAL_GetTick>
 8004466:	1bc0      	subs	r0, r0, r7
 8004468:	2802      	cmp	r0, #2
 800446a:	f63f af4d 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800446e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004472:	079b      	lsls	r3, r3, #30
 8004474:	d4f5      	bmi.n	8004462 <HAL_RCC_OscConfig+0x4e6>
 8004476:	e663      	b.n	8004140 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8004478:	2001      	movs	r0, #1
}
 800447a:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004482:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004484:	f7ff fa04 	bl	8003890 <HAL_GetTick>
 8004488:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	05da      	lsls	r2, r3, #23
 800448e:	f53f ae10 	bmi.w	80040b2 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004492:	f7ff f9fd 	bl	8003890 <HAL_GetTick>
 8004496:	eba0 0008 	sub.w	r0, r0, r8
 800449a:	2802      	cmp	r0, #2
 800449c:	d9f5      	bls.n	800448a <HAL_RCC_OscConfig+0x50e>
 800449e:	e733      	b.n	8004308 <HAL_RCC_OscConfig+0x38c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4a21      	ldr	r2, [pc, #132]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 80044a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80044a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6593      	str	r3, [r2, #88]	; 0x58
 80044aa:	e62d      	b.n	8004108 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ac:	f7ff fcca 	bl	8003e44 <RCC_SetFlashLatencyFromMSIRange>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	f43f aeba 	beq.w	800422a <HAL_RCC_OscConfig+0x2ae>
 80044b6:	e6e0      	b.n	800427a <HAL_RCC_OscConfig+0x2fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044bc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044ce:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d0:	e723      	b.n	800431a <HAL_RCC_OscConfig+0x39e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 80044d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80044d8:	f042 0204 	orr.w	r2, r2, #4
 80044dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80044e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ec:	e781      	b.n	80043f2 <HAL_RCC_OscConfig+0x476>
      pll_config = RCC->PLLCFGR;
 80044ee:	4e0e      	ldr	r6, [pc, #56]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 80044f2:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f4:	f003 0103 	and.w	r1, r3, #3
 80044f8:	4291      	cmp	r1, r2
 80044fa:	f43f af1e 	beq.w	800433a <HAL_RCC_OscConfig+0x3be>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044fe:	2d0c      	cmp	r5, #12
 8004500:	f43f aebb 	beq.w	800427a <HAL_RCC_OscConfig+0x2fe>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004504:	4d08      	ldr	r5, [pc, #32]	; (8004528 <HAL_RCC_OscConfig+0x5ac>)
 8004506:	682b      	ldr	r3, [r5, #0]
 8004508:	015f      	lsls	r7, r3, #5
 800450a:	f53f aeb6 	bmi.w	800427a <HAL_RCC_OscConfig+0x2fe>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800450e:	682b      	ldr	r3, [r5, #0]
 8004510:	00de      	lsls	r6, r3, #3
 8004512:	f53f aeb2 	bmi.w	800427a <HAL_RCC_OscConfig+0x2fe>
            __HAL_RCC_PLL_DISABLE();
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800451e:	f7ff f9b7 	bl	8003890 <HAL_GetTick>
 8004522:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x5bc>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452c:	f7ff f9b0 	bl	8003890 <HAL_GetTick>
 8004530:	1b80      	subs	r0, r0, r6
 8004532:	2802      	cmp	r0, #2
 8004534:	f63f aee8 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	0198      	lsls	r0, r3, #6
 800453c:	d4f6      	bmi.n	800452c <HAL_RCC_OscConfig+0x5b0>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800453e:	68e9      	ldr	r1, [r5, #12]
 8004540:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <HAL_RCC_OscConfig+0x624>)
 8004542:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004544:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004546:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004548:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800454a:	400b      	ands	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8004552:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004556:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 800455a:	3801      	subs	r0, #1
 800455c:	0849      	lsrs	r1, r1, #1
 800455e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004562:	3901      	subs	r1, #1
 8004564:	0852      	lsrs	r2, r2, #1
 8004566:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800456a:	3a01      	subs	r2, #1
 800456c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004570:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8004572:	682b      	ldr	r3, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004574:	4e0b      	ldr	r6, [pc, #44]	; (80045a4 <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_ENABLE();
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800457c:	68eb      	ldr	r3, [r5, #12]
 800457e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004582:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8004584:	f7ff f984 	bl	8003890 <HAL_GetTick>
 8004588:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458a:	e005      	b.n	8004598 <HAL_RCC_OscConfig+0x61c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7ff f980 	bl	8003890 <HAL_GetTick>
 8004590:	1b00      	subs	r0, r0, r4
 8004592:	2802      	cmp	r0, #2
 8004594:	f63f aeb8 	bhi.w	8004308 <HAL_RCC_OscConfig+0x38c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004598:	6833      	ldr	r3, [r6, #0]
 800459a:	0199      	lsls	r1, r3, #6
 800459c:	d5f6      	bpl.n	800458c <HAL_RCC_OscConfig+0x610>
 800459e:	e70b      	b.n	80043b8 <HAL_RCC_OscConfig+0x43c>
 80045a0:	019d800c 	.word	0x019d800c
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80045a8:	2800      	cmp	r0, #0
 80045aa:	f000 80cd 	beq.w	8004748 <HAL_RCC_ClockConfig+0x1a0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ae:	4a8d      	ldr	r2, [pc, #564]	; (80047e4 <HAL_RCC_ClockConfig+0x23c>)
{
 80045b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	6813      	ldr	r3, [r2, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	428b      	cmp	r3, r1
 80045bc:	460d      	mov	r5, r1
 80045be:	4604      	mov	r4, r0
 80045c0:	d20c      	bcs.n	80045dc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	6813      	ldr	r3, [r2, #0]
 80045c4:	f023 030f 	bic.w	r3, r3, #15
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045cc:	6813      	ldr	r3, [r2, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	428b      	cmp	r3, r1
 80045d4:	d002      	beq.n	80045dc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80045d6:	2001      	movs	r0, #1
}
 80045d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	079e      	lsls	r6, r3, #30
 80045e0:	f140 8086 	bpl.w	80046f0 <HAL_RCC_ClockConfig+0x148>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045e4:	4880      	ldr	r0, [pc, #512]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 80045e6:	68a1      	ldr	r1, [r4, #8]
 80045e8:	6882      	ldr	r2, [r0, #8]
 80045ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80045ee:	4291      	cmp	r1, r2
 80045f0:	d904      	bls.n	80045fc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f2:	6882      	ldr	r2, [r0, #8]
 80045f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80045f8:	430a      	orrs	r2, r1
 80045fa:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fc:	07da      	lsls	r2, r3, #31
 80045fe:	f140 8091 	bpl.w	8004724 <HAL_RCC_ClockConfig+0x17c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d078      	beq.n	80046fa <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004608:	2b02      	cmp	r3, #2
 800460a:	f000 8097 	beq.w	800473c <HAL_RCC_ClockConfig+0x194>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800460e:	2b00      	cmp	r3, #0
 8004610:	f040 809e 	bne.w	8004750 <HAL_RCC_ClockConfig+0x1a8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004618:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	079b      	lsls	r3, r3, #30
 8004620:	d5d9      	bpl.n	80045d6 <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004622:	f7ff fc51 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004626:	4b71      	ldr	r3, [pc, #452]	; (80047ec <HAL_RCC_ClockConfig+0x244>)
 8004628:	4298      	cmp	r0, r3
 800462a:	d905      	bls.n	8004638 <HAL_RCC_ClockConfig+0x90>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800462c:	4b6e      	ldr	r3, [pc, #440]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8004634:	f000 8092 	beq.w	800475c <HAL_RCC_ClockConfig+0x1b4>
 8004638:	6863      	ldr	r3, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800463a:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800463e:	4e6a      	ldr	r6, [pc, #424]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 8004640:	68b2      	ldr	r2, [r6, #8]
 8004642:	f022 0203 	bic.w	r2, r2, #3
 8004646:	4313      	orrs	r3, r2
 8004648:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800464a:	f7ff f921 	bl	8003890 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004652:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004654:	e004      	b.n	8004660 <HAL_RCC_ClockConfig+0xb8>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004656:	f7ff f91b 	bl	8003890 <HAL_GetTick>
 800465a:	1bc0      	subs	r0, r0, r7
 800465c:	4540      	cmp	r0, r8
 800465e:	d875      	bhi.n	800474c <HAL_RCC_ClockConfig+0x1a4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004660:	68b3      	ldr	r3, [r6, #8]
 8004662:	6862      	ldr	r2, [r4, #4]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800466c:	d1f3      	bne.n	8004656 <HAL_RCC_ClockConfig+0xae>
  if(hpre == RCC_SYSCLK_DIV2)
 800466e:	f1b9 0f00 	cmp.w	r9, #0
 8004672:	d003      	beq.n	800467c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004674:	68b3      	ldr	r3, [r6, #8]
 8004676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800467a:	60b3      	str	r3, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	079e      	lsls	r6, r3, #30
 8004680:	d44f      	bmi.n	8004722 <HAL_RCC_ClockConfig+0x17a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004682:	4958      	ldr	r1, [pc, #352]	; (80047e4 <HAL_RCC_ClockConfig+0x23c>)
 8004684:	680a      	ldr	r2, [r1, #0]
 8004686:	f002 020f 	and.w	r2, r2, #15
 800468a:	42aa      	cmp	r2, r5
 800468c:	d909      	bls.n	80046a2 <HAL_RCC_ClockConfig+0xfa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	680a      	ldr	r2, [r1, #0]
 8004690:	f022 020f 	bic.w	r2, r2, #15
 8004694:	432a      	orrs	r2, r5
 8004696:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004698:	680a      	ldr	r2, [r1, #0]
 800469a:	f002 020f 	and.w	r2, r2, #15
 800469e:	42aa      	cmp	r2, r5
 80046a0:	d199      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a2:	075d      	lsls	r5, r3, #29
 80046a4:	d506      	bpl.n	80046b4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a6:	4950      	ldr	r1, [pc, #320]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 80046a8:	68e0      	ldr	r0, [r4, #12]
 80046aa:	688a      	ldr	r2, [r1, #8]
 80046ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b0:	4302      	orrs	r2, r0
 80046b2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	0718      	lsls	r0, r3, #28
 80046b6:	d507      	bpl.n	80046c8 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b8:	4a4b      	ldr	r2, [pc, #300]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 80046ba:	6921      	ldr	r1, [r4, #16]
 80046bc:	6893      	ldr	r3, [r2, #8]
 80046be:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80046c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80046c6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c8:	f7ff fbfe 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 80046cc:	4a46      	ldr	r2, [pc, #280]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 80046ce:	4c48      	ldr	r4, [pc, #288]	; (80047f0 <HAL_RCC_ClockConfig+0x248>)
 80046d0:	6892      	ldr	r2, [r2, #8]
 80046d2:	4948      	ldr	r1, [pc, #288]	; (80047f4 <HAL_RCC_ClockConfig+0x24c>)
 80046d4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80046d8:	4603      	mov	r3, r0
 80046da:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80046dc:	4846      	ldr	r0, [pc, #280]	; (80047f8 <HAL_RCC_ClockConfig+0x250>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046de:	f002 021f 	and.w	r2, r2, #31
 80046e2:	40d3      	lsrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80046e6:	6800      	ldr	r0, [r0, #0]
}
 80046e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 80046ec:	f7ff b88e 	b.w	800380c <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046f0:	07d9      	lsls	r1, r3, #31
 80046f2:	d5c6      	bpl.n	8004682 <HAL_RCC_ClockConfig+0xda>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d186      	bne.n	8004608 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fa:	4a3b      	ldr	r2, [pc, #236]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 80046fc:	6811      	ldr	r1, [r2, #0]
 80046fe:	0188      	lsls	r0, r1, #6
 8004700:	f57f af69 	bpl.w	80045d6 <HAL_RCC_ClockConfig+0x2e>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004704:	68d1      	ldr	r1, [r2, #12]
 8004706:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 800470a:	2902      	cmp	r1, #2
 800470c:	d064      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x230>
 800470e:	2903      	cmp	r1, #3
 8004710:	d02e      	beq.n	8004770 <HAL_RCC_ClockConfig+0x1c8>
 8004712:	2901      	cmp	r1, #1
 8004714:	d051      	beq.n	80047ba <HAL_RCC_ClockConfig+0x212>
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004716:	68d1      	ldr	r1, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004718:	68d1      	ldr	r1, [r2, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800471a:	68d2      	ldr	r2, [r2, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800471c:	f04f 0900 	mov.w	r9, #0
 8004720:	e78d      	b.n	800463e <HAL_RCC_ClockConfig+0x96>
 8004722:	68a1      	ldr	r1, [r4, #8]
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004724:	4830      	ldr	r0, [pc, #192]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 8004726:	6882      	ldr	r2, [r0, #8]
 8004728:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800472c:	428a      	cmp	r2, r1
 800472e:	d9a8      	bls.n	8004682 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	6882      	ldr	r2, [r0, #8]
 8004732:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004736:	4311      	orrs	r1, r2
 8004738:	6081      	str	r1, [r0, #8]
 800473a:	e7a2      	b.n	8004682 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	039a      	lsls	r2, r3, #14
 8004742:	f53f af6e 	bmi.w	8004622 <HAL_RCC_ClockConfig+0x7a>
 8004746:	e746      	b.n	80045d6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004748:	2001      	movs	r0, #1
}
 800474a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800474c:	2003      	movs	r0, #3
 800474e:	e743      	b.n	80045d8 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004750:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	055f      	lsls	r7, r3, #21
 8004756:	f57f af3e 	bpl.w	80045d6 <HAL_RCC_ClockConfig+0x2e>
 800475a:	e762      	b.n	8004622 <HAL_RCC_ClockConfig+0x7a>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004766:	609a      	str	r2, [r3, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	f04f 0980 	mov.w	r9, #128	; 0x80
 800476e:	e766      	b.n	800463e <HAL_RCC_ClockConfig+0x96>
  switch (pllsource)
 8004770:	4a22      	ldr	r2, [pc, #136]	; (80047fc <HAL_RCC_ClockConfig+0x254>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004772:	4e1d      	ldr	r6, [pc, #116]	; (80047e8 <HAL_RCC_ClockConfig+0x240>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004774:	4f1d      	ldr	r7, [pc, #116]	; (80047ec <HAL_RCC_ClockConfig+0x244>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004776:	68f0      	ldr	r0, [r6, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004778:	f8d6 c00c 	ldr.w	ip, [r6, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800477c:	68f1      	ldr	r1, [r6, #12]
 800477e:	f3c1 6141 	ubfx	r1, r1, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004782:	f3c0 1003 	ubfx	r0, r0, #4, #4
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004786:	f3cc 2c06 	ubfx	ip, ip, #8, #7
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800478a:	3101      	adds	r1, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800478c:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800478e:	fb02 f20c 	mul.w	r2, r2, ip
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004792:	0049      	lsls	r1, r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004794:	fbb2 f2f0 	udiv	r2, r2, r0
  sysclockfreq = pllvco / pllr;
 8004798:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800479c:	42ba      	cmp	r2, r7
 800479e:	d91d      	bls.n	80047dc <HAL_RCC_ClockConfig+0x234>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047a0:	68b2      	ldr	r2, [r6, #8]
 80047a2:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80047a6:	d119      	bne.n	80047dc <HAL_RCC_ClockConfig+0x234>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047a8:	68b2      	ldr	r2, [r6, #8]
 80047aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047b2:	60b2      	str	r2, [r6, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047b4:	f04f 0980 	mov.w	r9, #128	; 0x80
 80047b8:	e741      	b.n	800463e <HAL_RCC_ClockConfig+0x96>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047ba:	6811      	ldr	r1, [r2, #0]
 80047bc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047be:	bf54      	ite	pl
 80047c0:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047c4:	6812      	ldrmi	r2, [r2, #0]
    pllvco = MSIRangeTable[msirange];
 80047c6:	490e      	ldr	r1, [pc, #56]	; (8004800 <HAL_RCC_ClockConfig+0x258>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047c8:	bf54      	ite	pl
 80047ca:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047ce:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    pllvco = MSIRangeTable[msirange];
 80047d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    break;
 80047d6:	e7cc      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ca>
    pllvco = HSI_VALUE;
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80047da:	e7ca      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047dc:	f04f 0900 	mov.w	r9, #0
 80047e0:	e72d      	b.n	800463e <HAL_RCC_ClockConfig+0x96>
 80047e2:	bf00      	nop
 80047e4:	40022000 	.word	0x40022000
 80047e8:	40021000 	.word	0x40021000
 80047ec:	04c4b400 	.word	0x04c4b400
 80047f0:	0800dee4 	.word	0x0800dee4
 80047f4:	2000006c 	.word	0x2000006c
 80047f8:	20000074 	.word	0x20000074
 80047fc:	007a1200 	.word	0x007a1200
 8004800:	0800defc 	.word	0x0800defc
 8004804:	00f42400 	.word	0x00f42400

08004808 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_RCC_GetPCLK1Freq+0x18>)
 800480a:	4a06      	ldr	r2, [pc, #24]	; (8004824 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800480c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800480e:	4906      	ldr	r1, [pc, #24]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004810:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	5cd3      	ldrb	r3, [r2, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
}
 800481c:	40d8      	lsrs	r0, r3
 800481e:	4770      	bx	lr
 8004820:	40021000 	.word	0x40021000
 8004824:	0800def4 	.word	0x0800def4
 8004828:	2000006c 	.word	0x2000006c

0800482c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_GetPCLK2Freq+0x18>)
 800482e:	4a06      	ldr	r2, [pc, #24]	; (8004848 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004830:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004832:	4906      	ldr	r1, [pc, #24]	; (800484c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004834:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004838:	6808      	ldr	r0, [r1, #0]
 800483a:	5cd3      	ldrb	r3, [r2, r3]
 800483c:	f003 031f 	and.w	r3, r3, #31
}
 8004840:	40d8      	lsrs	r0, r3
 8004842:	4770      	bx	lr
 8004844:	40021000 	.word	0x40021000
 8004848:	0800def4 	.word	0x0800def4
 800484c:	2000006c 	.word	0x2000006c

08004850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004852:	4b44      	ldr	r3, [pc, #272]	; (8004964 <RCCEx_PLLSAI1_Config+0x114>)
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	0792      	lsls	r2, r2, #30
{
 8004858:	4605      	mov	r5, r0
 800485a:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800485c:	d007      	beq.n	800486e <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	6802      	ldr	r2, [r0, #0]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	4293      	cmp	r3, r2
 8004868:	d012      	beq.n	8004890 <RCCEx_PLLSAI1_Config+0x40>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800486a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800486c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800486e:	6800      	ldr	r0, [r0, #0]
 8004870:	2802      	cmp	r0, #2
 8004872:	d04e      	beq.n	8004912 <RCCEx_PLLSAI1_Config+0xc2>
 8004874:	2803      	cmp	r0, #3
 8004876:	d045      	beq.n	8004904 <RCCEx_PLLSAI1_Config+0xb4>
 8004878:	2801      	cmp	r0, #1
 800487a:	d1f6      	bne.n	800486a <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	079b      	lsls	r3, r3, #30
 8004880:	d5f4      	bpl.n	800486c <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004882:	4a38      	ldr	r2, [pc, #224]	; (8004964 <RCCEx_PLLSAI1_Config+0x114>)
 8004884:	68d3      	ldr	r3, [r2, #12]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	4318      	orrs	r0, r3
 800488c:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 800488e:	e001      	b.n	8004894 <RCCEx_PLLSAI1_Config+0x44>
       ||
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ea      	beq.n	800486a <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 8004894:	4c33      	ldr	r4, [pc, #204]	; (8004964 <RCCEx_PLLSAI1_Config+0x114>)
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800489c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800489e:	f7fe fff7 	bl	8003890 <HAL_GetTick>
 80048a2:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048a4:	e004      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0x60>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a6:	f7fe fff3 	bl	8003890 <HAL_GetTick>
 80048aa:	1b83      	subs	r3, r0, r6
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d834      	bhi.n	800491a <RCCEx_PLLSAI1_Config+0xca>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	011a      	lsls	r2, r3, #4
 80048b4:	d4f7      	bmi.n	80048a6 <RCCEx_PLLSAI1_Config+0x56>
      if(Divider == DIVIDER_P_UPDATE)
 80048b6:	2f00      	cmp	r7, #0
 80048b8:	d131      	bne.n	800491e <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ba:	e9d5 6302 	ldrd	r6, r3, [r5, #8]
 80048be:	6920      	ldr	r0, [r4, #16]
 80048c0:	4929      	ldr	r1, [pc, #164]	; (8004968 <RCCEx_PLLSAI1_Config+0x118>)
 80048c2:	686a      	ldr	r2, [r5, #4]
 80048c4:	06db      	lsls	r3, r3, #27
 80048c6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80048ca:	4001      	ands	r1, r0
 80048cc:	430b      	orrs	r3, r1
 80048ce:	3a01      	subs	r2, #1
 80048d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80048d4:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80048d6:	4c23      	ldr	r4, [pc, #140]	; (8004964 <RCCEx_PLLSAI1_Config+0x114>)
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048de:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80048e0:	f7fe ffd6 	bl	8003890 <HAL_GetTick>
 80048e4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e6:	e004      	b.n	80048f2 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048e8:	f7fe ffd2 	bl	8003890 <HAL_GetTick>
 80048ec:	1b83      	subs	r3, r0, r6
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d813      	bhi.n	800491a <RCCEx_PLLSAI1_Config+0xca>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	d5f7      	bpl.n	80048e8 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048f8:	69aa      	ldr	r2, [r5, #24]
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	6123      	str	r3, [r4, #16]
 8004900:	2000      	movs	r0, #0
}
 8004902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	0394      	lsls	r4, r2, #14
 8004908:	d4bb      	bmi.n	8004882 <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	0359      	lsls	r1, r3, #13
 800490e:	d5ac      	bpl.n	800486a <RCCEx_PLLSAI1_Config+0x1a>
 8004910:	e7b7      	b.n	8004882 <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	055e      	lsls	r6, r3, #21
 8004916:	d5a8      	bpl.n	800486a <RCCEx_PLLSAI1_Config+0x1a>
 8004918:	e7b3      	b.n	8004882 <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 800491a:	2003      	movs	r0, #3
}
 800491c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800491e:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004920:	6926      	ldr	r6, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004922:	d00f      	beq.n	8004944 <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004924:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
 8004928:	4b10      	ldr	r3, [pc, #64]	; (800496c <RCCEx_PLLSAI1_Config+0x11c>)
 800492a:	696a      	ldr	r2, [r5, #20]
 800492c:	4033      	ands	r3, r6
 800492e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004932:	3901      	subs	r1, #1
 8004934:	0852      	lsrs	r2, r2, #1
 8004936:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800493a:	3a01      	subs	r2, #1
 800493c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004940:	6123      	str	r3, [r4, #16]
 8004942:	e7c8      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004944:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <RCCEx_PLLSAI1_Config+0x120>)
 800494a:	692a      	ldr	r2, [r5, #16]
 800494c:	4033      	ands	r3, r6
 800494e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004952:	3901      	subs	r1, #1
 8004954:	0852      	lsrs	r2, r2, #1
 8004956:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800495a:	3a01      	subs	r2, #1
 800495c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	e7b8      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0x86>
 8004964:	40021000 	.word	0x40021000
 8004968:	07ff800f 	.word	0x07ff800f
 800496c:	f9ff800f 	.word	0xf9ff800f
 8004970:	ff9f800f 	.word	0xff9f800f

08004974 <RCCEx_PLLSAI2_Config.constprop.0>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004974:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	0792      	lsls	r2, r2, #30
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 800497a:	b570      	push	{r4, r5, r6, lr}
 800497c:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800497e:	d007      	beq.n	8004990 <RCCEx_PLLSAI2_Config.constprop.0+0x1c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	6802      	ldr	r2, [r0, #0]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	4293      	cmp	r3, r2
 800498a:	d012      	beq.n	80049b2 <RCCEx_PLLSAI2_Config.constprop.0+0x3e>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800498c:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800498e:	bd70      	pop	{r4, r5, r6, pc}
    switch(PllSai2->PLLSAI2Source)
 8004990:	6800      	ldr	r0, [r0, #0]
 8004992:	2802      	cmp	r0, #2
 8004994:	d04c      	beq.n	8004a30 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
 8004996:	2803      	cmp	r0, #3
 8004998:	d043      	beq.n	8004a22 <RCCEx_PLLSAI2_Config.constprop.0+0xae>
 800499a:	2801      	cmp	r0, #1
 800499c:	d1f6      	bne.n	800498c <RCCEx_PLLSAI2_Config.constprop.0+0x18>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	079b      	lsls	r3, r3, #30
 80049a2:	d5f4      	bpl.n	800498e <RCCEx_PLLSAI2_Config.constprop.0+0x1a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80049a4:	4a25      	ldr	r2, [pc, #148]	; (8004a3c <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 80049a6:	68d3      	ldr	r3, [r2, #12]
 80049a8:	f023 0303 	bic.w	r3, r3, #3
 80049ac:	4318      	orrs	r0, r3
 80049ae:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 80049b0:	e001      	b.n	80049b6 <RCCEx_PLLSAI2_Config.constprop.0+0x42>
       ||
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ea      	beq.n	800498c <RCCEx_PLLSAI2_Config.constprop.0+0x18>
    __HAL_RCC_PLLSAI2_DISABLE();
 80049b6:	4c21      	ldr	r4, [pc, #132]	; (8004a3c <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049be:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80049c0:	f7fe ff66 	bl	8003890 <HAL_GetTick>
 80049c4:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049c6:	e004      	b.n	80049d2 <RCCEx_PLLSAI2_Config.constprop.0+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049c8:	f7fe ff62 	bl	8003890 <HAL_GetTick>
 80049cc:	1b83      	subs	r3, r0, r6
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d832      	bhi.n	8004a38 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	009a      	lsls	r2, r3, #2
 80049d6:	d4f7      	bmi.n	80049c8 <RCCEx_PLLSAI2_Config.constprop.0+0x54>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049d8:	e9d5 6302 	ldrd	r6, r3, [r5, #8]
 80049dc:	6960      	ldr	r0, [r4, #20]
 80049de:	4918      	ldr	r1, [pc, #96]	; (8004a40 <RCCEx_PLLSAI2_Config.constprop.0+0xcc>)
 80049e0:	686a      	ldr	r2, [r5, #4]
 80049e2:	06db      	lsls	r3, r3, #27
 80049e4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80049e8:	4001      	ands	r1, r0
 80049ea:	430b      	orrs	r3, r1
 80049ec:	3a01      	subs	r2, #1
 80049ee:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80049f2:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80049f4:	6823      	ldr	r3, [r4, #0]
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049f6:	4e11      	ldr	r6, [pc, #68]	; (8004a3c <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
      __HAL_RCC_PLLSAI2_ENABLE();
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80049fe:	f7fe ff47 	bl	8003890 <HAL_GetTick>
 8004a02:	4604      	mov	r4, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a04:	e004      	b.n	8004a10 <RCCEx_PLLSAI2_Config.constprop.0+0x9c>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a06:	f7fe ff43 	bl	8003890 <HAL_GetTick>
 8004a0a:	1b03      	subs	r3, r0, r4
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d813      	bhi.n	8004a38 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a10:	6833      	ldr	r3, [r6, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	d5f7      	bpl.n	8004a06 <RCCEx_PLLSAI2_Config.constprop.0+0x92>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a16:	69aa      	ldr	r2, [r5, #24]
 8004a18:	6973      	ldr	r3, [r6, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	6173      	str	r3, [r6, #20]
 8004a1e:	2000      	movs	r0, #0
}
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	0394      	lsls	r4, r2, #14
 8004a26:	d4bd      	bmi.n	80049a4 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	0359      	lsls	r1, r3, #13
 8004a2c:	d5ae      	bpl.n	800498c <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8004a2e:	e7b9      	b.n	80049a4 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	055e      	lsls	r6, r3, #21
 8004a34:	d5aa      	bpl.n	800498c <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8004a36:	e7b5      	b.n	80049a4 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        status = HAL_TIMEOUT;
 8004a38:	2003      	movs	r0, #3
}
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	07ff800f 	.word	0x07ff800f

08004a44 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a48:	6803      	ldr	r3, [r0, #0]
 8004a4a:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 8004a4e:	b083      	sub	sp, #12
 8004a50:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a52:	d022      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a54:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8004a56:	2940      	cmp	r1, #64	; 0x40
 8004a58:	f000 8212 	beq.w	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004a5c:	d80f      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	f000 81d4 	beq.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8004a64:	2920      	cmp	r1, #32
 8004a66:	f040 822b 	bne.w	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a6a:	3020      	adds	r0, #32
 8004a6c:	f7ff ff82 	bl	8004974 <RCCEx_PLLSAI2_Config.constprop.0>
 8004a70:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004a72:	2e00      	cmp	r6, #0
 8004a74:	f040 81fb 	bne.w	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004a78:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	e004      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a7e:	2960      	cmp	r1, #96	; 0x60
 8004a80:	d002      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a82:	2980      	cmp	r1, #128	; 0x80
 8004a84:	f040 821c 	bne.w	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a88:	48c2      	ldr	r0, [pc, #776]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004a8a:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8004a8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a92:	4311      	orrs	r1, r2
 8004a94:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 8004a98:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a9a:	04da      	lsls	r2, r3, #19
 8004a9c:	f140 8135 	bpl.w	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004aa0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004aa2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004aa6:	f000 81e4 	beq.w	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004aaa:	f200 8120 	bhi.w	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004aae:	2900      	cmp	r1, #0
 8004ab0:	f000 81b4 	beq.w	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8004ab4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004ab8:	f040 8206 	bne.w	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x484>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004abc:	f104 0020 	add.w	r0, r4, #32
 8004ac0:	f7ff ff58 	bl	8004974 <RCCEx_PLLSAI2_Config.constprop.0>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8004ac8:	f1b8 0f00 	cmp.w	r8, #0
 8004acc:	f040 811b 	bne.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ad0:	49b0      	ldr	r1, [pc, #704]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004ad2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004ad4:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004ad8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004adc:	4302      	orrs	r2, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ade:	039f      	lsls	r7, r3, #14
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ae0:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ae4:	f100 8115 	bmi.w	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ae8:	07d8      	lsls	r0, r3, #31
 8004aea:	d508      	bpl.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aec:	49a9      	ldr	r1, [pc, #676]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004aee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004af0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004af4:	f022 0203 	bic.w	r2, r2, #3
 8004af8:	4302      	orrs	r2, r0
 8004afa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004afe:	0799      	lsls	r1, r3, #30
 8004b00:	d508      	bpl.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b02:	49a4      	ldr	r1, [pc, #656]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004b06:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b0a:	f022 020c 	bic.w	r2, r2, #12
 8004b0e:	4302      	orrs	r2, r0
 8004b10:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b14:	075a      	lsls	r2, r3, #29
 8004b16:	d508      	bpl.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b18:	499e      	ldr	r1, [pc, #632]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b1a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004b1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b20:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004b24:	4302      	orrs	r2, r0
 8004b26:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b2a:	071f      	lsls	r7, r3, #28
 8004b2c:	d508      	bpl.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b2e:	4999      	ldr	r1, [pc, #612]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b30:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004b32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b36:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b3a:	4302      	orrs	r2, r0
 8004b3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b40:	06dd      	lsls	r5, r3, #27
 8004b42:	d508      	bpl.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b44:	4993      	ldr	r1, [pc, #588]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b46:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004b48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b50:	4302      	orrs	r2, r0
 8004b52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b56:	0698      	lsls	r0, r3, #26
 8004b58:	d508      	bpl.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b5a:	498e      	ldr	r1, [pc, #568]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b5c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004b5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b66:	4302      	orrs	r2, r0
 8004b68:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b6c:	0599      	lsls	r1, r3, #22
 8004b6e:	d508      	bpl.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b70:	4988      	ldr	r1, [pc, #544]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b72:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004b74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b78:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004b7c:	4302      	orrs	r2, r0
 8004b7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b82:	055a      	lsls	r2, r3, #21
 8004b84:	d508      	bpl.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b86:	4983      	ldr	r1, [pc, #524]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b88:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004b8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b8e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004b92:	4302      	orrs	r2, r0
 8004b94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b98:	065f      	lsls	r7, r3, #25
 8004b9a:	d508      	bpl.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b9c:	497d      	ldr	r1, [pc, #500]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ba0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ba4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ba8:	4302      	orrs	r2, r0
 8004baa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bae:	061d      	lsls	r5, r3, #24
 8004bb0:	d508      	bpl.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bb2:	4978      	ldr	r1, [pc, #480]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bb6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004bbe:	4302      	orrs	r2, r0
 8004bc0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bc4:	05d8      	lsls	r0, r3, #23
 8004bc6:	d508      	bpl.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc8:	4972      	ldr	r1, [pc, #456]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004bca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004bcc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bd0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004bd4:	4302      	orrs	r2, r0
 8004bd6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bda:	02d9      	lsls	r1, r3, #11
 8004bdc:	d508      	bpl.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bde:	496d      	ldr	r1, [pc, #436]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004be0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004be2:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004be6:	f022 0203 	bic.w	r2, r2, #3
 8004bea:	4302      	orrs	r2, r0
 8004bec:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bf0:	049a      	lsls	r2, r3, #18
 8004bf2:	d510      	bpl.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf4:	4967      	ldr	r1, [pc, #412]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004bf6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004bf8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bfc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004c00:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c02:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c0a:	f000 8115 	beq.w	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c0e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004c12:	f000 813b 	beq.w	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x448>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c16:	031f      	lsls	r7, r3, #12
 8004c18:	d51a      	bpl.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c1a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004c1c:	4a5d      	ldr	r2, [pc, #372]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004c1e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004c22:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8004c26:	f000 810c 	beq.w	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8004c2a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004c2e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 8004c32:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8004c36:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8004c3a:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c3c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c40:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c44:	f040 80d3 	bne.w	8004dee <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	68d1      	ldr	r1, [r2, #12]
 8004c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004c4e:	60d1      	str	r1, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c50:	035d      	lsls	r5, r3, #13
 8004c52:	d510      	bpl.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c54:	494f      	ldr	r1, [pc, #316]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004c56:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004c58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c5c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004c60:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c62:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c6a:	f000 80f3 	beq.w	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x410>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c6e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004c72:	f000 8113 	beq.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x458>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c76:	0458      	lsls	r0, r3, #17
 8004c78:	d50d      	bpl.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c7a:	4846      	ldr	r0, [pc, #280]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004c7c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004c80:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c88:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c8a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c8e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c92:	f000 80e4 	beq.w	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c96:	03d9      	lsls	r1, r3, #15
 8004c98:	d509      	bpl.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c9a:	493e      	ldr	r1, [pc, #248]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004c9c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004ca0:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004ca4:	f022 0204 	bic.w	r2, r2, #4
 8004ca8:	4302      	orrs	r2, r0
 8004caa:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004cae:	029a      	lsls	r2, r3, #10
 8004cb0:	d509      	bpl.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cb2:	4938      	ldr	r1, [pc, #224]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004cb4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004cb8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004cbc:	f022 0218 	bic.w	r2, r2, #24
 8004cc0:	4302      	orrs	r2, r0
 8004cc2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004cc6:	01db      	lsls	r3, r3, #7
 8004cc8:	d50d      	bpl.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cca:	4a32      	ldr	r2, [pc, #200]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004ccc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004cd0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004cd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004cd8:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cda:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ce2:	f000 80a1 	beq.w	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
}
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	b003      	add	sp, #12
 8004cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8004cee:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004cf2:	d003      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004cf4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004cf8:	f040 80e6 	bne.w	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004cfc:	46b0      	mov	r8, r6
    if(ret == HAL_OK)
 8004cfe:	f1b8 0f00 	cmp.w	r8, #0
 8004d02:	f43f aee5 	beq.w	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004d06:	4646      	mov	r6, r8
 8004d08:	e000      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004d0a:	46b0      	mov	r8, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d0c:	039f      	lsls	r7, r3, #14
 8004d0e:	f57f aeeb 	bpl.w	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004d14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d16:	00d5      	lsls	r5, r2, #3
 8004d18:	d55d      	bpl.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x392>
    FlagStatus       pwrclkchanged = RESET;
 8004d1a:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1e:	4d1e      	ldr	r5, [pc, #120]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d26:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004d28:	f7fe fdb2 	bl	8003890 <HAL_GetTick>
 8004d2c:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d2e:	e004      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d30:	f7fe fdae 	bl	8003890 <HAL_GetTick>
 8004d34:	1bc3      	subs	r3, r0, r7
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d866      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d3a:	682b      	ldr	r3, [r5, #0]
 8004d3c:	05d8      	lsls	r0, r3, #23
 8004d3e:	d5f7      	bpl.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    if(ret == HAL_OK)
 8004d40:	f1b8 0f00 	cmp.w	r8, #0
 8004d44:	f040 80ba 	bne.w	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d48:	4d12      	ldr	r5, [pc, #72]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004d4a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d4e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004d52:	d02c      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004d54:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d02a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d5c:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d60:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d70:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d78:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d7a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004d7e:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d82:	f140 809f 	bpl.w	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>
        tickstart = HAL_GetTick();
 8004d86:	f7fe fd83 	bl	8003890 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004d8e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d90:	e009      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fe fd78 	bl	8003890 <HAL_GetTick>
 8004da0:	1bc0      	subs	r0, r0, r7
 8004da2:	4540      	cmp	r0, r8
 8004da4:	d830      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004daa:	079b      	lsls	r3, r3, #30
 8004dac:	d5f6      	bpl.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004dae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db2:	4947      	ldr	r1, [pc, #284]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8004db4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004db8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8004dc2:	f1b9 0f00 	cmp.w	r9, #0
 8004dc6:	d004      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4a41      	ldr	r2, [pc, #260]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8004dca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	e688      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004dd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ddc:	659a      	str	r2, [r3, #88]	; 0x58
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004de8:	f04f 0901 	mov.w	r9, #1
 8004dec:	e797      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dee:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004df2:	f47f af2d 	bne.w	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004df6:	2101      	movs	r1, #1
 8004df8:	1d20      	adds	r0, r4, #4
 8004dfa:	f7ff fd29 	bl	8004850 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d05a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	4606      	mov	r6, r0
 8004e06:	e723      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        ret = HAL_TIMEOUT;
 8004e08:	2603      	movs	r6, #3
 8004e0a:	e7da      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e0c:	3004      	adds	r0, #4
 8004e0e:	f7ff fd1f 	bl	8004850 <RCCEx_PLLSAI1_Config>
 8004e12:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004e14:	2e00      	cmp	r6, #0
 8004e16:	f43f ae2f 	beq.w	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004e1a:	e028      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e1c:	1d20      	adds	r0, r4, #4
 8004e1e:	f7ff fd17 	bl	8004850 <RCCEx_PLLSAI1_Config>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	4680      	mov	r8, r0
      break;
 8004e26:	e64f      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e28:	68d3      	ldr	r3, [r2, #12]
}
 8004e2a:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e30:	60d3      	str	r3, [r2, #12]
}
 8004e32:	b003      	add	sp, #12
 8004e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e38:	68ca      	ldr	r2, [r1, #12]
 8004e3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e3e:	60ca      	str	r2, [r1, #12]
 8004e40:	e6e9      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e42:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004e46:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e4a:	68d1      	ldr	r1, [r2, #12]
 8004e4c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004e50:	60d1      	str	r1, [r2, #12]
 8004e52:	e6fd      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	68ca      	ldr	r2, [r1, #12]
 8004e56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e5a:	60ca      	str	r2, [r1, #12]
 8004e5c:	e70b      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x232>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e5e:	2102      	movs	r1, #2
 8004e60:	1d20      	adds	r0, r4, #4
 8004e62:	f7ff fcf5 	bl	8004850 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004e66:	b308      	cbz	r0, 8004eac <HAL_RCCEx_PeriphCLKConfig+0x468>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	e713      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	e613      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e72:	4917      	ldr	r1, [pc, #92]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8004e74:	68ca      	ldr	r2, [r1, #12]
 8004e76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e7a:	60ca      	str	r2, [r1, #12]
      break;
 8004e7c:	46b0      	mov	r8, r6
 8004e7e:	e623      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e80:	4813      	ldr	r0, [pc, #76]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8004e82:	68c2      	ldr	r2, [r0, #12]
 8004e84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e88:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8004e8a:	e5fd      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	1d20      	adds	r0, r4, #4
 8004e90:	f7ff fcde 	bl	8004850 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004e94:	b170      	cbz	r0, 8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	4606      	mov	r6, r0
 8004e9a:	e6bc      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	1d20      	adds	r0, r4, #4
 8004ea0:	f7ff fcd6 	bl	8004850 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004ea4:	b120      	cbz	r0, 8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	e6e4      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	e6f2      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	e6e0      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	e6ae      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	e6c9      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004ebc:	4646      	mov	r6, r8
 8004ebe:	e780      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ec0:	2601      	movs	r6, #1
 8004ec2:	e5ea      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	e774      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004ec8:	2601      	movs	r6, #1
 8004eca:	46b0      	mov	r8, r6
 8004ecc:	e71e      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000

08004ed4 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ed4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed6:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed8:	49b7      	ldr	r1, [pc, #732]	; (80051b8 <UART_SetConfig+0x2e4>)
{
 8004eda:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004edc:	6905      	ldr	r5, [r0, #16]
 8004ede:	6946      	ldr	r6, [r0, #20]
{
 8004ee0:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee2:	432a      	orrs	r2, r5
 8004ee4:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ee6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee8:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eea:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eec:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68e5      	ldr	r5, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ef6:	49b1      	ldr	r1, [pc, #708]	; (80051bc <UART_SetConfig+0x2e8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ef8:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004efa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004efe:	432a      	orrs	r2, r5
 8004f00:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f02:	428b      	cmp	r3, r1
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f04:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f06:	f000 80be 	beq.w	8005086 <UART_SetConfig+0x1b2>

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f0a:	e9d4 2508 	ldrd	r2, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f0e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8004f12:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8004f16:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f1e:	49a8      	ldr	r1, [pc, #672]	; (80051c0 <UART_SetConfig+0x2ec>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f20:	f022 020f 	bic.w	r2, r2, #15
 8004f24:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f26:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f28:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2a:	d027      	beq.n	8004f7c <UART_SetConfig+0xa8>
 8004f2c:	4aa5      	ldr	r2, [pc, #660]	; (80051c4 <UART_SetConfig+0x2f0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d037      	beq.n	8004fa2 <UART_SetConfig+0xce>
 8004f32:	4aa5      	ldr	r2, [pc, #660]	; (80051c8 <UART_SetConfig+0x2f4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	f000 8117 	beq.w	8005168 <UART_SetConfig+0x294>
 8004f3a:	4aa4      	ldr	r2, [pc, #656]	; (80051cc <UART_SetConfig+0x2f8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	f000 80f0 	beq.w	8005122 <UART_SetConfig+0x24e>
 8004f42:	4aa3      	ldr	r2, [pc, #652]	; (80051d0 <UART_SetConfig+0x2fc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d111      	bne.n	8004f6c <UART_SetConfig+0x98>
 8004f48:	4ba2      	ldr	r3, [pc, #648]	; (80051d4 <UART_SetConfig+0x300>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	f000 8128 	beq.w	80051aa <UART_SetConfig+0x2d6>
 8004f5a:	f200 8100 	bhi.w	800515e <UART_SetConfig+0x28a>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80f1 	beq.w	8005146 <UART_SetConfig+0x272>
 8004f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f68:	f000 80e7 	beq.w	800513a <UART_SetConfig+0x266>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8004f6c:	2001      	movs	r0, #1
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8004f6e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f72:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004f74:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8004f78:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f7c:	4b95      	ldr	r3, [pc, #596]	; (80051d4 <UART_SetConfig+0x300>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f240 80e2 	bls.w	8005152 <UART_SetConfig+0x27e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f8e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004f92:	f000 8104 	beq.w	800519e <UART_SetConfig+0x2ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f96:	f7ff fc49 	bl	800482c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d071      	beq.n	8005082 <UART_SetConfig+0x1ae>
 8004f9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004fa0:	e027      	b.n	8004ff2 <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa2:	4b8c      	ldr	r3, [pc, #560]	; (80051d4 <UART_SetConfig+0x300>)
 8004fa4:	4a8c      	ldr	r2, [pc, #560]	; (80051d8 <UART_SetConfig+0x304>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004fb4:	d033      	beq.n	800501e <UART_SetConfig+0x14a>
    switch (clocksource)
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d8d8      	bhi.n	8004f6c <UART_SetConfig+0x98>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0xec>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	0800514d 	.word	0x0800514d
 8004fc4:	08004f97 	.word	0x08004f97
 8004fc8:	0800501b 	.word	0x0800501b
 8004fcc:	08004f6d 	.word	0x08004f6d
 8004fd0:	08005141 	.word	0x08005141
 8004fd4:	08004f6d 	.word	0x08004f6d
 8004fd8:	08004f6d 	.word	0x08004f6d
 8004fdc:	08004f6d 	.word	0x08004f6d
 8004fe0:	08004fef 	.word	0x08004fef
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fe4:	2b30      	cmp	r3, #48	; 0x30
 8004fe6:	d1c1      	bne.n	8004f6c <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004fec:	d02f      	beq.n	800504e <UART_SetConfig+0x17a>
 8004fee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	4b79      	ldr	r3, [pc, #484]	; (80051dc <UART_SetConfig+0x308>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ffa:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8004ffe:	fbb0 f0f3 	udiv	r0, r0, r3
 8005002:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005006:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500a:	f1a3 0210 	sub.w	r2, r3, #16
 800500e:	428a      	cmp	r2, r1
 8005010:	d8ac      	bhi.n	8004f6c <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	2000      	movs	r0, #0
 8005016:	60d3      	str	r3, [r2, #12]
 8005018:	e7a9      	b.n	8004f6e <UART_SetConfig+0x9a>
        pclk = (uint32_t) HSI_VALUE;
 800501a:	4871      	ldr	r0, [pc, #452]	; (80051e0 <UART_SetConfig+0x30c>)
 800501c:	e7e9      	b.n	8004ff2 <UART_SetConfig+0x11e>
    switch (clocksource)
 800501e:	2b08      	cmp	r3, #8
 8005020:	d8a4      	bhi.n	8004f6c <UART_SetConfig+0x98>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <UART_SetConfig+0x154>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	08005191 	.word	0x08005191
 800502c:	0800519f 	.word	0x0800519f
 8005030:	0800504d 	.word	0x0800504d
 8005034:	08004f6d 	.word	0x08004f6d
 8005038:	080051a5 	.word	0x080051a5
 800503c:	08004f6d 	.word	0x08004f6d
 8005040:	08004f6d 	.word	0x08004f6d
 8005044:	08004f6d 	.word	0x08004f6d
 8005048:	0800504f 	.word	0x0800504f
        pclk = (uint32_t) HSI_VALUE;
 800504c:	4864      	ldr	r0, [pc, #400]	; (80051e0 <UART_SetConfig+0x30c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800504e:	6862      	ldr	r2, [r4, #4]
 8005050:	4962      	ldr	r1, [pc, #392]	; (80051dc <UART_SetConfig+0x308>)
 8005052:	0853      	lsrs	r3, r2, #1
 8005054:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8005058:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800505c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005060:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005064:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	f1a0 0310 	sub.w	r3, r0, #16
 800506c:	428b      	cmp	r3, r1
 800506e:	f63f af7d 	bhi.w	8004f6c <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005072:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8005076:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005078:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800507a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800507e:	4318      	orrs	r0, r3
 8005080:	60d0      	str	r0, [r2, #12]
 8005082:	2000      	movs	r0, #0
 8005084:	e773      	b.n	8004f6e <UART_SetConfig+0x9a>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005086:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800508a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800508e:	4331      	orrs	r1, r6
 8005090:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005096:	484f      	ldr	r0, [pc, #316]	; (80051d4 <UART_SetConfig+0x300>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005098:	f022 020f 	bic.w	r2, r2, #15
 800509c:	430a      	orrs	r2, r1
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80050a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ac:	d06e      	beq.n	800518c <UART_SetConfig+0x2b8>
 80050ae:	d80b      	bhi.n	80050c8 <UART_SetConfig+0x1f4>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d051      	beq.n	8005158 <UART_SetConfig+0x284>
 80050b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b8:	f47f af58 	bne.w	8004f6c <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 80050bc:	f7fe ff04 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d0de      	beq.n	8005082 <UART_SetConfig+0x1ae>
 80050c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050c6:	e005      	b.n	80050d4 <UART_SetConfig+0x200>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050cc:	f47f af4e 	bne.w	8004f6c <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 80050d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050d4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050d6:	4b41      	ldr	r3, [pc, #260]	; (80051dc <UART_SetConfig+0x308>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050d8:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050dc:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80050e0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e4:	429e      	cmp	r6, r3
 80050e6:	f63f af41 	bhi.w	8004f6c <UART_SetConfig+0x98>
 80050ea:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80050ee:	f63f af3d 	bhi.w	8004f6c <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f2:	2300      	movs	r3, #0
 80050f4:	2100      	movs	r1, #0
 80050f6:	f7fc fe39 	bl	8001d6c <__aeabi_uldivmod>
 80050fa:	020b      	lsls	r3, r1, #8
 80050fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005100:	0202      	lsls	r2, r0, #8
 8005102:	0868      	lsrs	r0, r5, #1
 8005104:	1810      	adds	r0, r2, r0
 8005106:	f143 0100 	adc.w	r1, r3, #0
 800510a:	462a      	mov	r2, r5
 800510c:	2300      	movs	r3, #0
 800510e:	f7fc fe2d 	bl	8001d6c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005112:	4a34      	ldr	r2, [pc, #208]	; (80051e4 <UART_SetConfig+0x310>)
 8005114:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005118:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800511a:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800511c:	f63f af26 	bhi.w	8004f6c <UART_SetConfig+0x98>
 8005120:	e777      	b.n	8005012 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005122:	4b2c      	ldr	r3, [pc, #176]	; (80051d4 <UART_SetConfig+0x300>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005128:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d03c      	beq.n	80051aa <UART_SetConfig+0x2d6>
 8005130:	d828      	bhi.n	8005184 <UART_SetConfig+0x2b0>
 8005132:	b143      	cbz	r3, 8005146 <UART_SetConfig+0x272>
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	f47f af19 	bne.w	8004f6c <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800513a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800513e:	d031      	beq.n	80051a4 <UART_SetConfig+0x2d0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005140:	f7fe fec2 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
        break;
 8005144:	e729      	b.n	8004f9a <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005146:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800514a:	d021      	beq.n	8005190 <UART_SetConfig+0x2bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7ff fb5c 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
        break;
 8005150:	e723      	b.n	8004f9a <UART_SetConfig+0xc6>
 8005152:	4a25      	ldr	r2, [pc, #148]	; (80051e8 <UART_SetConfig+0x314>)
 8005154:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005156:	e72b      	b.n	8004fb0 <UART_SetConfig+0xdc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005158:	f7ff fb56 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
        break;
 800515c:	e7b0      	b.n	80050c0 <UART_SetConfig+0x1ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800515e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005162:	f43f af41 	beq.w	8004fe8 <UART_SetConfig+0x114>
 8005166:	e701      	b.n	8004f6c <UART_SetConfig+0x98>
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <UART_SetConfig+0x300>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005172:	2b20      	cmp	r3, #32
 8005174:	d019      	beq.n	80051aa <UART_SetConfig+0x2d6>
 8005176:	f63f af35 	bhi.w	8004fe4 <UART_SetConfig+0x110>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0e3      	beq.n	8005146 <UART_SetConfig+0x272>
 800517e:	2b10      	cmp	r3, #16
 8005180:	d0db      	beq.n	800513a <UART_SetConfig+0x266>
 8005182:	e6f3      	b.n	8004f6c <UART_SetConfig+0x98>
 8005184:	2bc0      	cmp	r3, #192	; 0xc0
 8005186:	f43f af2f 	beq.w	8004fe8 <UART_SetConfig+0x114>
 800518a:	e6ef      	b.n	8004f6c <UART_SetConfig+0x98>
 800518c:	4814      	ldr	r0, [pc, #80]	; (80051e0 <UART_SetConfig+0x30c>)
 800518e:	e7a1      	b.n	80050d4 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005190:	f7ff fb3a 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005194:	2800      	cmp	r0, #0
 8005196:	f43f af74 	beq.w	8005082 <UART_SetConfig+0x1ae>
 800519a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800519c:	e757      	b.n	800504e <UART_SetConfig+0x17a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800519e:	f7ff fb45 	bl	800482c <HAL_RCC_GetPCLK2Freq>
        break;
 80051a2:	e7f7      	b.n	8005194 <UART_SetConfig+0x2c0>
        pclk = HAL_RCC_GetSysClockFreq();
 80051a4:	f7fe fe90 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
        break;
 80051a8:	e7f4      	b.n	8005194 <UART_SetConfig+0x2c0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80051ae:	480c      	ldr	r0, [pc, #48]	; (80051e0 <UART_SetConfig+0x30c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b0:	f47f af1f 	bne.w	8004ff2 <UART_SetConfig+0x11e>
 80051b4:	e74b      	b.n	800504e <UART_SetConfig+0x17a>
 80051b6:	bf00      	nop
 80051b8:	cfff69f3 	.word	0xcfff69f3
 80051bc:	40008000 	.word	0x40008000
 80051c0:	40013800 	.word	0x40013800
 80051c4:	40004400 	.word	0x40004400
 80051c8:	40004800 	.word	0x40004800
 80051cc:	40004c00 	.word	0x40004c00
 80051d0:	40005000 	.word	0x40005000
 80051d4:	40021000 	.word	0x40021000
 80051d8:	0800df30 	.word	0x0800df30
 80051dc:	0800df40 	.word	0x0800df40
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	000ffcff 	.word	0x000ffcff
 80051e8:	0800df2c 	.word	0x0800df2c

080051ec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051ee:	07da      	lsls	r2, r3, #31
{
 80051f0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051f2:	d506      	bpl.n	8005202 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051f4:	6801      	ldr	r1, [r0, #0]
 80051f6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80051f8:	684a      	ldr	r2, [r1, #4]
 80051fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80051fe:	4322      	orrs	r2, r4
 8005200:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005202:	079c      	lsls	r4, r3, #30
 8005204:	d506      	bpl.n	8005214 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005206:	6801      	ldr	r1, [r0, #0]
 8005208:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800520a:	684a      	ldr	r2, [r1, #4]
 800520c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005210:	4322      	orrs	r2, r4
 8005212:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005214:	0759      	lsls	r1, r3, #29
 8005216:	d506      	bpl.n	8005226 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005218:	6801      	ldr	r1, [r0, #0]
 800521a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800521c:	684a      	ldr	r2, [r1, #4]
 800521e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005222:	4322      	orrs	r2, r4
 8005224:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005226:	071a      	lsls	r2, r3, #28
 8005228:	d506      	bpl.n	8005238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800522a:	6801      	ldr	r1, [r0, #0]
 800522c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800522e:	684a      	ldr	r2, [r1, #4]
 8005230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005234:	4322      	orrs	r2, r4
 8005236:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005238:	06dc      	lsls	r4, r3, #27
 800523a:	d506      	bpl.n	800524a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800523c:	6801      	ldr	r1, [r0, #0]
 800523e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005240:	688a      	ldr	r2, [r1, #8]
 8005242:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005246:	4322      	orrs	r2, r4
 8005248:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800524a:	0699      	lsls	r1, r3, #26
 800524c:	d506      	bpl.n	800525c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800524e:	6801      	ldr	r1, [r0, #0]
 8005250:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005252:	688a      	ldr	r2, [r1, #8]
 8005254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005258:	4322      	orrs	r2, r4
 800525a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800525c:	065a      	lsls	r2, r3, #25
 800525e:	d509      	bpl.n	8005274 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005260:	6801      	ldr	r1, [r0, #0]
 8005262:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005264:	684a      	ldr	r2, [r1, #4]
 8005266:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800526a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005270:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005272:	d00b      	beq.n	800528c <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005274:	061b      	lsls	r3, r3, #24
 8005276:	d506      	bpl.n	8005286 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005278:	6802      	ldr	r2, [r0, #0]
 800527a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800527c:	6853      	ldr	r3, [r2, #4]
 800527e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005282:	430b      	orrs	r3, r1
 8005284:	6053      	str	r3, [r2, #4]
  }
}
 8005286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800528a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800528c:	684a      	ldr	r2, [r1, #4]
 800528e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005290:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005294:	4322      	orrs	r2, r4
 8005296:	604a      	str	r2, [r1, #4]
 8005298:	e7ec      	b.n	8005274 <UART_AdvFeatureConfig+0x88>
 800529a:	bf00      	nop

0800529c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a4:	6804      	ldr	r4, [r0, #0]
 80052a6:	4607      	mov	r7, r0
 80052a8:	460e      	mov	r6, r1
 80052aa:	4615      	mov	r5, r2
 80052ac:	4699      	mov	r9, r3
 80052ae:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80052b2:	d10a      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x2e>
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b4:	69e3      	ldr	r3, [r4, #28]
 80052b6:	ea36 0303 	bics.w	r3, r6, r3
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	429d      	cmp	r5, r3
 80052c2:	d0f7      	beq.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80052c4:	2000      	movs	r0, #0
}
 80052c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ca:	69e3      	ldr	r3, [r4, #28]
 80052cc:	ea36 0303 	bics.w	r3, r6, r3
 80052d0:	bf0c      	ite	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	2300      	movne	r3, #0
 80052d6:	42ab      	cmp	r3, r5
 80052d8:	d1f4      	bne.n	80052c4 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fe fad9 	bl	8003890 <HAL_GetTick>
 80052de:	eba0 0009 	sub.w	r0, r0, r9
 80052e2:	4540      	cmp	r0, r8
 80052e4:	d833      	bhi.n	800534e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052e6:	f1b8 0f00 	cmp.w	r8, #0
 80052ea:	d030      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ec:	683c      	ldr	r4, [r7, #0]
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	0759      	lsls	r1, r3, #29
 80052f2:	4622      	mov	r2, r4
 80052f4:	d5db      	bpl.n	80052ae <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f6:	69e3      	ldr	r3, [r4, #28]
 80052f8:	051b      	lsls	r3, r3, #20
 80052fa:	d5d8      	bpl.n	80052ae <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005300:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005306:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	e844 3100 	strex	r1, r3, [r4]
 800530e:	b139      	cbz	r1, 8005320 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	e852 3f00 	ldrex	r3, [r2]
 8005314:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	e842 3100 	strex	r1, r3, [r2]
 800531c:	2900      	cmp	r1, #0
 800531e:	d1f7      	bne.n	8005310 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	f102 0308 	add.w	r3, r2, #8
 8005324:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005328:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	f102 0008 	add.w	r0, r2, #8
 8005330:	e840 3100 	strex	r1, r3, [r0]
 8005334:	2900      	cmp	r1, #0
 8005336:	d1f3      	bne.n	8005320 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8005338:	2320      	movs	r3, #32
 800533a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800533e:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8005346:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800534c:	e7bb      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0x2a>
 800534e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	e842 3100 	strex	r1, r3, [r2]
 800535c:	2900      	cmp	r1, #0
 800535e:	d1f7      	bne.n	8005350 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	f102 0308 	add.w	r3, r2, #8
 8005364:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	f102 0008 	add.w	r0, r2, #8
 8005370:	e840 3100 	strex	r1, r3, [r0]
 8005374:	2900      	cmp	r1, #0
 8005376:	d1f3      	bne.n	8005360 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8005378:	2320      	movs	r3, #32
 800537a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800537e:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        return HAL_TIMEOUT;
 8005382:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8005384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8005388:	e79d      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0x2a>
 800538a:	bf00      	nop

0800538c <HAL_UART_Transmit>:
{
 800538c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005390:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005392:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8005396:	2820      	cmp	r0, #32
{
 8005398:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800539a:	f040 8090 	bne.w	80054be <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 800539e:	4688      	mov	r8, r1
 80053a0:	2900      	cmp	r1, #0
 80053a2:	d048      	beq.n	8005436 <HAL_UART_Transmit+0xaa>
 80053a4:	4617      	mov	r7, r2
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	d045      	beq.n	8005436 <HAL_UART_Transmit+0xaa>
 80053aa:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 80053ac:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f000 8084 	beq.w	80054be <HAL_UART_Transmit+0x132>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b6:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 80053b8:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	f04f 0900 	mov.w	r9, #0
 80053be:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 80053c2:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 80053ca:	f7fe fa61 	bl	8003890 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ce:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80053d0:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80053d8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80053da:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053de:	d072      	beq.n	80054c6 <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 80053e0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 80053e4:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80053e6:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80053e8:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80053ec:	b1b3      	cbz	r3, 800541c <HAL_UART_Transmit+0x90>
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	1c68      	adds	r0, r5, #1
 80053f2:	d124      	bne.n	800543e <HAL_UART_Transmit+0xb2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f4:	69d3      	ldr	r3, [r2, #28]
 80053f6:	0619      	lsls	r1, r3, #24
 80053f8:	d5fc      	bpl.n	80053f4 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 80053fa:	f1b8 0f00 	cmp.w	r8, #0
 80053fe:	d059      	beq.n	80054b4 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005400:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005404:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005406:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800540a:	3b01      	subs	r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005412:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e9      	bne.n	80053f0 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800541c:	9500      	str	r5, [sp, #0]
 800541e:	4633      	mov	r3, r6
 8005420:	2200      	movs	r2, #0
 8005422:	2140      	movs	r1, #64	; 0x40
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff ff39 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 800542a:	2800      	cmp	r0, #0
 800542c:	d171      	bne.n	8005512 <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 800542e:	2320      	movs	r3, #32
 8005430:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8005434:	e000      	b.n	8005438 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8005436:	2001      	movs	r0, #1
}
 8005438:	b003      	add	sp, #12
 800543a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543e:	69d3      	ldr	r3, [r2, #28]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	d4da      	bmi.n	80053fa <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005444:	f7fe fa24 	bl	8003890 <HAL_GetTick>
 8005448:	1b80      	subs	r0, r0, r6
 800544a:	4285      	cmp	r5, r0
 800544c:	d341      	bcc.n	80054d2 <HAL_UART_Transmit+0x146>
 800544e:	2d00      	cmp	r5, #0
 8005450:	d03f      	beq.n	80054d2 <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	0749      	lsls	r1, r1, #29
 8005458:	4613      	mov	r3, r2
 800545a:	d5c9      	bpl.n	80053f0 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800545c:	69d1      	ldr	r1, [r2, #28]
 800545e:	050f      	lsls	r7, r1, #20
 8005460:	d5c6      	bpl.n	80053f0 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005466:	6211      	str	r1, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	e852 1f00 	ldrex	r1, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800546c:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	e842 1000 	strex	r0, r1, [r2]
 8005474:	b138      	cbz	r0, 8005486 <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	e853 2f00 	ldrex	r2, [r3]
 800547a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	e843 2100 	strex	r1, r2, [r3]
 8005482:	2900      	cmp	r1, #0
 8005484:	d1f7      	bne.n	8005476 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	f103 0208 	add.w	r2, r3, #8
 800548a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	f103 0008 	add.w	r0, r3, #8
 8005496:	e840 2100 	strex	r1, r2, [r0]
 800549a:	2900      	cmp	r1, #0
 800549c:	d1f3      	bne.n	8005486 <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 800549e:	2320      	movs	r3, #32
 80054a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80054a4:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80054a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_TIMEOUT;
 80054ac:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 80054b2:	e7c1      	b.n	8005438 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b4:	f839 3b02 	ldrh.w	r3, [r9], #2
 80054b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054bc:	e7a2      	b.n	8005404 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 80054be:	2002      	movs	r0, #2
}
 80054c0:	b003      	add	sp, #12
 80054c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d189      	bne.n	80053e0 <HAL_UART_Transmit+0x54>
 80054cc:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80054ce:	4698      	mov	r8, r3
 80054d0:	e786      	b.n	80053e0 <HAL_UART_Transmit+0x54>
 80054d2:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	e843 2100 	strex	r1, r2, [r3]
 80054e0:	2900      	cmp	r1, #0
 80054e2:	d1f7      	bne.n	80054d4 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	f103 0208 	add.w	r2, r3, #8
 80054e8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ec:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	f103 0008 	add.w	r0, r3, #8
 80054f4:	e840 2100 	strex	r1, r2, [r0]
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d1f3      	bne.n	80054e4 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 80054fc:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80054fe:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8005500:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8005504:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005508:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800550c:	b003      	add	sp, #12
 800550e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8005512:	2003      	movs	r0, #3
 8005514:	e790      	b.n	8005438 <HAL_UART_Transmit+0xac>
 8005516:	bf00      	nop

08005518 <HAL_UART_Init>:
  if (huart == NULL)
 8005518:	2800      	cmp	r0, #0
 800551a:	d066      	beq.n	80055ea <HAL_UART_Init+0xd2>
{
 800551c:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800551e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8005522:	b082      	sub	sp, #8
 8005524:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04c      	beq.n	80055c4 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800552a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	2324      	movs	r3, #36	; 0x24
 800552e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005532:	6813      	ldr	r3, [r2, #0]
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800553a:	4620      	mov	r0, r4
 800553c:	f7ff fcca 	bl	8004ed4 <UART_SetConfig>
 8005540:	2801      	cmp	r0, #1
 8005542:	d03c      	beq.n	80055be <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005544:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d135      	bne.n	80055b6 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800555a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800555c:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555e:	2600      	movs	r6, #0
  __HAL_UART_ENABLE(huart);
 8005560:	f041 0101 	orr.w	r1, r1, #1
 8005564:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800556a:	f7fe f991 	bl	8003890 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8005574:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005576:	d40e      	bmi.n	8005596 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	075b      	lsls	r3, r3, #29
 800557c:	d427      	bmi.n	80055ce <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005580:	2220      	movs	r2, #32
 8005582:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005586:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800558a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800558e:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005590:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005592:	b002      	add	sp, #8
 8005594:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005596:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4632      	mov	r2, r6
 800559e:	4603      	mov	r3, r0
 80055a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7ff fe79 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 80055aa:	b9e0      	cbnz	r0, 80055e6 <HAL_UART_Init+0xce>
 80055ac:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	075b      	lsls	r3, r3, #29
 80055b2:	d40c      	bmi.n	80055ce <HAL_UART_Init+0xb6>
 80055b4:	e7e3      	b.n	800557e <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80055b6:	4620      	mov	r0, r4
 80055b8:	f7ff fe18 	bl	80051ec <UART_AdvFeatureConfig>
 80055bc:	e7c5      	b.n	800554a <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80055be:	2001      	movs	r0, #1
}
 80055c0:	b002      	add	sp, #8
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80055c4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80055c8:	f7fd ffc0 	bl	800354c <HAL_UART_MspInit>
 80055cc:	e7ad      	b.n	800552a <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ce:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80055d2:	9200      	str	r2, [sp, #0]
 80055d4:	462b      	mov	r3, r5
 80055d6:	2200      	movs	r2, #0
 80055d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055dc:	4620      	mov	r0, r4
 80055de:	f7ff fe5d 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d0cb      	beq.n	800557e <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80055e6:	2003      	movs	r0, #3
 80055e8:	e7d3      	b.n	8005592 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80055ea:	2001      	movs	r0, #1
}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop

080055f0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055f0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80055f4:	2a01      	cmp	r2, #1
 80055f6:	d017      	beq.n	8005628 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80055fa:	2124      	movs	r1, #36	; 0x24
{
 80055fc:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80055fe:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8005602:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005604:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005606:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005608:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800560a:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800560e:	f024 0401 	bic.w	r4, r4, #1
 8005612:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8005614:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005616:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005618:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800561a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 800561e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005620:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005624:	bc30      	pop	{r4, r5}
 8005626:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005628:	2002      	movs	r0, #2
}
 800562a:	4770      	bx	lr

0800562c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800562c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005630:	2a01      	cmp	r2, #1
 8005632:	d033      	beq.n	800569c <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8005634:	4603      	mov	r3, r0
 8005636:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005638:	681a      	ldr	r2, [r3, #0]
{
 800563a:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800563c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005640:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005642:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005644:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8005646:	f020 0001 	bic.w	r0, r0, #1
 800564a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800564c:	6890      	ldr	r0, [r2, #8]
 800564e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8005652:	4301      	orrs	r1, r0
 8005654:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005656:	b1f5      	cbz	r5, 8005696 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005658:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800565a:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800565c:	4810      	ldr	r0, [pc, #64]	; (80056a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800565e:	4f11      	ldr	r7, [pc, #68]	; (80056a4 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005660:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005664:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005666:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005668:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800566a:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 800566c:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800566e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005670:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005672:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005676:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800567a:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800567e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005680:	2520      	movs	r5, #32
 8005682:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005686:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005688:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800568c:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800568e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005692:	bcf0      	pop	{r4, r5, r6, r7}
 8005694:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8005696:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005698:	4608      	mov	r0, r1
 800569a:	e7ee      	b.n	800567a <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800569c:	2002      	movs	r0, #2
}
 800569e:	4770      	bx	lr
 80056a0:	0800df60 	.word	0x0800df60
 80056a4:	0800df58 	.word	0x0800df58

080056a8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80056a8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80056ac:	2a01      	cmp	r2, #1
 80056ae:	d033      	beq.n	8005718 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80056b0:	4603      	mov	r3, r0
 80056b2:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b4:	681a      	ldr	r2, [r3, #0]
{
 80056b6:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056bc:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80056be:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056c0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80056c2:	f020 0001 	bic.w	r0, r0, #1
 80056c6:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056c8:	6890      	ldr	r0, [r2, #8]
 80056ca:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80056ce:	4301      	orrs	r1, r0
 80056d0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056d2:	b1f5      	cbz	r5, 8005712 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056d4:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056d6:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056d8:	4810      	ldr	r0, [pc, #64]	; (800571c <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80056da:	4f11      	ldr	r7, [pc, #68]	; (8005720 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056dc:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056e0:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056e2:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056e4:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80056e6:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80056e8:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ea:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056ec:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ee:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056f2:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056f6:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80056fa:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80056fc:	2520      	movs	r5, #32
 80056fe:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005702:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005704:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8005708:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800570a:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800570e:	bcf0      	pop	{r4, r5, r6, r7}
 8005710:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8005712:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005714:	4608      	mov	r0, r1
 8005716:	e7ee      	b.n	80056f6 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8005718:	2002      	movs	r0, #2
}
 800571a:	4770      	bx	lr
 800571c:	0800df60 	.word	0x0800df60
 8005720:	0800df58 	.word	0x0800df58

08005724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005724:	b084      	sub	sp, #16
 8005726:	b430      	push	{r4, r5}
 8005728:	4604      	mov	r4, r0
 800572a:	b082      	sub	sp, #8
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800572c:	68c0      	ldr	r0, [r0, #12]
{
 800572e:	ad05      	add	r5, sp, #20
 8005730:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005734:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8005738:	2300      	movs	r3, #0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800573a:	60e0      	str	r0, [r4, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <USB_CoreInit+0x7c>)
  __IO uint32_t count = 0U;
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	e002      	b.n	8005748 <USB_CoreInit+0x24>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005742:	6923      	ldr	r3, [r4, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	db18      	blt.n	800577a <USB_CoreInit+0x56>
    count++;
 8005748:	9b01      	ldr	r3, [sp, #4]
 800574a:	3301      	adds	r3, #1
 800574c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800574e:	9b01      	ldr	r3, [sp, #4]
 8005750:	4293      	cmp	r3, r2
 8005752:	d9f6      	bls.n	8005742 <USB_CoreInit+0x1e>
      return HAL_TIMEOUT;
 8005754:	2003      	movs	r0, #3
  if (cfg.battery_charging_enable == 0U)
 8005756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005758:	b13b      	cbz	r3, 800576a <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800575a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800575c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005760:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005762:	b002      	add	sp, #8
 8005764:	bc30      	pop	{r4, r5}
 8005766:	b004      	add	sp, #16
 8005768:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800576a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800576c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005770:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005772:	b002      	add	sp, #8
 8005774:	bc30      	pop	{r4, r5}
 8005776:	b004      	add	sp, #16
 8005778:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800577e:	6923      	ldr	r3, [r4, #16]

  do
  {
    count++;

    if (count > 200000U)
 8005780:	4a07      	ldr	r2, [pc, #28]	; (80057a0 <USB_CoreInit+0x7c>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	6123      	str	r3, [r4, #16]
 8005788:	e003      	b.n	8005792 <USB_CoreInit+0x6e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800578a:	6920      	ldr	r0, [r4, #16]
 800578c:	f010 0001 	ands.w	r0, r0, #1
 8005790:	d0e1      	beq.n	8005756 <USB_CoreInit+0x32>
    count++;
 8005792:	9b01      	ldr	r3, [sp, #4]
 8005794:	3301      	adds	r3, #1
 8005796:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005798:	9b01      	ldr	r3, [sp, #4]
 800579a:	4293      	cmp	r3, r2
 800579c:	d9f5      	bls.n	800578a <USB_CoreInit+0x66>
 800579e:	e7d9      	b.n	8005754 <USB_CoreInit+0x30>
 80057a0:	00030d40 	.word	0x00030d40

080057a4 <USB_DisableGlobalInt>:
{
 80057a4:	4603      	mov	r3, r0
}
 80057a6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	f022 0201 	bic.w	r2, r2, #1
 80057ae:	609a      	str	r2, [r3, #8]
}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop

080057b4 <USB_SetCurrentMode>:
{
 80057b4:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057b6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80057b8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057ba:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 80057be:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057c0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80057c2:	d018      	beq.n	80057f6 <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 80057c4:	b9a9      	cbnz	r1, 80057f2 <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057c6:	68c3      	ldr	r3, [r0, #12]
 80057c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t ms = 0U;
 80057cc:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057ce:	60c3      	str	r3, [r0, #12]
 80057d0:	e001      	b.n	80057d6 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057d2:	2c32      	cmp	r4, #50	; 0x32
 80057d4:	d00d      	beq.n	80057f2 <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 80057d6:	2001      	movs	r0, #1
 80057d8:	f7fe f860 	bl	800389c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80057dc:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057de:	07db      	lsls	r3, r3, #31
      ms++;
 80057e0:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057e4:	d4f5      	bmi.n	80057d2 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80057e6:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80057ea:	fab0 f080 	clz	r0, r0
 80057ee:	0940      	lsrs	r0, r0, #5
}
 80057f0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80057f2:	2001      	movs	r0, #1
}
 80057f4:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057f6:	68c3      	ldr	r3, [r0, #12]
 80057f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057fc:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80057fe:	2400      	movs	r4, #0
 8005800:	e001      	b.n	8005806 <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005802:	2c32      	cmp	r4, #50	; 0x32
 8005804:	d0f5      	beq.n	80057f2 <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8005806:	2001      	movs	r0, #1
 8005808:	f7fe f848 	bl	800389c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800580c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800580e:	07da      	lsls	r2, r3, #31
      ms++;
 8005810:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005814:	d5f5      	bpl.n	8005802 <USB_SetCurrentMode+0x4e>
    return HAL_ERROR;
 8005816:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800581a:	fab0 f080 	clz	r0, r0
 800581e:	0940      	lsrs	r0, r0, #5
 8005820:	e7e6      	b.n	80057f0 <USB_SetCurrentMode+0x3c>
 8005822:	bf00      	nop

08005824 <USB_DevInit>:
{
 8005824:	b084      	sub	sp, #16
 8005826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800582a:	b083      	sub	sp, #12
 800582c:	ac0b      	add	r4, sp, #44	; 0x2c
 800582e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8005832:	9e15      	ldr	r6, [sp, #84]	; 0x54
    USBx->DIEPTXF[i] = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800583a:	460c      	mov	r4, r1
 800583c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8005840:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8005844:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8005848:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800584c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8005850:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8005854:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8005858:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800585c:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8005860:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8005864:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8005868:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800586c:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8005870:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8005874:	2e00      	cmp	r6, #0
 8005876:	f040 80a2 	bne.w	80059be <USB_DevInit+0x19a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800587a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005886:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800588c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800588e:	6803      	ldr	r3, [r0, #0]
 8005890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005894:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005896:	6803      	ldr	r3, [r0, #0]
 8005898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800589c:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058a0:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 80058a2:	2100      	movs	r1, #0
 80058a4:	f8c0 1e00 	str.w	r1, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	602b      	str	r3, [r5, #0]
  USBx_DEVICE->DCFG |= speed;
 80058ac:	682b      	ldr	r3, [r5, #0]
    if (count > 200000U)
 80058ae:	4a59      	ldr	r2, [pc, #356]	; (8005a14 <USB_DevInit+0x1f0>)
  USBx_DEVICE->DCFG |= speed;
 80058b0:	f043 0303 	orr.w	r3, r3, #3
 80058b4:	602b      	str	r3, [r5, #0]
  __IO uint32_t count = 0U;
 80058b6:	9100      	str	r1, [sp, #0]
 80058b8:	e003      	b.n	80058c2 <USB_DevInit+0x9e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ba:	6903      	ldr	r3, [r0, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f2c0 8095 	blt.w	80059ec <USB_DevInit+0x1c8>
    count++;
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 80058c8:	9b00      	ldr	r3, [sp, #0]
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d9f5      	bls.n	80058ba <USB_DevInit+0x96>
    ret = HAL_ERROR;
 80058ce:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
    if (count > 200000U)
 80058d2:	4a50      	ldr	r2, [pc, #320]	; (8005a14 <USB_DevInit+0x1f0>)
  __IO uint32_t count = 0U;
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	e002      	b.n	80058de <USB_DevInit+0xba>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058d8:	6903      	ldr	r3, [r0, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	db76      	blt.n	80059cc <USB_DevInit+0x1a8>
    count++;
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	3301      	adds	r3, #1
 80058e2:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80058e4:	9b01      	ldr	r3, [sp, #4]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d9f6      	bls.n	80058d8 <USB_DevInit+0xb4>
    ret = HAL_ERROR;
 80058ea:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80058ec:	2200      	movs	r2, #0
 80058ee:	612a      	str	r2, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058f0:	616a      	str	r2, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058f2:	61ea      	str	r2, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f4:	b1f4      	cbz	r4, 8005934 <USB_DevInit+0x110>
      USBx_INEP(i)->DIEPCTL = 0U;
 80058f6:	4694      	mov	ip, r2
 80058f8:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058fc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005900:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005904:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8005908:	e00a      	b.n	8005920 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 800590a:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800590e:	3201      	adds	r2, #1
 8005910:	42a2      	cmp	r2, r4
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005912:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005916:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800591a:	f103 0320 	add.w	r3, r3, #32
 800591e:	d02e      	beq.n	800597e <USB_DevInit+0x15a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005920:	681f      	ldr	r7, [r3, #0]
 8005922:	2f00      	cmp	r7, #0
 8005924:	daf1      	bge.n	800590a <USB_DevInit+0xe6>
      if (i == 0U)
 8005926:	b112      	cbz	r2, 800592e <USB_DevInit+0x10a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005928:	f8c3 8000 	str.w	r8, [r3]
 800592c:	e7ef      	b.n	800590e <USB_DevInit+0xea>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800592e:	f8c3 9000 	str.w	r9, [r3]
 8005932:	e7ec      	b.n	800590e <USB_DevInit+0xea>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005934:	692a      	ldr	r2, [r5, #16]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005936:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <USB_DevInit+0x1f4>)
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800593c:	612a      	str	r2, [r5, #16]
  USBx->GINTMSK = 0U;
 800593e:	2400      	movs	r4, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005940:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8005944:	6184      	str	r4, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005946:	6142      	str	r2, [r0, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005948:	6982      	ldr	r2, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800594a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800594c:	f042 0210 	orr.w	r2, r2, #16
 8005950:	6182      	str	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005952:	6982      	ldr	r2, [r0, #24]
 8005954:	4313      	orrs	r3, r2
 8005956:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 8005958:	b11c      	cbz	r4, 8005962 <USB_DevInit+0x13e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800595a:	6983      	ldr	r3, [r0, #24]
 800595c:	f043 0308 	orr.w	r3, r3, #8
 8005960:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8005962:	2e01      	cmp	r6, #1
 8005964:	d105      	bne.n	8005972 <USB_DevInit+0x14e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005966:	6983      	ldr	r3, [r0, #24]
 8005968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596c:	f043 0304 	orr.w	r3, r3, #4
 8005970:	6183      	str	r3, [r0, #24]
}
 8005972:	4608      	mov	r0, r1
 8005974:	b003      	add	sp, #12
 8005976:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800597a:	b004      	add	sp, #16
 800597c:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800597e:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005980:	4694      	mov	ip, r2
 8005982:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005986:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800598a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800598e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8005992:	e00a      	b.n	80059aa <USB_DevInit+0x186>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005994:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005998:	3201      	adds	r2, #1
 800599a:	42a2      	cmp	r2, r4
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800599c:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059a0:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a4:	f103 0320 	add.w	r3, r3, #32
 80059a8:	d0c4      	beq.n	8005934 <USB_DevInit+0x110>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059aa:	681f      	ldr	r7, [r3, #0]
 80059ac:	2f00      	cmp	r7, #0
 80059ae:	daf1      	bge.n	8005994 <USB_DevInit+0x170>
      if (i == 0U)
 80059b0:	b112      	cbz	r2, 80059b8 <USB_DevInit+0x194>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059b2:	f8c3 8000 	str.w	r8, [r3]
 80059b6:	e7ef      	b.n	8005998 <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059b8:	f8c3 9000 	str.w	r9, [r3]
 80059bc:	e7ec      	b.n	8005998 <USB_DevInit+0x174>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80059c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059c4:	6383      	str	r3, [r0, #56]	; 0x38
 80059c6:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 80059ca:	e76a      	b.n	80058a2 <USB_DevInit+0x7e>
  count = 0U;
 80059cc:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ce:	2310      	movs	r3, #16
  count = 0U;
 80059d0:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 80059d2:	4a10      	ldr	r2, [pc, #64]	; (8005a14 <USB_DevInit+0x1f0>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d4:	6103      	str	r3, [r0, #16]
 80059d6:	e002      	b.n	80059de <USB_DevInit+0x1ba>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059d8:	6903      	ldr	r3, [r0, #16]
 80059da:	06db      	lsls	r3, r3, #27
 80059dc:	d586      	bpl.n	80058ec <USB_DevInit+0xc8>
    count++;
 80059de:	9b01      	ldr	r3, [sp, #4]
 80059e0:	3301      	adds	r3, #1
 80059e2:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80059e4:	9b01      	ldr	r3, [sp, #4]
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d9f6      	bls.n	80059d8 <USB_DevInit+0x1b4>
 80059ea:	e77e      	b.n	80058ea <USB_DevInit+0xc6>
  count = 0U;
 80059ec:	2200      	movs	r2, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059ee:	f44f 6384 	mov.w	r3, #1056	; 0x420
  count = 0U;
 80059f2:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 80059f4:	4a07      	ldr	r2, [pc, #28]	; (8005a14 <USB_DevInit+0x1f0>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059f6:	6103      	str	r3, [r0, #16]
 80059f8:	e004      	b.n	8005a04 <USB_DevInit+0x1e0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059fa:	6901      	ldr	r1, [r0, #16]
 80059fc:	f011 0120 	ands.w	r1, r1, #32
 8005a00:	f43f af66 	beq.w	80058d0 <USB_DevInit+0xac>
    count++;
 8005a04:	9b00      	ldr	r3, [sp, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8005a0a:	9b00      	ldr	r3, [sp, #0]
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d9f4      	bls.n	80059fa <USB_DevInit+0x1d6>
 8005a10:	e75d      	b.n	80058ce <USB_DevInit+0xaa>
 8005a12:	bf00      	nop
 8005a14:	00030d40 	.word	0x00030d40
 8005a18:	803c3800 	.word	0x803c3800

08005a1c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a1c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8005a20:	f023 0303 	bic.w	r3, r3, #3
 8005a24:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a28:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005a2c:	f043 0302 	orr.w	r3, r3, #2
 8005a30:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005a34:	2000      	movs	r0, #0
 8005a36:	4770      	bx	lr

08005a38 <arm_cm_conv2d_1x1_i8>:
 8005a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	b099      	sub	sp, #100	; 0x64
 8005a3e:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 8005a42:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005a44:	9009      	str	r0, [sp, #36]	; 0x24
 8005a46:	1052      	asrs	r2, r2, #1
 8005a48:	920e      	str	r2, [sp, #56]	; 0x38
 8005a4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8005a4c:	9825      	ldr	r0, [sp, #148]	; 0x94
 8005a4e:	9305      	str	r3, [sp, #20]
 8005a50:	0052      	lsls	r2, r2, #1
 8005a52:	920d      	str	r2, [sp, #52]	; 0x34
 8005a54:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8005a58:	434a      	muls	r2, r1
 8005a5a:	f1c2 0202 	rsb	r2, r2, #2
 8005a5e:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a62:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005a64:	3204      	adds	r2, #4
 8005a66:	9208      	str	r2, [sp, #32]
 8005a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a6a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005a6e:	434a      	muls	r2, r1
 8005a70:	0052      	lsls	r2, r2, #1
 8005a72:	9925      	ldr	r1, [sp, #148]	; 0x94
 8005a74:	9214      	str	r2, [sp, #80]	; 0x50
 8005a76:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	f022 020f 	bic.w	r2, r2, #15
 8005a7e:	bfb8      	it	lt
 8005a80:	2200      	movlt	r2, #0
 8005a82:	9206      	str	r2, [sp, #24]
 8005a84:	460a      	mov	r2, r1
 8005a86:	9906      	ldr	r1, [sp, #24]
 8005a88:	1a52      	subs	r2, r2, r1
 8005a8a:	4281      	cmp	r1, r0
 8005a8c:	bfc8      	it	gt
 8005a8e:	2200      	movgt	r2, #0
 8005a90:	4402      	add	r2, r0
 8005a92:	9212      	str	r2, [sp, #72]	; 0x48
 8005a94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a96:	0052      	lsls	r2, r2, #1
 8005a98:	9215      	str	r2, [sp, #84]	; 0x54
 8005a9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a9c:	9207      	str	r2, [sp, #28]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	920a      	str	r2, [sp, #40]	; 0x28
 8005aa2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005aa4:	3b04      	subs	r3, #4
 8005aa6:	3a01      	subs	r2, #1
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	9216      	str	r2, [sp, #88]	; 0x58
 8005aac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005aae:	f1a0 020f 	sub.w	r2, r0, #15
 8005ab2:	9211      	str	r2, [sp, #68]	; 0x44
 8005ab4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ab8:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8005abc:	425b      	negs	r3, r3
 8005abe:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
 8005ac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ac4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ac6:	428a      	cmp	r2, r1
 8005ac8:	dc20      	bgt.n	8005b0c <arm_cm_conv2d_1x1_i8+0xd4>
 8005aca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ace:	0859      	lsrs	r1, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ad4:	bfb8      	it	lt
 8005ad6:	2100      	movlt	r1, #0
 8005ad8:	fb02 3101 	mla	r1, r2, r1, r3
 8005adc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ade:	07da      	lsls	r2, r3, #31
 8005ae0:	d511      	bpl.n	8005b06 <arm_cm_conv2d_1x1_i8+0xce>
 8005ae2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005ae6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ae8:	3a01      	subs	r2, #1
 8005aea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005aee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005af0:	2400      	movs	r4, #0
 8005af2:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 8005af6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005afa:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8005afe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b00:	429c      	cmp	r4, r3
 8005b02:	f2c0 8238 	blt.w	8005f76 <arm_cm_conv2d_1x1_i8+0x53e>
 8005b06:	b019      	add	sp, #100	; 0x64
 8005b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0c:	9a08      	ldr	r2, [sp, #32]
 8005b0e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005b12:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8005b16:	9202      	str	r2, [sp, #8]
 8005b18:	9a08      	ldr	r2, [sp, #32]
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	9203      	str	r2, [sp, #12]
 8005b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b20:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b22:	9a05      	ldr	r2, [sp, #20]
 8005b24:	9204      	str	r2, [sp, #16]
 8005b26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b28:	3201      	adds	r2, #1
 8005b2a:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	f300 812f 	bgt.w	8005d92 <arm_cm_conv2d_1x1_i8+0x35a>
 8005b34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b36:	9d05      	ldr	r5, [sp, #20]
 8005b38:	4415      	add	r5, r2
 8005b3a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005b3c:	07d1      	lsls	r1, r2, #31
 8005b3e:	f140 81f9 	bpl.w	8005f34 <arm_cm_conv2d_1x1_i8+0x4fc>
 8005b42:	9a07      	ldr	r2, [sp, #28]
 8005b44:	2600      	movs	r6, #0
 8005b46:	e1b1      	b.n	8005eac <arm_cm_conv2d_1x1_i8+0x474>
 8005b48:	9c01      	ldr	r4, [sp, #4]
 8005b4a:	f852 6b04 	ldr.w	r6, [r2], #4
 8005b4e:	4658      	mov	r0, fp
 8005b50:	5915      	ldr	r5, [r2, r4]
 8005b52:	f850 7b04 	ldr.w	r7, [r0], #4
 8005b56:	fa23 fb86 	sxtab16	fp, r3, r6
 8005b5a:	fa2f f887 	sxtb16	r8, r7
 8005b5e:	fa23 fc85 	sxtab16	ip, r3, r5
 8005b62:	fa2f f797 	sxtb16	r7, r7, ror #8
 8005b66:	fa23 f595 	sxtab16	r5, r3, r5, ror #8
 8005b6a:	fa23 f696 	sxtab16	r6, r3, r6, ror #8
 8005b6e:	fb27 ee05 	smlad	lr, r7, r5, lr
 8005b72:	fb27 1106 	smlad	r1, r7, r6, r1
 8005b76:	fb28 e70c 	smlad	r7, r8, ip, lr
 8005b7a:	463c      	mov	r4, r7
 8005b7c:	9f01      	ldr	r7, [sp, #4]
 8005b7e:	fb28 110b 	smlad	r1, r8, fp, r1
 8005b82:	59c7      	ldr	r7, [r0, r7]
 8005b84:	fa2f fe87 	sxtb16	lr, r7
 8005b88:	fa2f f897 	sxtb16	r8, r7, ror #8
 8005b8c:	9f01      	ldr	r7, [sp, #4]
 8005b8e:	fb28 a606 	smlad	r6, r8, r6, sl
 8005b92:	fb28 9805 	smlad	r8, r8, r5, r9
 8005b96:	fb2e 6a0b 	smlad	sl, lr, fp, r6
 8005b9a:	fb2e 890c 	smlad	r9, lr, ip, r8
 8005b9e:	f850 5b04 	ldr.w	r5, [r0], #4
 8005ba2:	f852 6b04 	ldr.w	r6, [r2], #4
 8005ba6:	fa2f f885 	sxtb16	r8, r5
 8005baa:	fa23 fe86 	sxtab16	lr, r3, r6
 8005bae:	59d7      	ldr	r7, [r2, r7]
 8005bb0:	fa2f f595 	sxtb16	r5, r5, ror #8
 8005bb4:	fa23 fc87 	sxtab16	ip, r3, r7
 8005bb8:	fa23 f696 	sxtab16	r6, r3, r6, ror #8
 8005bbc:	fa23 f797 	sxtab16	r7, r3, r7, ror #8
 8005bc0:	fb25 1106 	smlad	r1, r5, r6, r1
 8005bc4:	fb25 4507 	smlad	r5, r5, r7, r4
 8005bc8:	9c01      	ldr	r4, [sp, #4]
 8005bca:	fb28 110e 	smlad	r1, r8, lr, r1
 8005bce:	fb28 580c 	smlad	r8, r8, ip, r5
 8005bd2:	5905      	ldr	r5, [r0, r4]
 8005bd4:	fa2f fb85 	sxtb16	fp, r5
 8005bd8:	fa2f f595 	sxtb16	r5, r5, ror #8
 8005bdc:	fb25 a606 	smlad	r6, r5, r6, sl
 8005be0:	fb25 9507 	smlad	r5, r5, r7, r9
 8005be4:	fb2b 6e0e 	smlad	lr, fp, lr, r6
 8005be8:	fb2b 5c0c 	smlad	ip, fp, ip, r5
 8005bec:	f850 6b04 	ldr.w	r6, [r0], #4
 8005bf0:	f852 5b04 	ldr.w	r5, [r2], #4
 8005bf4:	fa2f fa86 	sxtb16	sl, r6
 8005bf8:	fa23 fb85 	sxtab16	fp, r3, r5
 8005bfc:	5917      	ldr	r7, [r2, r4]
 8005bfe:	fa2f f696 	sxtb16	r6, r6, ror #8
 8005c02:	fa23 f987 	sxtab16	r9, r3, r7
 8005c06:	fa23 f595 	sxtab16	r5, r3, r5, ror #8
 8005c0a:	fa23 f797 	sxtab16	r7, r3, r7, ror #8
 8005c0e:	fb26 1105 	smlad	r1, r6, r5, r1
 8005c12:	fb26 8607 	smlad	r6, r6, r7, r8
 8005c16:	fb2a 110b 	smlad	r1, sl, fp, r1
 8005c1a:	fb2a 6a09 	smlad	sl, sl, r9, r6
 8005c1e:	5906      	ldr	r6, [r0, r4]
 8005c20:	fa2f f886 	sxtb16	r8, r6
 8005c24:	fa2f f696 	sxtb16	r6, r6, ror #8
 8005c28:	fb26 e505 	smlad	r5, r6, r5, lr
 8005c2c:	fb26 c607 	smlad	r6, r6, r7, ip
 8005c30:	9f01      	ldr	r7, [sp, #4]
 8005c32:	fb28 540b 	smlad	r4, r8, fp, r5
 8005c36:	fb28 6909 	smlad	r9, r8, r9, r6
 8005c3a:	f852 5b04 	ldr.w	r5, [r2], #4
 8005c3e:	f850 6b04 	ldr.w	r6, [r0], #4
 8005c42:	59d7      	ldr	r7, [r2, r7]
 8005c44:	fa2f fe86 	sxtb16	lr, r6
 8005c48:	fa23 fc87 	sxtab16	ip, r3, r7
 8005c4c:	4683      	mov	fp, r0
 8005c4e:	fa23 f797 	sxtab16	r7, r3, r7, ror #8
 8005c52:	fa2f f096 	sxtb16	r0, r6, ror #8
 8005c56:	fa23 f685 	sxtab16	r6, r3, r5
 8005c5a:	fb20 aa07 	smlad	sl, r0, r7, sl
 8005c5e:	fa23 f595 	sxtab16	r5, r3, r5, ror #8
 8005c62:	fb20 1105 	smlad	r1, r0, r5, r1
 8005c66:	9801      	ldr	r0, [sp, #4]
 8005c68:	fb2e 1106 	smlad	r1, lr, r6, r1
 8005c6c:	f85b 8000 	ldr.w	r8, [fp, r0]
 8005c70:	fb2e ae0c 	smlad	lr, lr, ip, sl
 8005c74:	fa2f f088 	sxtb16	r0, r8
 8005c78:	fa2f f898 	sxtb16	r8, r8, ror #8
 8005c7c:	fb28 4505 	smlad	r5, r8, r5, r4
 8005c80:	fb28 9907 	smlad	r9, r8, r7, r9
 8005c84:	fb20 5a06 	smlad	sl, r0, r6, r5
 8005c88:	fb20 990c 	smlad	r9, r0, ip, r9
 8005c8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c8e:	3010      	adds	r0, #16
 8005c90:	900c      	str	r0, [sp, #48]	; 0x30
 8005c92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005c94:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005c96:	42a0      	cmp	r0, r4
 8005c98:	f73f af56 	bgt.w	8005b48 <arm_cm_conv2d_1x1_i8+0x110>
 8005c9c:	9e06      	ldr	r6, [sp, #24]
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005ca4:	9825      	ldr	r0, [sp, #148]	; 0x94
 8005ca6:	4286      	cmp	r6, r0
 8005ca8:	db7a      	blt.n	8005da0 <arm_cm_conv2d_1x1_i8+0x368>
 8005caa:	ee07 1a90 	vmov	s15, r1
 8005cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cb4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8005cb6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8005cb8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8005cba:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005cbe:	4493      	add	fp, r2
 8005cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc8:	bfd4      	ite	le
 8005cca:	eeb0 6a66 	vmovle.f32	s12, s13
 8005cce:	eeb0 6a47 	vmovgt.f32	s12, s14
 8005cd2:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cda:	ee17 2a90 	vmov	r2, s15
 8005cde:	ee07 ea90 	vmov	s15, lr
 8005ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce6:	440a      	add	r2, r1
 8005ce8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005cec:	f302 0207 	ssat	r2, #8, r2
 8005cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf8:	bfd4      	ite	le
 8005cfa:	eeb0 6a66 	vmovle.f32	s12, s13
 8005cfe:	eeb0 6a47 	vmovgt.f32	s12, s14
 8005d02:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d0a:	ee17 1a90 	vmov	r1, s15
 8005d0e:	ee07 aa90 	vmov	s15, sl
 8005d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d16:	4401      	add	r1, r0
 8005d18:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005d1c:	f301 0107 	ssat	r1, #8, r1
 8005d20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d28:	bfd4      	ite	le
 8005d2a:	eeb0 6a66 	vmovle.f32	s12, s13
 8005d2e:	eeb0 6a47 	vmovgt.f32	s12, s14
 8005d32:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d3a:	ee17 0a90 	vmov	r0, s15
 8005d3e:	ee07 9a90 	vmov	s15, r9
 8005d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d46:	4420      	add	r0, r4
 8005d48:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005d4c:	f300 0007 	ssat	r0, #8, r0
 8005d50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d58:	bfd4      	ite	le
 8005d5a:	eeb0 6a66 	vmovle.f32	s12, s13
 8005d5e:	eeb0 6a47 	vmovgt.f32	s12, s14
 8005d62:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d6a:	ee17 5a90 	vmov	r5, s15
 8005d6e:	4425      	add	r5, r4
 8005d70:	9c04      	ldr	r4, [sp, #16]
 8005d72:	f305 0507 	ssat	r5, #8, r5
 8005d76:	7061      	strb	r1, [r4, #1]
 8005d78:	9924      	ldr	r1, [sp, #144]	; 0x90
 8005d7a:	7022      	strb	r2, [r4, #0]
 8005d7c:	5460      	strb	r0, [r4, r1]
 8005d7e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005d80:	5465      	strb	r5, [r4, r1]
 8005d82:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005d84:	4622      	mov	r2, r4
 8005d86:	440a      	add	r2, r1
 8005d88:	9204      	str	r2, [sp, #16]
 8005d8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d8c:	3a01      	subs	r2, #1
 8005d8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d90:	e6cc      	b.n	8005b2c <arm_cm_conv2d_1x1_i8+0xf4>
 8005d92:	e9dd a902 	ldrd	sl, r9, [sp, #8]
 8005d96:	9a07      	ldr	r2, [sp, #28]
 8005d98:	46ce      	mov	lr, r9
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e777      	b.n	8005c90 <arm_cm_conv2d_1x1_i8+0x258>
 8005da0:	f912 5f01 	ldrsb.w	r5, [r2, #1]!
 8005da4:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005da6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005da8:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
 8005dac:	1a2d      	subs	r5, r5, r0
 8005dae:	9825      	ldr	r0, [sp, #148]	; 0x94
 8005db0:	5610      	ldrsb	r0, [r2, r0]
 8005db2:	1b00      	subs	r0, r0, r4
 8005db4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005db6:	fb0c 1105 	mla	r1, ip, r5, r1
 8005dba:	fb0c ee00 	mla	lr, ip, r0, lr
 8005dbe:	f917 c004 	ldrsb.w	ip, [r7, r4]
 8005dc2:	3601      	adds	r6, #1
 8005dc4:	fb0c aa05 	mla	sl, ip, r5, sl
 8005dc8:	fb0c 9900 	mla	r9, ip, r0, r9
 8005dcc:	e76a      	b.n	8005ca4 <arm_cm_conv2d_1x1_i8+0x26c>
 8005dce:	9901      	ldr	r1, [sp, #4]
 8005dd0:	9c02      	ldr	r4, [sp, #8]
 8005dd2:	4658      	mov	r0, fp
 8005dd4:	f852 bb04 	ldr.w	fp, [r2], #4
 8005dd8:	f850 7b04 	ldr.w	r7, [r0], #4
 8005ddc:	fa23 fa8b 	sxtab16	sl, r3, fp
 8005de0:	fa2f fc87 	sxtb16	ip, r7
 8005de4:	5851      	ldr	r1, [r2, r1]
 8005de6:	fa2f f797 	sxtb16	r7, r7, ror #8
 8005dea:	fa23 f981 	sxtab16	r9, r3, r1
 8005dee:	fa23 fb9b 	sxtab16	fp, r3, fp, ror #8
 8005df2:	fa23 f191 	sxtab16	r1, r3, r1, ror #8
 8005df6:	fb27 4e0b 	smlad	lr, r7, fp, r4
 8005dfa:	9c03      	ldr	r4, [sp, #12]
 8005dfc:	fb27 4801 	smlad	r8, r7, r1, r4
 8005e00:	9c01      	ldr	r4, [sp, #4]
 8005e02:	fb2c 8809 	smlad	r8, ip, r9, r8
 8005e06:	f852 7b04 	ldr.w	r7, [r2], #4
 8005e0a:	fb2c ee0a 	smlad	lr, ip, sl, lr
 8005e0e:	f850 1b04 	ldr.w	r1, [r0], #4
 8005e12:	f852 b004 	ldr.w	fp, [r2, r4]
 8005e16:	fa2f fc81 	sxtb16	ip, r1
 8005e1a:	fa23 fa87 	sxtab16	sl, r3, r7
 8005e1e:	fa2f f191 	sxtb16	r1, r1, ror #8
 8005e22:	fa23 f797 	sxtab16	r7, r3, r7, ror #8
 8005e26:	fa23 f98b 	sxtab16	r9, r3, fp
 8005e2a:	fb21 ee07 	smlad	lr, r1, r7, lr
 8005e2e:	fa23 fb9b 	sxtab16	fp, r3, fp, ror #8
 8005e32:	f852 7b04 	ldr.w	r7, [r2], #4
 8005e36:	fb21 810b 	smlad	r1, r1, fp, r8
 8005e3a:	fb2c ea0a 	smlad	sl, ip, sl, lr
 8005e3e:	fb2c 1909 	smlad	r9, ip, r9, r1
 8005e42:	f852 8004 	ldr.w	r8, [r2, r4]
 8005e46:	f850 1b04 	ldr.w	r1, [r0], #4
 8005e4a:	fa23 fb88 	sxtab16	fp, r3, r8
 8005e4e:	fa2f fc81 	sxtb16	ip, r1
 8005e52:	fa23 fe87 	sxtab16	lr, r3, r7
 8005e56:	fa2f f191 	sxtb16	r1, r1, ror #8
 8005e5a:	fa23 f898 	sxtab16	r8, r3, r8, ror #8
 8005e5e:	fa23 f797 	sxtab16	r7, r3, r7, ror #8
 8005e62:	3610      	adds	r6, #16
 8005e64:	fb21 a707 	smlad	r7, r1, r7, sl
 8005e68:	fb21 9108 	smlad	r1, r1, r8, r9
 8005e6c:	fb2c 7e0e 	smlad	lr, ip, lr, r7
 8005e70:	fb2c 1c0b 	smlad	ip, ip, fp, r1
 8005e74:	f850 1b04 	ldr.w	r1, [r0], #4
 8005e78:	fa2f f881 	sxtb16	r8, r1
 8005e7c:	4683      	mov	fp, r0
 8005e7e:	fa2f f191 	sxtb16	r1, r1, ror #8
 8005e82:	f852 0b04 	ldr.w	r0, [r2], #4
 8005e86:	fa23 fa80 	sxtab16	sl, r3, r0
 8005e8a:	5917      	ldr	r7, [r2, r4]
 8005e8c:	fa23 f090 	sxtab16	r0, r3, r0, ror #8
 8005e90:	fa23 f987 	sxtab16	r9, r3, r7
 8005e94:	fb21 ee00 	smlad	lr, r1, r0, lr
 8005e98:	fa23 f797 	sxtab16	r7, r3, r7, ror #8
 8005e9c:	fb28 e00a 	smlad	r0, r8, sl, lr
 8005ea0:	fb21 c707 	smlad	r7, r1, r7, ip
 8005ea4:	9002      	str	r0, [sp, #8]
 8005ea6:	fb28 7109 	smlad	r1, r8, r9, r7
 8005eaa:	9103      	str	r1, [sp, #12]
 8005eac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005eae:	42b1      	cmp	r1, r6
 8005eb0:	dc8d      	bgt.n	8005dce <arm_cm_conv2d_1x1_i8+0x396>
 8005eb2:	9906      	ldr	r1, [sp, #24]
 8005eb4:	4658      	mov	r0, fp
 8005eb6:	3a01      	subs	r2, #1
 8005eb8:	1a0f      	subs	r7, r1, r0
 8005eba:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005ebc:	1839      	adds	r1, r7, r0
 8005ebe:	428c      	cmp	r4, r1
 8005ec0:	dc46      	bgt.n	8005f50 <arm_cm_conv2d_1x1_i8+0x518>
 8005ec2:	eddd 7a02 	vldr	s15, [sp, #8]
 8005ec6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8005ec8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8005eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ece:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eda:	bfd4      	ite	le
 8005edc:	eeb0 6a66 	vmovle.f32	s12, s13
 8005ee0:	eeb0 6a47 	vmovgt.f32	s12, s14
 8005ee4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005eec:	ee17 1a90 	vmov	r1, s15
 8005ef0:	eddd 7a03 	vldr	s15, [sp, #12]
 8005ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ef8:	4411      	add	r1, r2
 8005efa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005efe:	f301 0107 	ssat	r1, #8, r1
 8005f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0a:	bfd4      	ite	le
 8005f0c:	eeb0 6a66 	vmovle.f32	s12, s13
 8005f10:	eeb0 6a47 	vmovgt.f32	s12, s14
 8005f14:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f1c:	ee17 2a90 	vmov	r2, s15
 8005f20:	4402      	add	r2, r0
 8005f22:	4628      	mov	r0, r5
 8005f24:	f302 0207 	ssat	r2, #8, r2
 8005f28:	f800 1b02 	strb.w	r1, [r0], #2
 8005f2c:	706a      	strb	r2, [r5, #1]
 8005f2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f30:	1e95      	subs	r5, r2, #2
 8005f32:	4405      	add	r5, r0
 8005f34:	9a07      	ldr	r2, [sp, #28]
 8005f36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f38:	440a      	add	r2, r1
 8005f3a:	9207      	str	r2, [sp, #28]
 8005f3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f3e:	18aa      	adds	r2, r5, r2
 8005f40:	9205      	str	r2, [sp, #20]
 8005f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f44:	3202      	adds	r2, #2
 8005f46:	920a      	str	r2, [sp, #40]	; 0x28
 8005f48:	9a08      	ldr	r2, [sp, #32]
 8005f4a:	3208      	adds	r2, #8
 8005f4c:	9208      	str	r2, [sp, #32]
 8005f4e:	e5b8      	b.n	8005ac2 <arm_cm_conv2d_1x1_i8+0x8a>
 8005f50:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
 8005f54:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005f56:	f910 6b01 	ldrsb.w	r6, [r0], #1
 8005f5a:	1b09      	subs	r1, r1, r4
 8005f5c:	9c02      	ldr	r4, [sp, #8]
 8005f5e:	fb06 4101 	mla	r1, r6, r1, r4
 8005f62:	9102      	str	r1, [sp, #8]
 8005f64:	9925      	ldr	r1, [sp, #148]	; 0x94
 8005f66:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005f68:	5651      	ldrsb	r1, [r2, r1]
 8005f6a:	1b09      	subs	r1, r1, r4
 8005f6c:	9c03      	ldr	r4, [sp, #12]
 8005f6e:	fb06 4101 	mla	r1, r6, r1, r4
 8005f72:	9103      	str	r1, [sp, #12]
 8005f74:	e7a1      	b.n	8005eba <arm_cm_conv2d_1x1_i8+0x482>
 8005f76:	6813      	ldr	r3, [r2, #0]
 8005f78:	2000      	movs	r0, #0
 8005f7a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005f7c:	42a8      	cmp	r0, r5
 8005f7e:	db23      	blt.n	8005fc8 <arm_cm_conv2d_1x1_i8+0x590>
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f8a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005f8e:	4430      	add	r0, r6
 8005f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f98:	bfd4      	ite	le
 8005f9a:	eeb0 6a66 	vmovle.f32	s12, s13
 8005f9e:	eeb0 6a47 	vmovgt.f32	s12, s14
 8005fa2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005fa6:	9009      	str	r0, [sp, #36]	; 0x24
 8005fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fac:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8005fae:	ee17 3a90 	vmov	r3, s15
 8005fb2:	4403      	add	r3, r0
 8005fb4:	9805      	ldr	r0, [sp, #20]
 8005fb6:	f303 0307 	ssat	r3, #8, r3
 8005fba:	7003      	strb	r3, [r0, #0]
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	9824      	ldr	r0, [sp, #144]	; 0x90
 8005fc0:	4403      	add	r3, r0
 8005fc2:	9305      	str	r3, [sp, #20]
 8005fc4:	3401      	adds	r4, #1
 8005fc6:	e59a      	b.n	8005afe <arm_cm_conv2d_1x1_i8+0xc6>
 8005fc8:	560d      	ldrsb	r5, [r1, r0]
 8005fca:	9f26      	ldr	r7, [sp, #152]	; 0x98
 8005fcc:	1bed      	subs	r5, r5, r7
 8005fce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005fd0:	563f      	ldrsb	r7, [r7, r0]
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	fb07 3305 	mla	r3, r7, r5, r3
 8005fd8:	e7cf      	b.n	8005f7a <arm_cm_conv2d_1x1_i8+0x542>

08005fda <arm_cm_conv2d_cwq_1x1_i8>:
 8005fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fde:	b099      	sub	sp, #100	; 0x64
 8005fe0:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 8005fe4:	9305      	str	r3, [sp, #20]
 8005fe6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005fe8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8005fea:	9009      	str	r0, [sp, #36]	; 0x24
 8005fec:	1f1e      	subs	r6, r3, #4
 8005fee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ff0:	105b      	asrs	r3, r3, #1
 8005ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ff4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	930d      	str	r3, [sp, #52]	; 0x34
 8005ffa:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005ffe:	4353      	muls	r3, r2
 8006000:	f1c3 0302 	rsb	r3, r3, #2
 8006004:	9312      	str	r3, [sp, #72]	; 0x48
 8006006:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006008:	3308      	adds	r3, #8
 800600a:	9304      	str	r3, [sp, #16]
 800600c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800600e:	3304      	adds	r3, #4
 8006010:	9308      	str	r3, [sp, #32]
 8006012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006014:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006018:	4353      	muls	r3, r2
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800601e:	9314      	str	r3, [sp, #80]	; 0x50
 8006020:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006022:	2a00      	cmp	r2, #0
 8006024:	f023 030f 	bic.w	r3, r3, #15
 8006028:	bfb8      	it	lt
 800602a:	2300      	movlt	r3, #0
 800602c:	9306      	str	r3, [sp, #24]
 800602e:	4613      	mov	r3, r2
 8006030:	9a06      	ldr	r2, [sp, #24]
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	428a      	cmp	r2, r1
 8006036:	bfc8      	it	gt
 8006038:	2300      	movgt	r3, #0
 800603a:	440b      	add	r3, r1
 800603c:	9313      	str	r3, [sp, #76]	; 0x4c
 800603e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	9315      	str	r3, [sp, #84]	; 0x54
 8006044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006046:	9307      	str	r3, [sp, #28]
 8006048:	2300      	movs	r3, #0
 800604a:	930a      	str	r3, [sp, #40]	; 0x28
 800604c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800604e:	3b01      	subs	r3, #1
 8006050:	9316      	str	r3, [sp, #88]	; 0x58
 8006052:	f1a1 030f 	sub.w	r3, r1, #15
 8006056:	9311      	str	r3, [sp, #68]	; 0x44
 8006058:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800605c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8006060:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006064:	4293      	cmp	r3, r2
 8006066:	dc28      	bgt.n	80060ba <arm_cm_conv2d_cwq_1x1_i8+0xe0>
 8006068:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800606a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800606c:	2b00      	cmp	r3, #0
 800606e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8006072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006074:	bfac      	ite	ge
 8006076:	4601      	movge	r1, r0
 8006078:	2100      	movlt	r1, #0
 800607a:	fb02 3101 	mla	r1, r2, r1, r3
 800607e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006080:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8006084:	bfb8      	it	lt
 8006086:	2000      	movlt	r0, #0
 8006088:	4418      	add	r0, r3
 800608a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800608c:	07da      	lsls	r2, r3, #31
 800608e:	d511      	bpl.n	80060b4 <arm_cm_conv2d_cwq_1x1_i8+0xda>
 8006090:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006096:	3a01      	subs	r2, #1
 8006098:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800609c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800609e:	2500      	movs	r5, #0
 80060a0:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80060a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060a8:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80060ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060ae:	429d      	cmp	r5, r3
 80060b0:	f2c0 822d 	blt.w	800650e <arm_cm_conv2d_cwq_1x1_i8+0x534>
 80060b4:	b019      	add	sp, #100	; 0x64
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	9b08      	ldr	r3, [sp, #32]
 80060bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060be:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80060c6:	9b08      	ldr	r3, [sp, #32]
 80060c8:	9a05      	ldr	r2, [sp, #20]
 80060ca:	9203      	str	r2, [sp, #12]
 80060cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	9302      	str	r3, [sp, #8]
 80060d2:	3201      	adds	r2, #1
 80060d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80060d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060da:	2a00      	cmp	r2, #0
 80060dc:	f300 812b 	bgt.w	8006336 <arm_cm_conv2d_cwq_1x1_i8+0x35c>
 80060e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060e2:	9805      	ldr	r0, [sp, #20]
 80060e4:	4410      	add	r0, r2
 80060e6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80060e8:	07d4      	lsls	r4, r2, #31
 80060ea:	f140 81f0 	bpl.w	80064ce <arm_cm_conv2d_cwq_1x1_i8+0x4f4>
 80060ee:	9a07      	ldr	r2, [sp, #28]
 80060f0:	2500      	movs	r5, #0
 80060f2:	e1a3      	b.n	800643c <arm_cm_conv2d_cwq_1x1_i8+0x462>
 80060f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80060f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80060fc:	fa2f fc85 	sxtb16	ip, r5
 8006100:	fa2f fe84 	sxtb16	lr, r4
 8006104:	fa2f f595 	sxtb16	r5, r5, ror #8
 8006108:	fa2f f494 	sxtb16	r4, r4, ror #8
 800610c:	598f      	ldr	r7, [r1, r6]
 800610e:	fb25 2204 	smlad	r2, r5, r4, r2
 8006112:	fa2f f887 	sxtb16	r8, r7
 8006116:	fb2c 220e 	smlad	r2, ip, lr, r2
 800611a:	fa2f f797 	sxtb16	r7, r7, ror #8
 800611e:	fb25 aa07 	smlad	sl, r5, r7, sl
 8006122:	599d      	ldr	r5, [r3, r6]
 8006124:	fb2c ac08 	smlad	ip, ip, r8, sl
 8006128:	fa2f fb85 	sxtb16	fp, r5
 800612c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8006130:	fb25 9907 	smlad	r9, r5, r7, r9
 8006134:	fb25 0004 	smlad	r0, r5, r4, r0
 8006138:	f853 5b04 	ldr.w	r5, [r3], #4
 800613c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006140:	fb2b 0e0e 	smlad	lr, fp, lr, r0
 8006144:	fa2f fa84 	sxtb16	sl, r4
 8006148:	fb2b 9008 	smlad	r0, fp, r8, r9
 800614c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8006150:	fa2f fb85 	sxtb16	fp, r5
 8006154:	598f      	ldr	r7, [r1, r6]
 8006156:	fa2f f595 	sxtb16	r5, r5, ror #8
 800615a:	fa2f f887 	sxtb16	r8, r7
 800615e:	fb25 2204 	smlad	r2, r5, r4, r2
 8006162:	fa2f f797 	sxtb16	r7, r7, ror #8
 8006166:	fb2b 220a 	smlad	r2, fp, sl, r2
 800616a:	fb25 c507 	smlad	r5, r5, r7, ip
 800616e:	fb2b 5b08 	smlad	fp, fp, r8, r5
 8006172:	599d      	ldr	r5, [r3, r6]
 8006174:	fa2f fc85 	sxtb16	ip, r5
 8006178:	fa2f f595 	sxtb16	r5, r5, ror #8
 800617c:	fb25 0907 	smlad	r9, r5, r7, r0
 8006180:	fb25 ee04 	smlad	lr, r5, r4, lr
 8006184:	fb2c 9908 	smlad	r9, ip, r8, r9
 8006188:	f853 5b04 	ldr.w	r5, [r3], #4
 800618c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006190:	fb2c ea0a 	smlad	sl, ip, sl, lr
 8006194:	fa2f f885 	sxtb16	r8, r5
 8006198:	fa2f fe84 	sxtb16	lr, r4
 800619c:	598f      	ldr	r7, [r1, r6]
 800619e:	fa2f f595 	sxtb16	r5, r5, ror #8
 80061a2:	fa2f f087 	sxtb16	r0, r7
 80061a6:	fa2f f494 	sxtb16	r4, r4, ror #8
 80061aa:	fa2f f797 	sxtb16	r7, r7, ror #8
 80061ae:	fb25 2204 	smlad	r2, r5, r4, r2
 80061b2:	fb25 b507 	smlad	r5, r5, r7, fp
 80061b6:	fb28 220e 	smlad	r2, r8, lr, r2
 80061ba:	fb28 5800 	smlad	r8, r8, r0, r5
 80061be:	599d      	ldr	r5, [r3, r6]
 80061c0:	fa2f fc85 	sxtb16	ip, r5
 80061c4:	fa2f f595 	sxtb16	r5, r5, ror #8
 80061c8:	fb25 a404 	smlad	r4, r5, r4, sl
 80061cc:	fb25 9507 	smlad	r5, r5, r7, r9
 80061d0:	fb2c 4e0e 	smlad	lr, ip, lr, r4
 80061d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80061d8:	fb2c 5c00 	smlad	ip, ip, r0, r5
 80061dc:	fa2f fb84 	sxtb16	fp, r4
 80061e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061e4:	fa2f f494 	sxtb16	r4, r4, ror #8
 80061e8:	fa2f fa85 	sxtb16	sl, r5
 80061ec:	598f      	ldr	r7, [r1, r6]
 80061ee:	fa2f f595 	sxtb16	r5, r5, ror #8
 80061f2:	fa2f f987 	sxtb16	r9, r7
 80061f6:	fb25 2204 	smlad	r2, r5, r4, r2
 80061fa:	fa2f f797 	sxtb16	r7, r7, ror #8
 80061fe:	fb2a 220b 	smlad	r2, sl, fp, r2
 8006202:	fb25 8507 	smlad	r5, r5, r7, r8
 8006206:	fb2a 5a09 	smlad	sl, sl, r9, r5
 800620a:	599d      	ldr	r5, [r3, r6]
 800620c:	fa2f f885 	sxtb16	r8, r5
 8006210:	fa2f f595 	sxtb16	r5, r5, ror #8
 8006214:	fb25 e004 	smlad	r0, r5, r4, lr
 8006218:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800621a:	fb25 c707 	smlad	r7, r5, r7, ip
 800621e:	3410      	adds	r4, #16
 8006220:	fb28 000b 	smlad	r0, r8, fp, r0
 8006224:	fb28 7909 	smlad	r9, r8, r9, r7
 8006228:	940c      	str	r4, [sp, #48]	; 0x30
 800622a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800622c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800622e:	42ac      	cmp	r4, r5
 8006230:	f73f af60 	bgt.w	80060f4 <arm_cm_conv2d_cwq_1x1_i8+0x11a>
 8006234:	9c06      	ldr	r4, [sp, #24]
 8006236:	3901      	subs	r1, #1
 8006238:	1e5d      	subs	r5, r3, #1
 800623a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800623c:	42bc      	cmp	r4, r7
 800623e:	f2c0 8081 	blt.w	8006344 <arm_cm_conv2d_cwq_1x1_i8+0x36a>
 8006242:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006244:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8006246:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006248:	ee07 2a90 	vmov	s15, r2
 800624c:	440b      	add	r3, r1
 800624e:	9904      	ldr	r1, [sp, #16]
 8006250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006254:	ed11 4a02 	vldr	s8, [r1, #-8]
 8006258:	9926      	ldr	r1, [sp, #152]	; 0x98
 800625a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800625e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006266:	bfd4      	ite	le
 8006268:	eef0 6a65 	vmovle.f32	s13, s11
 800626c:	eef0 6a46 	vmovgt.f32	s13, s12
 8006270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006278:	ee17 2a90 	vmov	r2, s15
 800627c:	ee07 aa90 	vmov	s15, sl
 8006280:	440a      	add	r2, r1
 8006282:	9904      	ldr	r1, [sp, #16]
 8006284:	f302 0207 	ssat	r2, #8, r2
 8006288:	ed51 4a01 	vldr	s9, [r1, #-4]
 800628c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006290:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8006294:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629c:	bfd4      	ite	le
 800629e:	eeb0 5a65 	vmovle.f32	s10, s11
 80062a2:	eeb0 5a46 	vmovgt.f32	s10, s12
 80062a6:	ee75 6a26 	vadd.f32	s13, s10, s13
 80062aa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80062ae:	ee17 1a90 	vmov	r1, s15
 80062b2:	ee07 0a90 	vmov	s15, r0
 80062b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ba:	4421      	add	r1, r4
 80062bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80062c0:	f301 0107 	ssat	r1, #8, r1
 80062c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80062c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062cc:	bfd4      	ite	le
 80062ce:	eef0 6a65 	vmovle.f32	s13, s11
 80062d2:	eef0 6a46 	vmovgt.f32	s13, s12
 80062d6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80062da:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80062de:	ee17 0a90 	vmov	r0, s15
 80062e2:	ee07 9a90 	vmov	s15, r9
 80062e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ea:	4420      	add	r0, r4
 80062ec:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80062f0:	f300 0007 	ssat	r0, #8, r0
 80062f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062fc:	bfd4      	ite	le
 80062fe:	eeb0 7a65 	vmovle.f32	s14, s11
 8006302:	eeb0 7a46 	vmovgt.f32	s14, s12
 8006306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800630a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800630e:	ee17 4a90 	vmov	r4, s15
 8006312:	442c      	add	r4, r5
 8006314:	9d03      	ldr	r5, [sp, #12]
 8006316:	f304 0407 	ssat	r4, #8, r4
 800631a:	7069      	strb	r1, [r5, #1]
 800631c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800631e:	702a      	strb	r2, [r5, #0]
 8006320:	5468      	strb	r0, [r5, r1]
 8006322:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006324:	546c      	strb	r4, [r5, r1]
 8006326:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006328:	462a      	mov	r2, r5
 800632a:	440a      	add	r2, r1
 800632c:	9203      	str	r2, [sp, #12]
 800632e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006330:	3a01      	subs	r2, #1
 8006332:	920b      	str	r2, [sp, #44]	; 0x2c
 8006334:	e6d0      	b.n	80060d8 <arm_cm_conv2d_cwq_1x1_i8+0xfe>
 8006336:	e9dd 0901 	ldrd	r0, r9, [sp, #4]
 800633a:	9907      	ldr	r1, [sp, #28]
 800633c:	46ca      	mov	sl, r9
 800633e:	4602      	mov	r2, r0
 8006340:	2400      	movs	r4, #0
 8006342:	e771      	b.n	8006228 <arm_cm_conv2d_cwq_1x1_i8+0x24e>
 8006344:	f911 ef01 	ldrsb.w	lr, [r1, #1]!
 8006348:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800634a:	f911 c007 	ldrsb.w	ip, [r1, r7]
 800634e:	f915 7f01 	ldrsb.w	r7, [r5, #1]!
 8006352:	fb1e 2207 	smlabb	r2, lr, r7, r2
 8006356:	fb1c aa07 	smlabb	sl, ip, r7, sl
 800635a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800635c:	57ef      	ldrsb	r7, [r5, r7]
 800635e:	3401      	adds	r4, #1
 8006360:	fb1e 0007 	smlabb	r0, lr, r7, r0
 8006364:	fb1c 9907 	smlabb	r9, ip, r7, r9
 8006368:	e767      	b.n	800623a <arm_cm_conv2d_cwq_1x1_i8+0x260>
 800636a:	f852 4b04 	ldr.w	r4, [r2], #4
 800636e:	f853 7b04 	ldr.w	r7, [r3], #4
 8006372:	5991      	ldr	r1, [r2, r6]
 8006374:	fa2f fc87 	sxtb16	ip, r7
 8006378:	fa2f f881 	sxtb16	r8, r1
 800637c:	fa2f f797 	sxtb16	r7, r7, ror #8
 8006380:	fa2f fe91 	sxtb16	lr, r1, ror #8
 8006384:	fa2f fb84 	sxtb16	fp, r4
 8006388:	9901      	ldr	r1, [sp, #4]
 800638a:	fa2f f494 	sxtb16	r4, r4, ror #8
 800638e:	3510      	adds	r5, #16
 8006390:	fb27 1404 	smlad	r4, r7, r4, r1
 8006394:	9902      	ldr	r1, [sp, #8]
 8006396:	fb2c 4b0b 	smlad	fp, ip, fp, r4
 800639a:	fb27 190e 	smlad	r9, r7, lr, r1
 800639e:	f852 4b04 	ldr.w	r4, [r2], #4
 80063a2:	fb2c 9908 	smlad	r9, ip, r8, r9
 80063a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80063aa:	5997      	ldr	r7, [r2, r6]
 80063ac:	fa2f fc81 	sxtb16	ip, r1
 80063b0:	fa2f fa84 	sxtb16	sl, r4
 80063b4:	fa2f f191 	sxtb16	r1, r1, ror #8
 80063b8:	fa2f f887 	sxtb16	r8, r7
 80063bc:	fa2f f494 	sxtb16	r4, r4, ror #8
 80063c0:	fa2f f797 	sxtb16	r7, r7, ror #8
 80063c4:	fb21 b404 	smlad	r4, r1, r4, fp
 80063c8:	fb21 9107 	smlad	r1, r1, r7, r9
 80063cc:	fb2c 4a0a 	smlad	sl, ip, sl, r4
 80063d0:	fb2c 1808 	smlad	r8, ip, r8, r1
 80063d4:	f852 4b04 	ldr.w	r4, [r2], #4
 80063d8:	f853 1b04 	ldr.w	r1, [r3], #4
 80063dc:	5997      	ldr	r7, [r2, r6]
 80063de:	fa2f fc81 	sxtb16	ip, r1
 80063e2:	fa2f f987 	sxtb16	r9, r7
 80063e6:	fa2f f191 	sxtb16	r1, r1, ror #8
 80063ea:	fa2f f797 	sxtb16	r7, r7, ror #8
 80063ee:	fa2f fe84 	sxtb16	lr, r4
 80063f2:	fa2f f494 	sxtb16	r4, r4, ror #8
 80063f6:	fb21 a404 	smlad	r4, r1, r4, sl
 80063fa:	fb21 8107 	smlad	r1, r1, r7, r8
 80063fe:	fb2c 4e0e 	smlad	lr, ip, lr, r4
 8006402:	f852 4b04 	ldr.w	r4, [r2], #4
 8006406:	fb2c 1c09 	smlad	ip, ip, r9, r1
 800640a:	fa2f fa84 	sxtb16	sl, r4
 800640e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006412:	5997      	ldr	r7, [r2, r6]
 8006414:	fa2f f881 	sxtb16	r8, r1
 8006418:	fa2f f987 	sxtb16	r9, r7
 800641c:	fa2f f191 	sxtb16	r1, r1, ror #8
 8006420:	fa2f f494 	sxtb16	r4, r4, ror #8
 8006424:	fa2f f797 	sxtb16	r7, r7, ror #8
 8006428:	fb21 e404 	smlad	r4, r1, r4, lr
 800642c:	fb21 c707 	smlad	r7, r1, r7, ip
 8006430:	fb28 440a 	smlad	r4, r8, sl, r4
 8006434:	fb28 7109 	smlad	r1, r8, r9, r7
 8006438:	9401      	str	r4, [sp, #4]
 800643a:	9102      	str	r1, [sp, #8]
 800643c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800643e:	42a9      	cmp	r1, r5
 8006440:	dc93      	bgt.n	800636a <arm_cm_conv2d_cwq_1x1_i8+0x390>
 8006442:	9906      	ldr	r1, [sp, #24]
 8006444:	3a01      	subs	r2, #1
 8006446:	1acc      	subs	r4, r1, r3
 8006448:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800644a:	18e1      	adds	r1, r4, r3
 800644c:	428d      	cmp	r5, r1
 800644e:	dc4f      	bgt.n	80064f0 <arm_cm_conv2d_cwq_1x1_i8+0x516>
 8006450:	9b04      	ldr	r3, [sp, #16]
 8006452:	eddd 7a01 	vldr	s15, [sp, #4]
 8006456:	ed13 7a02 	vldr	s14, [r3, #-8]
 800645a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800645c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800645e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646e:	bfd4      	ite	le
 8006470:	eeb0 7a65 	vmovle.f32	s14, s11
 8006474:	eeb0 7a46 	vmovgt.f32	s14, s12
 8006478:	ee77 7a87 	vadd.f32	s15, s15, s14
 800647c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006480:	ee17 2a90 	vmov	r2, s15
 8006484:	eddd 7a02 	vldr	s15, [sp, #8]
 8006488:	441a      	add	r2, r3
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	f302 0207 	ssat	r2, #8, r2
 8006490:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800649c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a4:	bfd4      	ite	le
 80064a6:	eeb0 7a65 	vmovle.f32	s14, s11
 80064aa:	eeb0 7a46 	vmovgt.f32	s14, s12
 80064ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064b6:	ee17 3a90 	vmov	r3, s15
 80064ba:	440b      	add	r3, r1
 80064bc:	4601      	mov	r1, r0
 80064be:	f303 0307 	ssat	r3, #8, r3
 80064c2:	f801 2b02 	strb.w	r2, [r1], #2
 80064c6:	7043      	strb	r3, [r0, #1]
 80064c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80064ca:	1e98      	subs	r0, r3, #2
 80064cc:	4408      	add	r0, r1
 80064ce:	9b07      	ldr	r3, [sp, #28]
 80064d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064d2:	4413      	add	r3, r2
 80064d4:	9307      	str	r3, [sp, #28]
 80064d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064d8:	18c3      	adds	r3, r0, r3
 80064da:	9305      	str	r3, [sp, #20]
 80064dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064de:	3302      	adds	r3, #2
 80064e0:	930a      	str	r3, [sp, #40]	; 0x28
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	3308      	adds	r3, #8
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	9b08      	ldr	r3, [sp, #32]
 80064ea:	3308      	adds	r3, #8
 80064ec:	9308      	str	r3, [sp, #32]
 80064ee:	e5b7      	b.n	8006060 <arm_cm_conv2d_cwq_1x1_i8+0x86>
 80064f0:	9f01      	ldr	r7, [sp, #4]
 80064f2:	f913 1b01 	ldrsb.w	r1, [r3], #1
 80064f6:	f912 5f01 	ldrsb.w	r5, [r2, #1]!
 80064fa:	fb11 7505 	smlabb	r5, r1, r5, r7
 80064fe:	9501      	str	r5, [sp, #4]
 8006500:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006502:	9f02      	ldr	r7, [sp, #8]
 8006504:	5755      	ldrsb	r5, [r2, r5]
 8006506:	fb11 7105 	smlabb	r1, r1, r5, r7
 800650a:	9102      	str	r1, [sp, #8]
 800650c:	e79c      	b.n	8006448 <arm_cm_conv2d_cwq_1x1_i8+0x46e>
 800650e:	6813      	ldr	r3, [r2, #0]
 8006510:	2400      	movs	r4, #0
 8006512:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006514:	42bc      	cmp	r4, r7
 8006516:	db25      	blt.n	8006564 <arm_cm_conv2d_cwq_1x1_i8+0x58a>
 8006518:	ee07 3a90 	vmov	s15, r3
 800651c:	ed90 6a00 	vldr	s12, [r0]
 8006520:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006526:	4434      	add	r4, r6
 8006528:	ee67 7a86 	vmul.f32	s15, s15, s12
 800652c:	9409      	str	r4, [sp, #36]	; 0x24
 800652e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006536:	bfd4      	ite	le
 8006538:	eeb0 6a66 	vmovle.f32	s12, s13
 800653c:	eeb0 6a47 	vmovgt.f32	s12, s14
 8006540:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8006542:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800654a:	ee17 3a90 	vmov	r3, s15
 800654e:	4423      	add	r3, r4
 8006550:	9c05      	ldr	r4, [sp, #20]
 8006552:	f303 0307 	ssat	r3, #8, r3
 8006556:	7023      	strb	r3, [r4, #0]
 8006558:	4623      	mov	r3, r4
 800655a:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800655c:	4423      	add	r3, r4
 800655e:	9305      	str	r3, [sp, #20]
 8006560:	3501      	adds	r5, #1
 8006562:	e5a3      	b.n	80060ac <arm_cm_conv2d_cwq_1x1_i8+0xd2>
 8006564:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006566:	f917 c004 	ldrsb.w	ip, [r7, r4]
 800656a:	570f      	ldrsb	r7, [r1, r4]
 800656c:	3401      	adds	r4, #1
 800656e:	fb1c 3307 	smlabb	r3, ip, r7, r3
 8006572:	e7ce      	b.n	8006512 <arm_cm_conv2d_cwq_1x1_i8+0x538>

08006574 <arm_cm_conv2d_cwq_dw_i8>:
 8006574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	ed2d 8b02 	vpush	{d8}
 800657c:	b0af      	sub	sp, #188	; 0xbc
 800657e:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8006582:	902d      	str	r0, [sp, #180]	; 0xb4
 8006584:	9317      	str	r3, [sp, #92]	; 0x5c
 8006586:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006588:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800658a:	9f3d      	ldr	r7, [sp, #244]	; 0xf4
 800658c:	9008      	str	r0, [sp, #32]
 800658e:	425a      	negs	r2, r3
 8006590:	eac2 4302 	pkhbt	r3, r2, r2, lsl #16
 8006594:	9311      	str	r3, [sp, #68]	; 0x44
 8006596:	4243      	negs	r3, r0
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	e9dd 3240 	ldrd	r3, r2, [sp, #256]	; 0x100
 800659e:	4353      	muls	r3, r2
 80065a0:	fb07 f203 	mul.w	r2, r7, r3
 80065a4:	9309      	str	r3, [sp, #36]	; 0x24
 80065a6:	4253      	negs	r3, r2
 80065a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80065aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80065ac:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
 80065ae:	437b      	muls	r3, r7
 80065b0:	930c      	str	r3, [sp, #48]	; 0x30
 80065b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065b4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80065b6:	4359      	muls	r1, r3
 80065b8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80065ba:	2f00      	cmp	r7, #0
 80065bc:	463c      	mov	r4, r7
 80065be:	fb03 f307 	mul.w	r3, r3, r7
 80065c2:	bfb8      	it	lt
 80065c4:	1cfc      	addlt	r4, r7, #3
 80065c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80065c8:	f024 0303 	bic.w	r3, r4, #3
 80065cc:	9321      	str	r3, [sp, #132]	; 0x84
 80065ce:	f007 0303 	and.w	r3, r7, #3
 80065d2:	9307      	str	r3, [sp, #28]
 80065d4:	10a0      	asrs	r0, r4, #2
 80065d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065d8:	9c07      	ldr	r4, [sp, #28]
 80065da:	4423      	add	r3, r4
 80065dc:	f06f 0403 	mvn.w	r4, #3
 80065e0:	9312      	str	r3, [sp, #72]	; 0x48
 80065e2:	fb04 f300 	mul.w	r3, r4, r0
 80065e6:	f1c1 0404 	rsb	r4, r1, #4
 80065ea:	4414      	add	r4, r2
 80065ec:	932b      	str	r3, [sp, #172]	; 0xac
 80065ee:	fb00 f304 	mul.w	r3, r0, r4
 80065f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80065f4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80065f6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80065fa:	9b07      	ldr	r3, [sp, #28]
 80065fc:	1a55      	subs	r5, r2, r1
 80065fe:	fb05 3303 	mla	r3, r5, r3, r3
 8006602:	9324      	str	r3, [sp, #144]	; 0x90
 8006604:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006606:	195d      	adds	r5, r3, r5
 8006608:	1bed      	subs	r5, r5, r7
 800660a:	fb04 f305 	mul.w	r3, r4, r5
 800660e:	9329      	str	r3, [sp, #164]	; 0xa4
 8006610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006612:	1bdd      	subs	r5, r3, r7
 8006614:	00ab      	lsls	r3, r5, #2
 8006616:	9318      	str	r3, [sp, #96]	; 0x60
 8006618:	4363      	muls	r3, r4
 800661a:	9320      	str	r3, [sp, #128]	; 0x80
 800661c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800661e:	4363      	muls	r3, r4
 8006620:	1d14      	adds	r4, r2, #4
 8006622:	1a64      	subs	r4, r4, r1
 8006624:	932a      	str	r3, [sp, #168]	; 0xa8
 8006626:	fb00 f304 	mul.w	r3, r0, r4
 800662a:	9323      	str	r3, [sp, #140]	; 0x8c
 800662c:	0103      	lsls	r3, r0, #4
 800662e:	931f      	str	r3, [sp, #124]	; 0x7c
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	1a50      	subs	r0, r2, r1
 8006634:	fb00 3003 	mla	r0, r0, r3, r3
 8006638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800663a:	4418      	add	r0, r3
 800663c:	1bc3      	subs	r3, r0, r7
 800663e:	932c      	str	r3, [sp, #176]	; 0xb0
 8006640:	1a53      	subs	r3, r2, r1
 8006642:	9322      	str	r3, [sp, #136]	; 0x88
 8006644:	2300      	movs	r3, #0
 8006646:	930a      	str	r3, [sp, #40]	; 0x28
 8006648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800664c:	4293      	cmp	r3, r2
 800664e:	db04      	blt.n	800665a <arm_cm_conv2d_cwq_dw_i8+0xe6>
 8006650:	b02f      	add	sp, #188	; 0xbc
 8006652:	ecbd 8b02 	vpop	{d8}
 8006656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800665c:	9a08      	ldr	r2, [sp, #32]
 800665e:	425b      	negs	r3, r3
 8006660:	9305      	str	r3, [sp, #20]
 8006662:	9b04      	ldr	r3, [sp, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	9b08      	ldr	r3, [sp, #32]
 8006668:	bfc8      	it	gt
 800666a:	2300      	movgt	r3, #0
 800666c:	9306      	str	r3, [sp, #24]
 800666e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8006670:	189a      	adds	r2, r3, r2
 8006672:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8006674:	429a      	cmp	r2, r3
 8006676:	bfa8      	it	ge
 8006678:	461a      	movge	r2, r3
 800667a:	921d      	str	r2, [sp, #116]	; 0x74
 800667c:	9b06      	ldr	r3, [sp, #24]
 800667e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006680:	4353      	muls	r3, r2
 8006682:	931c      	str	r3, [sp, #112]	; 0x70
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	189a      	adds	r2, r3, r2
 800668a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800668c:	4353      	muls	r3, r2
 800668e:	9326      	str	r3, [sp, #152]	; 0x98
 8006690:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006692:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006698:	931a      	str	r3, [sp, #104]	; 0x68
 800669a:	4353      	muls	r3, r2
 800669c:	9319      	str	r3, [sp, #100]	; 0x64
 800669e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066a2:	4413      	add	r3, r2
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80066a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80066aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80066ac:	4413      	add	r3, r2
 80066ae:	9314      	str	r3, [sp, #80]	; 0x50
 80066b0:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80066b2:	9303      	str	r3, [sp, #12]
 80066b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	2300      	movs	r3, #0
 80066be:	930b      	str	r3, [sp, #44]	; 0x2c
 80066c0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80066c4:	9b00      	ldr	r3, [sp, #0]
 80066c6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80066c8:	eb03 0b02 	add.w	fp, r3, r2
 80066cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ce:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80066d0:	4293      	cmp	r3, r2
 80066d2:	db1a      	blt.n	800670a <arm_cm_conv2d_cwq_dw_i8+0x196>
 80066d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80066d8:	4413      	add	r3, r2
 80066da:	9315      	str	r3, [sp, #84]	; 0x54
 80066dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066e0:	4413      	add	r3, r2
 80066e2:	9316      	str	r3, [sp, #88]	; 0x58
 80066e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80066e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066e8:	4413      	add	r3, r2
 80066ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80066ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066ee:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80066f0:	4413      	add	r3, r2
 80066f2:	9348      	str	r3, [sp, #288]	; 0x120
 80066f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f6:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80066f8:	3301      	adds	r3, #1
 80066fa:	930a      	str	r3, [sp, #40]	; 0x28
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	9b08      	ldr	r3, [sp, #32]
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	9308      	str	r3, [sp, #32]
 8006708:	e79e      	b.n	8006648 <arm_cm_conv2d_cwq_dw_i8+0xd4>
 800670a:	9b05      	ldr	r3, [sp, #20]
 800670c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800670e:	2b00      	cmp	r3, #0
 8006710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006712:	bfd8      	it	le
 8006714:	461d      	movle	r5, r3
 8006716:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006718:	bfc8      	it	gt
 800671a:	2500      	movgt	r5, #0
 800671c:	429c      	cmp	r4, r3
 800671e:	bfa8      	it	ge
 8006720:	461c      	movge	r4, r3
 8006722:	9b06      	ldr	r3, [sp, #24]
 8006724:	eba4 0805 	sub.w	r8, r4, r5
 8006728:	b133      	cbz	r3, 8006738 <arm_cm_conv2d_cwq_dw_i8+0x1c4>
 800672a:	4630      	mov	r0, r6
 800672c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800672e:	9946      	ldr	r1, [sp, #280]	; 0x118
 8006730:	f7fa fcde 	bl	80010f0 <memset>
 8006734:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006736:	441e      	add	r6, r3
 8006738:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800673a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800673c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8006740:	1b1b      	subs	r3, r3, r4
 8006742:	930d      	str	r3, [sp, #52]	; 0x34
 8006744:	437b      	muls	r3, r7
 8006746:	930e      	str	r3, [sp, #56]	; 0x38
 8006748:	9b05      	ldr	r3, [sp, #20]
 800674a:	189c      	adds	r4, r3, r2
 800674c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800674e:	442c      	add	r4, r5
 8006750:	fb07 fa05 	mul.w	sl, r7, r5
 8006754:	fb07 f808 	mul.w	r8, r7, r8
 8006758:	fb07 3404 	mla	r4, r7, r4, r3
 800675c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800675e:	4599      	cmp	r9, r3
 8006760:	db5b      	blt.n	800681a <arm_cm_conv2d_cwq_dw_i8+0x2a6>
 8006762:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006764:	b133      	cbz	r3, 8006774 <arm_cm_conv2d_cwq_dw_i8+0x200>
 8006766:	4630      	mov	r0, r6
 8006768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800676a:	9946      	ldr	r1, [sp, #280]	; 0x118
 800676c:	f7fa fcc0 	bl	80010f0 <memset>
 8006770:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006772:	441e      	add	r6, r3
 8006774:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006776:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800677a:	18f3      	adds	r3, r6, r3
 800677c:	931e      	str	r3, [sp, #120]	; 0x78
 800677e:	9b02      	ldr	r3, [sp, #8]
 8006780:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006784:	f103 0010 	add.w	r0, r3, #16
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	f103 0410 	add.w	r4, r3, #16
 800678e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006790:	3304      	adds	r3, #4
 8006792:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006796:	9325      	str	r3, [sp, #148]	; 0x94
 8006798:	9900      	ldr	r1, [sp, #0]
 800679a:	458b      	cmp	fp, r1
 800679c:	d158      	bne.n	8006850 <arm_cm_conv2d_cwq_dw_i8+0x2dc>
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80067a2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80067a4:	1898      	adds	r0, r3, r2
 80067a6:	9b02      	ldr	r3, [sp, #8]
 80067a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80067aa:	eb03 0a02 	add.w	sl, r3, r2
 80067ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80067b2:	441a      	add	r2, r3
 80067b4:	4613      	mov	r3, r2
 80067b6:	9a03      	ldr	r2, [sp, #12]
 80067b8:	4422      	add	r2, r4
 80067ba:	920d      	str	r2, [sp, #52]	; 0x34
 80067bc:	9a07      	ldr	r2, [sp, #28]
 80067be:	440a      	add	r2, r1
 80067c0:	920e      	str	r2, [sp, #56]	; 0x38
 80067c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80067c4:	461c      	mov	r4, r3
 80067c6:	460d      	mov	r5, r1
 80067c8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80067cc:	f102 0b01 	add.w	fp, r2, #1
 80067d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d2:	4291      	cmp	r1, r2
 80067d4:	f040 80ee 	bne.w	80069b4 <arm_cm_conv2d_cwq_dw_i8+0x440>
 80067d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067da:	1bd2      	subs	r2, r2, r7
 80067dc:	189e      	adds	r6, r3, r2
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80067e2:	4413      	add	r3, r2
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	4413      	add	r3, r2
 80067ec:	9302      	str	r3, [sp, #8]
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80067f8:	3301      	adds	r3, #1
 80067fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80067fc:	9b05      	ldr	r3, [sp, #20]
 80067fe:	4413      	add	r3, r2
 8006800:	9305      	str	r3, [sp, #20]
 8006802:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006804:	9b00      	ldr	r3, [sp, #0]
 8006806:	4413      	add	r3, r2
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800680c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	9313      	str	r3, [sp, #76]	; 0x4c
 8006812:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	9314      	str	r3, [sp, #80]	; 0x50
 8006818:	e754      	b.n	80066c4 <arm_cm_conv2d_cwq_dw_i8+0x150>
 800681a:	b12d      	cbz	r5, 8006828 <arm_cm_conv2d_cwq_dw_i8+0x2b4>
 800681c:	4630      	mov	r0, r6
 800681e:	9946      	ldr	r1, [sp, #280]	; 0x118
 8006820:	4652      	mov	r2, sl
 8006822:	f7fa fc65 	bl	80010f0 <memset>
 8006826:	4456      	add	r6, sl
 8006828:	4630      	mov	r0, r6
 800682a:	4642      	mov	r2, r8
 800682c:	4621      	mov	r1, r4
 800682e:	f7fa fbc5 	bl	8000fbc <memcpy>
 8006832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006834:	4446      	add	r6, r8
 8006836:	b133      	cbz	r3, 8006846 <arm_cm_conv2d_cwq_dw_i8+0x2d2>
 8006838:	4630      	mov	r0, r6
 800683a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800683c:	9946      	ldr	r1, [sp, #280]	; 0x118
 800683e:	f7fa fc57 	bl	80010f0 <memset>
 8006842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006844:	441e      	add	r6, r3
 8006846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006848:	f109 0901 	add.w	r9, r9, #1
 800684c:	441c      	add	r4, r3
 800684e:	e785      	b.n	800675c <arm_cm_conv2d_cwq_dw_i8+0x1e8>
 8006850:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8006854:	930d      	str	r3, [sp, #52]	; 0x34
 8006856:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 800685a:	930e      	str	r3, [sp, #56]	; 0x38
 800685c:	f850 3c08 	ldr.w	r3, [r0, #-8]
 8006860:	930f      	str	r3, [sp, #60]	; 0x3c
 8006862:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8006866:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800686a:	9310      	str	r3, [sp, #64]	; 0x40
 800686c:	46d0      	mov	r8, sl
 800686e:	46ce      	mov	lr, r9
 8006870:	f1bc 0f00 	cmp.w	ip, #0
 8006874:	d17b      	bne.n	800696e <arm_cm_conv2d_cwq_dw_i8+0x3fa>
 8006876:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800687a:	ed14 7a04 	vldr	s14, [r4, #-16]
 800687e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006880:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8006882:	9d47      	ldr	r5, [sp, #284]	; 0x11c
 8006884:	9e47      	ldr	r6, [sp, #284]	; 0x11c
 8006886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800688a:	f10b 0b04 	add.w	fp, fp, #4
 800688e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006892:	3010      	adds	r0, #16
 8006894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689c:	bfd4      	ite	le
 800689e:	eeb0 7a66 	vmovle.f32	s14, s13
 80068a2:	eeb0 7a48 	vmovgt.f32	s14, s16
 80068a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068ae:	ee17 2a90 	vmov	r2, s15
 80068b2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80068b6:	ed14 7a03 	vldr	s14, [r4, #-12]
 80068ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068be:	441a      	add	r2, r3
 80068c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068c4:	f302 0207 	ssat	r2, #8, r2
 80068c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d0:	bfd4      	ite	le
 80068d2:	eeb0 7a66 	vmovle.f32	s14, s13
 80068d6:	eeb0 7a48 	vmovgt.f32	s14, s16
 80068da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e2:	ee17 3a90 	vmov	r3, s15
 80068e6:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80068ea:	ed14 7a02 	vldr	s14, [r4, #-8]
 80068ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068f2:	440b      	add	r3, r1
 80068f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068f8:	f303 0307 	ssat	r3, #8, r3
 80068fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006904:	bfd4      	ite	le
 8006906:	eeb0 7a66 	vmovle.f32	s14, s13
 800690a:	eeb0 7a48 	vmovgt.f32	s14, s16
 800690e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006916:	ee17 1a90 	vmov	r1, s15
 800691a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800691e:	ed14 7a01 	vldr	s14, [r4, #-4]
 8006922:	f80b 3c03 	strb.w	r3, [fp, #-3]
 8006926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800692a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800692c:	f80b 2c04 	strb.w	r2, [fp, #-4]
 8006930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006934:	4429      	add	r1, r5
 8006936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693e:	bfd4      	ite	le
 8006940:	eeb0 7a66 	vmovle.f32	s14, s13
 8006944:	eeb0 7a48 	vmovgt.f32	s14, s16
 8006948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800694c:	f301 0107 	ssat	r1, #8, r1
 8006950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006954:	ee17 5a90 	vmov	r5, s15
 8006958:	f80b 1c02 	strb.w	r1, [fp, #-2]
 800695c:	4435      	add	r5, r6
 800695e:	449a      	add	sl, r3
 8006960:	f305 0507 	ssat	r5, #8, r5
 8006964:	4499      	add	r9, r3
 8006966:	f80b 5c01 	strb.w	r5, [fp, #-1]
 800696a:	3410      	adds	r4, #16
 800696c:	e714      	b.n	8006798 <arm_cm_conv2d_cwq_dw_i8+0x224>
 800696e:	f8d8 1000 	ldr.w	r1, [r8]
 8006972:	f8de 5000 	ldr.w	r5, [lr]
 8006976:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006978:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800697a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800697c:	fa23 f391 	sxtab16	r3, r3, r1, ror #8
 8006980:	44b8      	add	r8, r7
 8006982:	fa22 f181 	sxtab16	r1, r2, r1
 8006986:	44be      	add	lr, r7
 8006988:	fa2f f295 	sxtb16	r2, r5, ror #8
 800698c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006990:	fa2f f585 	sxtb16	r5, r5
 8006994:	fb11 6605 	smlabb	r6, r1, r5, r6
 8006998:	960d      	str	r6, [sp, #52]	; 0x34
 800699a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800699c:	fb13 6602 	smlabb	r6, r3, r2, r6
 80069a0:	960e      	str	r6, [sp, #56]	; 0x38
 80069a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80069a4:	fb11 6135 	smlatt	r1, r1, r5, r6
 80069a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80069aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80069ac:	fb13 1332 	smlatt	r3, r3, r2, r1
 80069b0:	9310      	str	r3, [sp, #64]	; 0x40
 80069b2:	e75d      	b.n	8006870 <arm_cm_conv2d_cwq_dw_i8+0x2fc>
 80069b4:	f85a 2b04 	ldr.w	r2, [sl], #4
 80069b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80069ba:	46a6      	mov	lr, r4
 80069bc:	4684      	mov	ip, r0
 80069be:	bb0d      	cbnz	r5, 8006a04 <arm_cm_conv2d_cwq_dw_i8+0x490>
 80069c0:	ee07 2a90 	vmov	s15, r2
 80069c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069c6:	9d47      	ldr	r5, [sp, #284]	; 0x11c
 80069c8:	ecf2 6a01 	vldmia	r2!, {s13}
 80069cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069d0:	920d      	str	r2, [sp, #52]	; 0x34
 80069d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069d6:	445c      	add	r4, fp
 80069d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e0:	bfd4      	ite	le
 80069e2:	eef0 6a47 	vmovle.f32	s13, s14
 80069e6:	eef0 6a48 	vmovgt.f32	s13, s16
 80069ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069f2:	ee17 2a90 	vmov	r2, s15
 80069f6:	4458      	add	r0, fp
 80069f8:	442a      	add	r2, r5
 80069fa:	f302 0207 	ssat	r2, #8, r2
 80069fe:	f801 2b01 	strb.w	r2, [r1], #1
 8006a02:	e6e5      	b.n	80067d0 <arm_cm_conv2d_cwq_dw_i8+0x25c>
 8006a04:	f8de 8000 	ldr.w	r8, [lr]
 8006a08:	f8dc 9000 	ldr.w	r9, [ip]
 8006a0c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006a0e:	fa2f f989 	sxtb16	r9, r9
 8006a12:	fa26 f888 	sxtab16	r8, r6, r8
 8006a16:	44be      	add	lr, r7
 8006a18:	44bc      	add	ip, r7
 8006a1a:	3d01      	subs	r5, #1
 8006a1c:	fb18 2209 	smlabb	r2, r8, r9, r2
 8006a20:	e7cd      	b.n	80069be <arm_cm_conv2d_cwq_dw_i8+0x44a>

08006a22 <arm_cm_conv2d_cwq_std_i8>:
 8006a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a26:	b0ad      	sub	sp, #180	; 0xb4
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a2e:	425a      	negs	r2, r3
 8006a30:	9100      	str	r1, [sp, #0]
 8006a32:	9205      	str	r2, [sp, #20]
 8006a34:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8006a36:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8006a38:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 8006a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a3c:	434a      	muls	r2, r1
 8006a3e:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8006a40:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8006a42:	902a      	str	r0, [sp, #168]	; 0xa8
 8006a44:	fb01 f602 	mul.w	r6, r1, r2
 8006a48:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 8006a4c:	9225      	str	r2, [sp, #148]	; 0x94
 8006a4e:	0072      	lsls	r2, r6, #1
 8006a50:	9219      	str	r2, [sp, #100]	; 0x64
 8006a52:	eb04 0246 	add.w	r2, r4, r6, lsl #1
 8006a56:	9226      	str	r2, [sp, #152]	; 0x98
 8006a58:	9a00      	ldr	r2, [sp, #0]
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	4432      	add	r2, r6
 8006a5e:	9227      	str	r2, [sp, #156]	; 0x9c
 8006a60:	4632      	mov	r2, r6
 8006a62:	bfb8      	it	lt
 8006a64:	1cf2      	addlt	r2, r6, #3
 8006a66:	1092      	asrs	r2, r2, #2
 8006a68:	921d      	str	r2, [sp, #116]	; 0x74
 8006a6a:	e9dd 1238 	ldrd	r1, r2, [sp, #224]	; 0xe0
 8006a6e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006a72:	434a      	muls	r2, r1
 8006a74:	9228      	str	r2, [sp, #160]	; 0xa0
 8006a76:	105a      	asrs	r2, r3, #1
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	9311      	str	r3, [sp, #68]	; 0x44
 8006a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a80:	9214      	str	r2, [sp, #80]	; 0x50
 8006a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a86:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a8e:	931e      	str	r3, [sp, #120]	; 0x78
 8006a90:	f006 0303 	and.w	r3, r6, #3
 8006a94:	931f      	str	r3, [sp, #124]	; 0x7c
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	9310      	str	r3, [sp, #64]	; 0x40
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8006a9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006aa0:	4627      	mov	r7, r4
 8006aa2:	425b      	negs	r3, r3
 8006aa4:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
 8006aa8:	9322      	str	r3, [sp, #136]	; 0x88
 8006aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aac:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	db5e      	blt.n	8006b70 <arm_cm_conv2d_cwq_std_i8+0x14e>
 8006ab2:	42a7      	cmp	r7, r4
 8006ab4:	d059      	beq.n	8006b6a <arm_cm_conv2d_cwq_std_i8+0x148>
 8006ab6:	e9dd 323d 	ldrd	r3, r2, [sp, #244]	; 0xf4
 8006aba:	fb02 f103 	mul.w	r1, r2, r3
 8006abe:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8006ac0:	9a01      	ldr	r2, [sp, #4]
 8006ac2:	4359      	muls	r1, r3
 8006ac4:	9b00      	ldr	r3, [sp, #0]
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	eb03 0001 	add.w	r0, r3, r1
 8006acc:	460b      	mov	r3, r1
 8006ace:	bfb8      	it	lt
 8006ad0:	1ccb      	addlt	r3, r1, #3
 8006ad2:	ea4f 0aa3 	mov.w	sl, r3, asr #2
 8006ad6:	004b      	lsls	r3, r1, #1
 8006ad8:	425b      	negs	r3, r3
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ade:	f103 0708 	add.w	r7, r3, #8
 8006ae2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006ae4:	f103 0c08 	add.w	ip, r3, #8
 8006ae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aea:	4413      	add	r3, r2
 8006aec:	9303      	str	r3, [sp, #12]
 8006aee:	f001 0303 	and.w	r3, r1, #3
 8006af2:	005a      	lsls	r2, r3, #1
 8006af4:	9202      	str	r2, [sp, #8]
 8006af6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006afa:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006afe:	4419      	add	r1, r3
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	9a03      	ldr	r2, [sp, #12]
 8006b04:	4293      	cmp	r3, r2
 8006b06:	f040 829e 	bne.w	8007046 <arm_cm_conv2d_cwq_std_i8+0x624>
 8006b0a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8006b0c:	07db      	lsls	r3, r3, #31
 8006b0e:	d52c      	bpl.n	8006b6a <arm_cm_conv2d_cwq_std_i8+0x148>
 8006b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b14:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8006b18:	f1ba 0f00 	cmp.w	sl, #0
 8006b1c:	f040 830e 	bne.w	800713c <arm_cm_conv2d_cwq_std_i8+0x71a>
 8006b20:	9a02      	ldr	r2, [sp, #8]
 8006b22:	4422      	add	r2, r4
 8006b24:	4294      	cmp	r4, r2
 8006b26:	f040 831e 	bne.w	8007166 <arm_cm_conv2d_cwq_std_i8+0x744>
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b30:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8006b32:	ed93 7a00 	vldr	s14, [r3]
 8006b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b3a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4e:	bfd8      	it	le
 8006b50:	eeb0 7a66 	vmovle.f32	s14, s13
 8006b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b5c:	ee17 3a90 	vmov	r3, s15
 8006b60:	4413      	add	r3, r2
 8006b62:	9a03      	ldr	r2, [sp, #12]
 8006b64:	f303 0307 	ssat	r3, #8, r3
 8006b68:	7013      	strb	r3, [r2, #0]
 8006b6a:	b02d      	add	sp, #180	; 0xb4
 8006b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b70:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8006b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b74:	425b      	negs	r3, r3
 8006b76:	9306      	str	r3, [sp, #24]
 8006b78:	9b05      	ldr	r3, [sp, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7e:	bfc8      	it	gt
 8006b80:	2300      	movgt	r3, #0
 8006b82:	9307      	str	r3, [sp, #28]
 8006b84:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8006b86:	9907      	ldr	r1, [sp, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	bfa8      	it	ge
 8006b90:	4613      	movge	r3, r2
 8006b92:	9318      	str	r3, [sp, #96]	; 0x60
 8006b94:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8006b96:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8006b9c:	4353      	muls	r3, r2
 8006b9e:	9a07      	ldr	r2, [sp, #28]
 8006ba0:	435a      	muls	r2, r3
 8006ba2:	9215      	str	r2, [sp, #84]	; 0x54
 8006ba4:	9a05      	ldr	r2, [sp, #20]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8006baa:	434a      	muls	r2, r1
 8006bac:	9224      	str	r2, [sp, #144]	; 0x90
 8006bae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bb0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8006bb2:	1a52      	subs	r2, r2, r1
 8006bb4:	4353      	muls	r3, r2
 8006bb6:	9216      	str	r2, [sp, #88]	; 0x58
 8006bb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8006bba:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8006bbc:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8006bbe:	9312      	str	r3, [sp, #72]	; 0x48
 8006bc0:	4413      	add	r3, r2
 8006bc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8006bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bca:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	db0a      	blt.n	8006be6 <arm_cm_conv2d_cwq_std_i8+0x1c4>
 8006bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bd2:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8006bd8:	9b05      	ldr	r3, [sp, #20]
 8006bda:	4413      	add	r3, r2
 8006bdc:	9305      	str	r3, [sp, #20]
 8006bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	930a      	str	r3, [sp, #40]	; 0x28
 8006be4:	e761      	b.n	8006aaa <arm_cm_conv2d_cwq_std_i8+0x88>
 8006be6:	9b06      	ldr	r3, [sp, #24]
 8006be8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bee:	bfd8      	it	le
 8006bf0:	4699      	movle	r9, r3
 8006bf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bf4:	bfc8      	it	gt
 8006bf6:	f04f 0900 	movgt.w	r9, #0
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	bfa8      	it	ge
 8006bfe:	4613      	movge	r3, r2
 8006c00:	4698      	mov	r8, r3
 8006c02:	eba3 0a09 	sub.w	sl, r3, r9
 8006c06:	9b07      	ldr	r3, [sp, #28]
 8006c08:	b133      	cbz	r3, 8006c18 <arm_cm_conv2d_cwq_std_i8+0x1f6>
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c0e:	2100      	movs	r1, #0
 8006c10:	f7fa fa6e 	bl	80010f0 <memset>
 8006c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c16:	441f      	add	r7, r3
 8006c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c1a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8006c1e:	fb03 f309 	mul.w	r3, r3, r9
 8006c22:	9302      	str	r3, [sp, #8]
 8006c24:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8006c26:	fb03 fa0a 	mul.w	sl, r3, sl
 8006c2a:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8006c2e:	9308      	str	r3, [sp, #32]
 8006c30:	f00a 0303 	and.w	r3, sl, #3
 8006c34:	9309      	str	r3, [sp, #36]	; 0x24
 8006c36:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8006c3a:	9304      	str	r3, [sp, #16]
 8006c3c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8006c3e:	eba3 0308 	sub.w	r3, r3, r8
 8006c42:	9303      	str	r3, [sp, #12]
 8006c44:	9a03      	ldr	r2, [sp, #12]
 8006c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c48:	fb02 fa03 	mul.w	sl, r2, r3
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c50:	eb03 0802 	add.w	r8, r3, r2
 8006c54:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006c56:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8006c58:	44c8      	add	r8, r9
 8006c5a:	fb02 3808 	mla	r8, r2, r8, r3
 8006c5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006c60:	459b      	cmp	fp, r3
 8006c62:	f2c0 8094 	blt.w	8006d8e <arm_cm_conv2d_cwq_std_i8+0x36c>
 8006c66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c68:	b133      	cbz	r3, 8006c78 <arm_cm_conv2d_cwq_std_i8+0x256>
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c6e:	2100      	movs	r1, #0
 8006c70:	f7fa fa3e 	bl	80010f0 <memset>
 8006c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c76:	441f      	add	r7, r3
 8006c78:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006c7a:	42bb      	cmp	r3, r7
 8006c7c:	d179      	bne.n	8006d72 <arm_cm_conv2d_cwq_std_i8+0x350>
 8006c7e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8006c80:	9b01      	ldr	r3, [sp, #4]
 8006c82:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006c84:	f8dd 809c 	ldr.w	r8, [sp, #156]	; 0x9c
 8006c88:	f8dd b000 	ldr.w	fp, [sp]
 8006c8c:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 8006c90:	4413      	add	r3, r2
 8006c92:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c98:	3308      	adds	r3, #8
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006c9e:	f103 0908 	add.w	r9, r3, #8
 8006ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	4413      	add	r3, r2
 8006cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cae:	9320      	str	r3, [sp, #128]	; 0x80
 8006cb0:	1a52      	subs	r2, r2, r1
 8006cb2:	922b      	str	r2, [sp, #172]	; 0xac
 8006cb4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006cb6:	18b2      	adds	r2, r6, r2
 8006cb8:	4623      	mov	r3, r4
 8006cba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006cbe:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8006cc2:	9221      	str	r2, [sp, #132]	; 0x84
 8006cc4:	9a01      	ldr	r2, [sp, #4]
 8006cc6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006cc8:	428a      	cmp	r2, r1
 8006cca:	f040 809e 	bne.w	8006e0a <arm_cm_conv2d_cwq_std_i8+0x3e8>
 8006cce:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8006cd0:	07d2      	lsls	r2, r2, #31
 8006cd2:	d549      	bpl.n	8006d68 <arm_cm_conv2d_cwq_std_i8+0x346>
 8006cd4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006cd6:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f1bc 0f00 	cmp.w	ip, #0
 8006ce2:	f040 8188 	bne.w	8006ff6 <arm_cm_conv2d_cwq_std_i8+0x5d4>
 8006ce6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006ce8:	185f      	adds	r7, r3, r1
 8006cea:	42bb      	cmp	r3, r7
 8006cec:	f040 81a0 	bne.w	8007030 <arm_cm_conv2d_cwq_std_i8+0x60e>
 8006cf0:	ee07 2a90 	vmov	s15, r2
 8006cf4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cf6:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8006cf8:	edd3 5a00 	vldr	s11, [r3]
 8006cfc:	9944      	ldr	r1, [sp, #272]	; 0x110
 8006cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d02:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006d06:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006d0a:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8006d0e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d16:	bfd4      	ite	le
 8006d18:	eef0 7a46 	vmovle.f32	s15, s12
 8006d1c:	eef0 7a66 	vmovgt.f32	s15, s13
 8006d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d24:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006d28:	ee17 3a90 	vmov	r3, s15
 8006d2c:	ee07 0a90 	vmov	s15, r0
 8006d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d34:	4413      	add	r3, r2
 8006d36:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006d3a:	f303 0307 	ssat	r3, #8, r3
 8006d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d46:	bfd8      	it	le
 8006d48:	eef0 6a46 	vmovle.f32	s13, s12
 8006d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d54:	ee17 2a90 	vmov	r2, s15
 8006d58:	440a      	add	r2, r1
 8006d5a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006d5c:	f302 0207 	ssat	r2, #8, r2
 8006d60:	700b      	strb	r3, [r1, #0]
 8006d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d66:	545a      	strb	r2, [r3, r1]
 8006d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d6a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8006d6c:	4413      	add	r3, r2
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	4627      	mov	r7, r4
 8006d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d74:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8006d76:	3301      	adds	r3, #1
 8006d78:	930d      	str	r3, [sp, #52]	; 0x34
 8006d7a:	9b06      	ldr	r3, [sp, #24]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	9306      	str	r3, [sp, #24]
 8006d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	9312      	str	r3, [sp, #72]	; 0x48
 8006d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d8c:	e71c      	b.n	8006bc8 <arm_cm_conv2d_cwq_std_i8+0x1a6>
 8006d8e:	f1b9 0f00 	cmp.w	r9, #0
 8006d92:	d006      	beq.n	8006da2 <arm_cm_conv2d_cwq_std_i8+0x380>
 8006d94:	4638      	mov	r0, r7
 8006d96:	9a02      	ldr	r2, [sp, #8]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	f7fa f9a9 	bl	80010f0 <memset>
 8006d9e:	9b02      	ldr	r3, [sp, #8]
 8006da0:	441f      	add	r7, r3
 8006da2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006da6:	4643      	mov	r3, r8
 8006da8:	463a      	mov	r2, r7
 8006daa:	f1bc 0f00 	cmp.w	ip, #0
 8006dae:	d112      	bne.n	8006dd6 <arm_cm_conv2d_cwq_std_i8+0x3b4>
 8006db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006db2:	1858      	adds	r0, r3, r1
 8006db4:	4283      	cmp	r3, r0
 8006db6:	d121      	bne.n	8006dfc <arm_cm_conv2d_cwq_std_i8+0x3da>
 8006db8:	9b04      	ldr	r3, [sp, #16]
 8006dba:	441f      	add	r7, r3
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	b12b      	cbz	r3, 8006dcc <arm_cm_conv2d_cwq_std_i8+0x3aa>
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	f7fa f993 	bl	80010f0 <memset>
 8006dca:	4457      	add	r7, sl
 8006dcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006dce:	f10b 0b01 	add.w	fp, fp, #1
 8006dd2:	4498      	add	r8, r3
 8006dd4:	e743      	b.n	8006c5e <arm_cm_conv2d_cwq_std_i8+0x23c>
 8006dd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8006dda:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006ddc:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006dde:	fa20 f091 	sxtab16	r0, r0, r1, ror #8
 8006de2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006de6:	fa25 f181 	sxtab16	r1, r5, r1
 8006dea:	eac1 4e00 	pkhbt	lr, r1, r0, lsl #16
 8006dee:	eac0 4121 	pkhtb	r1, r0, r1, asr #16
 8006df2:	f842 eb04 	str.w	lr, [r2], #4
 8006df6:	f842 1b04 	str.w	r1, [r2], #4
 8006dfa:	e7d6      	b.n	8006daa <arm_cm_conv2d_cwq_std_i8+0x388>
 8006dfc:	f913 1b01 	ldrsb.w	r1, [r3], #1
 8006e00:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 8006e02:	1b49      	subs	r1, r1, r5
 8006e04:	f822 1b02 	strh.w	r1, [r2], #2
 8006e08:	e7d4      	b.n	8006db4 <arm_cm_conv2d_cwq_std_i8+0x392>
 8006e0a:	9a08      	ldr	r2, [sp, #32]
 8006e0c:	9908      	ldr	r1, [sp, #32]
 8006e0e:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8006e12:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8006e16:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 8006e1a:	9102      	str	r1, [sp, #8]
 8006e1c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8006e20:	f1be 0f00 	cmp.w	lr, #0
 8006e24:	f040 808d 	bne.w	8006f42 <arm_cm_conv2d_cwq_std_i8+0x520>
 8006e28:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006e2a:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 8006e2e:	1859      	adds	r1, r3, r1
 8006e30:	9129      	str	r1, [sp, #164]	; 0xa4
 8006e32:	4647      	mov	r7, r8
 8006e34:	4658      	mov	r0, fp
 8006e36:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006e38:	428b      	cmp	r3, r1
 8006e3a:	f040 80bd 	bne.w	8006fb8 <arm_cm_conv2d_cwq_std_i8+0x596>
 8006e3e:	ee07 2a90 	vmov	s15, r2
 8006e42:	ed19 5a02 	vldr	s10, [r9, #-8]
 8006e46:	ed59 5a01 	vldr	s11, [r9, #-4]
 8006e4a:	9944      	ldr	r1, [sp, #272]	; 0x110
 8006e4c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006e4e:	9d44      	ldr	r5, [sp, #272]	; 0x110
 8006e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e54:	f109 0908 	add.w	r9, r9, #8
 8006e58:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006e5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e64:	bfd4      	ite	le
 8006e66:	eeb0 7a46 	vmovle.f32	s14, s12
 8006e6a:	eeb0 7a66 	vmovgt.f32	s14, s13
 8006e6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e76:	ee17 2a90 	vmov	r2, s15
 8006e7a:	eddd 7a02 	vldr	s15, [sp, #8]
 8006e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e82:	440a      	add	r2, r1
 8006e84:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006e88:	f302 0207 	ssat	r2, #8, r2
 8006e8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e94:	bfd4      	ite	le
 8006e96:	eeb0 7a46 	vmovle.f32	s14, s12
 8006e9a:	eeb0 7a66 	vmovgt.f32	s14, s13
 8006e9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ea6:	ee17 1a90 	vmov	r1, s15
 8006eaa:	eddd 7a03 	vldr	s15, [sp, #12]
 8006eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eb2:	4401      	add	r1, r0
 8006eb4:	ee27 7a05 	vmul.f32	s14, s14, s10
 8006eb8:	f301 0107 	ssat	r1, #8, r1
 8006ebc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec4:	bfd4      	ite	le
 8006ec6:	eef0 7a46 	vmovle.f32	s15, s12
 8006eca:	eef0 7a66 	vmovgt.f32	s15, s13
 8006ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ed2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006ed6:	ee17 0a90 	vmov	r0, s15
 8006eda:	eddd 7a04 	vldr	s15, [sp, #16]
 8006ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ee2:	4428      	add	r0, r5
 8006ee4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006ee8:	f300 0007 	ssat	r0, #8, r0
 8006eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef4:	bfd4      	ite	le
 8006ef6:	eeb0 7a46 	vmovle.f32	s14, s12
 8006efa:	eeb0 7a66 	vmovgt.f32	s14, s13
 8006efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f06:	ee17 7a90 	vmov	r7, s15
 8006f0a:	442f      	add	r7, r5
 8006f0c:	9d01      	ldr	r5, [sp, #4]
 8006f0e:	f307 0707 	ssat	r7, #8, r7
 8006f12:	f805 2b02 	strb.w	r2, [r5], #2
 8006f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f18:	f805 1c01 	strb.w	r1, [r5, #-1]
 8006f1c:	f802 0c02 	strb.w	r0, [r2, #-2]
 8006f20:	f802 7c01 	strb.w	r7, [r2, #-1]
 8006f24:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f26:	9501      	str	r5, [sp, #4]
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8006f2c:	4492      	add	sl, r2
 8006f2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f30:	4493      	add	fp, r2
 8006f32:	4490      	add	r8, r2
 8006f34:	9a08      	ldr	r2, [sp, #32]
 8006f36:	3208      	adds	r2, #8
 8006f38:	9208      	str	r2, [sp, #32]
 8006f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f3c:	3202      	adds	r2, #2
 8006f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f40:	e6c0      	b.n	8006cc4 <arm_cm_conv2d_cwq_std_i8+0x2a2>
 8006f42:	f853 cb04 	ldr.w	ip, [r3], #4
 8006f46:	4658      	mov	r0, fp
 8006f48:	4651      	mov	r1, sl
 8006f4a:	f850 7b04 	ldr.w	r7, [r0], #4
 8006f4e:	f851 ab04 	ldr.w	sl, [r1], #4
 8006f52:	4683      	mov	fp, r0
 8006f54:	fa2f f097 	sxtb16	r0, r7, ror #8
 8006f58:	fa2f f787 	sxtb16	r7, r7
 8006f5c:	901a      	str	r0, [sp, #104]	; 0x68
 8006f5e:	fb2c 2207 	smlad	r2, ip, r7, r2
 8006f62:	f858 0b04 	ldr.w	r0, [r8], #4
 8006f66:	fa2f f590 	sxtb16	r5, r0, ror #8
 8006f6a:	fa2f f080 	sxtb16	r0, r0
 8006f6e:	951b      	str	r5, [sp, #108]	; 0x6c
 8006f70:	9d02      	ldr	r5, [sp, #8]
 8006f72:	fb2c 5c00 	smlad	ip, ip, r0, r5
 8006f76:	9d03      	ldr	r5, [sp, #12]
 8006f78:	fb2a 5507 	smlad	r5, sl, r7, r5
 8006f7c:	9503      	str	r5, [sp, #12]
 8006f7e:	9d04      	ldr	r5, [sp, #16]
 8006f80:	fb2a 5000 	smlad	r0, sl, r0, r5
 8006f84:	9004      	str	r0, [sp, #16]
 8006f86:	9d03      	ldr	r5, [sp, #12]
 8006f88:	f851 0b04 	ldr.w	r0, [r1], #4
 8006f8c:	f853 7b04 	ldr.w	r7, [r3], #4
 8006f90:	468a      	mov	sl, r1
 8006f92:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006f96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f98:	fb27 2201 	smlad	r2, r7, r1, r2
 8006f9c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006f9e:	fb27 c101 	smlad	r1, r7, r1, ip
 8006fa2:	9102      	str	r1, [sp, #8]
 8006fa4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fa6:	fb20 5101 	smlad	r1, r0, r1, r5
 8006faa:	9d04      	ldr	r5, [sp, #16]
 8006fac:	9103      	str	r1, [sp, #12]
 8006fae:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006fb0:	fb20 5101 	smlad	r1, r0, r1, r5
 8006fb4:	9104      	str	r1, [sp, #16]
 8006fb6:	e733      	b.n	8006e20 <arm_cm_conv2d_cwq_std_i8+0x3fe>
 8006fb8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006fba:	f933 5b02 	ldrsh.w	r5, [r3], #2
 8006fbe:	951a      	str	r5, [sp, #104]	; 0x68
 8006fc0:	f910 5b01 	ldrsb.w	r5, [r0], #1
 8006fc4:	f931 eb02 	ldrsh.w	lr, [r1], #2
 8006fc8:	951c      	str	r5, [sp, #112]	; 0x70
 8006fca:	911b      	str	r1, [sp, #108]	; 0x6c
 8006fcc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006fce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fd0:	f917 cb01 	ldrsb.w	ip, [r7], #1
 8006fd4:	fb15 2201 	smlabb	r2, r5, r1, r2
 8006fd8:	4629      	mov	r1, r5
 8006fda:	9d02      	ldr	r5, [sp, #8]
 8006fdc:	fb11 510c 	smlabb	r1, r1, ip, r5
 8006fe0:	9102      	str	r1, [sp, #8]
 8006fe2:	9d03      	ldr	r5, [sp, #12]
 8006fe4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fe6:	fb1e 5101 	smlabb	r1, lr, r1, r5
 8006fea:	9103      	str	r1, [sp, #12]
 8006fec:	9904      	ldr	r1, [sp, #16]
 8006fee:	fb1e 110c 	smlabb	r1, lr, ip, r1
 8006ff2:	9104      	str	r1, [sp, #16]
 8006ff4:	e71f      	b.n	8006e36 <arm_cm_conv2d_cwq_std_i8+0x414>
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	46de      	mov	lr, fp
 8006ffa:	f853 8b04 	ldr.w	r8, [r3], #4
 8006ffe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007002:	f851 9b04 	ldr.w	r9, [r1], #4
 8007006:	46f3      	mov	fp, lr
 8007008:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800700c:	fa2f fe97 	sxtb16	lr, r7, ror #8
 8007010:	fa2f f787 	sxtb16	r7, r7
 8007014:	fb28 2207 	smlad	r2, r8, r7, r2
 8007018:	fb29 0007 	smlad	r0, r9, r7, r0
 800701c:	f853 8b04 	ldr.w	r8, [r3], #4
 8007020:	f851 7b04 	ldr.w	r7, [r1], #4
 8007024:	fb28 220e 	smlad	r2, r8, lr, r2
 8007028:	468a      	mov	sl, r1
 800702a:	fb27 000e 	smlad	r0, r7, lr, r0
 800702e:	e656      	b.n	8006cde <arm_cm_conv2d_cwq_std_i8+0x2bc>
 8007030:	f91b 1b01 	ldrsb.w	r1, [fp], #1
 8007034:	f833 cb02 	ldrh.w	ip, [r3], #2
 8007038:	fb1c 2201 	smlabb	r2, ip, r1, r2
 800703c:	f83a cb02 	ldrh.w	ip, [sl], #2
 8007040:	fb1c 0001 	smlabb	r0, ip, r1, r0
 8007044:	e651      	b.n	8006cea <arm_cm_conv2d_cwq_std_i8+0x2c8>
 8007046:	e957 2302 	ldrd	r2, r3, [r7, #-8]
 800704a:	46d6      	mov	lr, sl
 800704c:	f1be 0f00 	cmp.w	lr, #0
 8007050:	d14c      	bne.n	80070ec <arm_cm_conv2d_cwq_std_i8+0x6ca>
 8007052:	9d02      	ldr	r5, [sp, #8]
 8007054:	f8dd b000 	ldr.w	fp, [sp]
 8007058:	eb04 0805 	add.w	r8, r4, r5
 800705c:	4606      	mov	r6, r0
 800705e:	4544      	cmp	r4, r8
 8007060:	d161      	bne.n	8007126 <arm_cm_conv2d_cwq_std_i8+0x704>
 8007062:	ee07 2a90 	vmov	s15, r2
 8007066:	ed1c 6a02 	vldr	s12, [ip, #-8]
 800706a:	9d44      	ldr	r5, [sp, #272]	; 0x110
 800706c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007070:	4408      	add	r0, r1
 8007072:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007076:	3708      	adds	r7, #8
 8007078:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800707c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007080:	bfd4      	ite	le
 8007082:	eeb0 6a66 	vmovle.f32	s12, s13
 8007086:	eeb0 6a47 	vmovgt.f32	s12, s14
 800708a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800708e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007092:	ee17 2a90 	vmov	r2, s15
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	ed1c 6a01 	vldr	s12, [ip, #-4]
 800709e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070a2:	442a      	add	r2, r5
 80070a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80070a8:	f302 0207 	ssat	r2, #8, r2
 80070ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b4:	bfd4      	ite	le
 80070b6:	eeb0 6a66 	vmovle.f32	s12, s13
 80070ba:	eeb0 6a47 	vmovgt.f32	s12, s14
 80070be:	ee77 7a86 	vadd.f32	s15, s15, s12
 80070c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070c6:	ee17 3a90 	vmov	r3, s15
 80070ca:	442b      	add	r3, r5
 80070cc:	9d01      	ldr	r5, [sp, #4]
 80070ce:	f303 0307 	ssat	r3, #8, r3
 80070d2:	f805 2b02 	strb.w	r2, [r5], #2
 80070d6:	f805 3c01 	strb.w	r3, [r5, #-1]
 80070da:	9b04      	ldr	r3, [sp, #16]
 80070dc:	9501      	str	r5, [sp, #4]
 80070de:	441c      	add	r4, r3
 80070e0:	9b00      	ldr	r3, [sp, #0]
 80070e2:	440b      	add	r3, r1
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	f10c 0c08 	add.w	ip, ip, #8
 80070ea:	e509      	b.n	8006b00 <arm_cm_conv2d_cwq_std_i8+0xde>
 80070ec:	f854 8b04 	ldr.w	r8, [r4], #4
 80070f0:	9e00      	ldr	r6, [sp, #0]
 80070f2:	f856 bb04 	ldr.w	fp, [r6], #4
 80070f6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80070fa:	fa2f f99b 	sxtb16	r9, fp, ror #8
 80070fe:	9600      	str	r6, [sp, #0]
 8007100:	fa2f fb8b 	sxtb16	fp, fp
 8007104:	f850 6b04 	ldr.w	r6, [r0], #4
 8007108:	fb28 220b 	smlad	r2, r8, fp, r2
 800710c:	fa2f f596 	sxtb16	r5, r6, ror #8
 8007110:	fa2f f686 	sxtb16	r6, r6
 8007114:	fb28 3306 	smlad	r3, r8, r6, r3
 8007118:	f854 6b04 	ldr.w	r6, [r4], #4
 800711c:	fb26 2209 	smlad	r2, r6, r9, r2
 8007120:	fb26 3305 	smlad	r3, r6, r5, r3
 8007124:	e792      	b.n	800704c <arm_cm_conv2d_cwq_std_i8+0x62a>
 8007126:	f934 eb02 	ldrsh.w	lr, [r4], #2
 800712a:	f91b 9b01 	ldrsb.w	r9, [fp], #1
 800712e:	fb1e 2209 	smlabb	r2, lr, r9, r2
 8007132:	f916 9b01 	ldrsb.w	r9, [r6], #1
 8007136:	fb1e 3309 	smlabb	r3, lr, r9, r3
 800713a:	e790      	b.n	800705e <arm_cm_conv2d_cwq_std_i8+0x63c>
 800713c:	9e00      	ldr	r6, [sp, #0]
 800713e:	f856 0b04 	ldr.w	r0, [r6], #4
 8007142:	4622      	mov	r2, r4
 8007144:	fa2f f190 	sxtb16	r1, r0, ror #8
 8007148:	f852 4b04 	ldr.w	r4, [r2], #4
 800714c:	fa2f f080 	sxtb16	r0, r0
 8007150:	9600      	str	r6, [sp, #0]
 8007152:	fb24 3000 	smlad	r0, r4, r0, r3
 8007156:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800715a:	f852 3b04 	ldr.w	r3, [r2], #4
 800715e:	4614      	mov	r4, r2
 8007160:	fb23 0301 	smlad	r3, r3, r1, r0
 8007164:	e4d8      	b.n	8006b18 <arm_cm_conv2d_cwq_std_i8+0xf6>
 8007166:	9800      	ldr	r0, [sp, #0]
 8007168:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800716c:	9000      	str	r0, [sp, #0]
 800716e:	f834 0b02 	ldrh.w	r0, [r4], #2
 8007172:	fb10 3301 	smlabb	r3, r0, r1, r3
 8007176:	e4d5      	b.n	8006b24 <arm_cm_conv2d_cwq_std_i8+0x102>

08007178 <_init>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr

08007184 <_fini>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr
