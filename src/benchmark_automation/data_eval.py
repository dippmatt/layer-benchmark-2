from pathlib import Path
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import numpy as np

def main():
    """Add generated data into one pandas data frame.

    The data is generated by the benchmarking script (main.py) and saved in the data_gen folder.
    The data frame include the following columns:
    - model (ad, kws, vww, ic)
    - framework (tiny_engine, st, glow)
    - dtype (int, float)
    - flash (bytes)
    - ram   (bytes)
    - timings (mean value)
    """
    timings_dir = Path('..', '..', 'data_gen')

    df = pd.DataFrame(columns=['model', 'framework', 'dtype', 'flash', 'ram', 'avg_timing', 'config_name'])
    
    # Sanity check: verify the naming scheme of the benchmark folders
    framework_counter = 0
    model_counter = 0
    quant_counter = 0

    ##############################################
    ######     Loop over all benchmarks     ######
    ##############################################
    
    for benchmark in timings_dir.iterdir():
        # filter empty directories
        if not any(benchmark.iterdir()):
            continue

        # empty row template for df
        new_row_data = {'config_name': benchmark.stem}
        
        ##############################################
        ###### Fill model, framework, data type ######
        ##############################################

        # frameworks
        if 'tiny_engine' in benchmark.stem:
            framework_counter += 1
            new_row_data['framework'] = 'tiny_engine'
        if 'st_' in benchmark.stem:
            framework_counter += 1
            new_row_data['framework'] = 'st'
        if 'glow_' in benchmark.stem:
            framework_counter += 1
            new_row_data['framework'] = 'glow'
        # models
        if 'ad_' in benchmark.stem:
            model_counter += 1
            new_row_data['model'] = 'ad'
        if 'kws' in benchmark.stem:
            model_counter += 1
            new_row_data['model'] = 'kws'
        if 'vww' in benchmark.stem:
            model_counter += 1
            new_row_data['model'] = 'vww'
        if 'ic' in benchmark.stem:
            model_counter += 1
            new_row_data['model'] = 'ic'
        # data type schemes (int or float)
        if 'int' in benchmark.stem:
            quant_counter += 1
            new_row_data['dtype'] = 'int'
        if 'float' in benchmark.stem:
            quant_counter += 1
            new_row_data['dtype'] = 'float'

        ###################################################
        ###### Insert average timings for all layers ######
        ###################################################
        
        mean_timings = Path(benchmark, 'all_layers_timings_mean.npz')
        assert mean_timings.exists(), 'No mean timings found.'
        input_data = np.load(mean_timings)

        avg_timing =input_data['arr_0']
        if avg_timing.shape == (1,):
            avg_timing = avg_timing[0]
        else:
            avg_timing = avg_timing
        new_row_data['avg_timing'] = avg_timing
        
        ##################################################
        ####           Insert Ram & Flash             ####
        ##################################################

        mean_timings = Path(benchmark, 'ram_flash.txt')
        assert mean_timings.exists(), 'No ram, flash found.'
        
        with open(mean_timings, 'r') as f:
            lines = f.readlines()
        print()
        print(lines)
        
        ram = lines[0].strip().split(' ')[-1]
        flash = lines[1].strip().split(' ')[-1]
        new_row_data['ram'] = ram
        new_row_data['flash'] = flash

        # add the new row to the df
        df.loc[len(df)] = new_row_data

    
    assert quant_counter == 66, 'Benchmark folder name does not follow naming convention.'
    assert framework_counter == 66, 'Benchmark folder name does not follow naming convention.'
    assert model_counter == 66, 'Benchmark folder name does not follow naming convention.'
    
    ######################### create pandas df #########################
    # Create a pandas DataFrame from the benchmark data
    # we us columns for the model, framework, flash, ram, and timings

    print(df)

    return 0

if __name__ == '__main__':
    main()