
Eval_tflite_runtime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010304  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000083f8  080104e0  080104e0  000204e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080188d8  080188d8  00031a34  2**0
                  CONTENTS
  4 .ARM          00000008  080188d8  080188d8  000288d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188e0  080188e0  00031a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080188e0  080188e0  000288e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080188e4  080188e4  000288e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001a34  20000000  080188e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f5c  20001a40  0801a31c  00031a40  2**5
                  ALLOC
 10 ._user_heap_stack 00001804  2000699c  0801a31c  0003699c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031a34  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002082d  00000000  00000000  00031a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d62  00000000  00000000  00052291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00056ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  00057f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f370  00000000  00000000  00059850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ceeb  00000000  00000000  00088bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112dba  00000000  00000000  000a5aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b8865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ddc  00000000  00000000  001b88b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001075f  00000000  00000000  001bc694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20001a40 	.word	0x20001a40
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080104ac 	.word	0x080104ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20001a44 	.word	0x20001a44
 80001fc:	080104ac 	.word	0x080104ac

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b9c6 	b.w	8000f7c <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f858 	bl	8000cac <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_f2lz>:
 8000c08:	ee07 0a90 	vmov	s15, r0
 8000c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c14:	d401      	bmi.n	8000c1a <__aeabi_f2lz+0x12>
 8000c16:	f000 b80b 	b.w	8000c30 <__aeabi_f2ulz>
 8000c1a:	eef1 7a67 	vneg.f32	s15, s15
 8000c1e:	b508      	push	{r3, lr}
 8000c20:	ee17 0a90 	vmov	r0, s15
 8000c24:	f000 f804 	bl	8000c30 <__aeabi_f2ulz>
 8000c28:	4240      	negs	r0, r0
 8000c2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2e:	bd08      	pop	{r3, pc}

08000c30 <__aeabi_f2ulz>:
 8000c30:	b5d0      	push	{r4, r6, r7, lr}
 8000c32:	f7ff fca1 	bl	8000578 <__aeabi_f2d>
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__aeabi_f2ulz+0x38>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4606      	mov	r6, r0
 8000c3c:	460f      	mov	r7, r1
 8000c3e:	f7ff fcf3 	bl	8000628 <__aeabi_dmul>
 8000c42:	f000 f99d 	bl	8000f80 <__aeabi_d2uiz>
 8000c46:	4604      	mov	r4, r0
 8000c48:	f7ff fc74 	bl	8000534 <__aeabi_ui2d>
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <__aeabi_f2ulz+0x3c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f7ff fcea 	bl	8000628 <__aeabi_dmul>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	4630      	mov	r0, r6
 8000c5a:	4639      	mov	r1, r7
 8000c5c:	f7ff fb2c 	bl	80002b8 <__aeabi_dsub>
 8000c60:	f000 f98e 	bl	8000f80 <__aeabi_d2uiz>
 8000c64:	4621      	mov	r1, r4
 8000c66:	bdd0      	pop	{r4, r6, r7, pc}
 8000c68:	3df00000 	.word	0x3df00000
 8000c6c:	41f00000 	.word	0x41f00000

08000c70 <__aeabi_d2ulz>:
 8000c70:	b5d0      	push	{r4, r6, r7, lr}
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__aeabi_d2ulz+0x34>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	4606      	mov	r6, r0
 8000c78:	460f      	mov	r7, r1
 8000c7a:	f7ff fcd5 	bl	8000628 <__aeabi_dmul>
 8000c7e:	f000 f97f 	bl	8000f80 <__aeabi_d2uiz>
 8000c82:	4604      	mov	r4, r0
 8000c84:	f7ff fc56 	bl	8000534 <__aeabi_ui2d>
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <__aeabi_d2ulz+0x38>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f7ff fccc 	bl	8000628 <__aeabi_dmul>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4630      	mov	r0, r6
 8000c96:	4639      	mov	r1, r7
 8000c98:	f7ff fb0e 	bl	80002b8 <__aeabi_dsub>
 8000c9c:	f000 f970 	bl	8000f80 <__aeabi_d2uiz>
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca4:	3df00000 	.word	0x3df00000
 8000ca8:	41f00000 	.word	0x41f00000

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__aeabi_d2uiz>:
 8000f80:	004a      	lsls	r2, r1, #1
 8000f82:	d211      	bcs.n	8000fa8 <__aeabi_d2uiz+0x28>
 8000f84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f88:	d211      	bcs.n	8000fae <__aeabi_d2uiz+0x2e>
 8000f8a:	d50d      	bpl.n	8000fa8 <__aeabi_d2uiz+0x28>
 8000f8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f94:	d40e      	bmi.n	8000fb4 <__aeabi_d2uiz+0x34>
 8000f96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa6:	4770      	bx	lr
 8000fa8:	f04f 0000 	mov.w	r0, #0
 8000fac:	4770      	bx	lr
 8000fae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fb2:	d102      	bne.n	8000fba <__aeabi_d2uiz+0x3a>
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b500      	push	{lr}
 8000fc2:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc4:	2244      	movs	r2, #68	; 0x44
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	a805      	add	r0, sp, #20
 8000fca:	f00c f9c9 	bl	800d360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fce:	2214      	movs	r2, #20
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4668      	mov	r0, sp
 8000fd4:	f00c f9c4 	bl	800d360 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 fd91 	bl	8001b00 <HAL_PWREx_ControlVoltageScaling>
 8000fde:	b108      	cbz	r0, 8000fe4 <SystemClock_Config+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <SystemClock_Config+0x22>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000fe4:	2322      	movs	r3, #34	; 0x22
 8000fe6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fec:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000ff6:	221e      	movs	r2, #30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001000:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001004:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001008:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100a:	f000 fe6f 	bl	8001cec <HAL_RCC_OscConfig>
 800100e:	b108      	cbz	r0, 8001014 <SystemClock_Config+0x54>
 8001010:	b672      	cpsid	i
  while (1)
 8001012:	e7fe      	b.n	8001012 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2303      	movs	r3, #3
 8001016:	220f      	movs	r2, #15
 8001018:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	9002      	str	r0, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001026:	2105      	movs	r1, #5
 8001028:	4668      	mov	r0, sp
 800102a:	f001 f907 	bl	800223c <HAL_RCC_ClockConfig>
 800102e:	b108      	cbz	r0, 8001034 <SystemClock_Config+0x74>
 8001030:	b672      	cpsid	i
  while (1)
 8001032:	e7fe      	b.n	8001032 <SystemClock_Config+0x72>
}
 8001034:	b017      	add	sp, #92	; 0x5c
 8001036:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800103c <main>:
{
 800103c:	b500      	push	{lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4c63      	ldr	r4, [pc, #396]	; (80011cc <main+0x190>)
{
 8001040:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001042:	f000 facf 	bl	80015e4 <HAL_Init>
  SystemClock_Config();
 8001046:	f7ff ffbb 	bl	8000fc0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	2214      	movs	r2, #20
 800104c:	2100      	movs	r1, #0
 800104e:	a807      	add	r0, sp, #28
 8001050:	f00c f986 	bl	800d360 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001054:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800105c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800106e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001080:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	9303      	str	r3, [sp, #12]
 8001088:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001092:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	9304      	str	r3, [sp, #16]
 800109a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800109e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80010a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80010a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010aa:	9305      	str	r3, [sp, #20]
 80010ac:	9b05      	ldr	r3, [sp, #20]
  HAL_PWREx_EnableVddIO2();
 80010ae:	f000 fd89 	bl	8001bc4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010b4:	4846      	ldr	r0, [pc, #280]	; (80011d0 <main+0x194>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 80010bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  huart3.Instance = USART3;
 80010be:	4c45      	ldr	r4, [pc, #276]	; (80011d4 <main+0x198>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010ce:	f000 fc61 	bl	8001994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	4840      	ldr	r0, [pc, #256]	; (80011d8 <main+0x19c>)
 80010d6:	2140      	movs	r1, #64	; 0x40
 80010d8:	f000 fc5c 	bl	8001994 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e6:	e9cd 0307 	strd	r0, r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ea:	a907      	add	r1, sp, #28
 80010ec:	483b      	ldr	r0, [pc, #236]	; (80011dc <main+0x1a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f000 fb75 	bl	80017e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	4835      	ldr	r0, [pc, #212]	; (80011d0 <main+0x194>)
 80010fc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f000 fb6b 	bl	80017e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800110a:	2320      	movs	r3, #32
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800110c:	4832      	ldr	r0, [pc, #200]	; (80011d8 <main+0x19c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001110:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001116:	f000 fb63 	bl	80017e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800111a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800111c:	a907      	add	r1, sp, #28
 800111e:	482e      	ldr	r0, [pc, #184]	; (80011d8 <main+0x19c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001128:	f000 fb5a 	bl	80017e0 <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 800112c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80011ec <main+0x1b0>
  huart3.Init.Parity = UART_PARITY_NONE;
 8001130:	6125      	str	r5, [r4, #16]
  huart3.Init.BaudRate = 115200;
 8001132:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001136:	e9c4 c300 	strd	ip, r3, [r4]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800113a:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 800113c:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800113e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	e9c4 3505 	strd	r3, r5, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	e9c4 5507 	strd	r5, r5, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114a:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800114e:	f001 ffc8 	bl	80030e2 <HAL_UART_Init>
 8001152:	4601      	mov	r1, r0
 8001154:	b108      	cbz	r0, 800115a <main+0x11e>
 8001156:	b672      	cpsid	i
  while (1)
 8001158:	e7fe      	b.n	8001158 <main+0x11c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115a:	4620      	mov	r0, r4
 800115c:	f002 f82f 	bl	80031be <HAL_UARTEx_SetTxFifoThreshold>
 8001160:	4601      	mov	r1, r0
 8001162:	b108      	cbz	r0, 8001168 <main+0x12c>
 8001164:	b672      	cpsid	i
  while (1)
 8001166:	e7fe      	b.n	8001166 <main+0x12a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001168:	4620      	mov	r0, r4
 800116a:	f002 f84c 	bl	8003206 <HAL_UARTEx_SetRxFifoThreshold>
 800116e:	b108      	cbz	r0, 8001174 <main+0x138>
 8001170:	b672      	cpsid	i
  while (1)
 8001172:	e7fe      	b.n	8001172 <main+0x136>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001174:	4620      	mov	r0, r4
 8001176:	f002 f807 	bl	8003188 <HAL_UARTEx_DisableFifoMode>
 800117a:	4603      	mov	r3, r0
 800117c:	b108      	cbz	r0, 8001182 <main+0x146>
 800117e:	b672      	cpsid	i
  while (1)
 8001180:	e7fe      	b.n	8001180 <main+0x144>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001182:	4817      	ldr	r0, [pc, #92]	; (80011e0 <main+0x1a4>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001184:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001188:	2206      	movs	r2, #6
 800118a:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800118e:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001190:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001194:	e9c0 630b 	strd	r6, r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001198:	e9c0 2606 	strd	r2, r6, [r0, #24]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800119c:	6286      	str	r6, [r0, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800119e:	f000 fbfe 	bl	800199e <HAL_PCD_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b108      	cbz	r0, 80011aa <main+0x16e>
 80011a6:	b672      	cpsid	i
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <main+0x16c>
  hcrc.Instance = CRC;
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <main+0x1a8>)
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <main+0x1ac>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011ae:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011b0:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Instance = CRC;
 80011b4:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011b6:	6206      	str	r6, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011b8:	f000 fab4 	bl	8001724 <HAL_CRC_Init>
 80011bc:	b108      	cbz	r0, 80011c2 <main+0x186>
 80011be:	b672      	cpsid	i
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <main+0x184>
  MX_X_CUBE_AI_Init();
 80011c2:	f003 fb7b 	bl	80048bc <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 80011c6:	f003 fb80 	bl	80048ca <MX_X_CUBE_AI_Process>
  while (1)
 80011ca:	e7fc      	b.n	80011c6 <main+0x18a>
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	2000201c 	.word	0x2000201c
 80011d8:	48001800 	.word	0x48001800
 80011dc:	48000800 	.word	0x48000800
 80011e0:	20001b10 	.word	0x20001b10
 80011e4:	20001a5c 	.word	0x20001a5c
 80011e8:	40023000 	.word	0x40023000
 80011ec:	40004800 	.word	0x40004800

080011f0 <MX_LPUART1_UART_Init>:
{
 80011f0:	b510      	push	{r4, lr}
  hlpuart1.Init.BaudRate = 115200;
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
  hlpuart1.Instance = LPUART1;
 80011f4:	4c17      	ldr	r4, [pc, #92]	; (8001254 <MX_LPUART1_UART_Init+0x64>)
  hlpuart1.Init.BaudRate = 115200;
 80011f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011fa:	e9c4 2300 	strd	r2, r3, [r4]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 80011fe:	210c      	movs	r1, #12
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001200:	2300      	movs	r3, #0
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001202:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001206:	4620      	mov	r0, r4
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001208:	e9c4 1205 	strd	r1, r2, [r4, #20]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800120c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001210:	e9c4 3308 	strd	r3, r3, [r4, #32]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001214:	6123      	str	r3, [r4, #16]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001216:	62a3      	str	r3, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001218:	6663      	str	r3, [r4, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800121a:	f001 ff62 	bl	80030e2 <HAL_UART_Init>
 800121e:	4601      	mov	r1, r0
 8001220:	b108      	cbz	r0, 8001226 <MX_LPUART1_UART_Init+0x36>
 8001222:	b672      	cpsid	i
  while (1)
 8001224:	e7fe      	b.n	8001224 <MX_LPUART1_UART_Init+0x34>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001226:	4620      	mov	r0, r4
 8001228:	f001 ffc9 	bl	80031be <HAL_UARTEx_SetTxFifoThreshold>
 800122c:	4601      	mov	r1, r0
 800122e:	b108      	cbz	r0, 8001234 <MX_LPUART1_UART_Init+0x44>
 8001230:	b672      	cpsid	i
  while (1)
 8001232:	e7fe      	b.n	8001232 <MX_LPUART1_UART_Init+0x42>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001234:	4620      	mov	r0, r4
 8001236:	f001 ffe6 	bl	8003206 <HAL_UARTEx_SetRxFifoThreshold>
 800123a:	b108      	cbz	r0, 8001240 <MX_LPUART1_UART_Init+0x50>
 800123c:	b672      	cpsid	i
  while (1)
 800123e:	e7fe      	b.n	800123e <MX_LPUART1_UART_Init+0x4e>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001240:	4620      	mov	r0, r4
 8001242:	f001 ffa1 	bl	8003188 <HAL_UARTEx_DisableFifoMode>
 8001246:	b108      	cbz	r0, 800124c <MX_LPUART1_UART_Init+0x5c>
 8001248:	b672      	cpsid	i
  while (1)
 800124a:	e7fe      	b.n	800124a <MX_LPUART1_UART_Init+0x5a>
}
 800124c:	bd10      	pop	{r4, pc}
 800124e:	bf00      	nop
 8001250:	40008000 	.word	0x40008000
 8001254:	20001a80 	.word	0x20001a80

08001258 <Error_Handler>:
 8001258:	b672      	cpsid	i
  while (1)
 800125a:	e7fe      	b.n	800125a <Error_Handler+0x2>

0800125c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_MspInit+0x2c>)
 800125e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001260:	f042 0201 	orr.w	r2, r2, #1
 8001264:	661a      	str	r2, [r3, #96]	; 0x60
 8001266:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001268:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	f002 0201 	and.w	r2, r2, #1
 800126e:	9200      	str	r2, [sp, #0]
 8001270:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001274:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001278:	659a      	str	r2, [r3, #88]	; 0x58
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001284:	b002      	add	sp, #8
 8001286:	4770      	bx	lr
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800128c:	6802      	ldr	r2, [r0, #0]
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_CRC_MspInit+0x24>)
 8001290:	429a      	cmp	r2, r3
{
 8001292:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001294:	d10a      	bne.n	80012ac <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001296:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800129a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800129c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012a0:	649a      	str	r2, [r3, #72]	; 0x48
 80012a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012ac:	b002      	add	sp, #8
 80012ae:	4770      	bx	lr
 80012b0:	40023000 	.word	0x40023000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	b0b1      	sub	sp, #196	; 0xc4
 80012b8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	2214      	movs	r2, #20
 80012bc:	2100      	movs	r1, #0
 80012be:	a806      	add	r0, sp, #24
 80012c0:	f00c f84e 	bl	800d360 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	2294      	movs	r2, #148	; 0x94
 80012c6:	2100      	movs	r1, #0
 80012c8:	a80b      	add	r0, sp, #44	; 0x2c
 80012ca:	f00c f849 	bl	800d360 <memset>
  if(huart->Instance==LPUART1)
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d13f      	bne.n	8001356 <HAL_UART_MspInit+0xa2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80012d6:	2320      	movs	r3, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80012da:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	f001 f9c4 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	b108      	cbz	r0, 80012e6 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80012e2:	f7ff ffb9 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012e6:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <HAL_UART_MspInit+0x100>)
 80012e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80012f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012f2:	f002 0201 	and.w	r2, r2, #1
 80012f6:	9201      	str	r2, [sp, #4]
 80012f8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012fc:	f042 0202 	orr.w	r2, r2, #2
 8001300:	64da      	str	r2, [r3, #76]	; 0x4c
 8001302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001304:	f002 0202 	and.w	r2, r2, #2
 8001308:	9202      	str	r2, [sp, #8]
 800130a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800130c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001312:	64da      	str	r2, [r3, #76]	; 0x4c
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	9303      	str	r3, [sp, #12]
 800131c:	9b03      	ldr	r3, [sp, #12]
    /**LPUART1 GPIO Configuration
    PB1     ------> LPUART1_RTS
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800131e:	2402      	movs	r4, #2
    HAL_PWREx_EnableVddIO2();
 8001320:	f000 fc50 	bl	8001bc4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	4824      	ldr	r0, [pc, #144]	; (80013b8 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800132a:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	e9cd 4406 	strd	r4, r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	e9cd 7608 	strd	r7, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001336:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f000 fa52 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800133c:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	e9cd 3406 	strd	r3, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	e9cd 7608 	strd	r7, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001348:	481c      	ldr	r0, [pc, #112]	; (80013bc <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800134a:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f000 fa47 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001352:	b031      	add	sp, #196	; 0xc4
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART3)
 8001356:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <HAL_UART_MspInit+0x10c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d1fa      	bne.n	8001352 <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800135c:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001360:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001362:	f001 f981 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 8001366:	b108      	cbz	r0, 800136c <HAL_UART_MspInit+0xb8>
      Error_Handler();
 8001368:	f7ff ff76 	bl	8001258 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0x100>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	4815      	ldr	r0, [pc, #84]	; (80013c4 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001372:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001376:	659a      	str	r2, [r3, #88]	; 0x58
 8001378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800137a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800137e:	9204      	str	r2, [sp, #16]
 8001380:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001384:	f042 0208 	orr.w	r2, r2, #8
 8001388:	64da      	str	r2, [r3, #76]	; 0x4c
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	9305      	str	r3, [sp, #20]
 8001392:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001398:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e9cd 1308 	strd	r1, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a6:	2307      	movs	r3, #7
 80013a8:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013aa:	a906      	add	r1, sp, #24
 80013ac:	e7cf      	b.n	800134e <HAL_UART_MspInit+0x9a>
 80013ae:	bf00      	nop
 80013b0:	40008000 	.word	0x40008000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48000400 	.word	0x48000400
 80013bc:	48001800 	.word	0x48001800
 80013c0:	40004800 	.word	0x40004800
 80013c4:	48000c00 	.word	0x48000c00

080013c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013c8:	b530      	push	{r4, r5, lr}
 80013ca:	b0af      	sub	sp, #188	; 0xbc
 80013cc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	2214      	movs	r2, #20
 80013d0:	2100      	movs	r1, #0
 80013d2:	a804      	add	r0, sp, #16
 80013d4:	f00b ffc4 	bl	800d360 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	2294      	movs	r2, #148	; 0x94
 80013da:	2100      	movs	r1, #0
 80013dc:	a809      	add	r0, sp, #36	; 0x24
 80013de:	f00b ffbf 	bl	800d360 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e8:	d147      	bne.n	800147a <HAL_PCD_MspInit+0xb2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ee:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013f0:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f2:	f001 f939 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 80013f6:	b108      	cbz	r0, 80013fc <HAL_PCD_MspInit+0x34>
    {
      Error_Handler();
 80013f8:	f7ff ff2e 	bl	8001258 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4c21      	ldr	r4, [pc, #132]	; (8001484 <HAL_PCD_MspInit+0xbc>)
 80013fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001406:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	9301      	str	r3, [sp, #4]
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2500      	movs	r5, #0
 800141c:	2303      	movs	r3, #3
 800141e:	e9cd 5306 	strd	r5, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001424:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800142a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f000 f9d8 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001430:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001434:	a904      	add	r1, sp, #16
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001440:	f000 f9ce 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001444:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800144a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800144c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	9b02      	ldr	r3, [sp, #8]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001458:	00d9      	lsls	r1, r3, #3
 800145a:	d410      	bmi.n	800147e <HAL_PCD_MspInit+0xb6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	65a3      	str	r3, [r4, #88]	; 0x58
 8001464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	9303      	str	r3, [sp, #12]
 800146c:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 800146e:	f000 fba1 	bl	8001bb4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001472:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001478:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800147a:	b02f      	add	sp, #188	; 0xbc
 800147c:	bd30      	pop	{r4, r5, pc}
      HAL_PWREx_EnableVddUSB();
 800147e:	f000 fb99 	bl	8001bb4 <HAL_PWREx_EnableVddUSB>
}
 8001482:	e7fa      	b.n	800147a <HAL_PCD_MspInit+0xb2>
 8001484:	40021000 	.word	0x40021000

08001488 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler>

0800148a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler>

0800148c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler>

0800148e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler>

08001490 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler>

08001492 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001498:	f000 b8b4 	b.w	8001604 <HAL_IncTick>

0800149c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800149c:	2001      	movs	r0, #1
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a2:	f00b fd47 	bl	800cf34 <__errno>
 80014a6:	2316      	movs	r3, #22
 80014a8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80014aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ae:	bd08      	pop	{r3, pc}

080014b0 <_exit>:

void _exit (int status)
{
 80014b0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80014b2:	f00b fd3f 	bl	800cf34 <__errno>
 80014b6:	2316      	movs	r3, #22
 80014b8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80014ba:	e7fe      	b.n	80014ba <_exit+0xa>

080014bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014bc:	b570      	push	{r4, r5, r6, lr}
 80014be:	460d      	mov	r5, r1
 80014c0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	460e      	mov	r6, r1
 80014c4:	1b73      	subs	r3, r6, r5
 80014c6:	429c      	cmp	r4, r3
 80014c8:	dc01      	bgt.n	80014ce <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80014ca:	4620      	mov	r0, r4
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80014ce:	f3af 8000 	nop.w
 80014d2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	e7f5      	b.n	80014c4 <_read+0x8>

080014d8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014dc:	4770      	bx	lr

080014de <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80014de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e2:	604b      	str	r3, [r1, #4]
  return 0;
}
 80014e4:	2000      	movs	r0, #0
 80014e6:	4770      	bx	lr

080014e8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80014e8:	2001      	movs	r0, #1
 80014ea:	4770      	bx	lr

080014ec <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80014ec:	2000      	movs	r0, #0
 80014ee:	4770      	bx	lr

080014f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <_sbrk+0x30>)
 80014f2:	6811      	ldr	r1, [r2, #0]
{
 80014f4:	b510      	push	{r4, lr}
 80014f6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80014f8:	b909      	cbnz	r1, 80014fe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80014fa:	490a      	ldr	r1, [pc, #40]	; (8001524 <_sbrk+0x34>)
 80014fc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	6810      	ldr	r0, [r2, #0]
 8001500:	4909      	ldr	r1, [pc, #36]	; (8001528 <_sbrk+0x38>)
 8001502:	4c0a      	ldr	r4, [pc, #40]	; (800152c <_sbrk+0x3c>)
 8001504:	4403      	add	r3, r0
 8001506:	1b09      	subs	r1, r1, r4
 8001508:	428b      	cmp	r3, r1
 800150a:	d906      	bls.n	800151a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800150c:	f00b fd12 	bl	800cf34 <__errno>
 8001510:	230c      	movs	r3, #12
 8001512:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001518:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800151a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800151c:	e7fc      	b.n	8001518 <_sbrk+0x28>
 800151e:	bf00      	nop
 8001520:	200020ac 	.word	0x200020ac
 8001524:	200069a0 	.word	0x200069a0
 8001528:	200a0000 	.word	0x200a0000
 800152c:	00001000 	.word	0x00001000

08001530 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <SystemInit+0x10>)
 8001532:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001548:	f7ff fff2 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f00b feaf 	bl	800d2d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001576:	f7ff fd61 	bl	800103c <main>

0800157a <LoopForever>:

LoopForever:
    b LoopForever
 800157a:	e7fe      	b.n	800157a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20001a34 	.word	0x20001a34
  ldr r2, =_sidata
 8001588:	080188e8 	.word	0x080188e8
  ldr r2, =_sbss
 800158c:	20001a40 	.word	0x20001a40
  ldr r4, =_ebss
 8001590:	2000699c 	.word	0x2000699c

08001594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_IRQHandler>
	...

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_InitTick+0x40>)
{
 800159c:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800159e:	7818      	ldrb	r0, [r3, #0]
 80015a0:	b908      	cbnz	r0, 80015a6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015a4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015a6:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_InitTick+0x44>)
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80015b0:	6810      	ldr	r0, [r2, #0]
 80015b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80015b6:	f000 f8a1 	bl	80016fc <HAL_SYSTICK_Config>
 80015ba:	4604      	mov	r4, r0
 80015bc:	2800      	cmp	r0, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c0:	2d0f      	cmp	r5, #15
 80015c2:	d8ee      	bhi.n	80015a2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	4602      	mov	r2, r0
 80015c6:	4629      	mov	r1, r5
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015cc:	f000 f864 	bl	8001698 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_InitTick+0x48>)
 80015d2:	4620      	mov	r0, r4
 80015d4:	601d      	str	r5, [r3, #0]
  return status;
 80015d6:	e7e5      	b.n	80015a4 <HAL_InitTick+0xc>
 80015d8:	20000004 	.word	0x20000004
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008

080015e4 <HAL_Init>:
{
 80015e4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e6:	2003      	movs	r0, #3
 80015e8:	f000 f844 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff ffd3 	bl	8001598 <HAL_InitTick>
 80015f2:	4604      	mov	r4, r0
 80015f4:	b918      	cbnz	r0, 80015fe <HAL_Init+0x1a>
    HAL_MspInit();
 80015f6:	f7ff fe31 	bl	800125c <HAL_MspInit>
}
 80015fa:	4620      	mov	r0, r4
 80015fc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80015fe:	2401      	movs	r4, #1
 8001600:	e7fb      	b.n	80015fa <HAL_Init+0x16>
	...

08001604 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_IncTick+0x10>)
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_IncTick+0x14>)
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	440b      	add	r3, r1
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200020b0 	.word	0x200020b0
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800161c:	4b01      	ldr	r3, [pc, #4]	; (8001624 <HAL_GetTick+0x8>)
 800161e:	6818      	ldr	r0, [r3, #0]
}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200020b0 	.word	0x200020b0

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b538      	push	{r3, r4, r5, lr}
 800162a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fff6 	bl	800161c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001630:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001632:	bf1c      	itt	ne
 8001634:	4b05      	ldrne	r3, [pc, #20]	; (800164c <HAL_Delay+0x24>)
 8001636:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001638:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800163a:	bf18      	it	ne
 800163c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163e:	f7ff ffed 	bl	800161c <HAL_GetTick>
 8001642:	1b43      	subs	r3, r0, r5
 8001644:	42a3      	cmp	r3, r4
 8001646:	d3fa      	bcc.n	800163e <HAL_Delay+0x16>
  {
  }
}
 8001648:	bd38      	pop	{r3, r4, r5, pc}
 800164a:	bf00      	nop
 800164c:	20000004 	.word	0x20000004

08001650 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8001650:	4800      	ldr	r0, [pc, #0]	; (8001654 <HAL_GetHalVersion+0x4>)
 8001652:	4770      	bx	lr
 8001654:	010d0300 	.word	0x010d0300

08001658 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001658:	4b01      	ldr	r3, [pc, #4]	; (8001660 <HAL_GetREVID+0x8>)
 800165a:	6818      	ldr	r0, [r3, #0]
}
 800165c:	0c00      	lsrs	r0, r0, #16
 800165e:	4770      	bx	lr
 8001660:	e0042000 	.word	0xe0042000

08001664 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <HAL_GetDEVID+0xc>)
 8001666:	6818      	ldr	r0, [r3, #0]
}
 8001668:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e0042000 	.word	0xe0042000

08001674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001676:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001678:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001684:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001690:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169a:	b530      	push	{r4, r5, lr}
 800169c:	68dc      	ldr	r4, [r3, #12]
 800169e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	2d04      	cmp	r5, #4
 80016aa:	bf28      	it	cs
 80016ac:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b4:	bf8c      	ite	hi
 80016b6:	3c03      	subhi	r4, #3
 80016b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ba:	fa03 f505 	lsl.w	r5, r3, r5
 80016be:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c2:	40a3      	lsls	r3, r4
 80016c4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80016ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	bfac      	ite	ge
 80016d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	4a08      	ldrlt	r2, [pc, #32]	; (80016f8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	bfb8      	it	lt
 80016de:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	bfaa      	itet	ge
 80016e6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016f0:	bd30      	pop	{r4, r5, pc}
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	e000ed14 	.word	0xe000ed14

080016fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	3801      	subs	r0, #1
 80016fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001702:	d20b      	bcs.n	800171c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001704:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	21f0      	movs	r1, #240	; 0xf0
 800170e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001712:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001714:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001716:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001718:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800171c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001724:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001726:	4604      	mov	r4, r0
 8001728:	b908      	cbnz	r0, 800172e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800172a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800172c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800172e:	7f43      	ldrb	r3, [r0, #29]
 8001730:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001734:	b913      	cbnz	r3, 800173c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001736:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001738:	f7ff fda8 	bl	800128c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800173c:	2302      	movs	r3, #2
 800173e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001740:	7923      	ldrb	r3, [r4, #4]
 8001742:	b9e3      	cbnz	r3, 800177e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <HAL_CRC_Init+0x70>)
 8001748:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	f022 0218 	bic.w	r2, r2, #24
 8001750:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001752:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001754:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001756:	b9d2      	cbnz	r2, 800178e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800175c:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	6961      	ldr	r1, [r4, #20]
 8001762:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69a1      	ldr	r1, [r4, #24]
 800176e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001776:	2301      	movs	r3, #1
 8001778:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800177a:	2000      	movs	r0, #0
 800177c:	e7d6      	b.n	800172c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800177e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001782:	4620      	mov	r0, r4
 8001784:	f000 f808 	bl	8001798 <HAL_CRCEx_Polynomial_Set>
 8001788:	2800      	cmp	r0, #0
 800178a:	d0e2      	beq.n	8001752 <HAL_CRC_Init+0x2e>
 800178c:	e7cd      	b.n	800172a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800178e:	6922      	ldr	r2, [r4, #16]
 8001790:	e7e4      	b.n	800175c <HAL_CRC_Init+0x38>
 8001792:	bf00      	nop
 8001794:	04c11db7 	.word	0x04c11db7

08001798 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001798:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800179a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800179c:	3b01      	subs	r3, #1
 800179e:	d31c      	bcc.n	80017da <HAL_CRCEx_Polynomial_Set+0x42>
 80017a0:	fa21 f403 	lsr.w	r4, r1, r3
 80017a4:	07e4      	lsls	r4, r4, #31
 80017a6:	d5f9      	bpl.n	800179c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80017a8:	2a10      	cmp	r2, #16
 80017aa:	d012      	beq.n	80017d2 <HAL_CRCEx_Polynomial_Set+0x3a>
 80017ac:	d804      	bhi.n	80017b8 <HAL_CRCEx_Polynomial_Set+0x20>
 80017ae:	b13a      	cbz	r2, 80017c0 <HAL_CRCEx_Polynomial_Set+0x28>
 80017b0:	2a08      	cmp	r2, #8
 80017b2:	d010      	beq.n	80017d6 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80017b4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80017b6:	e00b      	b.n	80017d0 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80017b8:	2a18      	cmp	r2, #24
 80017ba:	d1fb      	bne.n	80017b4 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80017bc:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80017be:	d8f9      	bhi.n	80017b4 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017c0:	6800      	ldr	r0, [r0, #0]
 80017c2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80017c4:	6883      	ldr	r3, [r0, #8]
 80017c6:	f023 0318 	bic.w	r3, r3, #24
 80017ca:	431a      	orrs	r2, r3
 80017cc:	6082      	str	r2, [r0, #8]
 80017ce:	2000      	movs	r0, #0
}
 80017d0:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80017d2:	2b07      	cmp	r3, #7
 80017d4:	e7f3      	b.n	80017be <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	e7f1      	b.n	80017be <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d1ea      	bne.n	80017b4 <HAL_CRCEx_Polynomial_Set+0x1c>
 80017de:	e7ef      	b.n	80017c0 <HAL_CRCEx_Polynomial_Set+0x28>

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001990 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e8:	4c67      	ldr	r4, [pc, #412]	; (8001988 <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 80017ea:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	680a      	ldr	r2, [r1, #0]
 80017ee:	fa32 f503 	lsrs.w	r5, r2, r3
 80017f2:	d102      	bne.n	80017fa <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80017f4:	b003      	add	sp, #12
 80017f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017fa:	f04f 0e01 	mov.w	lr, #1
 80017fe:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001802:	ea1e 0202 	ands.w	r2, lr, r2
 8001806:	f000 80ae 	beq.w	8001966 <HAL_GPIO_Init+0x186>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180a:	684e      	ldr	r6, [r1, #4]
 800180c:	f006 0503 	and.w	r5, r6, #3
 8001810:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001814:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001818:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800181a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800181e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001820:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001824:	d834      	bhi.n	8001890 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8001826:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001828:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800182c:	68cf      	ldr	r7, [r1, #12]
 800182e:	fa07 f708 	lsl.w	r7, r7, r8
 8001832:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001836:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001838:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800183a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183e:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001842:	409f      	lsls	r7, r3
 8001844:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001848:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800184a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800184c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001850:	688f      	ldr	r7, [r1, #8]
 8001852:	fa07 f708 	lsl.w	r7, r7, r8
 8001856:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185a:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 800185c:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	d119      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 8001860:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001864:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001868:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800186c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001870:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001874:	f04f 0e0f 	mov.w	lr, #15
 8001878:	fa0e fe0b 	lsl.w	lr, lr, fp
 800187c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001880:	690f      	ldr	r7, [r1, #16]
 8001882:	fa07 f70b 	lsl.w	r7, r7, fp
 8001886:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 800188a:	f8ca 7020 	str.w	r7, [sl, #32]
 800188e:	e001      	b.n	8001894 <HAL_GPIO_Init+0xb4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001890:	2d03      	cmp	r5, #3
 8001892:	d1da      	bne.n	800184a <HAL_GPIO_Init+0x6a>
      temp = GPIOx->MODER;
 8001894:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001896:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800189a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189e:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a0:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80018a4:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a6:	d05e      	beq.n	8001966 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80018ac:	f045 0501 	orr.w	r5, r5, #1
 80018b0:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80018b4:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80018b8:	f023 0703 	bic.w	r7, r3, #3
 80018bc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018c0:	f005 0501 	and.w	r5, r5, #1
 80018c4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80018c8:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ca:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80018d0:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d4:	f04f 0e0f 	mov.w	lr, #15
 80018d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80018dc:	fa0e f50c 	lsl.w	r5, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e4:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e8:	d03f      	beq.n	800196a <HAL_GPIO_Init+0x18a>
 80018ea:	4d28      	ldr	r5, [pc, #160]	; (800198c <HAL_GPIO_Init+0x1ac>)
 80018ec:	42a8      	cmp	r0, r5
 80018ee:	d03e      	beq.n	800196e <HAL_GPIO_Init+0x18e>
 80018f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f4:	42a8      	cmp	r0, r5
 80018f6:	d03c      	beq.n	8001972 <HAL_GPIO_Init+0x192>
 80018f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018fc:	42a8      	cmp	r0, r5
 80018fe:	d03a      	beq.n	8001976 <HAL_GPIO_Init+0x196>
 8001900:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001904:	42a8      	cmp	r0, r5
 8001906:	d038      	beq.n	800197a <HAL_GPIO_Init+0x19a>
 8001908:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800190c:	42a8      	cmp	r0, r5
 800190e:	d036      	beq.n	800197e <HAL_GPIO_Init+0x19e>
 8001910:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001914:	42a8      	cmp	r0, r5
 8001916:	d034      	beq.n	8001982 <HAL_GPIO_Init+0x1a2>
 8001918:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800191c:	42a8      	cmp	r0, r5
 800191e:	bf0c      	ite	eq
 8001920:	2507      	moveq	r5, #7
 8001922:	2508      	movne	r5, #8
 8001924:	fa05 f50c 	lsl.w	r5, r5, ip
 8001928:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800192c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 800192e:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001930:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001932:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001936:	bf0c      	ite	eq
 8001938:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800193a:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 800193c:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800193e:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001940:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001944:	bf0c      	ite	eq
 8001946:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001948:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 800194a:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 800194c:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800194e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001952:	bf0c      	ite	eq
 8001954:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001956:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8001958:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 800195a:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800195c:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 800195e:	bf54      	ite	pl
 8001960:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001962:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8001964:	6025      	str	r5, [r4, #0]
    position++;
 8001966:	3301      	adds	r3, #1
 8001968:	e740      	b.n	80017ec <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196a:	2500      	movs	r5, #0
 800196c:	e7da      	b.n	8001924 <HAL_GPIO_Init+0x144>
 800196e:	2501      	movs	r5, #1
 8001970:	e7d8      	b.n	8001924 <HAL_GPIO_Init+0x144>
 8001972:	2502      	movs	r5, #2
 8001974:	e7d6      	b.n	8001924 <HAL_GPIO_Init+0x144>
 8001976:	2503      	movs	r5, #3
 8001978:	e7d4      	b.n	8001924 <HAL_GPIO_Init+0x144>
 800197a:	2504      	movs	r5, #4
 800197c:	e7d2      	b.n	8001924 <HAL_GPIO_Init+0x144>
 800197e:	2505      	movs	r5, #5
 8001980:	e7d0      	b.n	8001924 <HAL_GPIO_Init+0x144>
 8001982:	2506      	movs	r5, #6
 8001984:	e7ce      	b.n	8001924 <HAL_GPIO_Init+0x144>
 8001986:	bf00      	nop
 8001988:	40010400 	.word	0x40010400
 800198c:	48000400 	.word	0x48000400
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001994:	b10a      	cbz	r2, 800199a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001996:	6181      	str	r1, [r0, #24]
 8001998:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800199c:	4770      	bx	lr

0800199e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800199e:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019a0:	4604      	mov	r4, r0
{
 80019a2:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80019a4:	b360      	cbz	r0, 8001a00 <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019a6:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 80019aa:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019b0:	b91b      	cbnz	r3, 80019ba <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019b2:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019b6:	f7ff fd07 	bl	80013c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ba:	2303      	movs	r3, #3
 80019bc:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019c2:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019c4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 80019c8:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 80019cc:	bf08      	it	eq
 80019ce:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80019d0:	f001 fc78 	bl	80032c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d6:	466e      	mov	r6, sp
 80019d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80019da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80019de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019e2:	e886 0003 	stmia.w	r6, {r0, r1}
 80019e6:	4625      	mov	r5, r4
 80019e8:	1d27      	adds	r7, r4, #4
 80019ea:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80019ee:	f855 0b10 	ldr.w	r0, [r5], #16
 80019f2:	f001 fc2d 	bl	8003250 <USB_CoreInit>
 80019f6:	4606      	mov	r6, r0
 80019f8:	b120      	cbz	r0, 8001a04 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019fa:	2302      	movs	r3, #2
 80019fc:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a00:	2501      	movs	r5, #1
 8001a02:	e054      	b.n	8001aae <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a04:	4601      	mov	r1, r0
 8001a06:	6820      	ldr	r0, [r4, #0]
 8001a08:	f001 fc62 	bl	80032d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a12:	2624      	movs	r6, #36	; 0x24
 8001a14:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a18:	4601      	mov	r1, r0
 8001a1a:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1c:	4594      	cmp	ip, r2
 8001a1e:	f100 0001 	add.w	r0, r0, #1
 8001a22:	d81c      	bhi.n	8001a5e <HAL_PCD_Init+0xc0>
 8001a24:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a26:	2624      	movs	r6, #36	; 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2c:	4584      	cmp	ip, r0
 8001a2e:	f103 0301 	add.w	r3, r3, #1
 8001a32:	d822      	bhi.n	8001a7a <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a36:	466e      	mov	r6, sp
 8001a38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a42:	e886 0003 	stmia.w	r6, {r0, r1}
 8001a46:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001a4a:	6820      	ldr	r0, [r4, #0]
 8001a4c:	f001 fcc2 	bl	80033d4 <USB_DevInit>
 8001a50:	2301      	movs	r3, #1
 8001a52:	4605      	mov	r5, r0
 8001a54:	b1f0      	cbz	r0, 8001a94 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a56:	2202      	movs	r2, #2
 8001a58:	f884 24bd 	strb.w	r2, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a5c:	e7d0      	b.n	8001a00 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8001a5e:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a62:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8001a66:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a72:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a76:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a78:	e7cf      	b.n	8001a1a <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001a7a:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a7e:	e9c2 11a2 	strd	r1, r1, [r2, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8001a82:	f882 127d 	strb.w	r1, [r2, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8001a86:	f882 027c 	strb.w	r0, [r2, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a8a:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a8e:	f8c2 1294 	str.w	r1, [r2, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a92:	e7ca      	b.n	8001a2a <HAL_PCD_Init+0x8c>
  }

  hpcd->USB_Address = 0U;
 8001a94:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a98:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f000 f806 	bl	8001ab4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001aa8:	6820      	ldr	r0, [r4, #0]
 8001aaa:	f001 fd3b 	bl	8003524 <USB_DevDisconnect>

  return HAL_OK;
}
 8001aae:	4628      	mov	r0, r5
 8001ab0:	b00b      	add	sp, #44	; 0x2c
 8001ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ab4 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ab4:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ac2:	6993      	ldr	r3, [r2, #24]
 8001ac4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ac8:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001aca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	f043 0303 	orr.w	r3, r3, #3
 8001ad4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_PWREx_GetVoltageRange+0x20>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001ae4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001ae8:	d006      	beq.n	8001af8 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001aea:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001aee:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8001af2:	bf18      	it	ne
 8001af4:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40007000 	.word	0x40007000

08001b00 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b02:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b04:	bb30      	cbnz	r0, 8001b54 <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b06:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8001b0a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b0e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b1a:	d11a      	bne.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b26:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b28:	4a20      	ldr	r2, [pc, #128]	; (8001bac <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	2132      	movs	r1, #50	; 0x32
 8001b2e:	434a      	muls	r2, r1
 8001b30:	491f      	ldr	r1, [pc, #124]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001b32:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b36:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b38:	6959      	ldr	r1, [r3, #20]
 8001b3a:	0549      	lsls	r1, r1, #21
 8001b3c:	d500      	bpl.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001b3e:	b922      	cbnz	r2, 8001b4a <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	0558      	lsls	r0, r3, #21
 8001b44:	d403      	bmi.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b46:	2000      	movs	r0, #0
}
 8001b48:	4770      	bx	lr
        wait_loop_index--;
 8001b4a:	3a01      	subs	r2, #1
 8001b4c:	e7f4      	b.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 8001b4e:	2003      	movs	r0, #3
 8001b50:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b52:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001b58:	d11f      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8001b5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b62:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6e:	d1ea      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7a:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	2132      	movs	r1, #50	; 0x32
 8001b82:	434a      	muls	r2, r1
 8001b84:	490a      	ldr	r1, [pc, #40]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001b86:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b8a:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8c:	6959      	ldr	r1, [r3, #20]
 8001b8e:	0549      	lsls	r1, r1, #21
 8001b90:	d5d6      	bpl.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d0d4      	beq.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8001b96:	3a01      	subs	r2, #1
 8001b98:	e7f8      	b.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b9a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001b9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e7cf      	b.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x46>
 8001ba6:	bf00      	nop
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	000f4240 	.word	0x000f4240

08001bb4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001bb4:	4a02      	ldr	r2, [pc, #8]	; (8001bc0 <HAL_PWREx_EnableVddUSB+0xc>)
 8001bb6:	6853      	ldr	r3, [r2, #4]
 8001bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bbc:	6053      	str	r3, [r2, #4]
}
 8001bbe:	4770      	bx	lr
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bc4:	4a02      	ldr	r2, [pc, #8]	; (8001bd0 <HAL_PWREx_EnableVddIO2+0xc>)
 8001bc6:	6853      	ldr	r3, [r2, #4]
 8001bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bcc:	6053      	str	r3, [r2, #4]
}
 8001bce:	4770      	bx	lr
 8001bd0:	40007000 	.word	0x40007000

08001bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bd6:	4d1c      	ldr	r5, [pc, #112]	; (8001c48 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8001bd8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bda:	00da      	lsls	r2, r3, #3
{
 8001bdc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bde:	d518      	bpl.n	8001c12 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001be0:	f7ff ff7c 	bl	8001adc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001be8:	d123      	bne.n	8001c32 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bea:	2c80      	cmp	r4, #128	; 0x80
 8001bec:	d928      	bls.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bee:	2ca0      	cmp	r4, #160	; 0xa0
 8001bf0:	bf8c      	ite	hi
 8001bf2:	2002      	movhi	r0, #2
 8001bf4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	f023 030f 	bic.w	r3, r3, #15
 8001bfe:	4303      	orrs	r3, r0
 8001c00:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001c08:	1a18      	subs	r0, r3, r0
 8001c0a:	bf18      	it	ne
 8001c0c:	2001      	movne	r0, #1
 8001c0e:	b003      	add	sp, #12
 8001c10:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c1a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001c24:	f7ff ff5a 	bl	8001adc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c30:	e7d8      	b.n	8001be4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8001c32:	2c7f      	cmp	r4, #127	; 0x7f
 8001c34:	d806      	bhi.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8001c36:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001c3a:	4258      	negs	r0, r3
 8001c3c:	4158      	adcs	r0, r3
 8001c3e:	e7da      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c40:	2000      	movs	r0, #0
 8001c42:	e7d8      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c44:	2002      	movs	r0, #2
 8001c46:	e7d6      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x8c>)
 8001c52:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c56:	f012 020c 	ands.w	r2, r2, #12
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x18>
 8001c5c:	2a0c      	cmp	r2, #12
 8001c5e:	d115      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c60:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c64:	2901      	cmp	r1, #1
 8001c66:	d118      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c68:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001c6a:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c6c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c6e:	bf55      	itete	pl
 8001c70:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c74:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c76:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c7a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001c7e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c82:	b34a      	cbz	r2, 8001cd8 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c84:	2a0c      	cmp	r2, #12
 8001c86:	d009      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x4c>
 8001c88:	2000      	movs	r0, #0
  return sysclockfreq;
 8001c8a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c8c:	2a04      	cmp	r2, #4
 8001c8e:	d022      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c90:	2a08      	cmp	r2, #8
 8001c92:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c94:	bf18      	it	ne
 8001c96:	2000      	movne	r0, #0
 8001c98:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c9a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001ca2:	2a02      	cmp	r2, #2
 8001ca4:	d015      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x82>
 8001ca6:	490f      	ldr	r1, [pc, #60]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca8:	2a03      	cmp	r2, #3
 8001caa:	bf08      	it	eq
 8001cac:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cae:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001cb6:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cb8:	68d8      	ldr	r0, [r3, #12]
 8001cba:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cbe:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc2:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc4:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc6:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cc8:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001ccc:	fbb2 f0f0 	udiv	r0, r2, r0
 8001cd0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cd4:	e7eb      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001cd6:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	080111ac 	.word	0x080111ac
 8001ce4:	007a1200 	.word	0x007a1200
 8001ce8:	00f42400 	.word	0x00f42400

08001cec <HAL_RCC_OscConfig>:
{
 8001cec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	b908      	cbnz	r0, 8001cf8 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	e047      	b.n	8001d88 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf8:	4c94      	ldr	r4, [pc, #592]	; (8001f4c <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cfa:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfc:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfe:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d00:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d02:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d06:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d0a:	d575      	bpl.n	8001df8 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0c:	b11e      	cbz	r6, 8001d16 <HAL_RCC_OscConfig+0x2a>
 8001d0e:	2e0c      	cmp	r6, #12
 8001d10:	d154      	bne.n	8001dbc <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d12:	2f01      	cmp	r7, #1
 8001d14:	d152      	bne.n	8001dbc <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	0798      	lsls	r0, r3, #30
 8001d1a:	d502      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x36>
 8001d1c:	69ab      	ldr	r3, [r5, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0e8      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	6a28      	ldr	r0, [r5, #32]
 8001d26:	0719      	lsls	r1, r3, #28
 8001d28:	bf56      	itet	pl
 8001d2a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001d2e:	6823      	ldrmi	r3, [r4, #0]
 8001d30:	091b      	lsrpl	r3, r3, #4
 8001d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d36:	4298      	cmp	r0, r3
 8001d38:	d929      	bls.n	8001d8e <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d3a:	f7ff ff4b 	bl	8001bd4 <RCC_SetFlashLatencyFromMSIRange>
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d1d8      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6023      	str	r3, [r4, #0]
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	6a2a      	ldr	r2, [r5, #32]
 8001d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d52:	4313      	orrs	r3, r2
 8001d54:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d56:	6863      	ldr	r3, [r4, #4]
 8001d58:	69ea      	ldr	r2, [r5, #28]
 8001d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d62:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d64:	f7ff ff74 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001d68:	68a3      	ldr	r3, [r4, #8]
 8001d6a:	4a79      	ldr	r2, [pc, #484]	; (8001f50 <HAL_RCC_OscConfig+0x264>)
 8001d6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	40d8      	lsrs	r0, r3
 8001d78:	4b76      	ldr	r3, [pc, #472]	; (8001f54 <HAL_RCC_OscConfig+0x268>)
 8001d7a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001d7c:	4b76      	ldr	r3, [pc, #472]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	f7ff fc0a 	bl	8001598 <HAL_InitTick>
        if(status != HAL_OK)
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d037      	beq.n	8001df8 <HAL_RCC_OscConfig+0x10c>
}
 8001d88:	b003      	add	sp, #12
 8001d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	6023      	str	r3, [r4, #0]
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9c:	4303      	orrs	r3, r0
 8001d9e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da0:	6863      	ldr	r3, [r4, #4]
 8001da2:	69ea      	ldr	r2, [r5, #28]
 8001da4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001dac:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dae:	2e00      	cmp	r6, #0
 8001db0:	d1d8      	bne.n	8001d64 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db2:	f7ff ff0f 	bl	8001bd4 <RCC_SetFlashLatencyFromMSIRange>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d0d4      	beq.n	8001d64 <HAL_RCC_OscConfig+0x78>
 8001dba:	e79b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dbc:	69ab      	ldr	r3, [r5, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03a      	beq.n	8001e38 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dca:	f7ff fc27 	bl	800161c <HAL_GetTick>
 8001dce:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	079a      	lsls	r2, r3, #30
 8001dd4:	d528      	bpl.n	8001e28 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	6023      	str	r3, [r4, #0]
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	6a2a      	ldr	r2, [r5, #32]
 8001de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de6:	4313      	orrs	r3, r2
 8001de8:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dea:	6863      	ldr	r3, [r4, #4]
 8001dec:	69ea      	ldr	r2, [r5, #28]
 8001dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001df2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001df6:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	07d8      	lsls	r0, r3, #31
 8001dfc:	d42d      	bmi.n	8001e5a <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	682b      	ldr	r3, [r5, #0]
 8001e00:	0799      	lsls	r1, r3, #30
 8001e02:	d46b      	bmi.n	8001edc <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	0718      	lsls	r0, r3, #28
 8001e08:	f100 80a8 	bmi.w	8001f5c <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0c:	682b      	ldr	r3, [r5, #0]
 8001e0e:	0759      	lsls	r1, r3, #29
 8001e10:	f100 80ce 	bmi.w	8001fb0 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	0699      	lsls	r1, r3, #26
 8001e18:	f100 8137 	bmi.w	800208a <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 815d 	bne.w	80020de <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8001e24:	2000      	movs	r0, #0
 8001e26:	e7af      	b.n	8001d88 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e28:	f7ff fbf8 	bl	800161c <HAL_GetTick>
 8001e2c:	eba0 0008 	sub.w	r0, r0, r8
 8001e30:	2802      	cmp	r0, #2
 8001e32:	d9cd      	bls.n	8001dd0 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8001e34:	2003      	movs	r0, #3
 8001e36:	e7a7      	b.n	8001d88 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e40:	f7ff fbec 	bl	800161c <HAL_GetTick>
 8001e44:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	079b      	lsls	r3, r3, #30
 8001e4a:	d5d5      	bpl.n	8001df8 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fbe6 	bl	800161c <HAL_GetTick>
 8001e50:	eba0 0008 	sub.w	r0, r0, r8
 8001e54:	2802      	cmp	r0, #2
 8001e56:	d9f6      	bls.n	8001e46 <HAL_RCC_OscConfig+0x15a>
 8001e58:	e7ec      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e5a:	2e08      	cmp	r6, #8
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_OscConfig+0x17a>
 8001e5e:	2e0c      	cmp	r6, #12
 8001e60:	d108      	bne.n	8001e74 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e62:	2f03      	cmp	r7, #3
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	039a      	lsls	r2, r3, #14
 8001e6a:	d5c8      	bpl.n	8001dfe <HAL_RCC_OscConfig+0x112>
 8001e6c:	686b      	ldr	r3, [r5, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1c5      	bne.n	8001dfe <HAL_RCC_OscConfig+0x112>
 8001e72:	e73f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e74:	686b      	ldr	r3, [r5, #4]
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7a:	d110      	bne.n	8001e9e <HAL_RCC_OscConfig+0x1b2>
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e84:	f7ff fbca 	bl	800161c <HAL_GetTick>
 8001e88:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	039b      	lsls	r3, r3, #14
 8001e8e:	d4b6      	bmi.n	8001dfe <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff fbc4 	bl	800161c <HAL_GetTick>
 8001e94:	eba0 0008 	sub.w	r0, r0, r8
 8001e98:	2864      	cmp	r0, #100	; 0x64
 8001e9a:	d9f6      	bls.n	8001e8a <HAL_RCC_OscConfig+0x19e>
 8001e9c:	e7ca      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea2:	d104      	bne.n	8001eae <HAL_RCC_OscConfig+0x1c2>
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	e7e6      	b.n	8001e7c <HAL_RCC_OscConfig+0x190>
 8001eae:	6822      	ldr	r2, [r4, #0]
 8001eb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb4:	6022      	str	r2, [r4, #0]
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ebc:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1e0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fbab 	bl	800161c <HAL_GetTick>
 8001ec6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	0398      	lsls	r0, r3, #14
 8001ecc:	d597      	bpl.n	8001dfe <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ece:	f7ff fba5 	bl	800161c <HAL_GetTick>
 8001ed2:	eba0 0008 	sub.w	r0, r0, r8
 8001ed6:	2864      	cmp	r0, #100	; 0x64
 8001ed8:	d9f6      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x1dc>
 8001eda:	e7ab      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001edc:	2e04      	cmp	r6, #4
 8001ede:	d003      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x1fc>
 8001ee0:	2e0c      	cmp	r6, #12
 8001ee2:	d110      	bne.n	8001f06 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ee4:	2f02      	cmp	r7, #2
 8001ee6:	d10e      	bne.n	8001f06 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	0559      	lsls	r1, r3, #21
 8001eec:	d503      	bpl.n	8001ef6 <HAL_RCC_OscConfig+0x20a>
 8001eee:	68eb      	ldr	r3, [r5, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f43f aeff 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	6863      	ldr	r3, [r4, #4]
 8001ef8:	692a      	ldr	r2, [r5, #16]
 8001efa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001efe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f02:	6063      	str	r3, [r4, #4]
 8001f04:	e77e      	b.n	8001e04 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f06:	68eb      	ldr	r3, [r5, #12]
 8001f08:	b17b      	cbz	r3, 8001f2a <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f12:	f7ff fb83 	bl	800161c <HAL_GetTick>
 8001f16:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	055a      	lsls	r2, r3, #21
 8001f1c:	d4eb      	bmi.n	8001ef6 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fb7d 	bl	800161c <HAL_GetTick>
 8001f22:	1bc0      	subs	r0, r0, r7
 8001f24:	2802      	cmp	r0, #2
 8001f26:	d9f7      	bls.n	8001f18 <HAL_RCC_OscConfig+0x22c>
 8001f28:	e784      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f30:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f32:	f7ff fb73 	bl	800161c <HAL_GetTick>
 8001f36:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	055b      	lsls	r3, r3, #21
 8001f3c:	f57f af62 	bpl.w	8001e04 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff fb6c 	bl	800161c <HAL_GetTick>
 8001f44:	1bc0      	subs	r0, r0, r7
 8001f46:	2802      	cmp	r0, #2
 8001f48:	d9f6      	bls.n	8001f38 <HAL_RCC_OscConfig+0x24c>
 8001f4a:	e773      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08011194 	.word	0x08011194
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5c:	696b      	ldr	r3, [r5, #20]
 8001f5e:	b19b      	cbz	r3, 8001f88 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8001f60:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fb56 	bl	800161c <HAL_GetTick>
 8001f70:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f76:	079a      	lsls	r2, r3, #30
 8001f78:	f53f af48 	bmi.w	8001e0c <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fb4e 	bl	800161c <HAL_GetTick>
 8001f80:	1bc0      	subs	r0, r0, r7
 8001f82:	2802      	cmp	r0, #2
 8001f84:	d9f5      	bls.n	8001f72 <HAL_RCC_OscConfig+0x286>
 8001f86:	e755      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8001f88:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f94:	f7ff fb42 	bl	800161c <HAL_GetTick>
 8001f98:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f9a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f9e:	079b      	lsls	r3, r3, #30
 8001fa0:	f57f af34 	bpl.w	8001e0c <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fb3a 	bl	800161c <HAL_GetTick>
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	2802      	cmp	r0, #2
 8001fac:	d9f5      	bls.n	8001f9a <HAL_RCC_OscConfig+0x2ae>
 8001fae:	e741      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fb2:	00d8      	lsls	r0, r3, #3
 8001fb4:	d429      	bmi.n	800200a <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fc8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fcc:	4f98      	ldr	r7, [pc, #608]	; (8002230 <HAL_RCC_OscConfig+0x544>)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	05d9      	lsls	r1, r3, #23
 8001fd2:	d51d      	bpl.n	8002010 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd4:	68ab      	ldr	r3, [r5, #8]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d12b      	bne.n	8002032 <HAL_RCC_OscConfig+0x346>
 8001fda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fb19 	bl	800161c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fee:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ff4:	079b      	lsls	r3, r3, #30
 8001ff6:	d542      	bpl.n	800207e <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8001ff8:	f1b8 0f00 	cmp.w	r8, #0
 8001ffc:	f43f af0a 	beq.w	8001e14 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	65a3      	str	r3, [r4, #88]	; 0x58
 8002008:	e704      	b.n	8001e14 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 800200a:	f04f 0800 	mov.w	r8, #0
 800200e:	e7dd      	b.n	8001fcc <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002018:	f7ff fb00 	bl	800161c <HAL_GetTick>
 800201c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	05da      	lsls	r2, r3, #23
 8002022:	d4d7      	bmi.n	8001fd4 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002024:	f7ff fafa 	bl	800161c <HAL_GetTick>
 8002028:	eba0 0009 	sub.w	r0, r0, r9
 800202c:	2802      	cmp	r0, #2
 800202e:	d9f6      	bls.n	800201e <HAL_RCC_OscConfig+0x332>
 8002030:	e700      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002032:	2b05      	cmp	r3, #5
 8002034:	d106      	bne.n	8002044 <HAL_RCC_OscConfig+0x358>
 8002036:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002042:	e7ca      	b.n	8001fda <HAL_RCC_OscConfig+0x2ee>
 8002044:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002050:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002054:	f022 0204 	bic.w	r2, r2, #4
 8002058:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1c2      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8002060:	f7ff fadc 	bl	800161c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002068:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800206e:	0798      	lsls	r0, r3, #30
 8002070:	d5c2      	bpl.n	8001ff8 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff fad3 	bl	800161c <HAL_GetTick>
 8002076:	1bc0      	subs	r0, r0, r7
 8002078:	4548      	cmp	r0, r9
 800207a:	d9f6      	bls.n	800206a <HAL_RCC_OscConfig+0x37e>
 800207c:	e6da      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7ff facd 	bl	800161c <HAL_GetTick>
 8002082:	1bc0      	subs	r0, r0, r7
 8002084:	4548      	cmp	r0, r9
 8002086:	d9b3      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x304>
 8002088:	e6d4      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800208a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800208c:	b19b      	cbz	r3, 80020b6 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 800208e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800209a:	f7ff fabf 	bl	800161c <HAL_GetTick>
 800209e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80020a4:	079a      	lsls	r2, r3, #30
 80020a6:	f53f aeb9 	bmi.w	8001e1c <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020aa:	f7ff fab7 	bl	800161c <HAL_GetTick>
 80020ae:	1bc0      	subs	r0, r0, r7
 80020b0:	2802      	cmp	r0, #2
 80020b2:	d9f5      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3b4>
 80020b4:	e6be      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 80020b6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80020c2:	f7ff faab 	bl	800161c <HAL_GetTick>
 80020c6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80020cc:	079b      	lsls	r3, r3, #30
 80020ce:	f57f aea5 	bpl.w	8001e1c <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d2:	f7ff faa3 	bl	800161c <HAL_GetTick>
 80020d6:	1bc0      	subs	r0, r0, r7
 80020d8:	2802      	cmp	r0, #2
 80020da:	d9f5      	bls.n	80020c8 <HAL_RCC_OscConfig+0x3dc>
 80020dc:	e6aa      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020de:	2b02      	cmp	r3, #2
 80020e0:	f040 808c 	bne.w	80021fc <HAL_RCC_OscConfig+0x510>
      pll_config = RCC->PLLCFGR;
 80020e4:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80020e8:	f003 0103 	and.w	r1, r3, #3
 80020ec:	4291      	cmp	r1, r2
 80020ee:	d122      	bne.n	8002136 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80020f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020f6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80020fc:	d11b      	bne.n	8002136 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020fe:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002100:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002104:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002108:	d115      	bne.n	8002136 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800210a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800210c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002110:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002114:	d10f      	bne.n	8002136 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002116:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002118:	0852      	lsrs	r2, r2, #1
 800211a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800211e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002120:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002124:	d107      	bne.n	8002136 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002126:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002128:	0852      	lsrs	r2, r2, #1
 800212a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800212e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002130:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002134:	d049      	beq.n	80021ca <HAL_RCC_OscConfig+0x4de>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002136:	2e0c      	cmp	r6, #12
 8002138:	f43f addc 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	015f      	lsls	r7, r3, #5
 8002140:	f53f add8 	bmi.w	8001cf4 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	00de      	lsls	r6, r3, #3
 8002148:	f53f add4 	bmi.w	8001cf4 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002152:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002154:	f7ff fa62 	bl	800161c <HAL_GetTick>
 8002158:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	0198      	lsls	r0, r3, #6
 800215e:	d42e      	bmi.n	80021be <HAL_RCC_OscConfig+0x4d2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	68e2      	ldr	r2, [r4, #12]
 8002162:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_OscConfig+0x548>)
 8002164:	4013      	ands	r3, r2
 8002166:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002168:	4313      	orrs	r3, r2
 800216a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800216c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002170:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002172:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8002176:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002178:	3a01      	subs	r2, #1
 800217a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800217e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002180:	0852      	lsrs	r2, r2, #1
 8002182:	3a01      	subs	r2, #1
 8002184:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002188:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800218a:	0852      	lsrs	r2, r2, #1
 800218c:	3a01      	subs	r2, #1
 800218e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002192:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800219c:	68e3      	ldr	r3, [r4, #12]
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80021a4:	f7ff fa3a 	bl	800161c <HAL_GetTick>
 80021a8:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	0199      	lsls	r1, r3, #6
 80021ae:	f53f ae39 	bmi.w	8001e24 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff fa33 	bl	800161c <HAL_GetTick>
 80021b6:	1b40      	subs	r0, r0, r5
 80021b8:	2802      	cmp	r0, #2
 80021ba:	d9f6      	bls.n	80021aa <HAL_RCC_OscConfig+0x4be>
 80021bc:	e63a      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff fa2d 	bl	800161c <HAL_GetTick>
 80021c2:	1b80      	subs	r0, r0, r6
 80021c4:	2802      	cmp	r0, #2
 80021c6:	d9c8      	bls.n	800215a <HAL_RCC_OscConfig+0x46e>
 80021c8:	e634      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	019a      	lsls	r2, r3, #6
 80021ce:	f53f ae29 	bmi.w	8001e24 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021da:	68e3      	ldr	r3, [r4, #12]
 80021dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e0:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80021e2:	f7ff fa1b 	bl	800161c <HAL_GetTick>
 80021e6:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	019b      	lsls	r3, r3, #6
 80021ec:	f53f ae1a 	bmi.w	8001e24 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff fa14 	bl	800161c <HAL_GetTick>
 80021f4:	1b40      	subs	r0, r0, r5
 80021f6:	2802      	cmp	r0, #2
 80021f8:	d9f6      	bls.n	80021e8 <HAL_RCC_OscConfig+0x4fc>
 80021fa:	e61b      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021fc:	2e0c      	cmp	r6, #12
 80021fe:	f43f ad79 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002208:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800220a:	f7ff fa07 	bl	800161c <HAL_GetTick>
 800220e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002216:	d104      	bne.n	8002222 <HAL_RCC_OscConfig+0x536>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002218:	68e1      	ldr	r1, [r4, #12]
 800221a:	4a07      	ldr	r2, [pc, #28]	; (8002238 <HAL_RCC_OscConfig+0x54c>)
 800221c:	400a      	ands	r2, r1
 800221e:	60e2      	str	r2, [r4, #12]
 8002220:	e600      	b.n	8001e24 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f9fb 	bl	800161c <HAL_GetTick>
 8002226:	1b40      	subs	r0, r0, r5
 8002228:	2802      	cmp	r0, #2
 800222a:	d9f1      	bls.n	8002210 <HAL_RCC_OscConfig+0x524>
 800222c:	e602      	b.n	8001e34 <HAL_RCC_OscConfig+0x148>
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	019d800c 	.word	0x019d800c
 8002238:	feeefffc 	.word	0xfeeefffc

0800223c <HAL_RCC_ClockConfig>:
{
 800223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002240:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002242:	4605      	mov	r5, r0
 8002244:	b910      	cbnz	r0, 800224c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002246:	2001      	movs	r0, #1
}
 8002248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4a75      	ldr	r2, [pc, #468]	; (8002424 <HAL_RCC_ClockConfig+0x1e8>)
 800224e:	6813      	ldr	r3, [r2, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	428b      	cmp	r3, r1
 8002256:	f0c0 8087 	bcc.w	8002368 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225a:	6828      	ldr	r0, [r5, #0]
 800225c:	0787      	lsls	r7, r0, #30
 800225e:	f100 808f 	bmi.w	8002380 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	07c4      	lsls	r4, r0, #31
 8002264:	d54c      	bpl.n	8002300 <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002266:	686b      	ldr	r3, [r5, #4]
 8002268:	4c6f      	ldr	r4, [pc, #444]	; (8002428 <HAL_RCC_ClockConfig+0x1ec>)
 800226a:	2b03      	cmp	r3, #3
 800226c:	f040 809b 	bne.w	80023a6 <HAL_RCC_ClockConfig+0x16a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	0198      	lsls	r0, r3, #6
 8002274:	d5e7      	bpl.n	8002246 <HAL_RCC_ClockConfig+0xa>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002276:	68e3      	ldr	r3, [r4, #12]
 8002278:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 800227c:	2b02      	cmp	r3, #2
 800227e:	f000 808c 	beq.w	800239a <HAL_RCC_ClockConfig+0x15e>
 8002282:	2b03      	cmp	r3, #3
 8002284:	f000 808b 	beq.w	800239e <HAL_RCC_ClockConfig+0x162>
 8002288:	2b01      	cmp	r3, #1
 800228a:	f040 808a 	bne.w	80023a2 <HAL_RCC_ClockConfig+0x166>
    pllvco = HSE_VALUE;
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800228e:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002290:	4a66      	ldr	r2, [pc, #408]	; (800242c <HAL_RCC_ClockConfig+0x1f0>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002292:	0719      	lsls	r1, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002294:	bf55      	itete	pl
 8002296:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800229a:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800229c:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022a0:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    pllvco = MSIRangeTable[msirange];
 80022a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a8:	68e1      	ldr	r1, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022aa:	68e3      	ldr	r3, [r4, #12]
 80022ac:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80022b0:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022b2:	68e2      	ldr	r2, [r4, #12]
 80022b4:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b8:	f3c1 1103 	ubfx	r1, r1, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022bc:	3201      	adds	r2, #1
 80022be:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c0:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022c2:	fbb3 f3f1 	udiv	r3, r3, r1
  sysclockfreq = pllvco / pllr;
 80022c6:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80022ca:	4a59      	ldr	r2, [pc, #356]	; (8002430 <HAL_RCC_ClockConfig+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d87f      	bhi.n	80023d0 <HAL_RCC_ClockConfig+0x194>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022d0:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	68a3      	ldr	r3, [r4, #8]
 80022d4:	686a      	ldr	r2, [r5, #4]
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	4313      	orrs	r3, r2
 80022dc:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80022de:	f7ff f99d 	bl	800161c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e2:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80022e6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e8:	68a3      	ldr	r3, [r4, #8]
 80022ea:	686a      	ldr	r2, [r5, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022f4:	d179      	bne.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
  if(hpre == RCC_SYSCLK_DIV2)
 80022f6:	b11f      	cbz	r7, 8002300 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022f8:	68a3      	ldr	r3, [r4, #8]
 80022fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fe:	60a3      	str	r3, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	6829      	ldr	r1, [r5, #0]
 8002302:	078a      	lsls	r2, r1, #30
 8002304:	d50b      	bpl.n	800231e <HAL_RCC_ClockConfig+0xe2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002306:	4a48      	ldr	r2, [pc, #288]	; (8002428 <HAL_RCC_ClockConfig+0x1ec>)
 8002308:	68ac      	ldr	r4, [r5, #8]
 800230a:	6890      	ldr	r0, [r2, #8]
 800230c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8002310:	4284      	cmp	r4, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002312:	bf3f      	itttt	cc
 8002314:	6893      	ldrcc	r3, [r2, #8]
 8002316:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 800231a:	4323      	orrcc	r3, r4
 800231c:	6093      	strcc	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800231e:	4a41      	ldr	r2, [pc, #260]	; (8002424 <HAL_RCC_ClockConfig+0x1e8>)
 8002320:	6813      	ldr	r3, [r2, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	42b3      	cmp	r3, r6
 8002328:	d868      	bhi.n	80023fc <HAL_RCC_ClockConfig+0x1c0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232a:	f011 0f04 	tst.w	r1, #4
 800232e:	4c3e      	ldr	r4, [pc, #248]	; (8002428 <HAL_RCC_ClockConfig+0x1ec>)
 8002330:	d170      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1d8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	070b      	lsls	r3, r1, #28
 8002334:	d506      	bpl.n	8002344 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	68a3      	ldr	r3, [r4, #8]
 8002338:	692a      	ldr	r2, [r5, #16]
 800233a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800233e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002342:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002344:	f7ff fc84 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8002348:	68a3      	ldr	r3, [r4, #8]
 800234a:	4a3a      	ldr	r2, [pc, #232]	; (8002434 <HAL_RCC_ClockConfig+0x1f8>)
 800234c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	40d8      	lsrs	r0, r3
 8002358:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCC_ClockConfig+0x1fc>)
 800235a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800235c:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_ClockConfig+0x200>)
 800235e:	6818      	ldr	r0, [r3, #0]
}
 8002360:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8002364:	f7ff b918 	b.w	8001598 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002368:	6813      	ldr	r3, [r2, #0]
 800236a:	f023 030f 	bic.w	r3, r3, #15
 800236e:	430b      	orrs	r3, r1
 8002370:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	6813      	ldr	r3, [r2, #0]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	428b      	cmp	r3, r1
 800237a:	f47f af64 	bne.w	8002246 <HAL_RCC_ClockConfig+0xa>
 800237e:	e76c      	b.n	800225a <HAL_RCC_ClockConfig+0x1e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <HAL_RCC_ClockConfig+0x1ec>)
 8002382:	68ac      	ldr	r4, [r5, #8]
 8002384:	6891      	ldr	r1, [r2, #8]
 8002386:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800238a:	428c      	cmp	r4, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	bf81      	itttt	hi
 800238e:	6893      	ldrhi	r3, [r2, #8]
 8002390:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002394:	4323      	orrhi	r3, r4
 8002396:	6093      	strhi	r3, [r2, #8]
 8002398:	e763      	b.n	8002262 <HAL_RCC_ClockConfig+0x26>
    pllvco = HSI_VALUE;
 800239a:	4a29      	ldr	r2, [pc, #164]	; (8002440 <HAL_RCC_ClockConfig+0x204>)
 800239c:	e784      	b.n	80022a8 <HAL_RCC_ClockConfig+0x6c>
  switch (pllsource)
 800239e:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_RCC_ClockConfig+0x208>)
 80023a0:	e782      	b.n	80022a8 <HAL_RCC_ClockConfig+0x6c>
    pllvco = 0;
 80023a2:	2200      	movs	r2, #0
 80023a4:	e780      	b.n	80022a8 <HAL_RCC_ClockConfig+0x6c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	f43f af49 	beq.w	8002246 <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80023b4:	f7ff fc4c 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCC_ClockConfig+0x1f4>)
 80023ba:	4298      	cmp	r0, r3
 80023bc:	e787      	b.n	80022ce <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023be:	b91b      	cbnz	r3, 80023c8 <HAL_RCC_ClockConfig+0x18c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	f013 0f02 	tst.w	r3, #2
 80023c6:	e7f3      	b.n	80023b0 <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023ce:	e7ef      	b.n	80023b0 <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023d0:	68a3      	ldr	r3, [r4, #8]
 80023d2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80023d6:	f47f af7b 	bne.w	80022d0 <HAL_RCC_ClockConfig+0x94>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023da:	68a3      	ldr	r3, [r4, #8]
 80023dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	60a3      	str	r3, [r4, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023e6:	2780      	movs	r7, #128	; 0x80
 80023e8:	e773      	b.n	80022d2 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7ff f917 	bl	800161c <HAL_GetTick>
 80023ee:	eba0 0008 	sub.w	r0, r0, r8
 80023f2:	4548      	cmp	r0, r9
 80023f4:	f67f af78 	bls.w	80022e8 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80023f8:	2003      	movs	r0, #3
 80023fa:	e725      	b.n	8002248 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	f023 030f 	bic.w	r3, r3, #15
 8002402:	4333      	orrs	r3, r6
 8002404:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	6813      	ldr	r3, [r2, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	42b3      	cmp	r3, r6
 800240e:	f47f af1a 	bne.w	8002246 <HAL_RCC_ClockConfig+0xa>
 8002412:	e78a      	b.n	800232a <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	68a3      	ldr	r3, [r4, #8]
 8002416:	68ea      	ldr	r2, [r5, #12]
 8002418:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800241c:	4313      	orrs	r3, r2
 800241e:	60a3      	str	r3, [r4, #8]
 8002420:	e787      	b.n	8002332 <HAL_RCC_ClockConfig+0xf6>
 8002422:	bf00      	nop
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
 800242c:	080111ac 	.word	0x080111ac
 8002430:	04c4b400 	.word	0x04c4b400
 8002434:	08011194 	.word	0x08011194
 8002438:	20000000 	.word	0x20000000
 800243c:	20000008 	.word	0x20000008
 8002440:	00f42400 	.word	0x00f42400
 8002444:	007a1200 	.word	0x007a1200

08002448 <HAL_RCC_GetHCLKFreq>:
}
 8002448:	4b01      	ldr	r3, [pc, #4]	; (8002450 <HAL_RCC_GetHCLKFreq+0x8>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000000 	.word	0x20000000

08002454 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002456:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002462:	6810      	ldr	r0, [r2, #0]
 8002464:	f003 031f 	and.w	r3, r3, #31
}
 8002468:	40d8      	lsrs	r0, r3
 800246a:	4770      	bx	lr
 800246c:	40021000 	.word	0x40021000
 8002470:	080111a4 	.word	0x080111a4
 8002474:	20000000 	.word	0x20000000

08002478 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x18>)
 800247a:	4a06      	ldr	r2, [pc, #24]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002486:	6810      	ldr	r0, [r2, #0]
 8002488:	f003 031f 	and.w	r3, r3, #31
}
 800248c:	40d8      	lsrs	r0, r3
 800248e:	4770      	bx	lr
 8002490:	40021000 	.word	0x40021000
 8002494:	080111a4 	.word	0x080111a4
 8002498:	20000000 	.word	0x20000000

0800249c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800249e:	4c3c      	ldr	r4, [pc, #240]	; (8002590 <RCCEx_PLLSAI1_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024a0:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024a2:	68e2      	ldr	r2, [r4, #12]
{
 80024a4:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024a6:	0790      	lsls	r0, r2, #30
{
 80024a8:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024aa:	d023      	beq.n	80024f4 <RCCEx_PLLSAI1_Config+0x58>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ac:	68e2      	ldr	r2, [r4, #12]
 80024ae:	f002 0203 	and.w	r2, r2, #3
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d16a      	bne.n	800258c <RCCEx_PLLSAI1_Config+0xf0>
       ||
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	d068      	beq.n	800258c <RCCEx_PLLSAI1_Config+0xf0>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c2:	f7ff f8ab 	bl	800161c <HAL_GetTick>
 80024c6:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	011a      	lsls	r2, r3, #4
 80024cc:	d42d      	bmi.n	800252a <RCCEx_PLLSAI1_Config+0x8e>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ce:	68ab      	ldr	r3, [r5, #8]
 80024d0:	021e      	lsls	r6, r3, #8
 80024d2:	686b      	ldr	r3, [r5, #4]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	0118      	lsls	r0, r3, #4
      if(Divider == DIVIDER_P_UPDATE)
 80024d8:	b377      	cbz	r7, 8002538 <RCCEx_PLLSAI1_Config+0x9c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024da:	2f01      	cmp	r7, #1
 80024dc:	d145      	bne.n	800256a <RCCEx_PLLSAI1_Config+0xce>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024de:	692b      	ldr	r3, [r5, #16]
 80024e0:	6927      	ldr	r7, [r4, #16]
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	1e59      	subs	r1, r3, #1
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <RCCEx_PLLSAI1_Config+0xf8>)
 80024e8:	403b      	ands	r3, r7
 80024ea:	4333      	orrs	r3, r6
 80024ec:	4303      	orrs	r3, r0
 80024ee:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80024f2:	e029      	b.n	8002548 <RCCEx_PLLSAI1_Config+0xac>
    switch(PllSai1->PLLSAI1Source)
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d00d      	beq.n	8002514 <RCCEx_PLLSAI1_Config+0x78>
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d00f      	beq.n	800251c <RCCEx_PLLSAI1_Config+0x80>
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d145      	bne.n	800258c <RCCEx_PLLSAI1_Config+0xf0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002500:	6822      	ldr	r2, [r4, #0]
 8002502:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002506:	d041      	beq.n	800258c <RCCEx_PLLSAI1_Config+0xf0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002508:	68e0      	ldr	r0, [r4, #12]
 800250a:	f020 0003 	bic.w	r0, r0, #3
 800250e:	4318      	orrs	r0, r3
 8002510:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8002512:	e7d2      	b.n	80024ba <RCCEx_PLLSAI1_Config+0x1e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002514:	6822      	ldr	r2, [r4, #0]
 8002516:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800251a:	e7f4      	b.n	8002506 <RCCEx_PLLSAI1_Config+0x6a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800251c:	6822      	ldr	r2, [r4, #0]
 800251e:	0391      	lsls	r1, r2, #14
 8002520:	d4f2      	bmi.n	8002508 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002528:	e7ed      	b.n	8002506 <RCCEx_PLLSAI1_Config+0x6a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800252a:	f7ff f877 	bl	800161c <HAL_GetTick>
 800252e:	1b80      	subs	r0, r0, r6
 8002530:	2802      	cmp	r0, #2
 8002532:	d9c9      	bls.n	80024c8 <RCCEx_PLLSAI1_Config+0x2c>
        status = HAL_TIMEOUT;
 8002534:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002538:	68e9      	ldr	r1, [r5, #12]
 800253a:	6922      	ldr	r2, [r4, #16]
 800253c:	ea46 63c1 	orr.w	r3, r6, r1, lsl #27
 8002540:	4915      	ldr	r1, [pc, #84]	; (8002598 <RCCEx_PLLSAI1_Config+0xfc>)
 8002542:	4011      	ands	r1, r2
 8002544:	430b      	orrs	r3, r1
 8002546:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002548:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002550:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002552:	f7ff f863 	bl	800161c <HAL_GetTick>
 8002556:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	d510      	bpl.n	8002580 <RCCEx_PLLSAI1_Config+0xe4>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800255e:	6923      	ldr	r3, [r4, #16]
 8002560:	69aa      	ldr	r2, [r5, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	6123      	str	r3, [r4, #16]
 8002566:	2000      	movs	r0, #0
  return status;
 8002568:	e7e5      	b.n	8002536 <RCCEx_PLLSAI1_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256a:	696b      	ldr	r3, [r5, #20]
 800256c:	6921      	ldr	r1, [r4, #16]
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <RCCEx_PLLSAI1_Config+0x100>)
 8002574:	400b      	ands	r3, r1
 8002576:	4333      	orrs	r3, r6
 8002578:	4303      	orrs	r3, r0
 800257a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800257e:	e7e3      	b.n	8002548 <RCCEx_PLLSAI1_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002580:	f7ff f84c 	bl	800161c <HAL_GetTick>
 8002584:	1b80      	subs	r0, r0, r6
 8002586:	2802      	cmp	r0, #2
 8002588:	d9e6      	bls.n	8002558 <RCCEx_PLLSAI1_Config+0xbc>
 800258a:	e7d3      	b.n	8002534 <RCCEx_PLLSAI1_Config+0x98>
      status = HAL_ERROR;
 800258c:	2001      	movs	r0, #1
 800258e:	e7d2      	b.n	8002536 <RCCEx_PLLSAI1_Config+0x9a>
 8002590:	40021000 	.word	0x40021000
 8002594:	ff9f800f 	.word	0xff9f800f
 8002598:	07ff800f 	.word	0x07ff800f
 800259c:	f9ff800f 	.word	0xf9ff800f

080025a0 <RCCEx_PLLSAI2_Config.constprop.0>:
  *
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 80025a0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025a2:	4c2f      	ldr	r4, [pc, #188]	; (8002660 <RCCEx_PLLSAI2_Config.constprop.0+0xc0>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025a4:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025a6:	68e2      	ldr	r2, [r4, #12]
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 80025a8:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025aa:	0790      	lsls	r0, r2, #30
 80025ac:	d026      	beq.n	80025fc <RCCEx_PLLSAI2_Config.constprop.0+0x5c>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025ae:	68e2      	ldr	r2, [r4, #12]
 80025b0:	f002 0203 	and.w	r2, r2, #3
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d151      	bne.n	800265c <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
       ||
 80025b8:	2a00      	cmp	r2, #0
 80025ba:	d04f      	beq.n	800265c <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7ff f82a 	bl	800161c <HAL_GetTick>
 80025c8:	4606      	mov	r6, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	009a      	lsls	r2, r3, #2
 80025ce:	d430      	bmi.n	8002632 <RCCEx_PLLSAI2_Config.constprop.0+0x92>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025d0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80025d4:	06db      	lsls	r3, r3, #27
 80025d6:	6961      	ldr	r1, [r4, #20]
 80025d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80025dc:	4a21      	ldr	r2, [pc, #132]	; (8002664 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>)
 80025de:	400a      	ands	r2, r1
 80025e0:	4313      	orrs	r3, r2
 80025e2:	686a      	ldr	r2, [r5, #4]
 80025e4:	3a01      	subs	r2, #1
 80025e6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80025ea:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff f812 	bl	800161c <HAL_GetTick>
 80025f8:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025fa:	e026      	b.n	800264a <RCCEx_PLLSAI2_Config.constprop.0+0xaa>
    switch(PllSai2->PLLSAI2Source)
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d00d      	beq.n	800261c <RCCEx_PLLSAI2_Config.constprop.0+0x7c>
 8002600:	2b03      	cmp	r3, #3
 8002602:	d00f      	beq.n	8002624 <RCCEx_PLLSAI2_Config.constprop.0+0x84>
 8002604:	2b01      	cmp	r3, #1
 8002606:	d129      	bne.n	800265c <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260e:	d025      	beq.n	800265c <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002610:	68e0      	ldr	r0, [r4, #12]
 8002612:	f020 0003 	bic.w	r0, r0, #3
 8002616:	4318      	orrs	r0, r3
 8002618:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800261a:	e7cf      	b.n	80025bc <RCCEx_PLLSAI2_Config.constprop.0+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002622:	e7f4      	b.n	800260e <RCCEx_PLLSAI2_Config.constprop.0+0x6e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	0391      	lsls	r1, r2, #14
 8002628:	d4f2      	bmi.n	8002610 <RCCEx_PLLSAI2_Config.constprop.0+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002630:	e7ed      	b.n	800260e <RCCEx_PLLSAI2_Config.constprop.0+0x6e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002632:	f7fe fff3 	bl	800161c <HAL_GetTick>
 8002636:	1b80      	subs	r0, r0, r6
 8002638:	2802      	cmp	r0, #2
 800263a:	d9c6      	bls.n	80025ca <RCCEx_PLLSAI2_Config.constprop.0+0x2a>
        status = HAL_TIMEOUT;
 800263c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800263e:	bd70      	pop	{r4, r5, r6, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002640:	f7fe ffec 	bl	800161c <HAL_GetTick>
 8002644:	1b80      	subs	r0, r0, r6
 8002646:	2802      	cmp	r0, #2
 8002648:	d8f8      	bhi.n	800263c <RCCEx_PLLSAI2_Config.constprop.0+0x9c>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	d5f7      	bpl.n	8002640 <RCCEx_PLLSAI2_Config.constprop.0+0xa0>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002650:	6963      	ldr	r3, [r4, #20]
 8002652:	69aa      	ldr	r2, [r5, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	6163      	str	r3, [r4, #20]
 8002658:	2000      	movs	r0, #0
  return status;
 800265a:	e7f0      	b.n	800263e <RCCEx_PLLSAI2_Config.constprop.0+0x9e>
      status = HAL_ERROR;
 800265c:	2001      	movs	r0, #1
 800265e:	e7ee      	b.n	800263e <RCCEx_PLLSAI2_Config.constprop.0+0x9e>
 8002660:	40021000 	.word	0x40021000
 8002664:	07ff800f 	.word	0x07ff800f

08002668 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002668:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800266c:	6806      	ldr	r6, [r0, #0]
 800266e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002672:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002674:	d007      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002676:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8002678:	2940      	cmp	r1, #64	; 0x40
 800267a:	d022      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800267c:	d812      	bhi.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800267e:	b331      	cbz	r1, 80026ce <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002680:	2920      	cmp	r1, #32
 8002682:	d02b      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002684:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	04db      	lsls	r3, r3, #19
 800268a:	d509      	bpl.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->Sai2ClockSelection)
 800268c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800268e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002692:	d02f      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8002694:	d826      	bhi.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002696:	b399      	cbz	r1, 8002700 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002698:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800269c:	d073      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800269e:	2601      	movs	r6, #1
 80026a0:	4635      	mov	r5, r6
 80026a2:	e03c      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch(PeriphClkInit->Sai1ClockSelection)
 80026a4:	2960      	cmp	r1, #96	; 0x60
 80026a6:	d001      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026a8:	2980      	cmp	r1, #128	; 0x80
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ac:	4a3b      	ldr	r2, [pc, #236]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026ae:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80026b0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80026b4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80026b8:	430b      	orrs	r3, r1
 80026ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80026be:	2600      	movs	r6, #0
 80026c0:	e7e1      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c2:	4a36      	ldr	r2, [pc, #216]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c4:	68d3      	ldr	r3, [r2, #12]
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80026cc:	e7ee      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x44>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ce:	3004      	adds	r0, #4
 80026d0:	f7ff fee4 	bl	800249c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026d4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d1d5      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026da:	e7e7      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x44>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026dc:	3020      	adds	r0, #32
 80026de:	f7ff ff5f 	bl	80025a0 <RCCEx_PLLSAI2_Config.constprop.0>
 80026e2:	e7f7      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80026e4:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80026e8:	d002      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80026ea:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80026ee:	d1d6      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x36>
 80026f0:	4635      	mov	r5, r6
 80026f2:	e009      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026f6:	68d3      	ldr	r3, [r2, #12]
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	60d3      	str	r3, [r2, #12]
      break;
 80026fe:	e7f7      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002700:	1d20      	adds	r0, r4, #4
 8002702:	f7ff fecb 	bl	800249c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002706:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002708:	2d00      	cmp	r5, #0
 800270a:	d141      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800270c:	4a23      	ldr	r2, [pc, #140]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800270e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002710:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002714:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002718:	430b      	orrs	r3, r1
 800271a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	039f      	lsls	r7, r3, #14
 8002722:	f140 817d 	bpl.w	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002726:	4f1d      	ldr	r7, [pc, #116]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272a:	00d8      	lsls	r0, r3, #3
 800272c:	d432      	bmi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	65bb      	str	r3, [r7, #88]	; 0x58
 8002736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002740:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002744:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80027a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8002748:	f8d9 3000 	ldr.w	r3, [r9]
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002754:	f7fe ff62 	bl	800161c <HAL_GetTick>
 8002758:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275a:	f8d9 3000 	ldr.w	r3, [r9]
 800275e:	05d9      	lsls	r1, r3, #23
 8002760:	d520      	bpl.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 8002762:	bb35      	cbnz	r5, 80027b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002768:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800276c:	f040 812e 	bne.w	80029cc <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002774:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002782:	4635      	mov	r5, r6
 8002784:	e015      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002786:	f104 0020 	add.w	r0, r4, #32
 800278a:	f7ff ff09 	bl	80025a0 <RCCEx_PLLSAI2_Config.constprop.0>
 800278e:	e7ba      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002790:	462e      	mov	r6, r5
 8002792:	e7c4      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    FlagStatus       pwrclkchanged = RESET;
 8002794:	f04f 0800 	mov.w	r8, #0
 8002798:	e7d4      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a4:	f7fe ff3a 	bl	800161c <HAL_GetTick>
 80027a8:	eba0 000a 	sub.w	r0, r0, sl
 80027ac:	2802      	cmp	r0, #2
 80027ae:	d9d4      	bls.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xf2>
        ret = HAL_TIMEOUT;
 80027b0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80027b2:	f1b8 0f00 	cmp.w	r8, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027be:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	07d8      	lsls	r0, r3, #31
 80027c4:	d508      	bpl.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c6:	49b2      	ldr	r1, [pc, #712]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80027c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027ce:	f022 0203 	bic.w	r2, r2, #3
 80027d2:	4302      	orrs	r2, r0
 80027d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d8:	0799      	lsls	r1, r3, #30
 80027da:	d508      	bpl.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027dc:	49ac      	ldr	r1, [pc, #688]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80027de:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80027e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027e4:	f022 020c 	bic.w	r2, r2, #12
 80027e8:	4302      	orrs	r2, r0
 80027ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ee:	075a      	lsls	r2, r3, #29
 80027f0:	d508      	bpl.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f2:	49a7      	ldr	r1, [pc, #668]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80027f4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80027f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027fa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80027fe:	4302      	orrs	r2, r0
 8002800:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002804:	071f      	lsls	r7, r3, #28
 8002806:	d508      	bpl.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002808:	49a1      	ldr	r1, [pc, #644]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800280a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800280c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002810:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002814:	4302      	orrs	r2, r0
 8002816:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800281a:	06de      	lsls	r6, r3, #27
 800281c:	d508      	bpl.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800281e:	499c      	ldr	r1, [pc, #624]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002820:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002822:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002826:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800282a:	4302      	orrs	r2, r0
 800282c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002830:	0698      	lsls	r0, r3, #26
 8002832:	d508      	bpl.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002834:	4996      	ldr	r1, [pc, #600]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002836:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002838:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800283c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002840:	4302      	orrs	r2, r0
 8002842:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002846:	0599      	lsls	r1, r3, #22
 8002848:	d508      	bpl.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800284a:	4991      	ldr	r1, [pc, #580]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800284c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800284e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002852:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002856:	4302      	orrs	r2, r0
 8002858:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800285c:	055a      	lsls	r2, r3, #21
 800285e:	d508      	bpl.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002860:	498b      	ldr	r1, [pc, #556]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002862:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002864:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002868:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800286c:	4302      	orrs	r2, r0
 800286e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002872:	065f      	lsls	r7, r3, #25
 8002874:	d508      	bpl.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002876:	4986      	ldr	r1, [pc, #536]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002878:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800287a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800287e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002882:	4302      	orrs	r2, r0
 8002884:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002888:	061e      	lsls	r6, r3, #24
 800288a:	d508      	bpl.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800288c:	4980      	ldr	r1, [pc, #512]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800288e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002890:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002894:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002898:	4302      	orrs	r2, r0
 800289a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800289e:	05d8      	lsls	r0, r3, #23
 80028a0:	d508      	bpl.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a2:	497b      	ldr	r1, [pc, #492]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80028a4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80028a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028aa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80028ae:	4302      	orrs	r2, r0
 80028b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028b4:	02d9      	lsls	r1, r3, #11
 80028b6:	d508      	bpl.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b8:	4975      	ldr	r1, [pc, #468]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80028ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80028bc:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80028c0:	f022 0203 	bic.w	r2, r2, #3
 80028c4:	4302      	orrs	r2, r0
 80028c6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ca:	049a      	lsls	r2, r3, #18
 80028cc:	d510      	bpl.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ce:	4a70      	ldr	r2, [pc, #448]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80028d0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80028d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028d6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80028da:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028e4:	f040 809e 	bne.w	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e8:	68d3      	ldr	r3, [r2, #12]
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	d50f      	bpl.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80028f8:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80028fa:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80028fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002902:	f040 809b 	bne.w	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8002906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800290a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002914:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	035f      	lsls	r7, r3, #13
 800291a:	d510      	bpl.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800291c:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800291e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002920:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002924:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002928:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800292a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800292e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002932:	f040 80a1 	bne.w	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002936:	68d3      	ldr	r3, [r2, #12]
 8002938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	045e      	lsls	r6, r3, #17
 8002942:	d513      	bpl.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002944:	4952      	ldr	r1, [pc, #328]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002946:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800294a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800294e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002952:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002954:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800295c:	d106      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x304>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800295e:	2102      	movs	r1, #2
 8002960:	1d20      	adds	r0, r4, #4
 8002962:	f7ff fd9b 	bl	800249c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002966:	2800      	cmp	r0, #0
 8002968:	bf18      	it	ne
 800296a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800296c:	6822      	ldr	r2, [r4, #0]
 800296e:	03d0      	lsls	r0, r2, #15
 8002970:	d509      	bpl.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002972:	4947      	ldr	r1, [pc, #284]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002974:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002978:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	4303      	orrs	r3, r0
 8002982:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002986:	0291      	lsls	r1, r2, #10
 8002988:	d509      	bpl.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x336>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800298a:	4941      	ldr	r1, [pc, #260]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800298c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002990:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8002994:	f023 0318 	bic.w	r3, r3, #24
 8002998:	4303      	orrs	r3, r0
 800299a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800299e:	01d3      	lsls	r3, r2, #7
 80029a0:	d510      	bpl.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029a2:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80029a4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80029a8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80029ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80029b0:	430b      	orrs	r3, r1
 80029b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80029b6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ba:	bf02      	ittt	eq
 80029bc:	68d3      	ldreq	r3, [r2, #12]
 80029be:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	streq	r3, [r2, #12]
}
 80029c4:	4628      	mov	r0, r5
 80029c6:	b002      	add	sp, #8
 80029c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f43f aecd 	beq.w	8002770 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80029da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ea:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029f2:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80029f8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029fc:	f57f aeb8 	bpl.w	8002770 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002a00:	f7fe fe0c 	bl	800161c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002a08:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a0e:	079b      	lsls	r3, r3, #30
 8002a10:	f53f aeae 	bmi.w	8002770 <HAL_RCCEx_PeriphCLKConfig+0x108>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7fe fe02 	bl	800161c <HAL_GetTick>
 8002a18:	1b40      	subs	r0, r0, r5
 8002a1a:	4548      	cmp	r0, r9
 8002a1c:	d9f5      	bls.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8002a1e:	e6c7      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002a20:	4635      	mov	r5, r6
 8002a22:	e6cd      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a24:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a28:	f47f af62 	bne.w	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	1d20      	adds	r0, r4, #4
 8002a30:	f7ff fd34 	bl	800249c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002a34:	2800      	cmp	r0, #0
 8002a36:	bf18      	it	ne
 8002a38:	4605      	movne	r5, r0
 8002a3a:	e759      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8002a44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a48:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002a4c:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a4e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a56:	d103      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a5e:	e759      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a60:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a64:	f47f af57 	bne.w	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a68:	2101      	movs	r1, #1
 8002a6a:	1d20      	adds	r0, r4, #4
 8002a6c:	f7ff fd16 	bl	800249c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a70:	2800      	cmp	r0, #0
 8002a72:	bf18      	it	ne
 8002a74:	4605      	movne	r5, r0
 8002a76:	e74e      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a78:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a7c:	f47f af5f 	bne.w	800293e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a80:	2101      	movs	r1, #1
 8002a82:	1d20      	adds	r0, r4, #4
 8002a84:	f7ff fd0a 	bl	800249c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	bf18      	it	ne
 8002a8c:	4605      	movne	r5, r0
 8002a8e:	e756      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8002a90:	40021000 	.word	0x40021000

08002a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a94:	b538      	push	{r3, r4, r5, lr}
 8002a96:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a98:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a9a:	6921      	ldr	r1, [r4, #16]
 8002a9c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a9e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aa0:	69c0      	ldr	r0, [r0, #28]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	6961      	ldr	r1, [r4, #20]
 8002aa6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002aa8:	49a0      	ldr	r1, [pc, #640]	; (8002d2c <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aaa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002aac:	4029      	ands	r1, r5
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68e1      	ldr	r1, [r4, #12]
 8002ab6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002abe:	4a9c      	ldr	r2, [pc, #624]	; (8002d30 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ac0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ac2:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ac4:	bf1c      	itt	ne
 8002ac6:	6a22      	ldrne	r2, [r4, #32]
 8002ac8:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8002ad0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ada:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002adc:	f022 020f 	bic.w	r2, r2, #15
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ae4:	4a93      	ldr	r2, [pc, #588]	; (8002d34 <UART_SetConfig+0x2a0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d11b      	bne.n	8002b22 <UART_SetConfig+0x8e>
 8002aea:	4b93      	ldr	r3, [pc, #588]	; (8002d38 <UART_SetConfig+0x2a4>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	f200 80e4 	bhi.w	8002cc4 <UART_SetConfig+0x230>
 8002afc:	4a8f      	ldr	r2, [pc, #572]	; (8002d3c <UART_SetConfig+0x2a8>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b00:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b04:	f040 80ab 	bne.w	8002c5e <UART_SetConfig+0x1ca>
  {
    switch (clocksource)
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d826      	bhi.n	8002b5a <UART_SetConfig+0xc6>
 8002b0c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b10:	00dd00ee 	.word	0x00dd00ee
 8002b14:	002500a5 	.word	0x002500a5
 8002b18:	002500e3 	.word	0x002500e3
 8002b1c:	00250025 	.word	0x00250025
 8002b20:	00f2      	.short	0x00f2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b22:	4a87      	ldr	r2, [pc, #540]	; (8002d40 <UART_SetConfig+0x2ac>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d106      	bne.n	8002b36 <UART_SetConfig+0xa2>
 8002b28:	4b83      	ldr	r3, [pc, #524]	; (8002d38 <UART_SetConfig+0x2a4>)
 8002b2a:	4a86      	ldr	r2, [pc, #536]	; (8002d44 <UART_SetConfig+0x2b0>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	e7e3      	b.n	8002afe <UART_SetConfig+0x6a>
 8002b36:	4a84      	ldr	r2, [pc, #528]	; (8002d48 <UART_SetConfig+0x2b4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d119      	bne.n	8002b70 <UART_SetConfig+0xdc>
 8002b3c:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <UART_SetConfig+0x2a4>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	f000 80c8 	beq.w	8002cdc <UART_SetConfig+0x248>
 8002b4c:	d807      	bhi.n	8002b5e <UART_SetConfig+0xca>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80c9 	beq.w	8002ce6 <UART_SetConfig+0x252>
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	f000 80bb 	beq.w	8002cd0 <UART_SetConfig+0x23c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	e04e      	b.n	8002bfc <UART_SetConfig+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5e:	2b30      	cmp	r3, #48	; 0x30
 8002b60:	d1fb      	bne.n	8002b5a <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b66:	f000 80c5 	beq.w	8002cf4 <UART_SetConfig+0x260>
 8002b6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b6e:	e093      	b.n	8002c98 <UART_SetConfig+0x204>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b70:	4a76      	ldr	r2, [pc, #472]	; (8002d4c <UART_SetConfig+0x2b8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10f      	bne.n	8002b96 <UART_SetConfig+0x102>
 8002b76:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <UART_SetConfig+0x2a4>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	f000 80ab 	beq.w	8002cdc <UART_SetConfig+0x248>
 8002b86:	d804      	bhi.n	8002b92 <UART_SetConfig+0xfe>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80ac 	beq.w	8002ce6 <UART_SetConfig+0x252>
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	e7e1      	b.n	8002b56 <UART_SetConfig+0xc2>
 8002b92:	2bc0      	cmp	r3, #192	; 0xc0
 8002b94:	e7e4      	b.n	8002b60 <UART_SetConfig+0xcc>
 8002b96:	4a6e      	ldr	r2, [pc, #440]	; (8002d50 <UART_SetConfig+0x2bc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d112      	bne.n	8002bc2 <UART_SetConfig+0x12e>
 8002b9c:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <UART_SetConfig+0x2a4>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002baa:	f000 8097 	beq.w	8002cdc <UART_SetConfig+0x248>
 8002bae:	d805      	bhi.n	8002bbc <UART_SetConfig+0x128>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8098 	beq.w	8002ce6 <UART_SetConfig+0x252>
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	e7cc      	b.n	8002b56 <UART_SetConfig+0xc2>
 8002bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bc0:	e7ce      	b.n	8002b60 <UART_SetConfig+0xcc>
 8002bc2:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <UART_SetConfig+0x29c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d1c8      	bne.n	8002b5a <UART_SetConfig+0xc6>
 8002bc8:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <UART_SetConfig+0x2a4>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd6:	d018      	beq.n	8002c0a <UART_SetConfig+0x176>
 8002bd8:	d806      	bhi.n	8002be8 <UART_SetConfig+0x154>
 8002bda:	b15b      	cbz	r3, 8002bf4 <UART_SetConfig+0x160>
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d1bb      	bne.n	8002b5a <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 8002be2:	f7ff f835 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
        break;
 8002be6:	e007      	b.n	8002bf8 <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bec:	d1b5      	bne.n	8002b5a <UART_SetConfig+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 8002bee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bf2:	e00b      	b.n	8002c0c <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf4:	f7ff fc2e 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002bf8:	b940      	cbnz	r0, 8002c0c <UART_SetConfig+0x178>
 8002bfa:	2000      	movs	r0, #0
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8002bfc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002c00:	66a3      	str	r3, [r4, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c02:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002c04:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8002c08:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002c0a:	4852      	ldr	r0, [pc, #328]	; (8002d54 <UART_SetConfig+0x2c0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c0c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c0e:	4b52      	ldr	r3, [pc, #328]	; (8002d58 <UART_SetConfig+0x2c4>)
 8002c10:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c12:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c16:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c1a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c1e:	4299      	cmp	r1, r3
 8002c20:	d89b      	bhi.n	8002b5a <UART_SetConfig+0xc6>
 8002c22:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8002c26:	d898      	bhi.n	8002b5a <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c28:	2300      	movs	r3, #0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ffd4 	bl	8000bd8 <__aeabi_uldivmod>
 8002c30:	0209      	lsls	r1, r1, #8
 8002c32:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8002c36:	086b      	lsrs	r3, r5, #1
 8002c38:	0200      	lsls	r0, r0, #8
 8002c3a:	18c0      	adds	r0, r0, r3
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	f141 0100 	adc.w	r1, r1, #0
 8002c46:	f7fd ffc7 	bl	8000bd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <UART_SetConfig+0x2c8>)
 8002c4c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d882      	bhi.n	8002b5a <UART_SetConfig+0xc6>
          huart->Instance->BRR = usartdiv;
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	60d8      	str	r0, [r3, #12]
 8002c58:	e7cf      	b.n	8002bfa <UART_SetConfig+0x166>
        pclk = (uint32_t) HSI_VALUE;
 8002c5a:	483e      	ldr	r0, [pc, #248]	; (8002d54 <UART_SetConfig+0x2c0>)
 8002c5c:	e04a      	b.n	8002cf4 <UART_SetConfig+0x260>
    switch (clocksource)
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	f63f af7b 	bhi.w	8002b5a <UART_SetConfig+0xc6>
 8002c64:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <UART_SetConfig+0x1d8>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c91 	.word	0x08002c91
 8002c70:	08002cb9 	.word	0x08002cb9
 8002c74:	08002ce3 	.word	0x08002ce3
 8002c78:	08002b5b 	.word	0x08002b5b
 8002c7c:	08002cbf 	.word	0x08002cbf
 8002c80:	08002b5b 	.word	0x08002b5b
 8002c84:	08002b5b 	.word	0x08002b5b
 8002c88:	08002b5b 	.word	0x08002b5b
 8002c8c:	08002b6b 	.word	0x08002b6b
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c90:	f7ff fbe0 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d0b0      	beq.n	8002bfa <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c98:	6863      	ldr	r3, [r4, #4]
 8002c9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c9c:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <UART_SetConfig+0x2c4>)
 8002c9e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002ca2:	fbb0 f0f2 	udiv	r0, r0, r2
 8002ca6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002caa:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cae:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002cb2:	f1a0 0210 	sub.w	r2, r0, #16
 8002cb6:	e7cb      	b.n	8002c50 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cb8:	f7ff fbde 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
        break;
 8002cbc:	e7ea      	b.n	8002c94 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetSysClockFreq();
 8002cbe:	f7fe ffc7 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
        break;
 8002cc2:	e7e7      	b.n	8002c94 <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002cc8:	d1f6      	bne.n	8002cb8 <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cca:	f7ff fbd5 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
        break;
 8002cce:	e00f      	b.n	8002cf0 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002cd4:	d1f3      	bne.n	8002cbe <UART_SetConfig+0x22a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd6:	f7fe ffbb 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
        break;
 8002cda:	e009      	b.n	8002cf0 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cdc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ce0:	d0bb      	beq.n	8002c5a <UART_SetConfig+0x1c6>
        pclk = (uint32_t) HSI_VALUE;
 8002ce2:	481c      	ldr	r0, [pc, #112]	; (8002d54 <UART_SetConfig+0x2c0>)
 8002ce4:	e7d8      	b.n	8002c98 <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002cea:	d1d1      	bne.n	8002c90 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cec:	f7ff fbb2 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d082      	beq.n	8002bfa <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cf4:	6862      	ldr	r2, [r4, #4]
 8002cf6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <UART_SetConfig+0x2c4>)
 8002cfa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d02:	0850      	lsrs	r0, r2, #1
 8002d04:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d08:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d0c:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d10:	f1a0 0210 	sub.w	r2, r0, #16
 8002d14:	429a      	cmp	r2, r3
 8002d16:	f63f af20 	bhi.w	8002b5a <UART_SetConfig+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d1a:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8002d1e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d20:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d22:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8002d26:	4318      	orrs	r0, r3
 8002d28:	60d0      	str	r0, [r2, #12]
 8002d2a:	e766      	b.n	8002bfa <UART_SetConfig+0x166>
 8002d2c:	cfff69f3 	.word	0xcfff69f3
 8002d30:	40008000 	.word	0x40008000
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	080111dc 	.word	0x080111dc
 8002d40:	40004400 	.word	0x40004400
 8002d44:	080111df 	.word	0x080111df
 8002d48:	40004800 	.word	0x40004800
 8002d4c:	40004c00 	.word	0x40004c00
 8002d50:	40005000 	.word	0x40005000
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	080111ec 	.word	0x080111ec
 8002d5c:	000ffcff 	.word	0x000ffcff

08002d60 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d62:	07da      	lsls	r2, r3, #31
{
 8002d64:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d66:	d506      	bpl.n	8002d76 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d68:	6801      	ldr	r1, [r0, #0]
 8002d6a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002d6c:	684a      	ldr	r2, [r1, #4]
 8002d6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002d72:	4322      	orrs	r2, r4
 8002d74:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d76:	079c      	lsls	r4, r3, #30
 8002d78:	d506      	bpl.n	8002d88 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d7a:	6801      	ldr	r1, [r0, #0]
 8002d7c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002d7e:	684a      	ldr	r2, [r1, #4]
 8002d80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d84:	4322      	orrs	r2, r4
 8002d86:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d88:	0759      	lsls	r1, r3, #29
 8002d8a:	d506      	bpl.n	8002d9a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d8c:	6801      	ldr	r1, [r0, #0]
 8002d8e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002d90:	684a      	ldr	r2, [r1, #4]
 8002d92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d96:	4322      	orrs	r2, r4
 8002d98:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d9a:	071a      	lsls	r2, r3, #28
 8002d9c:	d506      	bpl.n	8002dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d9e:	6801      	ldr	r1, [r0, #0]
 8002da0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002da2:	684a      	ldr	r2, [r1, #4]
 8002da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da8:	4322      	orrs	r2, r4
 8002daa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dac:	06dc      	lsls	r4, r3, #27
 8002dae:	d506      	bpl.n	8002dbe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002db0:	6801      	ldr	r1, [r0, #0]
 8002db2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002db4:	688a      	ldr	r2, [r1, #8]
 8002db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dba:	4322      	orrs	r2, r4
 8002dbc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dbe:	0699      	lsls	r1, r3, #26
 8002dc0:	d506      	bpl.n	8002dd0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dc2:	6801      	ldr	r1, [r0, #0]
 8002dc4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002dc6:	688a      	ldr	r2, [r1, #8]
 8002dc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dcc:	4322      	orrs	r2, r4
 8002dce:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dd0:	065a      	lsls	r2, r3, #25
 8002dd2:	d50f      	bpl.n	8002df4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dd4:	6801      	ldr	r1, [r0, #0]
 8002dd6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002dd8:	684a      	ldr	r2, [r1, #4]
 8002dda:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002dde:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002de0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002de4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002de6:	d105      	bne.n	8002df4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002de8:	684a      	ldr	r2, [r1, #4]
 8002dea:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002dec:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002df0:	4322      	orrs	r2, r4
 8002df2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	d506      	bpl.n	8002e06 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002df8:	6802      	ldr	r2, [r0, #0]
 8002dfa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002dfc:	6853      	ldr	r3, [r2, #4]
 8002dfe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002e02:	430b      	orrs	r3, r1
 8002e04:	6053      	str	r3, [r2, #4]
  }
}
 8002e06:	bd10      	pop	{r4, pc}

08002e08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e0c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002e10:	4604      	mov	r4, r0
 8002e12:	460e      	mov	r6, r1
 8002e14:	4615      	mov	r5, r2
 8002e16:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	69d3      	ldr	r3, [r2, #28]
 8002e1c:	ea36 0303 	bics.w	r3, r6, r3
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	42ab      	cmp	r3, r5
 8002e28:	d001      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e027      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002e32:	d0f2      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7fe fbf2 	bl	800161c <HAL_GetTick>
 8002e38:	1bc0      	subs	r0, r0, r7
 8002e3a:	4540      	cmp	r0, r8
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	d802      	bhi.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002e40:	f1b8 0f00 	cmp.w	r8, #0
 8002e44:	d11d      	bne.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	e840 3200 	strex	r2, r3, [r0]
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d1f7      	bne.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	f100 0308 	add.w	r3, r0, #8
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	f100 0108 	add.w	r1, r0, #8
 8002e66:	e841 3200 	strex	r2, r3, [r1]
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	d1f3      	bne.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002e74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8002e78:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8002e7c:	2003      	movs	r0, #3
}
 8002e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e82:	6803      	ldr	r3, [r0, #0]
 8002e84:	075a      	lsls	r2, r3, #29
 8002e86:	d5c7      	bpl.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e88:	69c3      	ldr	r3, [r0, #28]
 8002e8a:	051b      	lsls	r3, r3, #20
 8002e8c:	d5c4      	bpl.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e92:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9c:	e840 3200 	strex	r2, r3, [r0]
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d1f7      	bne.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	f100 0308 	add.w	r3, r0, #8
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	f100 0108 	add.w	r1, r0, #8
 8002eb4:	e841 3200 	strex	r2, r3, [r1]
 8002eb8:	2a00      	cmp	r2, #0
 8002eba:	d1f3      	bne.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002ec2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ec6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002eca:	e7d5      	b.n	8002e78 <UART_WaitOnFlagUntilTimeout+0x70>

08002ecc <HAL_UART_Transmit>:
{
 8002ecc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002ed0:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002ed6:	2b20      	cmp	r3, #32
{
 8002ed8:	4604      	mov	r4, r0
 8002eda:	460e      	mov	r6, r1
 8002edc:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002ede:	d150      	bne.n	8002f82 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 8002ee0:	2900      	cmp	r1, #0
 8002ee2:	d04c      	beq.n	8002f7e <HAL_UART_Transmit+0xb2>
 8002ee4:	2a00      	cmp	r2, #0
 8002ee6:	d04a      	beq.n	8002f7e <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002ee8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d048      	beq.n	8002f82 <HAL_UART_Transmit+0xb6>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef6:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ef8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002efe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8002f02:	f7fe fb8b 	bl	800161c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f06:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002f08:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002f10:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8002f12:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f16:	d103      	bne.n	8002f20 <HAL_UART_Transmit+0x54>
 8002f18:	6922      	ldr	r2, [r4, #16]
 8002f1a:	b90a      	cbnz	r2, 8002f20 <HAL_UART_Transmit+0x54>
 8002f1c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002f1e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002f20:	2200      	movs	r2, #0
 8002f22:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8002f26:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	b942      	cbnz	r2, 8002f44 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f32:	2140      	movs	r1, #64	; 0x40
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff ff67 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002f3a:	b958      	cbnz	r0, 8002f54 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8002f42:	e008      	b.n	8002f56 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f44:	2200      	movs	r2, #0
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	4620      	mov	r0, r4
 8002f4a:	9303      	str	r3, [sp, #12]
 8002f4c:	f7ff ff5c 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002f50:	9b03      	ldr	r3, [sp, #12]
 8002f52:	b118      	cbz	r0, 8002f5c <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 8002f54:	2003      	movs	r0, #3
}
 8002f56:	b004      	add	sp, #16
 8002f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f5c:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002f5e:	b95e      	cbnz	r6, 8002f78 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f60:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f68:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002f6a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	b292      	uxth	r2, r2
 8002f72:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8002f76:	e7d6      	b.n	8002f26 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f78:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002f7c:	e7f4      	b.n	8002f68 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 8002f7e:	2001      	movs	r0, #1
 8002f80:	e7e9      	b.n	8002f56 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8002f82:	2002      	movs	r0, #2
 8002f84:	e7e7      	b.n	8002f56 <HAL_UART_Transmit+0x8a>

08002f86 <HAL_UART_Receive>:
{
 8002f86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f8a:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f8c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8002f90:	2b20      	cmp	r3, #32
{
 8002f92:	4604      	mov	r4, r0
 8002f94:	460d      	mov	r5, r1
 8002f96:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f98:	d16a      	bne.n	8003070 <HAL_UART_Receive+0xea>
    if ((pData == NULL) || (Size == 0U))
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d066      	beq.n	800306c <HAL_UART_Receive+0xe6>
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d064      	beq.n	800306c <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 8002fa2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d062      	beq.n	8003070 <HAL_UART_Receive+0xea>
 8002faa:	2301      	movs	r3, #1
 8002fac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	f04f 0800 	mov.w	r8, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fb4:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fba:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbe:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 8002fc2:	f7fe fb2b 	bl	800161c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002fc6:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8002fc8:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002fd0:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8002fd2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8002fd6:	d11d      	bne.n	8003014 <HAL_UART_Receive+0x8e>
 8002fd8:	6922      	ldr	r2, [r4, #16]
 8002fda:	b9ca      	cbnz	r2, 8003010 <HAL_UART_Receive+0x8a>
 8002fdc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002fe0:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8002fe8:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	d123      	bne.n	8003036 <HAL_UART_Receive+0xb0>
 8002fee:	6923      	ldr	r3, [r4, #16]
 8002ff0:	bb0b      	cbnz	r3, 8003036 <HAL_UART_Receive+0xb0>
 8002ff2:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8002ff4:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8002ffc:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003000:	b290      	uxth	r0, r2
 8003002:	b9d0      	cbnz	r0, 800303a <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 8003004:	2320      	movs	r3, #32
 8003006:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800300a:	b003      	add	sp, #12
 800300c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8003010:	22ff      	movs	r2, #255	; 0xff
 8003012:	e7e5      	b.n	8002fe0 <HAL_UART_Receive+0x5a>
 8003014:	b923      	cbnz	r3, 8003020 <HAL_UART_Receive+0x9a>
 8003016:	6922      	ldr	r2, [r4, #16]
 8003018:	2a00      	cmp	r2, #0
 800301a:	d0f9      	beq.n	8003010 <HAL_UART_Receive+0x8a>
 800301c:	227f      	movs	r2, #127	; 0x7f
 800301e:	e7df      	b.n	8002fe0 <HAL_UART_Receive+0x5a>
 8003020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003024:	d104      	bne.n	8003030 <HAL_UART_Receive+0xaa>
 8003026:	6922      	ldr	r2, [r4, #16]
 8003028:	2a00      	cmp	r2, #0
 800302a:	d0f7      	beq.n	800301c <HAL_UART_Receive+0x96>
 800302c:	223f      	movs	r2, #63	; 0x3f
 800302e:	e7d7      	b.n	8002fe0 <HAL_UART_Receive+0x5a>
 8003030:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8003034:	e7d6      	b.n	8002fe4 <HAL_UART_Receive+0x5e>
      pdata16bits = NULL;
 8003036:	2600      	movs	r6, #0
 8003038:	e7dd      	b.n	8002ff6 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800303a:	9700      	str	r7, [sp, #0]
 800303c:	464b      	mov	r3, r9
 800303e:	2200      	movs	r2, #0
 8003040:	2120      	movs	r1, #32
 8003042:	4620      	mov	r0, r4
 8003044:	f7ff fee0 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8003048:	b9a0      	cbnz	r0, 8003074 <HAL_UART_Receive+0xee>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800304e:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 8003052:	b945      	cbnz	r5, 8003066 <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003054:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8003058:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800305c:	3a01      	subs	r2, #1
 800305e:	b292      	uxth	r2, r2
 8003060:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8003064:	e7ca      	b.n	8002ffc <HAL_UART_Receive+0x76>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003066:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 800306a:	e7f5      	b.n	8003058 <HAL_UART_Receive+0xd2>
      return  HAL_ERROR;
 800306c:	2001      	movs	r0, #1
 800306e:	e7cc      	b.n	800300a <HAL_UART_Receive+0x84>
    return HAL_BUSY;
 8003070:	2002      	movs	r0, #2
 8003072:	e7ca      	b.n	800300a <HAL_UART_Receive+0x84>
        return HAL_TIMEOUT;
 8003074:	2003      	movs	r0, #3
 8003076:	e7c8      	b.n	800300a <HAL_UART_Receive+0x84>

08003078 <UART_CheckIdleState>:
{
 8003078:	b530      	push	{r4, r5, lr}
 800307a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307c:	2500      	movs	r5, #0
{
 800307e:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003080:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8003084:	f7fe faca 	bl	800161c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003088:	6822      	ldr	r2, [r4, #0]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800308e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003090:	d417      	bmi.n	80030c2 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	0752      	lsls	r2, r2, #29
 8003098:	d509      	bpl.n	80030ae <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800309a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800309e:	9200      	str	r2, [sp, #0]
 80030a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030a4:	2200      	movs	r2, #0
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff feae 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 80030ac:	b9b0      	cbnz	r0, 80030dc <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 80030ae:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80030b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80030b6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80030ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030be:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 80030c0:	e00d      	b.n	80030de <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80030c6:	9200      	str	r2, [sp, #0]
 80030c8:	9003      	str	r0, [sp, #12]
 80030ca:	462a      	mov	r2, r5
 80030cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff fe99 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 80030d6:	9b03      	ldr	r3, [sp, #12]
 80030d8:	2800      	cmp	r0, #0
 80030da:	d0da      	beq.n	8003092 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80030dc:	2003      	movs	r0, #3
}
 80030de:	b005      	add	sp, #20
 80030e0:	bd30      	pop	{r4, r5, pc}

080030e2 <HAL_UART_Init>:
{
 80030e2:	b510      	push	{r4, lr}
  if (huart == NULL)
 80030e4:	4604      	mov	r4, r0
 80030e6:	b350      	cbz	r0, 800313e <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80030e8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80030ec:	b91b      	cbnz	r3, 80030f6 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80030ee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80030f2:	f7fe f8df 	bl	80012b4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80030f6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030f8:	2324      	movs	r3, #36	; 0x24
 80030fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff fcc4 	bl	8002a94 <UART_SetConfig>
 800310c:	2801      	cmp	r0, #1
 800310e:	d016      	beq.n	800313e <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003112:	b113      	cbz	r3, 800311a <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003114:	4620      	mov	r0, r4
 8003116:	f7ff fe23 	bl	8002d60 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003132:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003134:	601a      	str	r2, [r3, #0]
}
 8003136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800313a:	f7ff bf9d 	b.w	8003078 <UART_CheckIdleState>
}
 800313e:	2001      	movs	r0, #1
 8003140:	bd10      	pop	{r4, pc}
	...

08003144 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003144:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003146:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003148:	b91b      	cbnz	r3, 8003152 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800314a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800314e:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003150:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003152:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003154:	4d0a      	ldr	r5, [pc, #40]	; (8003180 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003156:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003158:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800315a:	4c0a      	ldr	r4, [pc, #40]	; (8003184 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800315c:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800315e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003162:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003164:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	fbb3 f3f1 	udiv	r3, r3, r1
 800316c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003170:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003172:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	fbb3 f3f2 	udiv	r3, r3, r2
 800317a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800317e:	e7e7      	b.n	8003150 <UARTEx_SetNbDataToProcess+0xc>
 8003180:	0801120c 	.word	0x0801120c
 8003184:	08011204 	.word	0x08011204

08003188 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003188:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800318c:	2b01      	cmp	r3, #1
 800318e:	d014      	beq.n	80031ba <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003190:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003192:	2324      	movs	r3, #36	; 0x24
 8003194:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003198:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800319a:	6813      	ldr	r3, [r2, #0]
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031a2:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031aa:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	2220      	movs	r2, #32
 80031ae:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80031b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80031b6:	4618      	mov	r0, r3
 80031b8:	4770      	bx	lr
  __HAL_LOCK(huart);
 80031ba:	2002      	movs	r0, #2
}
 80031bc:	4770      	bx	lr

080031be <HAL_UARTEx_SetTxFifoThreshold>:
{
 80031be:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80031c0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80031c4:	2b01      	cmp	r3, #1
{
 80031c6:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80031c8:	d01b      	beq.n	8003202 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80031ca:	2301      	movs	r3, #1
 80031cc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	2324      	movs	r3, #36	; 0x24
 80031d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031d6:	6803      	ldr	r3, [r0, #0]
 80031d8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80031e8:	4311      	orrs	r1, r2
 80031ea:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80031ec:	f7ff ffaa 	bl	8003144 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031f0:	6803      	ldr	r3, [r0, #0]
 80031f2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80031f4:	2320      	movs	r3, #32
 80031f6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8003200:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003202:	2002      	movs	r0, #2
 8003204:	e7fc      	b.n	8003200 <HAL_UARTEx_SetTxFifoThreshold+0x42>

08003206 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003206:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003208:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800320c:	2b01      	cmp	r3, #1
{
 800320e:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003210:	d01b      	beq.n	800324a <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003212:	2301      	movs	r3, #1
 8003214:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8003218:	2324      	movs	r3, #36	; 0x24
 800321a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800321e:	6803      	ldr	r3, [r0, #0]
 8003220:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8003230:	4311      	orrs	r1, r2
 8003232:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003234:	f7ff ff86 	bl	8003144 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003238:	6803      	ldr	r3, [r0, #0]
 800323a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800323c:	2320      	movs	r3, #32
 800323e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003242:	2000      	movs	r0, #0
 8003244:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8003248:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800324a:	2002      	movs	r0, #2
 800324c:	e7fc      	b.n	8003248 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

08003250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003250:	b084      	sub	sp, #16
 8003252:	b513      	push	{r0, r1, r4, lr}
 8003254:	4604      	mov	r4, r0
 8003256:	a805      	add	r0, sp, #20
 8003258:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800325c:	68e3      	ldr	r3, [r4, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <USB_CoreInit+0x70>)
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003264:	60e3      	str	r3, [r4, #12]
  __IO uint32_t count = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	9301      	str	r3, [sp, #4]
    count++;
 800326a:	9b01      	ldr	r3, [sp, #4]
 800326c:	3301      	adds	r3, #1
 800326e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003270:	9b01      	ldr	r3, [sp, #4]
 8003272:	4293      	cmp	r3, r2
 8003274:	d81e      	bhi.n	80032b4 <USB_CoreInit+0x64>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003276:	6923      	ldr	r3, [r4, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	daf6      	bge.n	800326a <USB_CoreInit+0x1a>

  /* Core Soft Reset */
  count = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003280:	6923      	ldr	r3, [r4, #16]

  do
  {
    count++;

    if (count > 200000U)
 8003282:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <USB_CoreInit+0x70>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6123      	str	r3, [r4, #16]
    count++;
 800328a:	9b01      	ldr	r3, [sp, #4]
 800328c:	3301      	adds	r3, #1
 800328e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	4293      	cmp	r3, r2
 8003294:	d80e      	bhi.n	80032b4 <USB_CoreInit+0x64>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003296:	6920      	ldr	r0, [r4, #16]
 8003298:	f010 0001 	ands.w	r0, r0, #1
 800329c:	d1f5      	bne.n	800328a <USB_CoreInit+0x3a>
  if (cfg.battery_charging_enable == 0U)
 800329e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032a0:	b953      	cbnz	r3, 80032b8 <USB_CoreInit+0x68>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032a8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80032aa:	b002      	add	sp, #8
 80032ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b0:	b004      	add	sp, #16
 80032b2:	4770      	bx	lr
      return HAL_TIMEOUT;
 80032b4:	2003      	movs	r0, #3
 80032b6:	e7f2      	b.n	800329e <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032be:	e7f3      	b.n	80032a8 <USB_CoreInit+0x58>
 80032c0:	00030d40 	.word	0x00030d40

080032c4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80032c4:	6883      	ldr	r3, [r0, #8]
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6083      	str	r3, [r0, #8]
}
 80032cc:	2000      	movs	r0, #0
 80032ce:	4770      	bx	lr

080032d0 <USB_SetCurrentMode>:
{
 80032d0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032d2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80032d4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032d6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 80032da:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032dc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80032de:	d110      	bne.n	8003302 <USB_SetCurrentMode+0x32>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80032e0:	68c3      	ldr	r3, [r0, #12]
 80032e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032e6:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80032e8:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80032ea:	2001      	movs	r0, #1
 80032ec:	f7fe f99c 	bl	8001628 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80032f0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80032f2:	07d9      	lsls	r1, r3, #31
      ms++;
 80032f4:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80032f8:	d415      	bmi.n	8003326 <USB_SetCurrentMode+0x56>
 80032fa:	2c32      	cmp	r4, #50	; 0x32
 80032fc:	d1f5      	bne.n	80032ea <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 80032fe:	2001      	movs	r0, #1
}
 8003300:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8003302:	2900      	cmp	r1, #0
 8003304:	d1fb      	bne.n	80032fe <USB_SetCurrentMode+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003306:	68c3      	ldr	r3, [r0, #12]
 8003308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800330c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800330e:	460c      	mov	r4, r1
      HAL_Delay(1U);
 8003310:	2001      	movs	r0, #1
 8003312:	f7fe f989 	bl	8001628 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003316:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003318:	07da      	lsls	r2, r3, #31
      ms++;
 800331a:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800331e:	d502      	bpl.n	8003326 <USB_SetCurrentMode+0x56>
 8003320:	2c32      	cmp	r4, #50	; 0x32
 8003322:	d1f5      	bne.n	8003310 <USB_SetCurrentMode+0x40>
 8003324:	e7eb      	b.n	80032fe <USB_SetCurrentMode+0x2e>
    return HAL_ERROR;
 8003326:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 800332a:	4258      	negs	r0, r3
 800332c:	4158      	adcs	r0, r3
 800332e:	e7e7      	b.n	8003300 <USB_SetCurrentMode+0x30>

08003330 <USB_FlushTxFifo>:
{
 8003330:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003332:	2300      	movs	r3, #0
    if (count > 200000U)
 8003334:	4a10      	ldr	r2, [pc, #64]	; (8003378 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8003336:	9301      	str	r3, [sp, #4]
    count++;
 8003338:	9b01      	ldr	r3, [sp, #4]
 800333a:	3301      	adds	r3, #1
 800333c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800333e:	9b01      	ldr	r3, [sp, #4]
 8003340:	4293      	cmp	r3, r2
 8003342:	d816      	bhi.n	8003372 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003344:	6903      	ldr	r3, [r0, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	daf6      	bge.n	8003338 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800334a:	0189      	lsls	r1, r1, #6
  count = 0U;
 800334c:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800334e:	f041 0120 	orr.w	r1, r1, #32
    if (count > 200000U)
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <USB_FlushTxFifo+0x48>)
  count = 0U;
 8003354:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003356:	6101      	str	r1, [r0, #16]
    count++;
 8003358:	9b01      	ldr	r3, [sp, #4]
 800335a:	3301      	adds	r3, #1
 800335c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800335e:	9b01      	ldr	r3, [sp, #4]
 8003360:	4293      	cmp	r3, r2
 8003362:	d806      	bhi.n	8003372 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003364:	6903      	ldr	r3, [r0, #16]
 8003366:	f013 0320 	ands.w	r3, r3, #32
 800336a:	d1f5      	bne.n	8003358 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 800336c:	4618      	mov	r0, r3
}
 800336e:	b002      	add	sp, #8
 8003370:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003372:	2003      	movs	r0, #3
 8003374:	e7fb      	b.n	800336e <USB_FlushTxFifo+0x3e>
 8003376:	bf00      	nop
 8003378:	00030d40 	.word	0x00030d40

0800337c <USB_FlushRxFifo>:
{
 800337c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800337e:	2300      	movs	r3, #0
    if (count > 200000U)
 8003380:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8003382:	9301      	str	r3, [sp, #4]
    count++;
 8003384:	9b01      	ldr	r3, [sp, #4]
 8003386:	3301      	adds	r3, #1
 8003388:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800338a:	9b01      	ldr	r3, [sp, #4]
 800338c:	4293      	cmp	r3, r2
 800338e:	d814      	bhi.n	80033ba <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003390:	6903      	ldr	r3, [r0, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	daf6      	bge.n	8003384 <USB_FlushRxFifo+0x8>
  count = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <USB_FlushRxFifo+0x44>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800339c:	2310      	movs	r3, #16
 800339e:	6103      	str	r3, [r0, #16]
    count++;
 80033a0:	9b01      	ldr	r3, [sp, #4]
 80033a2:	3301      	adds	r3, #1
 80033a4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80033a6:	9b01      	ldr	r3, [sp, #4]
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d806      	bhi.n	80033ba <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ac:	6903      	ldr	r3, [r0, #16]
 80033ae:	f013 0310 	ands.w	r3, r3, #16
 80033b2:	d1f5      	bne.n	80033a0 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 80033b4:	4618      	mov	r0, r3
}
 80033b6:	b002      	add	sp, #8
 80033b8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
 80033bc:	e7fb      	b.n	80033b6 <USB_FlushRxFifo+0x3a>
 80033be:	bf00      	nop
 80033c0:	00030d40 	.word	0x00030d40

080033c4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80033c4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80033c8:	4319      	orrs	r1, r3
 80033ca:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80033ce:	2000      	movs	r0, #0
 80033d0:	4770      	bx	lr
	...

080033d4 <USB_DevInit>:
{
 80033d4:	b084      	sub	sp, #16
 80033d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033da:	4604      	mov	r4, r0
 80033dc:	a809      	add	r0, sp, #36	; 0x24
 80033de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80033e2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 80033e8:	4619      	mov	r1, r3
 80033ea:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80033ee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80033f2:	3301      	adds	r3, #1
 80033f4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80033f6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80033f8:	d1f7      	bne.n	80033ea <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033fa:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 80033fe:	2f00      	cmp	r7, #0
 8003400:	d164      	bne.n	80034cc <USB_DevInit+0xf8>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003402:	6873      	ldr	r3, [r6, #4]
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800340a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800340c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003410:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003418:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003422:	2500      	movs	r5, #0
 8003424:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003428:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800342c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003430:	2103      	movs	r1, #3
 8003432:	4620      	mov	r0, r4
 8003434:	f7ff ffc6 	bl	80033c4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003438:	2110      	movs	r1, #16
 800343a:	4620      	mov	r0, r4
 800343c:	f7ff ff78 	bl	8003330 <USB_FlushTxFifo>
 8003440:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003442:	4620      	mov	r0, r4
 8003444:	f7ff ff9a 	bl	800337c <USB_FlushRxFifo>
 8003448:	4308      	orrs	r0, r1
 800344a:	b2c0      	uxtb	r0, r0
    ret = HAL_ERROR;
 800344c:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 800344e:	6135      	str	r5, [r6, #16]
    ret = HAL_ERROR;
 8003450:	bf18      	it	ne
 8003452:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8003454:	6175      	str	r5, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003456:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 800345a:	61f5      	str	r5, [r6, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 800345c:	462a      	mov	r2, r5
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800345e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003462:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003466:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800346a:	4545      	cmp	r5, r8
 800346c:	d133      	bne.n	80034d6 <USB_DevInit+0x102>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800346e:	2200      	movs	r2, #0
 8003470:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003474:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003476:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800347a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800347e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003482:	4542      	cmp	r2, r8
 8003484:	d139      	bne.n	80034fa <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003486:	6933      	ldr	r3, [r6, #16]
 8003488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800348c:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003492:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003496:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003498:	69a3      	ldr	r3, [r4, #24]
 800349a:	f043 0310 	orr.w	r3, r3, #16
 800349e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80034a0:	69a2      	ldr	r2, [r4, #24]
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <USB_DevInit+0x14c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80034a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034aa:	b11b      	cbz	r3, 80034b4 <USB_DevInit+0xe0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80034ac:	69a3      	ldr	r3, [r4, #24]
 80034ae:	f043 0308 	orr.w	r3, r3, #8
 80034b2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80034b4:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80034b6:	bf01      	itttt	eq
 80034b8:	69a3      	ldreq	r3, [r4, #24]
 80034ba:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80034be:	f043 0304 	orreq.w	r3, r3, #4
 80034c2:	61a3      	streq	r3, [r4, #24]
}
 80034c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c8:	b004      	add	sp, #16
 80034ca:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80034cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80034d4:	e7a5      	b.n	8003422 <USB_DevInit+0x4e>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034d6:	f8d3 9000 	ldr.w	r9, [r3]
 80034da:	f1b9 0f00 	cmp.w	r9, #0
 80034de:	da0a      	bge.n	80034f6 <USB_DevInit+0x122>
      if (i == 0U)
 80034e0:	b93d      	cbnz	r5, 80034f2 <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80034e2:	f8c3 c000 	str.w	ip, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80034e6:	611a      	str	r2, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034e8:	3501      	adds	r5, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80034ea:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034ee:	3320      	adds	r3, #32
 80034f0:	e7bb      	b.n	800346a <USB_DevInit+0x96>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80034f2:	6019      	str	r1, [r3, #0]
 80034f4:	e7f7      	b.n	80034e6 <USB_DevInit+0x112>
      USBx_INEP(i)->DIEPCTL = 0U;
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e7f5      	b.n	80034e6 <USB_DevInit+0x112>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034fa:	f8d3 9000 	ldr.w	r9, [r3]
 80034fe:	f1b9 0f00 	cmp.w	r9, #0
 8003502:	da0a      	bge.n	800351a <USB_DevInit+0x146>
      if (i == 0U)
 8003504:	b93a      	cbnz	r2, 8003516 <USB_DevInit+0x142>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003506:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800350a:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800350c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800350e:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003512:	3320      	adds	r3, #32
 8003514:	e7b5      	b.n	8003482 <USB_DevInit+0xae>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003516:	601d      	str	r5, [r3, #0]
 8003518:	e7f7      	b.n	800350a <USB_DevInit+0x136>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800351a:	6019      	str	r1, [r3, #0]
 800351c:	e7f5      	b.n	800350a <USB_DevInit+0x136>
 800351e:	bf00      	nop
 8003520:	803c3800 	.word	0x803c3800

08003524 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003524:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003528:	f023 0303 	bic.w	r3, r3, #3
 800352c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003530:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003534:	f043 0302 	orr.w	r3, r3, #2
 8003538:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800353c:	2000      	movs	r0, #0
 800353e:	4770      	bx	lr

08003540 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8003544:	221c      	movs	r2, #28
 8003546:	2100      	movs	r1, #0
 8003548:	4805      	ldr	r0, [pc, #20]	; (8003560 <_mon_alloc_reset+0x20>)
 800354a:	f009 ff09 	bl	800d360 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 800354e:	200a      	movs	r0, #10
 8003550:	f000 fffa 	bl	8004548 <__wrap_malloc>
 8003554:	4603      	mov	r3, r0
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f81e 	bl	8004598 <__wrap_free>
}
 800355c:	bf00      	nop
 800355e:	bd80      	pop	{r7, pc}
 8003560:	2000216c 	.word	0x2000216c

08003564 <dwtIpInit>:

#if !defined(HAS_DEDICATED_PERF_COUNTER)
#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003564:	4a07      	ldr	r2, [pc, #28]	; (8003584 <dwtIpInit+0x20>)
 8003566:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <dwtIpInit+0x24>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //| DWT_CTRL_CPIEVTENA_Msk;
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000ed00 	.word	0xe000ed00
 8003588:	e0001000 	.word	0xe0001000

0800358c <cyclesCounterEnd>:
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 800358c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return DWT->CYCCNT;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <cyclesCounterEnd+0x3c>)
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8003590:	4d0e      	ldr	r5, [pc, #56]	; (80035cc <cyclesCounterEnd+0x40>)
  return DWT->CYCCNT;
 8003592:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8003594:	686b      	ldr	r3, [r5, #4]
 8003596:	2100      	movs	r1, #0
 8003598:	1ae4      	subs	r4, r4, r3
 800359a:	9101      	str	r1, [sp, #4]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 800359c:	f7fe f83e 	bl	800161c <HAL_GetTick>
 80035a0:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 80035a2:	682a      	ldr	r2, [r5, #0]
 80035a4:	9901      	ldr	r1, [sp, #4]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 80035a6:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 80035a8:	4290      	cmp	r0, r2
 80035aa:	d90a      	bls.n	80035c2 <cyclesCounterEnd+0x36>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 80035ac:	460b      	mov	r3, r1
 80035ae:	f7fd fb13 	bl	8000bd8 <__aeabi_uldivmod>
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035b6:	fba0 0303 	umull	r0, r3, r0, r3
 80035ba:	1a59      	subs	r1, r3, r1
 80035bc:	1904      	adds	r4, r0, r4
 80035be:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}
 80035c2:	4620      	mov	r0, r4
 80035c4:	b003      	add	sp, #12
 80035c6:	bd30      	pop	{r4, r5, pc}
 80035c8:	e0001000 	.word	0xe0001000
 80035cc:	20002160 	.word	0x20002160

080035d0 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 80035d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80035d4:	4604      	mov	r4, r0
 80035d6:	460e      	mov	r6, r1
 80035d8:	4615      	mov	r5, r2

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 80035da:	f7ff ffd7 	bl	800358c <cyclesCounterEnd>

  u_obs = (struct u_observer_ctx *)cookie;
  u_obs->n_cb += 1;
 80035de:	e9d4 3200 	ldrd	r3, r2, [r4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	f142 0200 	adc.w	r2, r2, #0
 80035e8:	e9c4 3200 	strd	r3, r2, [r4]

  if (flags & AI_OBSERVER_POST_EVT) {
 80035ec:	0773      	lsls	r3, r6, #29
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 80035ee:	e9cd 0100 	strd	r0, r1, [sp]
  if (flags & AI_OBSERVER_POST_EVT) {
 80035f2:	d51f      	bpl.n	8003634 <user_observer_cb+0x64>
    const uint64_t end_t = ts - u_obs->start_t;
 80035f4:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80035f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035fc:	1a51      	subs	r1, r2, r1
 80035fe:	eb63 0000 	sbc.w	r0, r3, r0
    u_obs->k_dur_t += end_t;
 8003602:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8003606:	185b      	adds	r3, r3, r1
 8003608:	eb40 0202 	adc.w	r2, r0, r2
 800360c:	e9c4 3206 	strd	r3, r2, [r4, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 8003610:	882b      	ldrh	r3, [r5, #0]
 8003612:	6a26      	ldr	r6, [r4, #32]
 8003614:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8003618:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 800361c:	f856 200c 	ldr.w	r2, [r6, ip]
 8003620:	685d      	ldr	r5, [r3, #4]
 8003622:	1852      	adds	r2, r2, r1
 8003624:	f846 200c 	str.w	r2, [r6, ip]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8003628:	689a      	ldr	r2, [r3, #8]
    u_obs->nodes[node->c_idx].dur += end_t;
 800362a:	eb40 0005 	adc.w	r0, r0, r5
    u_obs->nodes[node->c_idx].n_runs += 1;
 800362e:	3201      	adds	r2, #1
    u_obs->nodes[node->c_idx].dur += end_t;
 8003630:	6058      	str	r0, [r3, #4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8003632:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8003634:	f7ff ffaa 	bl	800358c <cyclesCounterEnd>
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8003638:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800363c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003640:	ebb3 0308 	subs.w	r3, r3, r8
 8003644:	eb62 0209 	sbc.w	r2, r2, r9
 8003648:	181b      	adds	r3, r3, r0
  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 800364a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 800364e:	eb41 0102 	adc.w	r1, r1, r2
  return 0;
}
 8003652:	2000      	movs	r0, #0
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8003654:	e9c4 3104 	strd	r3, r1, [r4, #16]
}
 8003658:	b002      	add	sp, #8
 800365a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	...

08003660 <aiDeInit>:
{
 8003660:	b510      	push	{r4, lr}
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8003662:	4c09      	ldr	r4, [pc, #36]	; (8003688 <aiDeInit+0x28>)
  LC_PRINT("Releasing the instance(s)...\r\n");
 8003664:	4809      	ldr	r0, [pc, #36]	; (800368c <aiDeInit+0x2c>)
 8003666:	f000 ff5d 	bl	8004524 <lc_print>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	b150      	cbz	r0, 8003684 <aiDeInit+0x24>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 800366e:	f001 f971 	bl	8004954 <ai_mnetwork_destroy>
 8003672:	b128      	cbz	r0, 8003680 <aiDeInit+0x20>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	f001 f990 	bl	800499a <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_destroy");
 800367a:	4905      	ldr	r1, [pc, #20]	; (8003690 <aiDeInit+0x30>)
 800367c:	f000 fd3c 	bl	80040f8 <aiLogErr>
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	6023      	str	r3, [r4, #0]
}
 8003684:	bd10      	pop	{r4, pc}
 8003686:	bf00      	nop
 8003688:	200020b4 	.word	0x200020b4
 800368c:	080104e0 	.word	0x080104e0
 8003690:	080104ff 	.word	0x080104ff

08003694 <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 8003694:	b513      	push	{r0, r1, r4, lr}
  uint8_t c = 0;
 8003696:	2400      	movs	r4, #0

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8003698:	f241 3188 	movw	r1, #5000	; 0x1388
 800369c:	f10d 0007 	add.w	r0, sp, #7
  uint8_t c = 0;
 80036a0:	f88d 4007 	strb.w	r4, [sp, #7]
  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 80036a4:	f000 ff0e 	bl	80044c4 <ioRawGetUint8>
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	d015      	beq.n	80036d8 <aiTestConsole+0x44>
    return CONS_EVT_TIMEOUT;

  if ((c == 'q') || (c == 'Q'))
 80036ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036b0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80036b4:	2b51      	cmp	r3, #81	; 0x51
 80036b6:	d011      	beq.n	80036dc <aiTestConsole+0x48>
    return CONS_EVT_QUIT;

  if ((c == 'd') || (c == 'D'))
 80036b8:	2b44      	cmp	r3, #68	; 0x44
 80036ba:	d011      	beq.n	80036e0 <aiTestConsole+0x4c>
    return CONS_EVT_HIDE;

  if ((c == 'r') || (c == 'R'))
 80036bc:	2b52      	cmp	r3, #82	; 0x52
 80036be:	d011      	beq.n	80036e4 <aiTestConsole+0x50>
    return CONS_EVT_RESTART;

  if ((c == 'h') || (c == 'H') || (c == '?'))
 80036c0:	2b48      	cmp	r3, #72	; 0x48
 80036c2:	d011      	beq.n	80036e8 <aiTestConsole+0x54>
 80036c4:	2a3f      	cmp	r2, #63	; 0x3f
 80036c6:	d00f      	beq.n	80036e8 <aiTestConsole+0x54>
    return CONS_EVT_HELP;

  if ((c == 'p') || (c == 'P'))
 80036c8:	2b50      	cmp	r3, #80	; 0x50
 80036ca:	d00f      	beq.n	80036ec <aiTestConsole+0x58>
    return CONS_EVT_PAUSE;

  if ((c == 'x') || (c == 'X'))
    return CONS_EVT_PROF;
 80036cc:	2b58      	cmp	r3, #88	; 0x58
 80036ce:	bf14      	ite	ne
 80036d0:	2064      	movne	r0, #100	; 0x64
 80036d2:	2005      	moveq	r0, #5

  return CONS_EVT_UNDEFINED;
}
 80036d4:	b002      	add	sp, #8
 80036d6:	bd10      	pop	{r4, pc}
    return CONS_EVT_TIMEOUT;
 80036d8:	4620      	mov	r0, r4
 80036da:	e7fb      	b.n	80036d4 <aiTestConsole+0x40>
    return CONS_EVT_QUIT;
 80036dc:	2001      	movs	r0, #1
 80036de:	e7f9      	b.n	80036d4 <aiTestConsole+0x40>
    return CONS_EVT_HIDE;
 80036e0:	2006      	movs	r0, #6
 80036e2:	e7f7      	b.n	80036d4 <aiTestConsole+0x40>
    return CONS_EVT_RESTART;
 80036e4:	2002      	movs	r0, #2
 80036e6:	e7f5      	b.n	80036d4 <aiTestConsole+0x40>
    return CONS_EVT_HELP;
 80036e8:	2003      	movs	r0, #3
 80036ea:	e7f3      	b.n	80036d4 <aiTestConsole+0x40>
    return CONS_EVT_PAUSE;
 80036ec:	2004      	movs	r0, #4
 80036ee:	e7f1      	b.n	80036d4 <aiTestConsole+0x40>

080036f0 <aiObserverInit>:
{
 80036f0:	b530      	push	{r4, r5, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 80036f2:	4604      	mov	r4, r0
{
 80036f4:	b093      	sub	sp, #76	; 0x4c
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 80036f6:	b1d0      	cbz	r0, 800372e <aiObserverInit+0x3e>
 80036f8:	6800      	ldr	r0, [r0, #0]
 80036fa:	b1c0      	cbz	r0, 800372e <aiObserverInit+0x3e>
 80036fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80036fe:	b1b3      	cbz	r3, 800372e <aiObserverInit+0x3e>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8003700:	4d16      	ldr	r5, [pc, #88]	; (800375c <aiObserverInit+0x6c>)
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8003702:	aa04      	add	r2, sp, #16
 8003704:	a903      	add	r1, sp, #12
 8003706:	f001 f985 	bl	8004a14 <ai_mnetwork_get_private_handle>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 800370a:	2228      	movs	r2, #40	; 0x28
 800370c:	2100      	movs	r1, #0
 800370e:	4628      	mov	r0, r5
 8003710:	f009 fe26 	bl	800d360 <memset>
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 8003714:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003716:	0112      	lsls	r2, r2, #4
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8003718:	4610      	mov	r0, r2
 800371a:	9201      	str	r2, [sp, #4]
 800371c:	f000 ff14 	bl	8004548 <__wrap_malloc>
  if (!u_observer_ctx.nodes) {
 8003720:	9a01      	ldr	r2, [sp, #4]
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8003722:	6228      	str	r0, [r5, #32]
  if (!u_observer_ctx.nodes) {
 8003724:	b928      	cbnz	r0, 8003732 <aiObserverInit+0x42>
    LC_PRINT("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 8003726:	480e      	ldr	r0, [pc, #56]	; (8003760 <aiObserverInit+0x70>)
 8003728:	4611      	mov	r1, r2
 800372a:	f000 fefb 	bl	8004524 <lc_print>
}
 800372e:	b013      	add	sp, #76	; 0x4c
 8003730:	bd30      	pop	{r4, r5, pc}
  memset(u_observer_ctx.nodes, 0, sz);
 8003732:	2100      	movs	r1, #0
 8003734:	f009 fe14 	bl	800d360 <memset>
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 8003738:	490a      	ldr	r1, [pc, #40]	; (8003764 <aiObserverInit+0x74>)
 800373a:	9803      	ldr	r0, [sp, #12]
 800373c:	2306      	movs	r3, #6
 800373e:	462a      	mov	r2, r5
 8003740:	f003 faae 	bl	8006ca0 <ai_platform_observer_register>
  if (!res) {
 8003744:	4604      	mov	r4, r0
 8003746:	2800      	cmp	r0, #0
 8003748:	d1f1      	bne.n	800372e <aiObserverInit+0x3e>
    LC_PRINT("W: unable to register the user CB\r\n");
 800374a:	4807      	ldr	r0, [pc, #28]	; (8003768 <aiObserverInit+0x78>)
 800374c:	f000 feea 	bl	8004524 <lc_print>
    free(u_observer_ctx.nodes);
 8003750:	6a28      	ldr	r0, [r5, #32]
 8003752:	f000 ff21 	bl	8004598 <__wrap_free>
    u_observer_ctx.nodes = NULL;
 8003756:	622c      	str	r4, [r5, #32]
    return;
 8003758:	e7e9      	b.n	800372e <aiObserverInit+0x3e>
 800375a:	bf00      	nop
 800375c:	20002138 	.word	0x20002138
 8003760:	08010513 	.word	0x08010513
 8003764:	080035d1 	.word	0x080035d1
 8003768:	08010547 	.word	0x08010547

0800376c <aiObserverDone>:
{
 800376c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003770:	ed2d 8b02 	vpush	{d8}
 8003774:	b0a0      	sub	sp, #128	; 0x80
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8003776:	2800      	cmp	r0, #0
 8003778:	f000 80dd 	beq.w	8003936 <aiObserverDone+0x1ca>
 800377c:	6803      	ldr	r3, [r0, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80d9 	beq.w	8003936 <aiObserverDone+0x1ca>
 8003784:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8003786:	2a00      	cmp	r2, #0
 8003788:	f000 80d5 	beq.w	8003936 <aiObserverDone+0x1ca>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 800378c:	4d6c      	ldr	r5, [pc, #432]	; (8003940 <aiObserverDone+0x1d4>)
 800378e:	6a2a      	ldr	r2, [r5, #32]
 8003790:	2a00      	cmp	r2, #0
 8003792:	f000 80d0 	beq.w	8003936 <aiObserverDone+0x1ca>
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8003796:	4618      	mov	r0, r3
 8003798:	aa12      	add	r2, sp, #72	; 0x48
 800379a:	a909      	add	r1, sp, #36	; 0x24
 800379c:	f001 f93a 	bl	8004a14 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 80037a0:	4968      	ldr	r1, [pc, #416]	; (8003944 <aiObserverDone+0x1d8>)
 80037a2:	9809      	ldr	r0, [sp, #36]	; 0x24
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 80037a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003964 <aiObserverDone+0x1f8>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 80037a8:	462a      	mov	r2, r5
 80037aa:	f003 fb19 	bl	8006de0 <ai_platform_observer_unregister>
  LC_PRINT("\r\n Inference time by c-node\r\n");
 80037ae:	4866      	ldr	r0, [pc, #408]	; (8003948 <aiObserverDone+0x1dc>)
 80037b0:	f000 feb8 	bl	8004524 <lc_print>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 80037b4:	6a2b      	ldr	r3, [r5, #32]
 80037b6:	2400      	movs	r4, #0
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80037be:	4623      	mov	r3, r4
 80037c0:	f7fd fa0a 	bl	8000bd8 <__aeabi_uldivmod>
 80037c4:	aa0a      	add	r2, sp, #40	; 0x28
 80037c6:	f000 ff55 	bl	8004674 <dwtCyclesToTime>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 80037ca:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80037ce:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80037d2:	fb06 3101 	mla	r1, r6, r1, r3
 80037d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037d8:	485c      	ldr	r0, [pc, #368]	; (800394c <aiObserverDone+0x1e0>)
 80037da:	f000 fea3 	bl	8004524 <lc_print>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 80037de:	6a2b      	ldr	r3, [r5, #32]
 80037e0:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	4623      	mov	r3, r4
 80037e8:	f7fd f9f6 	bl	8000bd8 <__aeabi_uldivmod>
 80037ec:	aa0a      	add	r2, sp, #40	; 0x28
 80037ee:	f000 ff41 	bl	8004674 <dwtCyclesToTime>
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 80037f2:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80037f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037f8:	4855      	ldr	r0, [pc, #340]	; (8003950 <aiObserverDone+0x1e4>)
 80037fa:	fb06 3101 	mla	r1, r6, r1, r3
 80037fe:	f000 fe91 	bl	8004524 <lc_print>
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8003802:	f1a8 0324 	sub.w	r3, r8, #36	; 0x24
 8003806:	f1a8 0221 	sub.w	r2, r8, #33	; 0x21
 800380a:	f1a8 011c 	sub.w	r1, r8, #28
 800380e:	f1a8 0017 	sub.w	r0, r8, #23
 8003812:	f8cd 8000 	str.w	r8, [sp]
 8003816:	f000 fe85 	bl	8004524 <lc_print>
  LC_PRINT(" ---------------------------------------------------\r\n");
 800381a:	f108 000a 	add.w	r0, r8, #10
 800381e:	f000 fe81 	bl	8004524 <lc_print>
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8003822:	f1a8 03d6 	sub.w	r3, r8, #214	; 0xd6
  node_info.c_idx = 0;
 8003826:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
  cumul = 0;
 800382a:	4626      	mov	r6, r4
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 800382c:	9307      	str	r3, [sp, #28]
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 800382e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003830:	a90e      	add	r1, sp, #56	; 0x38
 8003832:	f003 f987 	bl	8006b44 <ai_platform_observer_node_info>
 8003836:	4680      	mov	r8, r0
 8003838:	bb20      	cbnz	r0, 8003884 <aiObserverDone+0x118>
  LC_PRINT(" -------------------------------------------------\r\n");
 800383a:	4846      	ldr	r0, [pc, #280]	; (8003954 <aiObserverDone+0x1e8>)
 800383c:	f000 fe72 	bl	8004524 <lc_print>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 8003840:	6a2b      	ldr	r3, [r5, #32]
 8003842:	4620      	mov	r0, r4
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	4631      	mov	r1, r6
 8003848:	4643      	mov	r3, r8
 800384a:	f7fd f9c5 	bl	8000bd8 <__aeabi_uldivmod>
  dwtCyclesToTime(cumul, &t);
 800384e:	aa0a      	add	r2, sp, #40	; 0x28
 8003850:	f000 ff10 	bl	8004674 <dwtCyclesToTime>
  LC_PRINT(" %31s %6d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 8003854:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800385a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800385e:	fb00 1202 	mla	r2, r0, r2, r1
 8003862:	493d      	ldr	r1, [pc, #244]	; (8003958 <aiObserverDone+0x1ec>)
 8003864:	1c48      	adds	r0, r1, #1
 8003866:	f000 fe5d 	bl	8004524 <lc_print>
  free(u_observer_ctx.nodes);
 800386a:	6a28      	ldr	r0, [r5, #32]
 800386c:	f000 fe94 	bl	8004598 <__wrap_free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8003870:	4833      	ldr	r0, [pc, #204]	; (8003940 <aiObserverDone+0x1d4>)
 8003872:	2228      	movs	r2, #40	; 0x28
 8003874:	4641      	mov	r1, r8
}
 8003876:	b020      	add	sp, #128	; 0x80
 8003878:	ecbd 8b02 	vpop	{d8}
 800387c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8003880:	f009 bd6e 	b.w	800d360 <memset>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8003884:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8003888:	6a2a      	ldr	r2, [r5, #32]
 800388a:	0119      	lsls	r1, r3, #4
 800388c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    cumul +=  sn->dur;
 8003890:	5850      	ldr	r0, [r2, r1]
 8003892:	6859      	ldr	r1, [r3, #4]
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8003894:	689a      	ldr	r2, [r3, #8]
    cumul +=  sn->dur;
 8003896:	1904      	adds	r4, r0, r4
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8003898:	f04f 0300 	mov.w	r3, #0
    cumul +=  sn->dur;
 800389c:	eb41 0606 	adc.w	r6, r1, r6
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 80038a0:	f7fd f99a 	bl	8000bd8 <__aeabi_uldivmod>
 80038a4:	aa0a      	add	r2, sp, #40	; 0x28
 80038a6:	f000 fee5 	bl	8004674 <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 80038aa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80038ae:	9907      	ldr	r1, [sp, #28]
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 80038b0:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80038b4:	4a29      	ldr	r2, [pc, #164]	; (800395c <aiObserverDone+0x1f0>)
    LC_PRINT(fmt, node_info.c_idx,
 80038b6:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80038ba:	ea12 0223 	ands.w	r2, r2, r3, asr #32
 80038be:	bf38      	it	cc
 80038c0:	460a      	movcc	r2, r1
    LC_PRINT(fmt, node_info.c_idx,
 80038c2:	f3c0 000e 	ubfx	r0, r0, #0, #15
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80038c6:	4691      	mov	r9, r2
    LC_PRINT(fmt, node_info.c_idx,
 80038c8:	f004 fc24 	bl	8008114 <ai_layer_type_name>
 80038cc:	2325      	movs	r3, #37	; 0x25
 80038ce:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80038d2:	9304      	str	r3, [sp, #16]
 80038d4:	6a2b      	ldr	r3, [r5, #32]
 80038d6:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 80038da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80038de:	4680      	mov	r8, r0
 80038e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038e4:	f7fc fe6a 	bl	80005bc <__aeabi_ul2d>
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <aiObserverDone+0x1f4>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	f7fc fe9c 	bl	8000628 <__aeabi_dmul>
 80038f0:	ec41 0b18 	vmov	d8, r0, r1
 80038f4:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80038f8:	f7fc fe60 	bl	80005bc <__aeabi_ul2d>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	ec51 0b18 	vmov	r0, r1, d8
 8003904:	f7fc ffba 	bl	800087c <__aeabi_ddiv>
 8003908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800390a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003914:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003918:	fb01 3302 	mla	r3, r1, r2, r3
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4642      	mov	r2, r8
 8003920:	465b      	mov	r3, fp
 8003922:	4651      	mov	r1, sl
 8003924:	4648      	mov	r0, r9
 8003926:	f000 fdfd 	bl	8004524 <lc_print>
    node_info.c_idx++;
 800392a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800392e:	3301      	adds	r3, #1
 8003930:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8003934:	e77b      	b.n	800382e <aiObserverDone+0xc2>
}
 8003936:	b020      	add	sp, #128	; 0x80
 8003938:	ecbd 8b02 	vpop	{d8}
 800393c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8003940:	20002138 	.word	0x20002138
 8003944:	080035d1 	.word	0x080035d1
 8003948:	080105b6 	.word	0x080105b6
 800394c:	080105d4 	.word	0x080105d4
 8003950:	0801060f 	.word	0x0801060f
 8003954:	080106a9 	.word	0x080106a9
 8003958:	080106de 	.word	0x080106de
 800395c:	0801056b 	.word	0x0801056b
 8003960:	40590000 	.word	0x40590000
 8003964:	08010668 	.word	0x08010668

08003968 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8003968:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 800396c:	484d      	ldr	r0, [pc, #308]	; (8003aa4 <aiSystemPerformanceInit+0x13c>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800396e:	4d4e      	ldr	r5, [pc, #312]	; (8003aa8 <aiSystemPerformanceInit+0x140>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003970:	4e4e      	ldr	r6, [pc, #312]	; (8003aac <aiSystemPerformanceInit+0x144>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003972:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8003ad0 <aiSystemPerformanceInit+0x168>
{
 8003976:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 8003978:	f000 fdd4 	bl	8004524 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 800397c:	494c      	ldr	r1, [pc, #304]	; (8003ab0 <aiSystemPerformanceInit+0x148>)
 800397e:	2300      	movs	r3, #0
 8003980:	2207      	movs	r2, #7
 8003982:	f101 0022 	add.w	r0, r1, #34	; 0x22
 8003986:	f000 fdcd 	bl	8004524 <lc_print>
 800398a:	2400      	movs	r4, #0
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 800398c:	4849      	ldr	r0, [pc, #292]	; (8003ab4 <aiSystemPerformanceInit+0x14c>)
 800398e:	f000 fdc9 	bl	8004524 <lc_print>

  systemSettingLog();
 8003992:	f000 fedb 	bl	800474c <systemSettingLog>

  crcIpInit();
 8003996:	f000 fe55 	bl	8004644 <crcIpInit>
  dwtIpInit();
 800399a:	f7ff fde3 	bl	8003564 <dwtIpInit>
  HAL_Delay(100);
 800399e:	2064      	movs	r0, #100	; 0x64
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80039a0:	606c      	str	r4, [r5, #4]
  HAL_Delay(100);
 80039a2:	f7fd fe41 	bl	8001628 <HAL_Delay>
  return DWT->CYCCNT;
 80039a6:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 80039a8:	aa02      	add	r2, sp, #8
 80039aa:	2564      	movs	r5, #100	; 0x64
 80039ac:	4621      	mov	r1, r4
 80039ae:	fbb0 f0f5 	udiv	r0, r0, r5
 80039b2:	f000 fe5f 	bl	8004674 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 80039b6:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80039ba:	9a05      	ldr	r2, [sp, #20]
 80039bc:	483e      	ldr	r0, [pc, #248]	; (8003ab8 <aiSystemPerformanceInit+0x150>)
 80039be:	fb05 3101 	mla	r1, r5, r1, r3
 80039c2:	f000 fdaf 	bl	8004524 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 80039c6:	aa02      	add	r2, sp, #8
 80039c8:	2100      	movs	r1, #0
 80039ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039ce:	f000 fe51 	bl	8004674 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 80039d2:	9a03      	ldr	r2, [sp, #12]
 80039d4:	9b04      	ldr	r3, [sp, #16]
 80039d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039da:	fb01 3302 	mla	r3, r1, r2, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80039de:	4635      	mov	r5, r6
 80039e0:	4a36      	ldr	r2, [pc, #216]	; (8003abc <aiSystemPerformanceInit+0x154>)
 80039e2:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 80039e4:	f7ff fdbe 	bl	8003564 <dwtIpInit>
  aiPlatformVersion();
 80039e8:	f000 fb70 	bl	80040cc <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80039ec:	f845 4b04 	str.w	r4, [r5], #4
  LC_PRINT("Discovering the network(s)...\r\n");
 80039f0:	4833      	ldr	r0, [pc, #204]	; (8003ac0 <aiSystemPerformanceInit+0x158>)
 80039f2:	f000 fd97 	bl	8004524 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80039f6:	f109 0a17 	add.w	sl, r9, #23
  LC_PRINT("Initializing the network\r\n");
 80039fa:	f109 0b48 	add.w	fp, r9, #72	; 0x48
    nn_name = ai_mnetwork_find(NULL, idx);
 80039fe:	4621      	mov	r1, r4
 8003a00:	2000      	movs	r0, #0
 8003a02:	f000 ff6b 	bl	80048dc <ai_mnetwork_find>
    if (nn_name) {
 8003a06:	4680      	mov	r8, r0
 8003a08:	b188      	cbz	r0, 8003a2e <aiSystemPerformanceInit+0xc6>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4648      	mov	r0, r9
 8003a0e:	f000 fd89 	bl	8004524 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8003a12:	4641      	mov	r1, r8
 8003a14:	4650      	mov	r0, sl
 8003a16:	f000 fd85 	bl	8004524 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	1f29      	subs	r1, r5, #4
 8003a1e:	4640      	mov	r0, r8
 8003a20:	f000 ff6a 	bl	80048f8 <ai_mnetwork_create>
  if (err.type) {
 8003a24:	b2c3      	uxtb	r3, r0
 8003a26:	b14b      	cbz	r3, 8003a3c <aiSystemPerformanceInit+0xd4>
    aiLogErr(err, "ai_mnetwork_create");
 8003a28:	4926      	ldr	r1, [pc, #152]	; (8003ac4 <aiSystemPerformanceInit+0x15c>)
 8003a2a:	f000 fb65 	bl	80040f8 <aiLogErr>
  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 8003a2e:	2003      	movs	r0, #3
 8003a30:	f00a f9e8 	bl	800de04 <srand>

  return 0;
}
 8003a34:	2000      	movs	r0, #0
 8003a36:	b006      	add	sp, #24
 8003a38:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8003a3c:	4658      	mov	r0, fp
 8003a3e:	f000 fd71 	bl	8004524 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003a42:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8003a46:	4629      	mov	r1, r5
 8003a48:	f000 ff9c 	bl	8004984 <ai_mnetwork_get_report>
 8003a4c:	46a8      	mov	r8, r5
 8003a4e:	4603      	mov	r3, r0
 8003a50:	b930      	cbnz	r0, 8003a60 <aiSystemPerformanceInit+0xf8>
    err = ai_mnetwork_get_error(ctx->handle);
 8003a52:	01e4      	lsls	r4, r4, #7
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	5930      	ldr	r0, [r6, r4]
 8003a58:	f000 ff9f 	bl	800499a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8003a5c:	491a      	ldr	r1, [pc, #104]	; (8003ac8 <aiSystemPerformanceInit+0x160>)
 8003a5e:	e00a      	b.n	8003a76 <aiSystemPerformanceInit+0x10e>
  if (!ai_mnetwork_init(ctx->handle)) {
 8003a60:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8003a64:	f000 ffa6 	bl	80049b4 <ai_mnetwork_init>
 8003a68:	b968      	cbnz	r0, 8003a86 <aiSystemPerformanceInit+0x11e>
    err = ai_mnetwork_get_error(ctx->handle);
 8003a6a:	01e4      	lsls	r4, r4, #7
 8003a6c:	9001      	str	r0, [sp, #4]
 8003a6e:	5930      	ldr	r0, [r6, r4]
 8003a70:	f000 ff93 	bl	800499a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003a74:	4915      	ldr	r1, [pc, #84]	; (8003acc <aiSystemPerformanceInit+0x164>)
    aiLogErr(err, "ai_mnetwork_get_info");
 8003a76:	f000 fb3f 	bl	80040f8 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003a7a:	5930      	ldr	r0, [r6, r4]
 8003a7c:	f000 ff6a 	bl	8004954 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8003a80:	9b01      	ldr	r3, [sp, #4]
 8003a82:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 8003a84:	e7d3      	b.n	8003a2e <aiSystemPerformanceInit+0xc6>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003a86:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f000 ff7a 	bl	8004984 <ai_mnetwork_get_report>
 8003a90:	3580      	adds	r5, #128	; 0x80
 8003a92:	4603      	mov	r3, r0
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d0dc      	beq.n	8003a52 <aiSystemPerformanceInit+0xea>
    aiPrintNetworkInfo(&ctx->report);
 8003a98:	4640      	mov	r0, r8
 8003a9a:	f000 fc3d 	bl	8004318 <aiPrintNetworkInfo>
    idx++;
 8003a9e:	3401      	adds	r4, #1
  } while (nn_name);
 8003aa0:	e7ad      	b.n	80039fe <aiSystemPerformanceInit+0x96>
 8003aa2:	bf00      	nop
 8003aa4:	080106f3 	.word	0x080106f3
 8003aa8:	e0001000 	.word	0xe0001000
 8003aac:	200020b4 	.word	0x200020b4
 8003ab0:	080106f9 	.word	0x080106f9
 8003ab4:	08010728 	.word	0x08010728
 8003ab8:	0801072c 	.word	0x0801072c
 8003abc:	20002160 	.word	0x20002160
 8003ac0:	08010766 	.word	0x08010766
 8003ac4:	080107bb 	.word	0x080107bb
 8003ac8:	080107e9 	.word	0x080107e9
 8003acc:	080107fe 	.word	0x080107fe
 8003ad0:	08010786 	.word	0x08010786

08003ad4 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 8003ad4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003ad8:	ed2d 8b02 	vpush	{d8}
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003adc:	ed9f 8a54 	vldr	s16, [pc, #336]	; 8003c30 <aiSystemPerformanceProcess+0x15c>
{
 8003ae0:	b09c      	sub	sp, #112	; 0x70
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8003ae2:	4c54      	ldr	r4, [pc, #336]	; (8003c34 <aiSystemPerformanceProcess+0x160>)
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	b94b      	cbnz	r3, 8003afc <aiSystemPerformanceProcess+0x28>
    LC_PRINT("E: network handle is NULL\r\n");
 8003ae8:	4853      	ldr	r0, [pc, #332]	; (8003c38 <aiSystemPerformanceProcess+0x164>)
 8003aea:	f000 fd1b 	bl	8004524 <lc_print>

  do {
    r = aiTestPerformance(idx);
    idx = (idx+1) % AI_MNETWORK_NUMBER;

    if (!r) {
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      }
    }
  } while (r==0);

  return r;
}
 8003af2:	b01c      	add	sp, #112	; 0x70
 8003af4:	ecbd 8b02 	vpop	{d8}
 8003af8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003afc:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8003b00:	f3ef 8108 	mrs	r1, MSP
  if (profiling_mode)
 8003b04:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8003c64 <aiSystemPerformanceProcess+0x190>
  MON_STACK_INIT();
 8003b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b0c:	f000 fd6c 	bl	80045e8 <stackMonInit>
  if (profiling_mode)
 8003b10:	f89b 3000 	ldrb.w	r3, [fp]
 8003b14:	b30b      	cbz	r3, 8003b5a <aiSystemPerformanceProcess+0x86>
    niter = _APP_ITER_ * profiling_factor;
 8003b16:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <aiSystemPerformanceProcess+0x168>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
  LC_PRINT("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 8003b1e:	6861      	ldr	r1, [r4, #4]
 8003b20:	4847      	ldr	r0, [pc, #284]	; (8003c40 <aiSystemPerformanceProcess+0x16c>)
 8003b22:	4642      	mov	r2, r8
 8003b24:	f000 fcfe 	bl	8004524 <lc_print>
 8003b28:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 8003b2c:	4d45      	ldr	r5, [pc, #276]	; (8003c44 <aiSystemPerformanceProcess+0x170>)
 8003b2e:	69aa      	ldr	r2, [r5, #24]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <aiSystemPerformanceProcess+0x6a>
 8003b34:	f3ef 8108 	mrs	r1, MSP
 8003b38:	4843      	ldr	r0, [pc, #268]	; (8003c48 <aiSystemPerformanceProcess+0x174>)
 8003b3a:	f000 fcf3 	bl	8004524 <lc_print>
  MON_STACK_MARK();
 8003b3e:	792b      	ldrb	r3, [r5, #4]
 8003b40:	b973      	cbnz	r3, 8003b60 <aiSystemPerformanceProcess+0x8c>
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8003b42:	f8b4 e034 	ldrh.w	lr, [r4, #52]	; 0x34
 8003b46:	f1be 0f01 	cmp.w	lr, #1
 8003b4a:	d915      	bls.n	8003b78 <aiSystemPerformanceProcess+0xa4>
    LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 8003b4c:	483f      	ldr	r0, [pc, #252]	; (8003c4c <aiSystemPerformanceProcess+0x178>)
 8003b4e:	f000 fce9 	bl	8004524 <lc_print>
    port_hal_delay(100);
 8003b52:	2064      	movs	r0, #100	; 0x64
 8003b54:	f7fd fd68 	bl	8001628 <HAL_Delay>
 8003b58:	e7c9      	b.n	8003aee <aiSystemPerformanceProcess+0x1a>
    niter = _APP_ITER_;
 8003b5a:	f04f 0810 	mov.w	r8, #16
 8003b5e:	e7de      	b.n	8003b1e <aiSystemPerformanceProcess+0x4a>
  MON_STACK_MARK();
 8003b60:	69eb      	ldr	r3, [r5, #28]
 8003b62:	3303      	adds	r3, #3
 8003b64:	f023 0303 	bic.w	r3, r3, #3
 8003b68:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 8003b6c:	69aa      	ldr	r2, [r5, #24]
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d2e7      	bcs.n	8003b42 <aiSystemPerformanceProcess+0x6e>
 8003b72:	f843 1b04 	str.w	r1, [r3], #4
 8003b76:	e7f9      	b.n	8003b6c <aiSystemPerformanceProcess+0x98>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 8003b78:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8003b7c:	f1bc 0f01 	cmp.w	ip, #1
 8003b80:	d8e4      	bhi.n	8003b4c <aiSystemPerformanceProcess+0x78>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003b82:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8003c68 <aiSystemPerformanceProcess+0x194>
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	e010      	b.n	8003bac <aiSystemPerformanceProcess+0xd8>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8003b8a:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 8003b8e:	4656      	mov	r6, sl
 8003b90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b92:	ad0e      	add	r5, sp, #56	; 0x38
 8003b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b96:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8003b9a:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8003b9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8003ba2:	b90b      	cbnz	r3, 8003ba8 <aiSystemPerformanceProcess+0xd4>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003ba4:	f8d9 3000 	ldr.w	r3, [r9]
 8003ba8:	930f      	str	r3, [sp, #60]	; 0x3c
    niter = _APP_ITER_;
 8003baa:	2301      	movs	r3, #1
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003bac:	459e      	cmp	lr, r3
 8003bae:	dcec      	bgt.n	8003b8a <aiSystemPerformanceProcess+0xb6>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003bb0:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8003c6c <aiSystemPerformanceProcess+0x198>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	459c      	cmp	ip, r3
 8003bb8:	dc28      	bgt.n	8003c0c <aiSystemPerformanceProcess+0x138>
  if (profiling_mode) {
 8003bba:	f89b 3000 	ldrb.w	r3, [fp]
 8003bbe:	b14b      	cbz	r3, 8003bd4 <aiSystemPerformanceProcess+0x100>
    LC_PRINT("Profiling mode (%d)...\r\n", profiling_factor);
 8003bc0:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <aiSystemPerformanceProcess+0x168>)
 8003bc2:	4823      	ldr	r0, [pc, #140]	; (8003c50 <aiSystemPerformanceProcess+0x17c>)
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	f000 fcad 	bl	8004524 <lc_print>
    fflush(stdout);
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <aiSystemPerformanceProcess+0x180>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6898      	ldr	r0, [r3, #8]
 8003bd0:	f009 fa78 	bl	800d0c4 <fflush>
  if (observer_mode) {
 8003bd4:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <aiSystemPerformanceProcess+0x184>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b153      	cbz	r3, 8003bf0 <aiSystemPerformanceProcess+0x11c>
    MON_ALLOC_ENABLE();
 8003bda:	4d20      	ldr	r5, [pc, #128]	; (8003c5c <aiSystemPerformanceProcess+0x188>)
    MON_ALLOC_RESET();
 8003bdc:	f7ff fcb0 	bl	8003540 <_mon_alloc_reset>
    MON_ALLOC_ENABLE();
 8003be0:	682b      	ldr	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 8003be2:	4814      	ldr	r0, [pc, #80]	; (8003c34 <aiSystemPerformanceProcess+0x160>)
    MON_ALLOC_ENABLE();
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	602b      	str	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 8003bea:	f7ff fd81 	bl	80036f0 <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 8003bee:	696b      	ldr	r3, [r5, #20]
  int observer_heap_sz = 0UL;
 8003bf0:	9306      	str	r3, [sp, #24]
  MON_ALLOC_RESET();
 8003bf2:	f7ff fca5 	bl	8003540 <_mon_alloc_reset>
  tcumul = 0ULL;
 8003bf6:	2500      	movs	r5, #0
 8003bf8:	46aa      	mov	sl, r5
  for (iter = 0; iter < niter; iter++) {
 8003bfa:	462e      	mov	r6, r5
 8003bfc:	4546      	cmp	r6, r8
 8003bfe:	da75      	bge.n	8003cec <aiSystemPerformanceProcess+0x218>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003c00:	2200      	movs	r2, #0
            in_data[j] = (ai_i8)(v * 127);
 8003c02:	eddf 8a17 	vldr	s17, [pc, #92]	; 8003c60 <aiSystemPerformanceProcess+0x18c>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003c06:	9204      	str	r2, [sp, #16]
 8003c08:	ab0e      	add	r3, sp, #56	; 0x38
 8003c0a:	e04c      	b.n	8003ca6 <aiSystemPerformanceProcess+0x1d2>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8003c0c:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
 8003c10:	464e      	mov	r6, r9
 8003c12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c14:	ad15      	add	r5, sp, #84	; 0x54
 8003c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c18:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8003c1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8003c20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8003c24:	b90b      	cbnz	r3, 8003c2a <aiSystemPerformanceProcess+0x156>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003c26:	f8de 3000 	ldr.w	r3, [lr]
 8003c2a:	9316      	str	r3, [sp, #88]	; 0x58
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e7c2      	b.n	8003bb6 <aiSystemPerformanceProcess+0xe2>
 8003c30:	30000000 	.word	0x30000000
 8003c34:	200020b4 	.word	0x200020b4
 8003c38:	0801080f 	.word	0x0801080f
 8003c3c:	20000010 	.word	0x20000010
 8003c40:	0801082b 	.word	0x0801082b
 8003c44:	20002188 	.word	0x20002188
 8003c48:	0801086e 	.word	0x0801086e
 8003c4c:	080108b2 	.word	0x080108b2
 8003c50:	080108e8 	.word	0x080108e8
 8003c54:	20001864 	.word	0x20001864
 8003c58:	2000000c 	.word	0x2000000c
 8003c5c:	2000216c 	.word	0x2000216c
 8003c60:	42fe0000 	.word	0x42fe0000
 8003c64:	20002134 	.word	0x20002134
 8003c68:	2000001c 	.word	0x2000001c
 8003c6c:	20000020 	.word	0x20000020
      ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 8003c70:	e9d3 1200 	ldrd	r1, r2, [r3]
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003c74:	f3c1 4043 	ubfx	r0, r1, #17, #4
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003c78:	f3c1 11d1 	ubfx	r1, r1, #7, #18
 8003c7c:	f001 0178 	and.w	r1, r1, #120	; 0x78
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003c80:	9005      	str	r0, [sp, #20]
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003c82:	9107      	str	r1, [sp, #28]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003c84:	f04f 0900 	mov.w	r9, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c8e:	9308      	str	r3, [sp, #32]
 8003c90:	f001 fbec 	bl	800546c <ai_buffer_get_size>
 8003c94:	4581      	cmp	r9, r0
 8003c96:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8003c9a:	f0c0 8112 	bcc.w	8003ec2 <aiSystemPerformanceProcess+0x3ee>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003c9e:	9a04      	ldr	r2, [sp, #16]
 8003ca0:	3201      	adds	r2, #1
 8003ca2:	9204      	str	r2, [sp, #16]
 8003ca4:	331c      	adds	r3, #28
 8003ca6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003ca8:	9904      	ldr	r1, [sp, #16]
 8003caa:	4291      	cmp	r1, r2
 8003cac:	dbe0      	blt.n	8003c70 <aiSystemPerformanceProcess+0x19c>
    MON_ALLOC_ENABLE();
 8003cae:	f8df 9328 	ldr.w	r9, [pc, #808]	; 8003fd8 <aiSystemPerformanceProcess+0x504>
 8003cb2:	f8d9 3000 	ldr.w	r3, [r9]
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	f8c9 3000 	str.w	r3, [r9]
  cyclesCount.tick_start = HAL_GetTick();
 8003cbe:	f7fd fcad 	bl	800161c <HAL_GetTick>
 8003cc2:	4bb6      	ldr	r3, [pc, #728]	; (8003f9c <aiSystemPerformanceProcess+0x4c8>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003cc4:	4ab6      	ldr	r2, [pc, #728]	; (8003fa0 <aiSystemPerformanceProcess+0x4cc>)
  cyclesCount.tick_start = HAL_GetTick();
 8003cc6:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003cc8:	2100      	movs	r1, #0
 8003cca:	6051      	str	r1, [r2, #4]
  return DWT->CYCCNT;
 8003ccc:	6852      	ldr	r2, [r2, #4]
  cyclesCount.dwt_start = dwtGetCycles();
 8003cce:	605a      	str	r2, [r3, #4]
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 8003cd0:	6820      	ldr	r0, [r4, #0]
 8003cd2:	aa15      	add	r2, sp, #84	; 0x54
 8003cd4:	a90e      	add	r1, sp, #56	; 0x38
 8003cd6:	f000 fe8c 	bl	80049f2 <ai_mnetwork_run>
    if (batch != 1) {
 8003cda:	2801      	cmp	r0, #1
 8003cdc:	f000 8121 	beq.w	8003f22 <aiSystemPerformanceProcess+0x44e>
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 8003ce0:	6820      	ldr	r0, [r4, #0]
 8003ce2:	f000 fe5a 	bl	800499a <ai_mnetwork_get_error>
 8003ce6:	49af      	ldr	r1, [pc, #700]	; (8003fa4 <aiSystemPerformanceProcess+0x4d0>)
 8003ce8:	f000 fa06 	bl	80040f8 <aiLogErr>
  LC_PRINT("\r\n");
 8003cec:	48ae      	ldr	r0, [pc, #696]	; (8003fa8 <aiSystemPerformanceProcess+0x4d4>)
 8003cee:	f000 fc19 	bl	8004524 <lc_print>
  MON_STACK_EVALUATE();
 8003cf2:	4aae      	ldr	r2, [pc, #696]	; (8003fac <aiSystemPerformanceProcess+0x4d8>)
 8003cf4:	f892 c004 	ldrb.w	ip, [r2, #4]
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	6090      	str	r0, [r2, #8]
 8003cfc:	f1bc 0f00 	cmp.w	ip, #0
 8003d00:	d024      	beq.n	8003d4c <aiSystemPerformanceProcess+0x278>
 8003d02:	6953      	ldr	r3, [r2, #20]
 8003d04:	68d1      	ldr	r1, [r2, #12]
 8003d06:	1a59      	subs	r1, r3, r1
 8003d08:	69d3      	ldr	r3, [r2, #28]
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	f023 0303 	bic.w	r3, r3, #3
 8003d10:	f103 0e20 	add.w	lr, r3, #32
 8003d14:	f853 8b04 	ldr.w	r8, [r3], #4
 8003d18:	f1b8 3fde 	cmp.w	r8, #3739147998	; 0xdededede
 8003d1c:	bf18      	it	ne
 8003d1e:	4660      	movne	r0, ip
 8003d20:	459e      	cmp	lr, r3
 8003d22:	d1f7      	bne.n	8003d14 <aiSystemPerformanceProcess+0x240>
 8003d24:	46f4      	mov	ip, lr
 8003d26:	2800      	cmp	r0, #0
 8003d28:	f040 811f 	bne.w	8003f6a <aiSystemPerformanceProcess+0x496>
 8003d2c:	4a9f      	ldr	r2, [pc, #636]	; (8003fac <aiSystemPerformanceProcess+0x4d8>)
 8003d2e:	2320      	movs	r3, #32
 8003d30:	f8d2 e018 	ldr.w	lr, [r2, #24]
 8003d34:	6093      	str	r3, [r2, #8]
 8003d36:	f8dc 0000 	ldr.w	r0, [ip]
 8003d3a:	6893      	ldr	r3, [r2, #8]
 8003d3c:	f1b0 3fde 	cmp.w	r0, #3739147998	; 0xdededede
 8003d40:	d102      	bne.n	8003d48 <aiSystemPerformanceProcess+0x274>
 8003d42:	45f4      	cmp	ip, lr
 8003d44:	f0c0 810c 	bcc.w	8003f60 <aiSystemPerformanceProcess+0x48c>
 8003d48:	1ac9      	subs	r1, r1, r3
 8003d4a:	6091      	str	r1, [r2, #8]
  LC_PRINT("\r\n");
 8003d4c:	4896      	ldr	r0, [pc, #600]	; (8003fa8 <aiSystemPerformanceProcess+0x4d4>)
 8003d4e:	f000 fbe9 	bl	8004524 <lc_print>
  tcumul -= u_observer_ctx.u_dur_t;
 8003d52:	4b97      	ldr	r3, [pc, #604]	; (8003fb0 <aiSystemPerformanceProcess+0x4dc>)
 8003d54:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003d58:	1a28      	subs	r0, r5, r0
 8003d5a:	eb6a 0101 	sbc.w	r1, sl, r1
  tcumul /= (uint64_t)iter;
 8003d5e:	17f3      	asrs	r3, r6, #31
 8003d60:	4632      	mov	r2, r6
 8003d62:	f7fc ff39 	bl	8000bd8 <__aeabi_uldivmod>
  dwtCyclesToTime(tcumul, &t);
 8003d66:	aa0a      	add	r2, sp, #40	; 0x28
  tcumul /= (uint64_t)iter;
 8003d68:	460d      	mov	r5, r1
 8003d6a:	4681      	mov	r9, r0
 8003d6c:	4680      	mov	r8, r0
  dwtCyclesToTime(tcumul, &t);
 8003d6e:	f000 fc81 	bl	8004674 <dwtCyclesToTime>
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %lu MACC)\r\n",
 8003d72:	6861      	ldr	r1, [r4, #4]
 8003d74:	9104      	str	r1, [sp, #16]
 8003d76:	f7fd ff6b 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8003d7a:	4682      	mov	sl, r0
 8003d7c:	f7fe fb64 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8003d80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d82:	4b8c      	ldr	r3, [pc, #560]	; (8003fb4 <aiSystemPerformanceProcess+0x4e0>)
 8003d84:	9904      	ldr	r1, [sp, #16]
 8003d86:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d8a:	9201      	str	r2, [sp, #4]
 8003d8c:	9000      	str	r0, [sp, #0]
 8003d8e:	4632      	mov	r2, r6
 8003d90:	4889      	ldr	r0, [pc, #548]	; (8003fb8 <aiSystemPerformanceProcess+0x4e4>)
 8003d92:	fbba f3f3 	udiv	r3, sl, r3
 8003d96:	f000 fbc5 	bl	8004524 <lc_print>
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 8003d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003da4:	fb00 3101 	mla	r1, r0, r1, r3
 8003da8:	4884      	ldr	r0, [pc, #528]	; (8003fbc <aiSystemPerformanceProcess+0x4e8>)
 8003daa:	f000 fbbb 	bl	8004524 <lc_print>
  if (tcumul / 100000)
 8003dae:	4b84      	ldr	r3, [pc, #528]	; (8003fc0 <aiSystemPerformanceProcess+0x4ec>)
 8003db0:	454b      	cmp	r3, r9
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	41ab      	sbcs	r3, r5
 8003db8:	f080 80e1 	bcs.w	8003f7e <aiSystemPerformanceProcess+0x4aa>
    LC_PRINT(" CPU cycles   : %ld%ld (average)\r\n",
 8003dbc:	4a81      	ldr	r2, [pc, #516]	; (8003fc4 <aiSystemPerformanceProcess+0x4f0>)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	4648      	mov	r0, r9
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7fc ff08 	bl	8000bd8 <__aeabi_uldivmod>
 8003dc8:	4a7e      	ldr	r2, [pc, #504]	; (8003fc4 <aiSystemPerformanceProcess+0x4f0>)
 8003dca:	4601      	mov	r1, r0
 8003dcc:	fb02 9210 	mls	r2, r2, r0, r9
 8003dd0:	487d      	ldr	r0, [pc, #500]	; (8003fc8 <aiSystemPerformanceProcess+0x4f4>)
 8003dd2:	f000 fba7 	bl	8004524 <lc_print>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8003dd6:	2664      	movs	r6, #100	; 0x64
 8003dd8:	fba8 8106 	umull	r8, r1, r8, r6
 8003ddc:	fb06 1505 	mla	r5, r6, r5, r1
 8003de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003de2:	2300      	movs	r3, #0
 8003de4:	4640      	mov	r0, r8
 8003de6:	4629      	mov	r1, r5
 8003de8:	f7fc fef6 	bl	8000bd8 <__aeabi_uldivmod>
 8003dec:	2225      	movs	r2, #37	; 0x25
 8003dee:	4601      	mov	r1, r0
 8003df0:	4876      	ldr	r0, [pc, #472]	; (8003fcc <aiSystemPerformanceProcess+0x4f8>)
 8003df2:	f000 fb97 	bl	8004524 <lc_print>
  cmacc = (uint32_t)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 8003df6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	f7fc feeb 	bl	8000bd8 <__aeabi_uldivmod>
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 8003e02:	fbb0 f1f6 	udiv	r1, r0, r6
 8003e06:	fb06 0211 	mls	r2, r6, r1, r0
 8003e0a:	4871      	ldr	r0, [pc, #452]	; (8003fd0 <aiSystemPerformanceProcess+0x4fc>)
 8003e0c:	f000 fb8a 	bl	8004524 <lc_print>
  MON_STACK_REPORT();
 8003e10:	4b66      	ldr	r3, [pc, #408]	; (8003fac <aiSystemPerformanceProcess+0x4d8>)
 8003e12:	791a      	ldrb	r2, [r3, #4]
 8003e14:	2a00      	cmp	r2, #0
 8003e16:	f000 80b7 	beq.w	8003f88 <aiSystemPerformanceProcess+0x4b4>
 8003e1a:	6899      	ldr	r1, [r3, #8]
 8003e1c:	486d      	ldr	r0, [pc, #436]	; (8003fd4 <aiSystemPerformanceProcess+0x500>)
 8003e1e:	f000 fb81 	bl	8004524 <lc_print>
  MON_ALLOC_REPORT();
 8003e22:	496d      	ldr	r1, [pc, #436]	; (8003fd8 <aiSystemPerformanceProcess+0x504>)
 8003e24:	486d      	ldr	r0, [pc, #436]	; (8003fdc <aiSystemPerformanceProcess+0x508>)
 8003e26:	680b      	ldr	r3, [r1, #0]
 8003e28:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003e2c:	9303      	str	r3, [sp, #12]
 8003e2e:	698b      	ldr	r3, [r1, #24]
 8003e30:	9302      	str	r3, [sp, #8]
 8003e32:	694b      	ldr	r3, [r1, #20]
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	688b      	ldr	r3, [r1, #8]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	690b      	ldr	r3, [r1, #16]
 8003e3c:	684a      	ldr	r2, [r1, #4]
 8003e3e:	68c9      	ldr	r1, [r1, #12]
 8003e40:	f000 fb70 	bl	8004524 <lc_print>
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 8003e44:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003e46:	9906      	ldr	r1, [sp, #24]
 8003e48:	4865      	ldr	r0, [pc, #404]	; (8003fe0 <aiSystemPerformanceProcess+0x50c>)
 8003e4a:	f000 fb6b 	bl	8004524 <lc_print>
  aiObserverDone(&net_exec_ctx[idx]);
 8003e4e:	4865      	ldr	r0, [pc, #404]	; (8003fe4 <aiSystemPerformanceProcess+0x510>)
 8003e50:	f7ff fc8c 	bl	800376c <aiObserverDone>
      r = aiTestConsole();
 8003e54:	f7ff fc1e 	bl	8003694 <aiTestConsole>
      if (r == CONS_EVT_UNDEFINED) {
 8003e58:	2864      	cmp	r0, #100	; 0x64
 8003e5a:	f43f ae42 	beq.w	8003ae2 <aiSystemPerformanceProcess+0xe>
      } else if (r == CONS_EVT_HELP) {
 8003e5e:	2803      	cmp	r0, #3
 8003e60:	d124      	bne.n	8003eac <aiSystemPerformanceProcess+0x3d8>
        LC_PRINT("\r\n");
 8003e62:	4851      	ldr	r0, [pc, #324]	; (8003fa8 <aiSystemPerformanceProcess+0x4d4>)
 8003e64:	f000 fb5e 	bl	8004524 <lc_print>
        LC_PRINT("Possible key for the interactive console:\r\n");
 8003e68:	485f      	ldr	r0, [pc, #380]	; (8003fe8 <aiSystemPerformanceProcess+0x514>)
 8003e6a:	f000 fb5b 	bl	8004524 <lc_print>
        LC_PRINT("  [q,Q]      quit the application\r\n");
 8003e6e:	485f      	ldr	r0, [pc, #380]	; (8003fec <aiSystemPerformanceProcess+0x518>)
 8003e70:	f000 fb58 	bl	8004524 <lc_print>
        LC_PRINT("  [r,R]      re-start (NN de-init and re-init)\r\n");
 8003e74:	485e      	ldr	r0, [pc, #376]	; (8003ff0 <aiSystemPerformanceProcess+0x51c>)
 8003e76:	f000 fb55 	bl	8004524 <lc_print>
        LC_PRINT("  [p,P]      pause\r\n");
 8003e7a:	485e      	ldr	r0, [pc, #376]	; (8003ff4 <aiSystemPerformanceProcess+0x520>)
 8003e7c:	f000 fb52 	bl	8004524 <lc_print>
        LC_PRINT("  [d,D]      hide detailed information ('r' to restore)\r\n");
 8003e80:	485d      	ldr	r0, [pc, #372]	; (8003ff8 <aiSystemPerformanceProcess+0x524>)
 8003e82:	f000 fb4f 	bl	8004524 <lc_print>
        LC_PRINT("  [h,H,?]    this information\r\n");
 8003e86:	485d      	ldr	r0, [pc, #372]	; (8003ffc <aiSystemPerformanceProcess+0x528>)
 8003e88:	f000 fb4c 	bl	8004524 <lc_print>
        LC_PRINT("   xx        continue immediately\r\n");
 8003e8c:	485c      	ldr	r0, [pc, #368]	; (8004000 <aiSystemPerformanceProcess+0x52c>)
 8003e8e:	f000 fb49 	bl	8004524 <lc_print>
        LC_PRINT("\r\n");
 8003e92:	4845      	ldr	r0, [pc, #276]	; (8003fa8 <aiSystemPerformanceProcess+0x4d4>)
 8003e94:	f000 fb46 	bl	8004524 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8003e98:	485a      	ldr	r0, [pc, #360]	; (8004004 <aiSystemPerformanceProcess+0x530>)
 8003e9a:	f000 fb43 	bl	8004524 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8003e9e:	f7ff fbf9 	bl	8003694 <aiTestConsole>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d074      	beq.n	8003f90 <aiSystemPerformanceProcess+0x4bc>
        if (r == CONS_EVT_UNDEFINED)
 8003ea6:	2864      	cmp	r0, #100	; 0x64
 8003ea8:	f43f ae1b 	beq.w	8003ae2 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_PROF) {
 8003eac:	2805      	cmp	r0, #5
 8003eae:	f040 80bb 	bne.w	8004028 <aiSystemPerformanceProcess+0x554>
        profiling_mode = true;
 8003eb2:	4b55      	ldr	r3, [pc, #340]	; (8004008 <aiSystemPerformanceProcess+0x534>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
        profiling_factor *= 2;
 8003eb8:	4a54      	ldr	r2, [pc, #336]	; (800400c <aiSystemPerformanceProcess+0x538>)
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	6013      	str	r3, [r2, #0]
  } while (r==0);
 8003ec0:	e60f      	b.n	8003ae2 <aiSystemPerformanceProcess+0xe>
 8003ec2:	e9cd 2308 	strd	r2, r3, [sp, #32]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003ec6:	f009 ffcb 	bl	800de60 <rand>
 8003eca:	ee07 0a90 	vmov	s15, r0
 8003ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003ed2:	9b05      	ldr	r3, [sp, #20]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003ed4:	ee37 7aa7 	vadd.f32	s14, s15, s15
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003ed8:	2b01      	cmp	r3, #1
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003eda:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003ede:	eee7 7a08 	vfma.f32	s15, s14, s16
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003ee2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ee6:	d106      	bne.n	8003ef6 <aiSystemPerformanceProcess+0x422>
          *(ai_float *)(in_data + j * 4) = v;
 8003ee8:	eb02 0189 	add.w	r1, r2, r9, lsl #2
 8003eec:	edc1 7a00 	vstr	s15, [r1]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003ef0:	f109 0901 	add.w	r9, r9, #1
 8003ef4:	e6c8      	b.n	8003c88 <aiSystemPerformanceProcess+0x1b4>
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003ef6:	9907      	ldr	r1, [sp, #28]
 8003ef8:	2900      	cmp	r1, #0
 8003efa:	d0f9      	beq.n	8003ef0 <aiSystemPerformanceProcess+0x41c>
            in_data[j] = (ai_i8)(v * 127);
 8003efc:	ee67 7aa8 	vmul.f32	s15, s15, s17
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003f00:	9805      	ldr	r0, [sp, #20]
            in_data[j] = (ai_i8)(v * 127);
 8003f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003f06:	2803      	cmp	r0, #3
            in_data[j] = (ai_i8)(v * 127);
 8003f08:	edcd 7a08 	vstr	s15, [sp, #32]
 8003f0c:	f99d 1020 	ldrsb.w	r1, [sp, #32]
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003f10:	d002      	beq.n	8003f18 <aiSystemPerformanceProcess+0x444>
              in_data[j] = (in_data[j] > 0)?(ai_i8)1:(ai_i8)0;
 8003f12:	f802 1009 	strb.w	r1, [r2, r9]
 8003f16:	e7eb      	b.n	8003ef0 <aiSystemPerformanceProcess+0x41c>
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	bfd4      	ite	le
 8003f1c:	2100      	movle	r1, #0
 8003f1e:	2101      	movgt	r1, #1
 8003f20:	e7f7      	b.n	8003f12 <aiSystemPerformanceProcess+0x43e>
    tend = cyclesCounterEnd();
 8003f22:	f7ff fb33 	bl	800358c <cyclesCounterEnd>
    MON_ALLOC_DISABLE();
 8003f26:	f8d9 3000 	ldr.w	r3, [r9]
    tcumul += tend;
 8003f2a:	1945      	adds	r5, r0, r5
    MON_ALLOC_DISABLE();
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
    dwtCyclesToTime(tend, &t);
 8003f30:	aa0a      	add	r2, sp, #40	; 0x28
    MON_ALLOC_DISABLE();
 8003f32:	f8c9 3000 	str.w	r3, [r9]
    tcumul += tend;
 8003f36:	eb4a 0a01 	adc.w	sl, sl, r1
    dwtCyclesToTime(tend, &t);
 8003f3a:	f000 fb9b 	bl	8004674 <dwtCyclesToTime>
    if (!profiling_mode) {
 8003f3e:	4b32      	ldr	r3, [pc, #200]	; (8004008 <aiSystemPerformanceProcess+0x534>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b95b      	cbnz	r3, 8003f5c <aiSystemPerformanceProcess+0x488>
      if (t.s > 10)
 8003f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      LC_PRINT(".");
 8003f46:	4832      	ldr	r0, [pc, #200]	; (8004010 <aiSystemPerformanceProcess+0x53c>)
      if (t.s > 10)
 8003f48:	2b0a      	cmp	r3, #10
 8003f4a:	bfc8      	it	gt
 8003f4c:	46b0      	movgt	r8, r6
      LC_PRINT(".");
 8003f4e:	f000 fae9 	bl	8004524 <lc_print>
      fflush(stdout);
 8003f52:	4b30      	ldr	r3, [pc, #192]	; (8004014 <aiSystemPerformanceProcess+0x540>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6898      	ldr	r0, [r3, #8]
 8003f58:	f009 f8b4 	bl	800d0c4 <fflush>
  for (iter = 0; iter < niter; iter++) {
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	e64d      	b.n	8003bfc <aiSystemPerformanceProcess+0x128>
  MON_STACK_EVALUATE();
 8003f60:	3304      	adds	r3, #4
 8003f62:	f10c 0c04 	add.w	ip, ip, #4
 8003f66:	6093      	str	r3, [r2, #8]
 8003f68:	e6e5      	b.n	8003d36 <aiSystemPerformanceProcess+0x262>
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f6e:	482a      	ldr	r0, [pc, #168]	; (8004018 <aiSystemPerformanceProcess+0x544>)
 8003f70:	6093      	str	r3, [r2, #8]
 8003f72:	f000 fad7 	bl	8004524 <lc_print>
 8003f76:	4829      	ldr	r0, [pc, #164]	; (800401c <aiSystemPerformanceProcess+0x548>)
 8003f78:	f000 fad4 	bl	8004524 <lc_print>
 8003f7c:	e6e6      	b.n	8003d4c <aiSystemPerformanceProcess+0x278>
    LC_PRINT(" CPU cycles   : %ld (average)\r\n", (unsigned long)(tcumul));
 8003f7e:	4828      	ldr	r0, [pc, #160]	; (8004020 <aiSystemPerformanceProcess+0x54c>)
 8003f80:	4649      	mov	r1, r9
 8003f82:	f000 facf 	bl	8004524 <lc_print>
 8003f86:	e726      	b.n	8003dd6 <aiSystemPerformanceProcess+0x302>
  MON_STACK_REPORT();
 8003f88:	4826      	ldr	r0, [pc, #152]	; (8004024 <aiSystemPerformanceProcess+0x550>)
 8003f8a:	f000 facb 	bl	8004524 <lc_print>
 8003f8e:	e748      	b.n	8003e22 <aiSystemPerformanceProcess+0x34e>
          port_hal_delay(1000);
 8003f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f94:	f7fd fb48 	bl	8001628 <HAL_Delay>
 8003f98:	e781      	b.n	8003e9e <aiSystemPerformanceProcess+0x3ca>
 8003f9a:	bf00      	nop
 8003f9c:	20002160 	.word	0x20002160
 8003fa0:	e0001000 	.word	0xe0001000
 8003fa4:	08010901 	.word	0x08010901
 8003fa8:	08010913 	.word	0x08010913
 8003fac:	20002188 	.word	0x20002188
 8003fb0:	20002138 	.word	0x20002138
 8003fb4:	000f4240 	.word	0x000f4240
 8003fb8:	08010993 	.word	0x08010993
 8003fbc:	080109d9 	.word	0x080109d9
 8003fc0:	0001869f 	.word	0x0001869f
 8003fc4:	000186a0 	.word	0x000186a0
 8003fc8:	08010a00 	.word	0x08010a00
 8003fcc:	08010a43 	.word	0x08010a43
 8003fd0:	08010a6c 	.word	0x08010a6c
 8003fd4:	08010a9f 	.word	0x08010a9f
 8003fd8:	2000216c 	.word	0x2000216c
 8003fdc:	08010adc 	.word	0x08010adc
 8003fe0:	08010b35 	.word	0x08010b35
 8003fe4:	200020b4 	.word	0x200020b4
 8003fe8:	08010b70 	.word	0x08010b70
 8003fec:	08010b9c 	.word	0x08010b9c
 8003ff0:	08010bc0 	.word	0x08010bc0
 8003ff4:	08010bf1 	.word	0x08010bf1
 8003ff8:	08010c06 	.word	0x08010c06
 8003ffc:	08010c40 	.word	0x08010c40
 8004000:	08010c60 	.word	0x08010c60
 8004004:	08010c84 	.word	0x08010c84
 8004008:	20002134 	.word	0x20002134
 800400c:	20000010 	.word	0x20000010
 8004010:	08010911 	.word	0x08010911
 8004014:	20001864 	.word	0x20001864
 8004018:	08010916 	.word	0x08010916
 800401c:	0801093a 	.word	0x0801093a
 8004020:	08010a23 	.word	0x08010a23
 8004024:	08010abb 	.word	0x08010abb
      if (r == CONS_EVT_HIDE) {
 8004028:	2806      	cmp	r0, #6
 800402a:	d103      	bne.n	8004034 <aiSystemPerformanceProcess+0x560>
        observer_mode = false;
 800402c:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <aiSystemPerformanceProcess+0x5e4>)
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
  } while (r==0);
 8004032:	e556      	b.n	8003ae2 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_RESTART) {
 8004034:	2802      	cmp	r0, #2
 8004036:	d110      	bne.n	800405a <aiSystemPerformanceProcess+0x586>
        profiling_mode = false;
 8004038:	2300      	movs	r3, #0
 800403a:	f88b 3000 	strb.w	r3, [fp]
        observer_mode = true;
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <aiSystemPerformanceProcess+0x5e4>)
        LC_PRINT("\r\n");
 8004040:	481e      	ldr	r0, [pc, #120]	; (80040bc <aiSystemPerformanceProcess+0x5e8>)
        observer_mode = true;
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <aiSystemPerformanceProcess+0x5ec>)
 8004048:	2205      	movs	r2, #5
 800404a:	601a      	str	r2, [r3, #0]
        LC_PRINT("\r\n");
 800404c:	f000 fa6a 	bl	8004524 <lc_print>
        aiDeInit();
 8004050:	f7ff fb06 	bl	8003660 <aiDeInit>
        aiSystemPerformanceInit();
 8004054:	f7ff fc88 	bl	8003968 <aiSystemPerformanceInit>
      if (r == CONS_EVT_PAUSE) {
 8004058:	e543      	b.n	8003ae2 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_QUIT) {
 800405a:	2801      	cmp	r0, #1
 800405c:	d115      	bne.n	800408a <aiSystemPerformanceProcess+0x5b6>
        profiling_mode = false;
 800405e:	2300      	movs	r3, #0
        LC_PRINT("\r\n");
 8004060:	4816      	ldr	r0, [pc, #88]	; (80040bc <aiSystemPerformanceProcess+0x5e8>)
        profiling_mode = false;
 8004062:	f88b 3000 	strb.w	r3, [fp]
        LC_PRINT("\r\n");
 8004066:	f000 fa5d 	bl	8004524 <lc_print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800406e:	b672      	cpsid	i
        aiDeInit();
 8004070:	f7ff faf6 	bl	8003660 <aiDeInit>
        LC_PRINT("\r\n");
 8004074:	4811      	ldr	r0, [pc, #68]	; (80040bc <aiSystemPerformanceProcess+0x5e8>)
 8004076:	f000 fa55 	bl	8004524 <lc_print>
        LC_PRINT("Board should be reseted...\r\n");
 800407a:	4812      	ldr	r0, [pc, #72]	; (80040c4 <aiSystemPerformanceProcess+0x5f0>)
 800407c:	f000 fa52 	bl	8004524 <lc_print>
          port_hal_delay(1000);
 8004080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004084:	f7fd fad0 	bl	8001628 <HAL_Delay>
        while (1) {
 8004088:	e7fa      	b.n	8004080 <aiSystemPerformanceProcess+0x5ac>
      if (r == CONS_EVT_PAUSE) {
 800408a:	2804      	cmp	r0, #4
 800408c:	d003      	beq.n	8004096 <aiSystemPerformanceProcess+0x5c2>
  } while (r==0);
 800408e:	2800      	cmp	r0, #0
 8004090:	f43f ad27 	beq.w	8003ae2 <aiSystemPerformanceProcess+0xe>
 8004094:	e52d      	b.n	8003af2 <aiSystemPerformanceProcess+0x1e>
        LC_PRINT("\r\n");
 8004096:	4809      	ldr	r0, [pc, #36]	; (80040bc <aiSystemPerformanceProcess+0x5e8>)
 8004098:	f000 fa44 	bl	8004524 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 800409c:	480a      	ldr	r0, [pc, #40]	; (80040c8 <aiSystemPerformanceProcess+0x5f4>)
 800409e:	f000 fa41 	bl	8004524 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 80040a2:	f7ff faf7 	bl	8003694 <aiTestConsole>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	f47f ad1b 	bne.w	8003ae2 <aiSystemPerformanceProcess+0xe>
          port_hal_delay(1000);
 80040ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040b0:	f7fd faba 	bl	8001628 <HAL_Delay>
 80040b4:	e7f5      	b.n	80040a2 <aiSystemPerformanceProcess+0x5ce>
 80040b6:	bf00      	nop
 80040b8:	2000000c 	.word	0x2000000c
 80040bc:	08010913 	.word	0x08010913
 80040c0:	20000010 	.word	0x20000010
 80040c4:	08010ca2 	.word	0x08010ca2
 80040c8:	08010c84 	.word	0x08010c84

080040cc <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 80040cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80040ce:	f001 fbb5 	bl	800583c <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 80040d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	2201      	movs	r2, #1
 80040da:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80040de:	b2c0      	uxtb	r0, r0
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	9000      	str	r0, [sp, #0]
 80040e4:	2300      	movs	r3, #0
 80040e6:	4803      	ldr	r0, [pc, #12]	; (80040f4 <aiPlatformVersion+0x28>)
 80040e8:	4611      	mov	r1, r2
 80040ea:	f000 fa1b 	bl	8004524 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 80040ee:	b007      	add	sp, #28
 80040f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80040f4:	08010ccd 	.word	0x08010ccd

080040f8 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 80040f8:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80040fa:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80040fe:	b2c4      	uxtb	r4, r0
  if (fct)
 8004100:	b129      	cbz	r1, 800410e <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004102:	4622      	mov	r2, r4
 8004104:	4805      	ldr	r0, [pc, #20]	; (800411c <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8004106:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800410a:	f000 ba0b 	b.w	8004524 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800410e:	4621      	mov	r1, r4
 8004110:	4803      	ldr	r0, [pc, #12]	; (8004120 <aiLogErr+0x28>)
}
 8004112:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004116:	461a      	mov	r2, r3
 8004118:	f000 ba04 	b.w	8004524 <lc_print>
 800411c:	08010cff 	.word	0x08010cff
 8004120:	08010d2c 	.word	0x08010d2c

08004124 <aiPrintBufferInfo>:
    }
}


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 8004124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8004128:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 800412a:	6807      	ldr	r7, [r0, #0]
{
 800412c:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 800412e:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8004132:	486c      	ldr	r0, [pc, #432]	; (80042e4 <aiPrintBufferInfo+0x1c0>)
 8004134:	6809      	ldr	r1, [r1, #0]
 8004136:	f000 f9f5 	bl	8004524 <lc_print>
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 800413a:	696a      	ldr	r2, [r5, #20]
 800413c:	69a8      	ldr	r0, [r5, #24]
 800413e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004142:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8004146:	d12b      	bne.n	80041a0 <aiPrintBufferInfo+0x7c>
  {
    LC_PRINT("%d,%d)",
 8004148:	6842      	ldr	r2, [r0, #4]
 800414a:	6901      	ldr	r1, [r0, #16]
 800414c:	4866      	ldr	r0, [pc, #408]	; (80042e8 <aiPrintBufferInfo+0x1c4>)
 800414e:	f000 f9e9 	bl	8004524 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8004152:	2101      	movs	r1, #1
 8004154:	4628      	mov	r0, r5
 8004156:	f001 f989 	bl	800546c <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800415a:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800415e:	4601      	mov	r1, r0
 8004160:	4862      	ldr	r0, [pc, #392]	; (80042ec <aiPrintBufferInfo+0x1c8>)
 8004162:	f000 f9df 	bl	8004524 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8004166:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004168:	ea4f 19e7 	mov.w	r9, r7, asr #7
 800416c:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8004170:	d125      	bne.n	80041be <aiPrintBufferInfo+0x9a>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004172:	485f      	ldr	r0, [pc, #380]	; (80042f0 <aiPrintBufferInfo+0x1cc>)
 8004174:	4621      	mov	r1, r4
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004176:	f000 f9d5 	bl	8004524 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 800417a:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 800417c:	2101      	movs	r1, #1
 800417e:	4628      	mov	r0, r5
  if (buffer->data)
 8004180:	2c00      	cmp	r4, #0
 8004182:	f000 809e 	beq.w	80042c2 <aiPrintBufferInfo+0x19e>
    LC_PRINT(" @0x%X/%d",
 8004186:	f001 f971 	bl	800546c <ai_buffer_get_size>
 800418a:	4639      	mov	r1, r7
 800418c:	f001 f9a2 	bl	80054d4 <ai_buffer_get_byte_size>
 8004190:	4602      	mov	r2, r0
 8004192:	4858      	ldr	r0, [pc, #352]	; (80042f4 <aiPrintBufferInfo+0x1d0>)
 8004194:	4621      	mov	r1, r4
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8004196:	b003      	add	sp, #12
 8004198:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 800419c:	f000 b9c2 	b.w	8004524 <lc_print>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80041a0:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 80041a4:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80041a6:	d105      	bne.n	80041b4 <aiPrintBufferInfo+0x90>
    LC_PRINT("%d,%d,%d)",
 80041a8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 80041ac:	4852      	ldr	r0, [pc, #328]	; (80042f8 <aiPrintBufferInfo+0x1d4>)
 80041ae:	f000 f9b9 	bl	8004524 <lc_print>
 80041b2:	e7ce      	b.n	8004152 <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 80041b4:	4851      	ldr	r0, [pc, #324]	; (80042fc <aiPrintBufferInfo+0x1d8>)
 80041b6:	4619      	mov	r1, r3
 80041b8:	f000 f9b4 	bl	8004524 <lc_print>
 80041bc:	e7c9      	b.n	8004152 <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80041be:	2e03      	cmp	r6, #3
 80041c0:	d102      	bne.n	80041c8 <aiPrintBufferInfo+0xa4>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80041c2:	484f      	ldr	r0, [pc, #316]	; (8004300 <aiPrintBufferInfo+0x1dc>)
 80041c4:	4621      	mov	r1, r4
 80041c6:	e7d6      	b.n	8004176 <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 80041c8:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8004314 <aiPrintBufferInfo+0x1f0>
 80041cc:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 80041d0:	f108 0102 	add.w	r1, r8, #2
 80041d4:	4622      	mov	r2, r4
 80041d6:	bf18      	it	ne
 80041d8:	4641      	movne	r1, r8
 80041da:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 80041de:	f000 f9a1 	bl	8004524 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 80041e2:	2e02      	cmp	r6, #2
 80041e4:	d1c9      	bne.n	800417a <aiPrintBufferInfo+0x56>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80041e6:	68ab      	ldr	r3, [r5, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d059      	beq.n	80042a0 <aiPrintBufferInfo+0x17c>
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	07d2      	lsls	r2, r2, #31
 80041f0:	d556      	bpl.n	80042a0 <aiPrintBufferInfo+0x17c>
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d053      	beq.n	80042a0 <aiPrintBufferInfo+0x17c>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80041f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      LC_PRINT(" %d:", s_);
 80041fc:	f108 0040 	add.w	r0, r8, #64	; 0x40
      const int max_ = s_> 4?4:s_;
 8004200:	f1b9 0f04 	cmp.w	r9, #4
      LC_PRINT(" %d:", s_);
 8004204:	4649      	mov	r1, r9
      const int max_ = s_> 4?4:s_;
 8004206:	46ca      	mov	sl, r9
 8004208:	bf28      	it	cs
 800420a:	f04f 0a04 	movcs.w	sl, #4
      LC_PRINT(" %d:", s_);
 800420e:	f000 f989 	bl	8004524 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8004212:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004214:	f04f 0b00 	mov.w	fp, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8004218:	f108 0845 	add.w	r8, r8, #69	; 0x45
      for (int idx=0; idx<max_; idx++) {
 800421c:	4556      	cmp	r6, sl
 800421e:	db07      	blt.n	8004230 <aiPrintBufferInfo+0x10c>
      LC_PRINT((s_ > max_)?"..":"");
 8004220:	4b38      	ldr	r3, [pc, #224]	; (8004304 <aiPrintBufferInfo+0x1e0>)
 8004222:	1cd8      	adds	r0, r3, #3
 8004224:	45ca      	cmp	sl, r9
 8004226:	bf38      	it	cc
 8004228:	4618      	movcc	r0, r3
 800422a:	f000 f97b 	bl	8004524 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800422e:	e7a4      	b.n	800417a <aiPrintBufferInfo+0x56>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004230:	68aa      	ldr	r2, [r5, #8]
 8004232:	2a00      	cmp	r2, #0
 8004234:	d02f      	beq.n	8004296 <aiPrintBufferInfo+0x172>
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	f013 0401 	ands.w	r4, r3, #1
 800423c:	d02e      	beq.n	800429c <aiPrintBufferInfo+0x178>
 800423e:	6853      	ldr	r3, [r2, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d04a      	beq.n	80042da <aiPrintBufferInfo+0x1b6>
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	2a00      	cmp	r2, #0
 8004248:	d04a      	beq.n	80042e0 <aiPrintBufferInfo+0x1bc>
 800424a:	8859      	ldrh	r1, [r3, #2]
 800424c:	42b1      	cmp	r1, r6
 800424e:	dd47      	ble.n	80042e0 <aiPrintBufferInfo+0x1bc>
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8004256:	6810      	ldr	r0, [r2, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004258:	2b00      	cmp	r3, #0
 800425a:	d03f      	beq.n	80042dc <aiPrintBufferInfo+0x1b8>
 800425c:	881a      	ldrh	r2, [r3, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800425e:	685c      	ldr	r4, [r3, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004260:	f012 0202 	ands.w	r2, r2, #2
 8004264:	d00f      	beq.n	8004286 <aiPrintBufferInfo+0x162>
 8004266:	b124      	cbz	r4, 8004272 <aiPrintBufferInfo+0x14e>
 8004268:	885b      	ldrh	r3, [r3, #2]
 800426a:	42b3      	cmp	r3, r6
 800426c:	dd36      	ble.n	80042dc <aiPrintBufferInfo+0x1b8>
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8004272:	f7fc f981 	bl	8000578 <__aeabi_f2d>
 8004276:	9400      	str	r4, [sp, #0]
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4640      	mov	r0, r8
 800427e:	f000 f951 	bl	8004524 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8004282:	3601      	adds	r6, #1
 8004284:	e7ca      	b.n	800421c <aiPrintBufferInfo+0xf8>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004286:	2c00      	cmp	r4, #0
 8004288:	d0f3      	beq.n	8004272 <aiPrintBufferInfo+0x14e>
 800428a:	885b      	ldrh	r3, [r3, #2]
 800428c:	42b3      	cmp	r3, r6
 800428e:	dd03      	ble.n	8004298 <aiPrintBufferInfo+0x174>
 8004290:	6863      	ldr	r3, [r4, #4]
 8004292:	579c      	ldrsb	r4, [r3, r6]
 8004294:	e7ed      	b.n	8004272 <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004296:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004298:	4614      	mov	r4, r2
 800429a:	e7ea      	b.n	8004272 <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800429c:	4658      	mov	r0, fp
 800429e:	e7e8      	b.n	8004272 <aiPrintBufferInfo+0x14e>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 80042a0:	f019 0f78 	tst.w	r9, #120	; 0x78
 80042a4:	d102      	bne.n	80042ac <aiPrintBufferInfo+0x188>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80042a6:	4818      	ldr	r0, [pc, #96]	; (8004308 <aiPrintBufferInfo+0x1e4>)
 80042a8:	4621      	mov	r1, r4
 80042aa:	e764      	b.n	8004176 <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 80042ac:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 80042b0:	3a40      	subs	r2, #64	; 0x40
 80042b2:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 80042b6:	4411      	add	r1, r2
 80042b8:	4814      	ldr	r0, [pc, #80]	; (800430c <aiPrintBufferInfo+0x1e8>)
 80042ba:	1a61      	subs	r1, r4, r1
 80042bc:	f000 f932 	bl	8004524 <lc_print>
 80042c0:	e75b      	b.n	800417a <aiPrintBufferInfo+0x56>
    LC_PRINT(" (User Domain)/%d",
 80042c2:	f001 f8d3 	bl	800546c <ai_buffer_get_size>
 80042c6:	4639      	mov	r1, r7
 80042c8:	f001 f904 	bl	80054d4 <ai_buffer_get_byte_size>
 80042cc:	4601      	mov	r1, r0
 80042ce:	4810      	ldr	r0, [pc, #64]	; (8004310 <aiPrintBufferInfo+0x1ec>)
}
 80042d0:	b003      	add	sp, #12
 80042d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 80042d6:	f000 b925 	b.w	8004524 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80042da:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80042dc:	2400      	movs	r4, #0
 80042de:	e7c8      	b.n	8004272 <aiPrintBufferInfo+0x14e>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80042e0:	4658      	mov	r0, fp
 80042e2:	e7b9      	b.n	8004258 <aiPrintBufferInfo+0x134>
 80042e4:	08010d5c 	.word	0x08010d5c
 80042e8:	08010d67 	.word	0x08010d67
 80042ec:	08010d7c 	.word	0x08010d7c
 80042f0:	08010d80 	.word	0x08010d80
 80042f4:	08010db5 	.word	0x08010db5
 80042f8:	08010d6e 	.word	0x08010d6e
 80042fc:	08010d78 	.word	0x08010d78
 8004300:	08010d88 	.word	0x08010d88
 8004304:	08010d58 	.word	0x08010d58
 8004308:	08010da2 	.word	0x08010da2
 800430c:	08010dad 	.word	0x08010dad
 8004310:	08010dbf 	.word	0x08010dbf
 8004314:	08010d54 	.word	0x08010d54

08004318 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8004318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800431c:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 800431e:	484e      	ldr	r0, [pc, #312]	; (8004458 <aiPrintNetworkInfo+0x140>)
 8004320:	f000 f900 	bl	8004524 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8004324:	6821      	ldr	r1, [r4, #0]
 8004326:	484d      	ldr	r0, [pc, #308]	; (800445c <aiPrintNetworkInfo+0x144>)
 8004328:	f000 f8fc 	bl	8004524 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 800432c:	6861      	ldr	r1, [r4, #4]
 800432e:	484c      	ldr	r0, [pc, #304]	; (8004460 <aiPrintNetworkInfo+0x148>)
 8004330:	f000 f8f8 	bl	8004524 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8004334:	68a1      	ldr	r1, [r4, #8]
 8004336:	484b      	ldr	r0, [pc, #300]	; (8004464 <aiPrintNetworkInfo+0x14c>)
 8004338:	f000 f8f4 	bl	8004524 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 800433c:	68e1      	ldr	r1, [r4, #12]
 800433e:	484a      	ldr	r0, [pc, #296]	; (8004468 <aiPrintNetworkInfo+0x150>)
 8004340:	f000 f8f0 	bl	8004524 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8004344:	7da3      	ldrb	r3, [r4, #22]
 8004346:	7d21      	ldrb	r1, [r4, #20]
 8004348:	7d62      	ldrb	r2, [r4, #21]
 800434a:	4848      	ldr	r0, [pc, #288]	; (800446c <aiPrintNetworkInfo+0x154>)
 800434c:	f000 f8ea 	bl	8004524 <lc_print>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 8004350:	69a1      	ldr	r1, [r4, #24]
 8004352:	780b      	ldrb	r3, [r1, #0]
 8004354:	b113      	cbz	r3, 800435c <aiPrintNetworkInfo+0x44>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8004356:	4846      	ldr	r0, [pc, #280]	; (8004470 <aiPrintNetworkInfo+0x158>)
 8004358:	f000 f8e4 	bl	8004524 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800435c:	7fa3      	ldrb	r3, [r4, #30]
 800435e:	7f62      	ldrb	r2, [r4, #29]
 8004360:	7f21      	ldrb	r1, [r4, #28]
 8004362:	4844      	ldr	r0, [pc, #272]	; (8004474 <aiPrintNetworkInfo+0x15c>)
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8004364:	4f44      	ldr	r7, [pc, #272]	; (8004478 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004366:	f000 f8dd 	bl	8004524 <lc_print>
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 800436a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800436c:	4843      	ldr	r0, [pc, #268]	; (800447c <aiPrintNetworkInfo+0x164>)
 800436e:	f000 f8d9 	bl	8004524 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8004372:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004374:	4842      	ldr	r0, [pc, #264]	; (8004480 <aiPrintNetworkInfo+0x168>)
 8004376:	f000 f8d5 	bl	8004524 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 800437a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800437e:	4841      	ldr	r0, [pc, #260]	; (8004484 <aiPrintNetworkInfo+0x16c>)
 8004380:	f000 f8d0 	bl	8004524 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004384:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8004386:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 800438a:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800438e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8004392:	42ab      	cmp	r3, r5
 8004394:	dc25      	bgt.n	80043e2 <aiPrintNetworkInfo+0xca>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8004396:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 800439a:	483b      	ldr	r0, [pc, #236]	; (8004488 <aiPrintNetworkInfo+0x170>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 800439c:	4f36      	ldr	r7, [pc, #216]	; (8004478 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 800439e:	f000 f8c1 	bl	8004524 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80043a2:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80043a4:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 80043a8:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80043ac:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80043b0:	42ab      	cmp	r3, r5
 80043b2:	dc25      	bgt.n	8004400 <aiPrintNetworkInfo+0xe8>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80043b4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80043b6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80043b8:	4834      	ldr	r0, [pc, #208]	; (800448c <aiPrintNetworkInfo+0x174>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 80043ba:	4e35      	ldr	r6, [pc, #212]	; (8004490 <aiPrintNetworkInfo+0x178>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80043bc:	f000 f8b2 	bl	8004524 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80043c0:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 80043c2:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80043c4:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  for (int i=0; i<report->n_inputs; i++) {
 80043c8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80043ca:	42ab      	cmp	r3, r5
 80043cc:	dc27      	bgt.n	800441e <aiPrintNetworkInfo+0x106>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 80043ce:	4e31      	ldr	r6, [pc, #196]	; (8004494 <aiPrintNetworkInfo+0x17c>)
  for (int i=0; i<report->n_outputs; i++) {
 80043d0:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80043d2:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80043d4:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 80043d8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80043da:	42ab      	cmp	r3, r5
 80043dc:	dc2d      	bgt.n	800443a <aiPrintNetworkInfo+0x122>
  }
}
 80043de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80043e2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 80043e4:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80043e6:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80043ea:	4638      	mov	r0, r7
 80043ec:	f000 f89a 	bl	8004524 <lc_print>
      aiPrintBufferInfo(buffer);
 80043f0:	4630      	mov	r0, r6
 80043f2:	f7ff fe97 	bl	8004124 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 80043f6:	4648      	mov	r0, r9
 80043f8:	f000 f894 	bl	8004524 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80043fc:	3501      	adds	r5, #1
 80043fe:	e7c6      	b.n	800438e <aiPrintNetworkInfo+0x76>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004400:	6c60      	ldr	r0, [r4, #68]	; 0x44
      LC_PRINT("  [%d] ", idx);
 8004402:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004404:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8004408:	4638      	mov	r0, r7
 800440a:	f000 f88b 	bl	8004524 <lc_print>
      aiPrintBufferInfo(buffer);
 800440e:	4630      	mov	r0, r6
 8004410:	f7ff fe88 	bl	8004124 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8004414:	4648      	mov	r0, r9
 8004416:	f000 f885 	bl	8004524 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800441a:	3501      	adds	r5, #1
 800441c:	e7c6      	b.n	80043ac <aiPrintNetworkInfo+0x94>
    LC_PRINT("  I[%d] ", i);
 800441e:	4629      	mov	r1, r5
 8004420:	4630      	mov	r0, r6
 8004422:	f000 f87f 	bl	8004524 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8004426:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004428:	fb07 0005 	mla	r0, r7, r5, r0
 800442c:	f7ff fe7a 	bl	8004124 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8004430:	4640      	mov	r0, r8
 8004432:	f000 f877 	bl	8004524 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8004436:	3501      	adds	r5, #1
 8004438:	e7c6      	b.n	80043c8 <aiPrintNetworkInfo+0xb0>
    LC_PRINT("  O[%d] ", i);
 800443a:	4629      	mov	r1, r5
 800443c:	4630      	mov	r0, r6
 800443e:	f000 f871 	bl	8004524 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8004442:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004444:	fb07 0005 	mla	r0, r7, r5, r0
 8004448:	f7ff fe6c 	bl	8004124 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 800444c:	4640      	mov	r0, r8
 800444e:	f000 f869 	bl	8004524 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8004452:	3501      	adds	r5, #1
 8004454:	e7c0      	b.n	80043d8 <aiPrintNetworkInfo+0xc0>
 8004456:	bf00      	nop
 8004458:	08010dd1 	.word	0x08010dd1
 800445c:	08010deb 	.word	0x08010deb
 8004460:	08010e06 	.word	0x08010e06
 8004464:	08010e21 	.word	0x08010e21
 8004468:	08010e3c 	.word	0x08010e3c
 800446c:	08010e57 	.word	0x08010e57
 8004470:	08010e78 	.word	0x08010e78
 8004474:	08010e93 	.word	0x08010e93
 8004478:	08010f0b 	.word	0x08010f0b
 800447c:	08010eb4 	.word	0x08010eb4
 8004480:	08010ed5 	.word	0x08010ed5
 8004484:	08010ef0 	.word	0x08010ef0
 8004488:	08010f16 	.word	0x08010f16
 800448c:	08010f31 	.word	0x08010f31
 8004490:	08010f4f 	.word	0x08010f4f
 8004494:	08010f58 	.word	0x08010f58

08004498 <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL)

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 8004498:	b507      	push	{r0, r1, r2, lr}
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <_put_c_driver+0x24>)
{
 800449c:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b13b      	cbz	r3, 80044b4 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80044a4:	4806      	ldr	r0, [pc, #24]	; (80044c0 <_put_c_driver+0x28>)
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044aa:	2201      	movs	r2, #1
 80044ac:	f10d 0107 	add.w	r1, sp, #7
 80044b0:	f7fe fd0c 	bl	8002ecc <HAL_UART_Transmit>
    port_io_write((uint8_t *)&c, 1);
#endif
}
 80044b4:	b003      	add	sp, #12
 80044b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80044ba:	bf00      	nop
 80044bc:	20000014 	.word	0x20000014
 80044c0:	20001a80 	.word	0x20001a80

080044c4 <ioRawGetUint8>:
 {
 80044c4:	b508      	push	{r3, lr}
 80044c6:	460b      	mov	r3, r1
  if (!c)
 80044c8:	4601      	mov	r1, r0
 80044ca:	b120      	cbz	r0, 80044d6 <ioRawGetUint8+0x12>
  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1, timeout);
 80044cc:	4804      	ldr	r0, [pc, #16]	; (80044e0 <ioRawGetUint8+0x1c>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	f7fe fd59 	bl	8002f86 <HAL_UART_Receive>
   return port_io_get(c, timeout) == true?1:-1;
 80044d4:	b110      	cbz	r0, 80044dc <ioRawGetUint8+0x18>
 80044d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 }
 80044da:	bd08      	pop	{r3, pc}
   return port_io_get(c, timeout) == true?1:-1;
 80044dc:	2001      	movs	r0, #1
 80044de:	e7fc      	b.n	80044da <ioRawGetUint8+0x16>
 80044e0:	20001a80 	.word	0x20001a80

080044e4 <_write>:
{
 80044e4:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80044e6:	1e14      	subs	r4, r2, #0
 80044e8:	da0a      	bge.n	8004500 <_write+0x1c>
 80044ea:	3801      	subs	r0, #1
 80044ec:	2801      	cmp	r0, #1
 80044ee:	d907      	bls.n	8004500 <_write+0x1c>
    errno = EBADF;
 80044f0:	f008 fd20 	bl	800cf34 <__errno>
 80044f4:	2309      	movs	r3, #9
 80044f6:	6003      	str	r3, [r0, #0]
    return -1;
 80044f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 80044fc:	4620      	mov	r0, r4
 80044fe:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <_write+0x38>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f9      	beq.n	80044fc <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8004508:	b2a2      	uxth	r2, r4
 800450a:	4805      	ldr	r0, [pc, #20]	; (8004520 <_write+0x3c>)
 800450c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004510:	f7fe fcdc 	bl	8002ecc <HAL_UART_Transmit>
  return (status ? count : 0);
 8004514:	2800      	cmp	r0, #0
 8004516:	bf18      	it	ne
 8004518:	2400      	movne	r4, #0
 800451a:	e7ef      	b.n	80044fc <_write+0x18>
 800451c:	20000014 	.word	0x20000014
 8004520:	20001a80 	.word	0x20001a80

08004524 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8004524:	b40f      	push	{r0, r1, r2, r3}
 8004526:	b507      	push	{r0, r1, r2, lr}
 8004528:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800452a:	2100      	movs	r1, #0
{
 800452c:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004530:	4804      	ldr	r0, [pc, #16]	; (8004544 <lc_print+0x20>)
  va_start(ap, fmt);
 8004532:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004534:	f000 fb1c 	bl	8004b70 <vlc_print>
  va_end(ap);
}
 8004538:	b003      	add	sp, #12
 800453a:	f85d eb04 	ldr.w	lr, [sp], #4
 800453e:	b004      	add	sp, #16
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	08004499 	.word	0x08004499

08004548 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8004548:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800454a:	4d11      	ldr	r5, [pc, #68]	; (8004590 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 800454c:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 800454e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8004550:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8004554:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8004558:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 800455c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800455e:	f008 fee1 	bl	800d324 <malloc>

  /* remember size */
  if (ptr) {
 8004562:	b1a0      	cbz	r0, 800458e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004564:	1903      	adds	r3, r0, r4
 8004566:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8004568:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800456a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	07db      	lsls	r3, r3, #31
 8004570:	d50c      	bpl.n	800458c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8004572:	68eb      	ldr	r3, [r5, #12]
 8004574:	3301      	adds	r3, #1
 8004576:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8004578:	686b      	ldr	r3, [r5, #4]
 800457a:	4423      	add	r3, r4
 800457c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 800457e:	69ab      	ldr	r3, [r5, #24]
 8004580:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8004582:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8004584:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8004586:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8004588:	bf88      	it	hi
 800458a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 800458c:	3004      	adds	r0, #4
}
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	2000216c 	.word	0x2000216c
 8004594:	efdcba98 	.word	0xefdcba98

08004598 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <__wrap_free+0x48>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	f042 0204 	orr.w	r2, r2, #4
{
 80045a0:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 80045a2:	601a      	str	r2, [r3, #0]

  if (!ptr)
 80045a4:	4602      	mov	r2, r0
 80045a6:	b1c0      	cbz	r0, 80045da <__wrap_free+0x42>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 80045a8:	f852 1c04 	ldr.w	r1, [r2, #-4]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 80045ac:	4c0d      	ldr	r4, [pc, #52]	; (80045e4 <__wrap_free+0x4c>)
 80045ae:	5855      	ldr	r5, [r2, r1]
 80045b0:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 80045b2:	bf04      	itt	eq
 80045b4:	2400      	moveq	r4, #0
 80045b6:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	07d2      	lsls	r2, r2, #31
  p = (uint8_t*)ptr - 4;
 80045bc:	f1a0 0004 	sub.w	r0, r0, #4
  if (io_malloc.cfg & 1UL) {
 80045c0:	d508      	bpl.n	80045d4 <__wrap_free+0x3c>
    io_malloc.free_req++;
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	3201      	adds	r2, #1
 80045c6:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	440a      	add	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	1a52      	subs	r2, r2, r1
 80045d2:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 80045d4:	bc30      	pop	{r4, r5}
  __real_free(p);
 80045d6:	f008 bead 	b.w	800d334 <free>
}
 80045da:	bc30      	pop	{r4, r5}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	2000216c 	.word	0x2000216c
 80045e4:	efdcba98 	.word	0xefdcba98

080045e8 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 80045e8:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 80045ea:	4c12      	ldr	r4, [pc, #72]	; (8004634 <stackMonInit+0x4c>)
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 80045ec:	4b12      	ldr	r3, [pc, #72]	; (8004638 <stackMonInit+0x50>)
 80045ee:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 80045f0:	1a9b      	subs	r3, r3, r2
  memset(&io_stack, 0, sizeof(struct io_stack));
 80045f2:	2500      	movs	r5, #0
  io_stack.bstack = io_stack.estack - msize;
 80045f4:	61e3      	str	r3, [r4, #28]
  io_stack.bstack = (uint32_t)&CSTACK$$Base;
  io_stack.mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 80045f6:	0783      	lsls	r3, r0, #30
  memset(&io_stack, 0, sizeof(struct io_stack));
 80045f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045fc:	60e5      	str	r5, [r4, #12]
  io_stack.ctrl = ctrl;
 80045fe:	6020      	str	r0, [r4, #0]
  io_stack.cstack = cstack;
 8004600:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 8004602:	6162      	str	r2, [r4, #20]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8004604:	d512      	bpl.n	800462c <stackMonInit+0x44>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8004606:	480d      	ldr	r0, [pc, #52]	; (800463c <stackMonInit+0x54>)
 8004608:	f7ff ff8c 	bl	8004524 <lc_print>
    io_stack.stack_mon = false;
 800460c:	7125      	strb	r5, [r4, #4]
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 800460e:	69a3      	ldr	r3, [r4, #24]
 8004610:	6921      	ldr	r1, [r4, #16]
 8004612:	1ac9      	subs	r1, r1, r3

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8004614:	7923      	ldrb	r3, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8004616:	60e1      	str	r1, [r4, #12]
  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8004618:	b13b      	cbz	r3, 800462a <stackMonInit+0x42>
 800461a:	6962      	ldr	r2, [r4, #20]
 800461c:	4291      	cmp	r1, r2
 800461e:	d904      	bls.n	800462a <stackMonInit+0x42>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8004620:	4807      	ldr	r0, [pc, #28]	; (8004640 <stackMonInit+0x58>)
 8004622:	f7ff ff7f 	bl	8004524 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8004626:	2300      	movs	r3, #0
 8004628:	7123      	strb	r3, [r4, #4]
  }
}
 800462a:	bd38      	pop	{r3, r4, r5, pc}
    io_stack.stack_mon = true;
 800462c:	2301      	movs	r3, #1
 800462e:	7123      	strb	r3, [r4, #4]
 8004630:	e7ed      	b.n	800460e <stackMonInit+0x26>
 8004632:	bf00      	nop
 8004634:	20002188 	.word	0x20002188
 8004638:	200a0000 	.word	0x200a0000
 800463c:	08010f61 	.word	0x08010f61
 8004640:	08010fa1 	.word	0x08010fa1

08004644 <crcIpInit>:
 */

struct cyclesCount cyclesCount;

void crcIpInit(void)
{
 8004644:	b513      	push	{r0, r1, r4, lr}
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8004646:	4c09      	ldr	r4, [pc, #36]	; (800466c <crcIpInit+0x28>)
 8004648:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800464a:	04db      	lsls	r3, r3, #19
 800464c:	d402      	bmi.n	8004654 <crcIpInit+0x10>
    LC_PRINT("W: CRC IP clock is NOT enabled\r\n");
 800464e:	4808      	ldr	r0, [pc, #32]	; (8004670 <crcIpInit+0x2c>)
 8004650:	f7ff ff68 	bl	8004524 <lc_print>

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8004654:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800465a:	64a3      	str	r3, [r4, #72]	; 0x48
 800465c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800465e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	9b01      	ldr	r3, [sp, #4]
#endif
#endif
}
 8004666:	b002      	add	sp, #8
 8004668:	bd10      	pop	{r4, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	08010fc7 	.word	0x08010fc7

08004674 <dwtCyclesToTime>:
  return port_hal_rcc_get_sys_clock_freq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8004674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	4604      	mov	r4, r0
 800467a:	468a      	mov	sl, r1
  if (!t)
 800467c:	4617      	mov	r7, r2
 800467e:	b382      	cbz	r2, 80046e2 <dwtCyclesToTime+0x6e>
  return port_hal_rcc_get_hclk_freq();
 8004680:	f7fd fee2 	bl	8002448 <HAL_RCC_GetHCLKFreq>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
 8004684:	2300      	movs	r3, #0
  return port_hal_rcc_get_hclk_freq();
 8004686:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8004688:	9001      	str	r0, [sp, #4]
 800468a:	4651      	mov	r1, sl
 800468c:	4620      	mov	r0, r4
 800468e:	f7fc faa3 	bl	8000bd8 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8004692:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 8004696:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8004698:	fba4 0106 	umull	r0, r1, r4, r6
 800469c:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800469e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80046e8 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 80046a2:	2300      	movs	r3, #0
 80046a4:	fb06 110a 	mla	r1, r6, sl, r1
 80046a8:	f7fc fa96 	bl	8000bd8 <__aeabi_uldivmod>
  ms -= (s * 1000);
 80046ac:	fbab 3106 	umull	r3, r1, fp, r6
 80046b0:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80046b2:	fba4 0109 	umull	r0, r1, r4, r9
 80046b6:	9a01      	ldr	r2, [sp, #4]
 80046b8:	fb09 110a 	mla	r1, r9, sl, r1
 80046bc:	2300      	movs	r3, #0
 80046be:	f7fc fa8b 	bl	8000bd8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 80046c2:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 80046c4:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 80046c6:	fbab 8909 	umull	r8, r9, fp, r9
 80046ca:	eba0 0008 	sub.w	r0, r0, r8
 80046ce:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 80046d2:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 80046d6:	1b40      	subs	r0, r0, r5
  t->us = us;
 80046d8:	60f8      	str	r0, [r7, #12]
  return 0;
 80046da:	2000      	movs	r0, #0
}
 80046dc:	b003      	add	sp, #12
 80046de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e6:	e7f9      	b.n	80046dc <dwtCyclesToTime+0x68>
 80046e8:	000f4240 	.word	0x000f4240

080046ec <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <getFlashCacheConf+0x38>)
{
 80046ee:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80046f4:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80046f6:	9b01      	ldr	r3, [sp, #4]
 80046f8:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 80046fa:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80046fc:	f000 000f 	and.w	r0, r0, #15
    mconf |= MCONF_ART_DCACHE;
 8004700:	bf4c      	ite	mi
 8004702:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8004706:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 800470a:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 800470c:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 800470e:	bf48      	it	mi
 8004710:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8004714:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8004716:	bf48      	it	mi
 8004718:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_IC_Msk)
    mconf |= MCONF_CORE_ICACHE;
#endif

  return mconf;
}
 800471c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004720:	b002      	add	sp, #8
 8004722:	4770      	bx	lr
 8004724:	40022000 	.word	0x40022000

08004728 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8004728:	b510      	push	{r4, lr}
 800472a:	4604      	mov	r4, r0
  return port_hal_rcc_get_hclk_freq();
 800472c:	f7fd fe8c 	bl	8002448 <HAL_RCC_GetHCLKFreq>
  conf->sclk = systemCoreClock();
 8004730:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_rcc_get_hclk_freq();
 8004732:	f7fd fe89 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8004736:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8004738:	f7ff ffd8 	bl	80046ec <getFlashCacheConf>
 800473c:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 800473e:	f7fc ff91 	bl	8001664 <HAL_GetDEVID>
 8004742:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8004744:	f7fc ff88 	bl	8001658 <HAL_GetREVID>
 8004748:	6120      	str	r0, [r4, #16]
}
 800474a:	bd10      	pop	{r4, pc}

0800474c <systemSettingLog>:

void systemSettingLog(void)
{
 800474c:	b530      	push	{r4, r5, lr}
  /* Display ARM Complier version */

#if defined(_IS_AC6_COMPILER) && _IS_AC6_COMPILER
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800474e:	2301      	movs	r3, #1
{
 8004750:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8004752:	2203      	movs	r2, #3
 8004754:	210a      	movs	r1, #10
 8004756:	4838      	ldr	r0, [pc, #224]	; (8004838 <systemSettingLog+0xec>)
 8004758:	f7ff fee4 	bl	8004524 <lc_print>
  if (!conf)
 800475c:	a803      	add	r0, sp, #12
 800475e:	f7ff ffe3 	bl	8004728 <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT("STM32 Runtime configuration...\r\n");
 8004762:	4836      	ldr	r0, [pc, #216]	; (800483c <systemSettingLog+0xf0>)
 8004764:	f7ff fede 	bl	8004524 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004768:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 800476a:	f240 4262 	movw	r2, #1122	; 0x462
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800476e:	b28b      	uxth	r3, r1
  switch (dev_id) {
 8004770:	4293      	cmp	r3, r2
 8004772:	d056      	beq.n	8004822 <systemSettingLog+0xd6>
 8004774:	d848      	bhi.n	8004808 <systemSettingLog+0xbc>
 8004776:	f240 4235 	movw	r2, #1077	; 0x435
 800477a:	4293      	cmp	r3, r2
 800477c:	d053      	beq.n	8004826 <systemSettingLog+0xda>
 800477e:	f240 4261 	movw	r2, #1121	; 0x461
 8004782:	4293      	cmp	r3, r2
 8004784:	d051      	beq.n	800482a <systemSettingLog+0xde>
  case 0x415: str = "STM32L4x6xx"; break;  /* Orca_1M */
 8004786:	4a2e      	ldr	r2, [pc, #184]	; (8004840 <systemSettingLog+0xf4>)
 8004788:	f240 4415 	movw	r4, #1045	; 0x415
 800478c:	f102 0036 	add.w	r0, r2, #54	; 0x36
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 8004790:	42a3      	cmp	r3, r4
 8004792:	bf08      	it	eq
 8004794:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004796:	9b07      	ldr	r3, [sp, #28]
 8004798:	482a      	ldr	r0, [pc, #168]	; (8004844 <systemSettingLog+0xf8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 800479a:	4c2b      	ldr	r4, [pc, #172]	; (8004848 <systemSettingLog+0xfc>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800479c:	f7ff fec2 	bl	8004524 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80047a0:	4b2a      	ldr	r3, [pc, #168]	; (800484c <systemSettingLog+0x100>)
 80047a2:	2104      	movs	r1, #4
 80047a4:	1d5a      	adds	r2, r3, #5
 80047a6:	f103 000a 	add.w	r0, r3, #10
 80047aa:	f7ff febb 	bl	8004524 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 80047ae:	f7fc ff4f 	bl	8001650 <HAL_GetHalVersion>
 80047b2:	4601      	mov	r1, r0
 80047b4:	4826      	ldr	r0, [pc, #152]	; (8004850 <systemSettingLog+0x104>)
 80047b6:	f7ff feb5 	bl	8004524 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80047ba:	9903      	ldr	r1, [sp, #12]
 80047bc:	4825      	ldr	r0, [pc, #148]	; (8004854 <systemSettingLog+0x108>)
 80047be:	fb91 f1f4 	sdiv	r1, r1, r4
 80047c2:	f7ff feaf 	bl	8004524 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 80047c6:	9904      	ldr	r1, [sp, #16]
 80047c8:	4823      	ldr	r0, [pc, #140]	; (8004858 <systemSettingLog+0x10c>)
 80047ca:	fb91 f1f4 	sdiv	r1, r1, r4
 80047ce:	f7ff fea9 	bl	8004524 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <systemSettingLog+0x110>)
    return "False";
 80047d4:	4822      	ldr	r0, [pc, #136]	; (8004860 <systemSettingLog+0x114>)
  uint32_t acr = FLASH->ACR;
 80047d6:	6819      	ldr	r1, [r3, #0]
    return "False";
 80047d8:	1d44      	adds	r4, r0, #5
 80047da:	f411 7f80 	tst.w	r1, #256	; 0x100
 80047de:	bf14      	ite	ne
 80047e0:	4602      	movne	r2, r0
 80047e2:	4622      	moveq	r2, r4
 80047e4:	f411 7f00 	tst.w	r1, #512	; 0x200
 80047e8:	bf14      	ite	ne
 80047ea:	4603      	movne	r3, r0
 80047ec:	4623      	moveq	r3, r4
 80047ee:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80047f2:	bf18      	it	ne
 80047f4:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 80047f6:	f001 050f 	and.w	r5, r1, #15
 80047fa:	e9cd 4500 	strd	r4, r5, [sp]
 80047fe:	30ed      	adds	r0, #237	; 0xed
 8004800:	f7ff fe90 	bl	8004524 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8004804:	b009      	add	sp, #36	; 0x24
 8004806:	bd30      	pop	{r4, r5, pc}
  switch (dev_id) {
 8004808:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 800480c:	d00f      	beq.n	800482e <systemSettingLog+0xe2>
 800480e:	f240 4271 	movw	r2, #1137	; 0x471
 8004812:	4293      	cmp	r3, r2
 8004814:	d00d      	beq.n	8004832 <systemSettingLog+0xe6>
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <systemSettingLog+0xf4>)
 8004818:	f240 4464 	movw	r4, #1124	; 0x464
 800481c:	f102 004e 	add.w	r0, r2, #78	; 0x4e
 8004820:	e7b6      	b.n	8004790 <systemSettingLog+0x44>
  switch (dev_id) {
 8004822:	4a10      	ldr	r2, [pc, #64]	; (8004864 <systemSettingLog+0x118>)
 8004824:	e7b7      	b.n	8004796 <systemSettingLog+0x4a>
  case 0x435: str = "STM32L43xxx"; break;  /* Little_Orca_256K */
 8004826:	4a10      	ldr	r2, [pc, #64]	; (8004868 <systemSettingLog+0x11c>)
 8004828:	e7b5      	b.n	8004796 <systemSettingLog+0x4a>
  case 0x461: str = "STM32L49xxx"; break;  /* BigOrca_1M */
 800482a:	4a10      	ldr	r2, [pc, #64]	; (800486c <systemSettingLog+0x120>)
 800482c:	e7b3      	b.n	8004796 <systemSettingLog+0x4a>
  case 0x470: str = "STM32L4R/S"; break;   /* Orca_plus_2MB */
 800482e:	4a10      	ldr	r2, [pc, #64]	; (8004870 <systemSettingLog+0x124>)
 8004830:	e7b1      	b.n	8004796 <systemSettingLog+0x4a>
  case 0x471: str = "STM32L4P/Q"; break;   /* Orca_plus_1MB */
 8004832:	4a10      	ldr	r2, [pc, #64]	; (8004874 <systemSettingLog+0x128>)
 8004834:	e7af      	b.n	8004796 <systemSettingLog+0x4a>
 8004836:	bf00      	nop
 8004838:	0801104b 	.word	0x0801104b
 800483c:	08011068 	.word	0x08011068
 8004840:	08010fe8 	.word	0x08010fe8
 8004844:	08011089 	.word	0x08011089
 8004848:	000f4240 	.word	0x000f4240
 800484c:	080110ba 	.word	0x080110ba
 8004850:	080110e2 	.word	0x080110e2
 8004854:	080110fb 	.word	0x080110fb
 8004858:	08011114 	.word	0x08011114
 800485c:	40022000 	.word	0x40022000
 8004860:	08011040 	.word	0x08011040
 8004864:	08010ffb 	.word	0x08010ffb
 8004868:	0801102a 	.word	0x0801102a
 800486c:	08011007 	.word	0x08011007
 8004870:	08011013 	.word	0x08011013
 8004874:	08010ff0 	.word	0x08010ff0

08004878 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <ai_mnetwork_handle+0x18>)
 800487a:	b120      	cbz	r0, 8004886 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 800487c:	4298      	cmp	r0, r3
 800487e:	bf0c      	ite	eq
 8004880:	4618      	moveq	r0, r3
 8004882:	2000      	movne	r0, #0
 8004884:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8004886:	681a      	ldr	r2, [r3, #0]
            return inst;
 8004888:	2a00      	cmp	r2, #0
 800488a:	bf08      	it	eq
 800488c:	4618      	moveq	r0, r3
}
 800488e:	4770      	bx	lr
 8004890:	200021b0 	.word	0x200021b0

08004894 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8004894:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8004896:	4604      	mov	r4, r0
 8004898:	b160      	cbz	r0, 80048b4 <ai_mnetwork_is_valid.constprop.0+0x20>
 800489a:	f7fb fcb1 	bl	8000200 <strlen>
 800489e:	2807      	cmp	r0, #7
 80048a0:	4602      	mov	r2, r0
 80048a2:	d107      	bne.n	80048b4 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 80048a4:	4804      	ldr	r0, [pc, #16]	; (80048b8 <ai_mnetwork_is_valid.constprop.0+0x24>)
 80048a6:	4621      	mov	r1, r4
 80048a8:	f009 fb6b 	bl	800df82 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 80048ac:	fab0 f080 	clz	r0, r0
 80048b0:	0940      	lsrs	r0, r0, #5
}
 80048b2:	bd10      	pop	{r4, pc}
    return false;
 80048b4:	2000      	movs	r0, #0
 80048b6:	e7fc      	b.n	80048b2 <ai_mnetwork_is_valid.constprop.0+0x1e>
 80048b8:	08011214 	.word	0x08011214

080048bc <MX_X_CUBE_AI_Init>:
{
 80048bc:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 80048be:	f7fc fc97 	bl	80011f0 <MX_LPUART1_UART_Init>
}
 80048c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 80048c6:	f7ff b84f 	b.w	8003968 <aiSystemPerformanceInit>

080048ca <MX_X_CUBE_AI_Process>:
{
 80048ca:	b508      	push	{r3, lr}
    aiSystemPerformanceProcess();
 80048cc:	f7ff f902 	bl	8003ad4 <aiSystemPerformanceProcess>
}
 80048d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1000); /* delay 1s */
 80048d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048d8:	f7fc bea6 	b.w	8001628 <HAL_Delay>

080048dc <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80048dc:	b510      	push	{r4, lr}
 80048de:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 80048e0:	f7ff ffd8 	bl	8004894 <ai_mnetwork_is_valid.constprop.0>
 80048e4:	b920      	cbnz	r0, 80048f0 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 80048e6:	2c00      	cmp	r4, #0
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <ai_mnetwork_find+0x18>)
 80048ea:	bf18      	it	ne
 80048ec:	2000      	movne	r0, #0
}
 80048ee:	bd10      	pop	{r4, pc}
            return entry->name;
 80048f0:	4800      	ldr	r0, [pc, #0]	; (80048f4 <ai_mnetwork_find+0x18>)
 80048f2:	e7fc      	b.n	80048ee <ai_mnetwork_find+0x12>
 80048f4:	08011214 	.word	0x08011214

080048f8 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80048f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048fa:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80048fc:	2000      	movs	r0, #0
{
 80048fe:	460d      	mov	r5, r1
 8004900:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004902:	f7ff ffb9 	bl	8004878 <ai_mnetwork_handle>

    if (!inst) {
 8004906:	4604      	mov	r4, r0
 8004908:	b930      	cbnz	r0, 8004918 <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 800490a:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 800490e:	b002      	add	sp, #8
 8004910:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 8004912:	f241 0014 	movw	r0, #4116	; 0x1014
 8004916:	e7fa      	b.n	800490e <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 8004918:	4630      	mov	r0, r6
 800491a:	9101      	str	r1, [sp, #4]
 800491c:	f7ff ffba 	bl	8004894 <ai_mnetwork_is_valid.constprop.0>
 8004920:	9901      	ldr	r1, [sp, #4]
 8004922:	2800      	cmp	r0, #0
 8004924:	d0f5      	beq.n	8004912 <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 8004926:	4628      	mov	r0, r5
 8004928:	f000 fb88 	bl	800503c <ai_network_create>
 800492c:	b2c2      	uxtb	r2, r0
 800492e:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8004932:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8004936:	d104      	bne.n	8004942 <ai_mnetwork_create+0x4a>
        inst->entry = found;
 8004938:	4905      	ldr	r1, [pc, #20]	; (8004950 <ai_mnetwork_create+0x58>)
 800493a:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 800493c:	6829      	ldr	r1, [r5, #0]
 800493e:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8004940:	602c      	str	r4, [r5, #0]
    return err;
 8004942:	2000      	movs	r0, #0
 8004944:	f362 0007 	bfi	r0, r2, #0, #8
 8004948:	f363 201f 	bfi	r0, r3, #8, #24
 800494c:	e7df      	b.n	800490e <ai_mnetwork_create+0x16>
 800494e:	bf00      	nop
 8004950:	0801121c 	.word	0x0801121c

08004954 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004958:	f7ff ff8e 	bl	8004878 <ai_mnetwork_handle>
    if (inn) {
 800495c:	4605      	mov	r5, r0
 800495e:	b160      	cbz	r0, 800497a <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8004960:	6803      	ldr	r3, [r0, #0]
 8004962:	6840      	ldr	r0, [r0, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	4798      	blx	r3
        if (hdl != inn->handle) {
 8004968:	686b      	ldr	r3, [r5, #4]
 800496a:	4283      	cmp	r3, r0
 800496c:	d005      	beq.n	800497a <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <ai_mnetwork_destroy+0x2c>)
 8004970:	429d      	cmp	r5, r3
 8004972:	f04f 0400 	mov.w	r4, #0
 8004976:	d100      	bne.n	800497a <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8004978:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 800497a:	4620      	mov	r0, r4
 800497c:	bd38      	pop	{r3, r4, r5, pc}
 800497e:	bf00      	nop
 8004980:	200021b0 	.word	0x200021b0

08004984 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8004984:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004986:	f7ff ff77 	bl	8004878 <ai_mnetwork_handle>
    if (inn)
 800498a:	b128      	cbz	r0, 8004998 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 800498c:	6802      	ldr	r2, [r0, #0]
 800498e:	6840      	ldr	r0, [r0, #4]
 8004990:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8004992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8004996:	4710      	bx	r2
}
 8004998:	bd10      	pop	{r4, pc}

0800499a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800499a:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800499c:	f7ff ff6c 	bl	8004878 <ai_mnetwork_handle>
    if (inn)
 80049a0:	b128      	cbz	r0, 80049ae <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 80049a2:	6803      	ldr	r3, [r0, #0]
 80049a4:	6840      	ldr	r0, [r0, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 80049a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 80049ac:	4718      	bx	r3
}
 80049ae:	f241 0014 	movw	r0, #4116	; 0x1014
 80049b2:	bd10      	pop	{r4, pc}

080049b4 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 80049b4:	b530      	push	{r4, r5, lr}
 80049b6:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80049b8:	f7ff ff5e 	bl	8004878 <ai_mnetwork_handle>
    if (inn) {
 80049bc:	4604      	mov	r4, r0
 80049be:	b168      	cbz	r0, 80049dc <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 80049c0:	6803      	ldr	r3, [r0, #0]
 80049c2:	4668      	mov	r0, sp
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80049c8:	2500      	movs	r5, #0
 80049ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80049ce:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80049d0:	42aa      	cmp	r2, r5
 80049d2:	dc05      	bgt.n	80049e0 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	6860      	ldr	r0, [r4, #4]
 80049d8:	4669      	mov	r1, sp
 80049da:	4798      	blx	r3
    }
    else
        return false;
}
 80049dc:	b00f      	add	sp, #60	; 0x3c
 80049de:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	4629      	mov	r1, r5
 80049e4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80049e8:	a803      	add	r0, sp, #12
 80049ea:	f000 fd85 	bl	80054f8 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 80049ee:	3501      	adds	r5, #1
 80049f0:	e7eb      	b.n	80049ca <ai_mnetwork_init+0x16>

080049f2 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 80049f2:	b513      	push	{r0, r1, r4, lr}
 80049f4:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80049f6:	f7ff ff3f 	bl	8004878 <ai_mnetwork_handle>
    if (inn)
 80049fa:	4603      	mov	r3, r0
 80049fc:	b140      	cbz	r0, 8004a10 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 80049fe:	6800      	ldr	r0, [r0, #0]
 8004a00:	9a01      	ldr	r2, [sp, #4]
 8004a02:	6a04      	ldr	r4, [r0, #32]
 8004a04:	6858      	ldr	r0, [r3, #4]
 8004a06:	4623      	mov	r3, r4
    else
        return 0;
}
 8004a08:	b002      	add	sp, #8
 8004a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8004a0e:	4718      	bx	r3
}
 8004a10:	b002      	add	sp, #8
 8004a12:	bd10      	pop	{r4, pc}

08004a14 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004a18:	f7ff ff2e 	bl	8004878 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8004a1c:	b188      	cbz	r0, 8004a42 <ai_mnetwork_get_private_handle+0x2e>
 8004a1e:	b181      	cbz	r1, 8004a42 <ai_mnetwork_get_private_handle+0x2e>
 8004a20:	b17d      	cbz	r5, 8004a42 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8004a22:	6843      	ldr	r3, [r0, #4]
 8004a24:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8004a26:	f100 0408 	add.w	r4, r0, #8
 8004a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a3a:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8004a3e:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a46:	e7fb      	b.n	8004a40 <ai_mnetwork_get_private_handle+0x2c>

08004a48 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004a4c:	6896      	ldr	r6, [r2, #8]
{
 8004a4e:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8004a50:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004a52:	f016 0304 	ands.w	r3, r6, #4
{
 8004a56:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8004a58:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004a5c:	d028      	beq.n	8004ab0 <_write_number+0x68>
    if ((int64_t)number < 0) {
 8004a5e:	42a9      	cmp	r1, r5
 8004a60:	da07      	bge.n	8004a72 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8004a62:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004a64:	4240      	negs	r0, r0
      specifier->width -= 1;
 8004a66:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      number = -number;
 8004a6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8004a6e:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8004a70:	252d      	movs	r5, #45	; 0x2d
 8004a72:	f016 0f08 	tst.w	r6, #8
 8004a76:	bf14      	ite	ne
 8004a78:	f04f 0841 	movne.w	r8, #65	; 0x41
 8004a7c:	f04f 0861 	moveq.w	r8, #97	; 0x61
 8004a80:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004a84:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004a86:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004a8a:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8004a8e:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004a92:	f1ba 0f00 	cmp.w	sl, #0
 8004a96:	d032      	beq.n	8004afe <_write_number+0xb6>
      chr = number & 0x0F;
 8004a98:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8004a9c:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004a9e:	2b09      	cmp	r3, #9
      t = number >> 4;
 8004aa0:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004aa4:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004aa8:	d906      	bls.n	8004ab8 <_write_number+0x70>
 8004aaa:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	e004      	b.n	8004aba <_write_number+0x72>
  char sign_neg = 0;
 8004ab0:	461d      	mov	r5, r3
 8004ab2:	e7de      	b.n	8004a72 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004ab4:	4617      	mov	r7, r2
 8004ab6:	e7ea      	b.n	8004a8e <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004ab8:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8004aba:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 8004abe:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004ac2:	f107 32ff 	add.w	r2, r7, #4294967295	; 0xffffffff
    count++;
 8004ac6:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8004aca:	d1f3      	bne.n	8004ab4 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004acc:	f006 0101 	and.w	r1, r6, #1
 8004ad0:	b14d      	cbz	r5, 8004ae6 <_write_number+0x9e>
 8004ad2:	b941      	cbnz	r1, 8004ae6 <_write_number+0x9e>
    buf[idx--] = sign_neg;
 8004ad4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004ad8:	eb0d 0203 	add.w	r2, sp, r3
    count++;
 8004adc:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8004ae0:	f802 5c40 	strb.w	r5, [r2, #-64]
 8004ae4:	1eba      	subs	r2, r7, #2
 8004ae6:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	bf14      	ite	ne
 8004aec:	2130      	movne	r1, #48	; 0x30
 8004aee:	2120      	moveq	r1, #32
 8004af0:	f006 0602 	and.w	r6, r6, #2
 8004af4:	455b      	cmp	r3, fp
 8004af6:	dd13      	ble.n	8004b20 <_write_number+0xd8>
 8004af8:	b166      	cbz	r6, 8004b14 <_write_number+0xcc>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004afa:	b9a5      	cbnz	r5, 8004b26 <_write_number+0xde>
 8004afc:	e01b      	b.n	8004b36 <_write_number+0xee>
      t = number / 10;
 8004afe:	2300      	movs	r3, #0
 8004b00:	220a      	movs	r2, #10
 8004b02:	f7fc f869 	bl	8000bd8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004b06:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8004b0a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004b0e:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 8004b12:	e7cb      	b.n	8004aac <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8004b14:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8004b18:	f10b 0b01 	add.w	fp, fp, #1
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	e7e9      	b.n	8004af4 <_write_number+0xac>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004b20:	b14d      	cbz	r5, 8004b36 <_write_number+0xee>
 8004b22:	455b      	cmp	r3, fp
 8004b24:	d107      	bne.n	8004b36 <_write_number+0xee>
    buf[idx--] = sign_neg;
 8004b26:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004b2a:	446b      	add	r3, sp
    count++;
 8004b2c:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004b30:	f803 5c40 	strb.w	r5, [r3, #-64]
 8004b34:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8004b36:	eb0d 0602 	add.w	r6, sp, r2
 8004b3a:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004b3c:	68e3      	ldr	r3, [r4, #12]
 8004b3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b42:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 8004b44:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004b46:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004b48:	45ab      	cmp	fp, r5
 8004b4a:	d1f7      	bne.n	8004b3c <_write_number+0xf4>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004b4c:	68a3      	ldr	r3, [r4, #8]
 8004b4e:	079b      	lsls	r3, r3, #30
 8004b50:	d408      	bmi.n	8004b64 <_write_number+0x11c>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004b52:	4628      	mov	r0, r5
 8004b54:	b011      	add	sp, #68	; 0x44
 8004b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8004b5a:	68e3      	ldr	r3, [r4, #12]
 8004b5c:	6920      	ldr	r0, [r4, #16]
 8004b5e:	2120      	movs	r1, #32
 8004b60:	4798      	blx	r3
 8004b62:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	42ab      	cmp	r3, r5
 8004b68:	dcf7      	bgt.n	8004b5a <_write_number+0x112>
 8004b6a:	e7f2      	b.n	8004b52 <_write_number+0x10a>
 8004b6c:	0000      	movs	r0, r0
	...

08004b70 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	ed2d 8b02 	vpush	{d8}
  double mul = 1.0;
 8004b78:	ed9f 8b8f 	vldr	d8, [pc, #572]	; 8004db8 <vlc_print+0x248>
{
 8004b7c:	b09d      	sub	sp, #116	; 0x74
 8004b7e:	4682      	mov	sl, r0
 8004b80:	468b      	mov	fp, r1
 8004b82:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8004b84:	2500      	movs	r5, #0
  return *(*fmtP)++;
 8004b86:	4613      	mov	r3, r2
 8004b88:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004b8c:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004b8e:	b929      	cbnz	r1, 8004b9c <vlc_print+0x2c>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8004b90:	4628      	mov	r0, r5
 8004b92:	b01d      	add	sp, #116	; 0x74
 8004b94:	ecbd 8b02 	vpop	{d8}
 8004b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004b9c:	290a      	cmp	r1, #10
 8004b9e:	d103      	bne.n	8004ba8 <vlc_print+0x38>
      putc_fct(user, c);
 8004ba0:	4658      	mov	r0, fp
 8004ba2:	47d0      	blx	sl
      count++;
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	e0c2      	b.n	8004d2e <vlc_print+0x1be>
    else if (c == '%')
 8004ba8:	2925      	cmp	r1, #37	; 0x25
 8004baa:	d1f9      	bne.n	8004ba0 <vlc_print+0x30>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004bac:	2300      	movs	r3, #0
 8004bae:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004bb2:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 8004bb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	469c      	mov	ip, r3
 8004bc2:	4618      	mov	r0, r3
      bool has_precision = false;
 8004bc4:	461f      	mov	r7, r3
 8004bc6:	f04f 080a 	mov.w	r8, #10
  return *(*fmtP)++;
 8004bca:	9e04      	ldr	r6, [sp, #16]
 8004bcc:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004bd0:	9604      	str	r6, [sp, #16]
        if (!c)
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	f000 81d0 	beq.w	8004f78 <vlc_print+0x408>
        else if (c == '0')
 8004bd8:	2930      	cmp	r1, #48	; 0x30
 8004bda:	d114      	bne.n	8004c06 <vlc_print+0x96>
          if (!specifier.width && !specifier.precision) {
 8004bdc:	ea50 0102 	orrs.w	r1, r0, r2
 8004be0:	d107      	bne.n	8004bf2 <vlc_print+0x82>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004be2:	9b00      	ldr	r3, [sp, #0]
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	460a      	mov	r2, r1
 8004bec:	4608      	mov	r0, r1
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e7eb      	b.n	8004bca <vlc_print+0x5a>
          } else if (has_precision) {
 8004bf2:	b11f      	cbz	r7, 8004bfc <vlc_print+0x8c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004bf4:	fb08 f202 	mul.w	r2, r8, r2
 8004bf8:	46be      	mov	lr, r7
 8004bfa:	e7e6      	b.n	8004bca <vlc_print+0x5a>
            specifier.width = specifier.width * 10 + (c - '0');
 8004bfc:	fb08 f000 	mul.w	r0, r8, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8004c00:	f04f 0c01 	mov.w	ip, #1
 8004c04:	e7e1      	b.n	8004bca <vlc_print+0x5a>
        else if (c == '-')
 8004c06:	292d      	cmp	r1, #45	; 0x2d
 8004c08:	d104      	bne.n	8004c14 <vlc_print+0xa4>
          specifier.flags |= FLAG_NEG_PAD;
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	f043 0302 	orr.w	r3, r3, #2
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	e7ec      	b.n	8004bee <vlc_print+0x7e>
        else if (c == '.')
 8004c14:	292e      	cmp	r1, #46	; 0x2e
 8004c16:	f000 81bd 	beq.w	8004f94 <vlc_print+0x424>
        else if ((c >= '1') && (c <= '9'))
 8004c1a:	f1a1 0631 	sub.w	r6, r1, #49	; 0x31
 8004c1e:	2e08      	cmp	r6, #8
 8004c20:	d807      	bhi.n	8004c32 <vlc_print+0xc2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004c22:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8004c24:	b117      	cbz	r7, 8004c2c <vlc_print+0xbc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004c26:	fb08 1202 	mla	r2, r8, r2, r1
 8004c2a:	e7e5      	b.n	8004bf8 <vlc_print+0x88>
            specifier.width = specifier.width * 10 + (c - '0');
 8004c2c:	fb08 1000 	mla	r0, r8, r0, r1
 8004c30:	e7e6      	b.n	8004c00 <vlc_print+0x90>
        else if (c == 'l')
 8004c32:	296c      	cmp	r1, #108	; 0x6c
 8004c34:	d0c9      	beq.n	8004bca <vlc_print+0x5a>
 8004c36:	f1bc 0f00 	cmp.w	ip, #0
 8004c3a:	d000      	beq.n	8004c3e <vlc_print+0xce>
 8004c3c:	9007      	str	r0, [sp, #28]
 8004c3e:	f1be 0f00 	cmp.w	lr, #0
 8004c42:	d000      	beq.n	8004c46 <vlc_print+0xd6>
 8004c44:	9208      	str	r2, [sp, #32]
 8004c46:	b10b      	cbz	r3, 8004c4c <vlc_print+0xdc>
 8004c48:	9b00      	ldr	r3, [sp, #0]
 8004c4a:	9309      	str	r3, [sp, #36]	; 0x24
          switch(c)
 8004c4c:	2978      	cmp	r1, #120	; 0x78
 8004c4e:	d809      	bhi.n	8004c64 <vlc_print+0xf4>
 8004c50:	2962      	cmp	r1, #98	; 0x62
 8004c52:	d813      	bhi.n	8004c7c <vlc_print+0x10c>
 8004c54:	2946      	cmp	r1, #70	; 0x46
 8004c56:	f000 80b5 	beq.w	8004dc4 <vlc_print+0x254>
 8004c5a:	2958      	cmp	r1, #88	; 0x58
 8004c5c:	f000 808b 	beq.w	8004d76 <vlc_print+0x206>
 8004c60:	2925      	cmp	r1, #37	; 0x25
 8004c62:	d09d      	beq.n	8004ba0 <vlc_print+0x30>
        putc_fct(user, '<');
 8004c64:	213c      	movs	r1, #60	; 0x3c
 8004c66:	4658      	mov	r0, fp
 8004c68:	47d0      	blx	sl
        putc_fct(user, '!');
 8004c6a:	2121      	movs	r1, #33	; 0x21
 8004c6c:	4658      	mov	r0, fp
 8004c6e:	47d0      	blx	sl
        putc_fct(user, '>');
 8004c70:	213e      	movs	r1, #62	; 0x3e
 8004c72:	4658      	mov	r0, fp
 8004c74:	47d0      	blx	sl
        va_arg(vl, signed long);
 8004c76:	3404      	adds	r4, #4
        count += 3;
 8004c78:	3503      	adds	r5, #3
        error = false;
 8004c7a:	e058      	b.n	8004d2e <vlc_print+0x1be>
          switch(c)
 8004c7c:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8004c80:	2b15      	cmp	r3, #21
 8004c82:	d8ef      	bhi.n	8004c64 <vlc_print+0xf4>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <vlc_print+0x11c>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004ce5 	.word	0x08004ce5
 8004c90:	08004d97 	.word	0x08004d97
 8004c94:	08004c65 	.word	0x08004c65
 8004c98:	08004dc5 	.word	0x08004dc5
 8004c9c:	08004c65 	.word	0x08004c65
 8004ca0:	08004c65 	.word	0x08004c65
 8004ca4:	08004d97 	.word	0x08004d97
 8004ca8:	08004c65 	.word	0x08004c65
 8004cac:	08004c65 	.word	0x08004c65
 8004cb0:	08004c65 	.word	0x08004c65
 8004cb4:	08004c65 	.word	0x08004c65
 8004cb8:	08004c65 	.word	0x08004c65
 8004cbc:	08004c65 	.word	0x08004c65
 8004cc0:	08004d6b 	.word	0x08004d6b
 8004cc4:	08004c65 	.word	0x08004c65
 8004cc8:	08004c65 	.word	0x08004c65
 8004ccc:	08004ced 	.word	0x08004ced
 8004cd0:	08004c65 	.word	0x08004c65
 8004cd4:	08004d9f 	.word	0x08004d9f
 8004cd8:	08004c65 	.word	0x08004c65
 8004cdc:	08004c65 	.word	0x08004c65
 8004ce0:	08004d7f 	.word	0x08004d7f
            t = (char)va_arg(vl, signed int);
 8004ce4:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 8004ce8:	b2c9      	uxtb	r1, r1
 8004cea:	e759      	b.n	8004ba0 <vlc_print+0x30>
            if (!str) str = "(null)";
 8004cec:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <vlc_print+0x250>)
            str = va_arg(vl, char*);
 8004cee:	f854 8b04 	ldr.w	r8, [r4], #4
            if (!str) str = "(null)";
 8004cf2:	f1b8 0f00 	cmp.w	r8, #0
 8004cf6:	bf08      	it	eq
 8004cf8:	4698      	moveq	r8, r3
  int len = strlen(str);
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f7fb fa80 	bl	8000200 <strlen>
  if (specifier->precision) {
 8004d00:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004d02:	4607      	mov	r7, r0
  if (specifier->precision) {
 8004d04:	b113      	cbz	r3, 8004d0c <vlc_print+0x19c>
    len = (len > specifier->precision)?specifier->precision:len;
 8004d06:	4298      	cmp	r0, r3
 8004d08:	bfa8      	it	ge
 8004d0a:	461f      	movge	r7, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004d0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d0e:	f016 0602 	ands.w	r6, r6, #2
 8004d12:	d013      	beq.n	8004d3c <vlc_print+0x1cc>
  int count = 0;
 8004d14:	2600      	movs	r6, #0
 8004d16:	46c1      	mov	r9, r8
  for (int i = 0; i < len; i++) {
 8004d18:	eba9 0308 	sub.w	r3, r9, r8
 8004d1c:	429f      	cmp	r7, r3
 8004d1e:	dc12      	bgt.n	8004d46 <vlc_print+0x1d6>
  if (specifier->flags & FLAG_NEG_PAD) {
 8004d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d22:	2f00      	cmp	r7, #0
 8004d24:	bfa8      	it	ge
 8004d26:	19f6      	addge	r6, r6, r7
 8004d28:	079b      	lsls	r3, r3, #30
 8004d2a:	d41c      	bmi.n	8004d66 <vlc_print+0x1f6>
            count += _write_string(str, &specifier);
 8004d2c:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 8004d2e:	9a04      	ldr	r2, [sp, #16]
 8004d30:	e729      	b.n	8004b86 <vlc_print+0x16>
      _WRITE_C(' ');
 8004d32:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004d36:	2120      	movs	r1, #32
 8004d38:	4798      	blx	r3
 8004d3a:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8004d3c:	9a07      	ldr	r2, [sp, #28]
 8004d3e:	19bb      	adds	r3, r7, r6
 8004d40:	429a      	cmp	r2, r3
 8004d42:	dcf6      	bgt.n	8004d32 <vlc_print+0x1c2>
 8004d44:	e7e7      	b.n	8004d16 <vlc_print+0x1a6>
    _WRITE_C(*str++);
 8004d46:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004d4a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004d4e:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 8004d50:	e7e2      	b.n	8004d18 <vlc_print+0x1a8>
      _WRITE_C(' ');
 8004d52:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004d56:	2120      	movs	r1, #32
 8004d58:	4798      	blx	r3
 8004d5a:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8004d5c:	9a07      	ldr	r2, [sp, #28]
 8004d5e:	19bb      	adds	r3, r7, r6
 8004d60:	429a      	cmp	r2, r3
 8004d62:	dcf6      	bgt.n	8004d52 <vlc_print+0x1e2>
 8004d64:	e7e2      	b.n	8004d2c <vlc_print+0x1bc>
 8004d66:	1bbf      	subs	r7, r7, r6
 8004d68:	e7f8      	b.n	8004d5c <vlc_print+0x1ec>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8004d72:	2308      	movs	r3, #8
 8004d74:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8004d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d78:	f043 0308 	orr.w	r3, r3, #8
 8004d7c:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.flags |= FLAG_HEX;
 8004d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8004d80:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8004d84:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8004d88:	aa07      	add	r2, sp, #28
 8004d8a:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8004d8c:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8004d8e:	f7ff fe5b 	bl	8004a48 <_write_number>
 8004d92:	4405      	add	r5, r0
            break;
 8004d94:	e7cb      	b.n	8004d2e <vlc_print+0x1be>
            specifier.flags |= FLAG_IS_SIGNED;
 8004d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d98:	f043 0304 	orr.w	r3, r3, #4
 8004d9c:	9309      	str	r3, [sp, #36]	; 0x24
              val = va_arg(vl, unsigned int);
 8004d9e:	6820      	ldr	r0, [r4, #0]
            if (c == 'u')
 8004da0:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 8004da2:	bf0c      	ite	eq
 8004da4:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 8004da6:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 8004da8:	aa07      	add	r2, sp, #28
 8004daa:	f7ff fe4d 	bl	8004a48 <_write_number>
              val = va_arg(vl, unsigned int);
 8004dae:	1d26      	adds	r6, r4, #4
            count += _write_number(val, &specifier);
 8004db0:	4405      	add	r5, r0
            break;
 8004db2:	4634      	mov	r4, r6
 8004db4:	e7bb      	b.n	8004d2e <vlc_print+0x1be>
 8004db6:	bf00      	nop
 8004db8:	00000000 	.word	0x00000000
 8004dbc:	3ff00000 	.word	0x3ff00000
 8004dc0:	08011248 	.word	0x08011248
            dbl = va_arg(vl, double);
 8004dc4:	3407      	adds	r4, #7
 8004dc6:	f024 0407 	bic.w	r4, r4, #7
 8004dca:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8004dce:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8004dd0:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8004dd4:	b90b      	cbnz	r3, 8004dda <vlc_print+0x26a>
              specifier.precision = 6;
 8004dd6:	2306      	movs	r3, #6
 8004dd8:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8004dda:	9e08      	ldr	r6, [sp, #32]
  double mul = 1.0;
 8004ddc:	ec59 8b18 	vmov	r8, r9, d8
  for (int i=0;i <specifier->precision; i++)
 8004de0:	2700      	movs	r7, #0
 8004de2:	42b7      	cmp	r7, r6
    mul *= 10;
 8004de4:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8004de8:	f2c0 80b1 	blt.w	8004f4e <vlc_print+0x3de>
  if (is_signed)
 8004dec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004df0:	2300      	movs	r3, #0
 8004df2:	f7fb fe8b 	bl	8000b0c <__aeabi_dcmplt>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	f000 80b2 	beq.w	8004f60 <vlc_print+0x3f0>
    number = -number;
 8004dfc:	9b00      	ldr	r3, [sp, #0]
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e06:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	4962      	ldr	r1, [pc, #392]	; (8004f98 <vlc_print+0x428>)
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f7fb fd34 	bl	800087c <__aeabi_ddiv>
 8004e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e18:	f7fb fa50 	bl	80002bc <__adddf3>
  val = (uint64_t)(number * mul);
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	f7fb fc02 	bl	8000628 <__aeabi_dmul>
 8004e24:	f7fb ff24 	bl	8000c70 <__aeabi_d2ulz>
  uint32_t count = 0;
 8004e28:	2700      	movs	r7, #0
  val = (uint64_t)(number * mul);
 8004e2a:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 8004e2c:	f04f 083f 	mov.w	r8, #63	; 0x3f
    uint64_t t = val / 10;
 8004e30:	4691      	mov	r9, r2
 8004e32:	2300      	movs	r3, #0
 8004e34:	220a      	movs	r2, #10
 8004e36:	4648      	mov	r0, r9
 8004e38:	9105      	str	r1, [sp, #20]
 8004e3a:	f7fb fecd 	bl	8000bd8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8004e3e:	f109 0330 	add.w	r3, r9, #48	; 0x30
    uint64_t t = val / 10;
 8004e42:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 8004e44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e48:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
    buf[idx--] = chr;
 8004e4c:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004e50:	446b      	add	r3, sp
 8004e52:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8004e56:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8004e5a:	1c7b      	adds	r3, r7, #1
    if (count == specifier->precision) {
 8004e5c:	429e      	cmp	r6, r3
      buf[idx--] = '.';
 8004e5e:	bf01      	itttt	eq
 8004e60:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 8004e64:	eb0d 0c03 	addeq.w	ip, sp, r3
 8004e68:	232e      	moveq	r3, #46	; 0x2e
 8004e6a:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 8004e6e:	bf18      	it	ne
 8004e70:	461f      	movne	r7, r3
  } while (val);
 8004e72:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 8004e74:	bf06      	itte	eq
 8004e76:	f1a8 0802 	subeq.w	r8, r8, #2
      count++;
 8004e7a:	3702      	addeq	r7, #2
    buf[idx--] = chr;
 8004e7c:	46e0      	movne	r8, ip
  } while (val);
 8004e7e:	f1b9 0f0a 	cmp.w	r9, #10
 8004e82:	f173 0300 	sbcs.w	r3, r3, #0
 8004e86:	d2d3      	bcs.n	8004e30 <vlc_print+0x2c0>
    buf[idx--] = '0';
 8004e88:	42be      	cmp	r6, r7
 8004e8a:	f1c6 0001 	rsb	r0, r6, #1
 8004e8e:	4438      	add	r0, r7
 8004e90:	f04f 0130 	mov.w	r1, #48	; 0x30
 8004e94:	bf38      	it	cc
 8004e96:	2001      	movcc	r0, #1
 8004e98:	eba6 0907 	sub.w	r9, r6, r7
 8004e9c:	eb0d 0301 	add.w	r3, sp, r1
 8004ea0:	bf38      	it	cc
 8004ea2:	f04f 0900 	movcc.w	r9, #0
 8004ea6:	4440      	add	r0, r8
 8004ea8:	4418      	add	r0, r3
 8004eaa:	464a      	mov	r2, r9
 8004eac:	f008 fa58 	bl	800d360 <memset>
 8004eb0:	1bbb      	subs	r3, r7, r6
 8004eb2:	42be      	cmp	r6, r7
 8004eb4:	bf38      	it	cc
 8004eb6:	2300      	movcc	r3, #0
 8004eb8:	444f      	add	r7, r9
  if (count == specifier->precision) {
 8004eba:	42be      	cmp	r6, r7
 8004ebc:	4498      	add	r8, r3
 8004ebe:	f106 0601 	add.w	r6, r6, #1
 8004ec2:	d108      	bne.n	8004ed6 <vlc_print+0x366>
    buf[idx--] = '.';
 8004ec4:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004ec8:	446b      	add	r3, sp
 8004eca:	222e      	movs	r2, #46	; 0x2e
 8004ecc:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004ed0:	4637      	mov	r7, r6
    buf[idx--] = '.';
 8004ed2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  if (count == specifier->precision + 1)
 8004ed6:	42be      	cmp	r6, r7
 8004ed8:	d108      	bne.n	8004eec <vlc_print+0x37c>
    buf[idx--] = '0';
 8004eda:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004ede:	446b      	add	r3, sp
 8004ee0:	2230      	movs	r2, #48	; 0x30
 8004ee2:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004ee6:	3701      	adds	r7, #1
    buf[idx--] = '0';
 8004ee8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  if (is_signed) {
 8004eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f7fb fe0a 	bl	8000b0c <__aeabi_dcmplt>
 8004ef8:	b140      	cbz	r0, 8004f0c <vlc_print+0x39c>
    buf[idx--] = '-';
 8004efa:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004efe:	446b      	add	r3, sp
 8004f00:	222d      	movs	r2, #45	; 0x2d
 8004f02:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004f06:	3701      	adds	r7, #1
    buf[idx--] = '-';
 8004f08:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  while (count < specifier->width) {
 8004f0c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    buf[idx--] = ' ';
 8004f10:	454f      	cmp	r7, r9
 8004f12:	f1c9 0001 	rsb	r0, r9, #1
 8004f16:	4438      	add	r0, r7
 8004f18:	bf88      	it	hi
 8004f1a:	2001      	movhi	r0, #1
 8004f1c:	eba9 0607 	sub.w	r6, r9, r7
 8004f20:	ab0c      	add	r3, sp, #48	; 0x30
 8004f22:	bf88      	it	hi
 8004f24:	2600      	movhi	r6, #0
 8004f26:	4440      	add	r0, r8
 8004f28:	4632      	mov	r2, r6
 8004f2a:	4418      	add	r0, r3
 8004f2c:	2120      	movs	r1, #32
 8004f2e:	f008 fa17 	bl	800d360 <memset>
  for(int i = 0; i < count; i++) {
 8004f32:	eba7 0309 	sub.w	r3, r7, r9
 8004f36:	454f      	cmp	r7, r9
 8004f38:	bf88      	it	hi
 8004f3a:	2300      	movhi	r3, #0
 8004f3c:	4498      	add	r8, r3
 8004f3e:	ab0c      	add	r3, sp, #48	; 0x30
 8004f40:	4437      	add	r7, r6
 8004f42:	4498      	add	r8, r3
 8004f44:	2600      	movs	r6, #0
 8004f46:	42b7      	cmp	r7, r6
 8004f48:	d10f      	bne.n	8004f6a <vlc_print+0x3fa>
            count += _write_double(dbl, &specifier);
 8004f4a:	443d      	add	r5, r7
            break;
 8004f4c:	e6ef      	b.n	8004d2e <vlc_print+0x1be>
    mul *= 10;
 8004f4e:	4640      	mov	r0, r8
 8004f50:	4649      	mov	r1, r9
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <vlc_print+0x42c>)
 8004f54:	f7fb fb68 	bl	8000628 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8004f58:	3701      	adds	r7, #1
    mul *= 10;
 8004f5a:	4680      	mov	r8, r0
 8004f5c:	4689      	mov	r9, r1
  for (int i=0;i <specifier->precision; i++)
 8004f5e:	e740      	b.n	8004de2 <vlc_print+0x272>
 8004f60:	ed9d 7b00 	vldr	d7, [sp]
 8004f64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f68:	e74e      	b.n	8004e08 <vlc_print+0x298>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004f6a:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004f6e:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8004f72:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004f74:	3601      	adds	r6, #1
 8004f76:	e7e6      	b.n	8004f46 <vlc_print+0x3d6>
 8004f78:	f1bc 0f00 	cmp.w	ip, #0
 8004f7c:	d000      	beq.n	8004f80 <vlc_print+0x410>
 8004f7e:	9007      	str	r0, [sp, #28]
 8004f80:	f1be 0f00 	cmp.w	lr, #0
 8004f84:	d000      	beq.n	8004f88 <vlc_print+0x418>
 8004f86:	9208      	str	r2, [sp, #32]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f43f ae6b 	beq.w	8004c64 <vlc_print+0xf4>
 8004f8e:	9b00      	ldr	r3, [sp, #0]
 8004f90:	9309      	str	r3, [sp, #36]	; 0x24
 8004f92:	e667      	b.n	8004c64 <vlc_print+0xf4>
          has_precision = true;
 8004f94:	2701      	movs	r7, #1
 8004f96:	e618      	b.n	8004bca <vlc_print+0x5a>
 8004f98:	3fe00000 	.word	0x3fe00000
 8004f9c:	40240000 	.word	0x40240000

08004fa0 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	b0a0      	sub	sp, #128	; 0x80
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004fa8:	f000 fd1a 	bl	80059e0 <ai_platform_context_acquire>
 8004fac:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004fae:	2d00      	cmp	r5, #0
 8004fb0:	d031      	beq.n	8005016 <ai_network_get_report+0x76>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d02c      	beq.n	8005010 <ai_network_get_report+0x70>
  {
    ai_network_report r = {
 8004fb6:	226c      	movs	r2, #108	; 0x6c
 8004fb8:	2100      	movs	r1, #0
 8004fba:	a805      	add	r0, sp, #20
 8004fbc:	f008 f9d0 	bl	800d360 <memset>
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <ai_network_get_report+0x7c>)
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <ai_network_get_report+0x80>)
 8004fc6:	9302      	str	r3, [sp, #8]
 8004fc8:	4b16      	ldr	r3, [pc, #88]	; (8005024 <ai_network_get_report+0x84>)
 8004fca:	9303      	str	r3, [sp, #12]
 8004fcc:	4b16      	ldr	r3, [pc, #88]	; (8005028 <ai_network_get_report+0x88>)
 8004fce:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004fd0:	f000 fbfc 	bl	80057cc <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004fd4:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004fd6:	f000 fc31 	bl	800583c <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <ai_network_get_report+0x8c>)
 8004fdc:	9307      	str	r3, [sp, #28]
 8004fde:	2308      	movs	r3, #8
 8004fe0:	f88d 3020 	strb.w	r3, [sp, #32]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004fe4:	9006      	str	r0, [sp, #24]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004fe6:	f000 fc63 	bl	80058b0 <ai_platform_api_get_version>
 8004fea:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004fec:	f000 fcac 	bl	8005948 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <ai_network_get_report+0x90>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004ff2:	900b      	str	r0, [sp, #44]	; 0x2c
    ai_network_report r = {
 8004ff4:	930c      	str	r3, [sp, #48]	; 0x30
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004ff6:	a901      	add	r1, sp, #4
    ai_network_report r = {
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <ai_network_get_report+0x94>)
 8004ffa:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f000 fda3 	bl	8005b48 <ai_platform_api_get_network_report>
 8005002:	4604      	mov	r4, r0
 8005004:	b120      	cbz	r0, 8005010 <ai_network_get_report+0x70>

    *report = r;
 8005006:	227c      	movs	r2, #124	; 0x7c
 8005008:	a901      	add	r1, sp, #4
 800500a:	4628      	mov	r0, r5
 800500c:	f008 f99a 	bl	800d344 <memcpy>
    return true;
  }
  return false;
}
 8005010:	4620      	mov	r0, r4
 8005012:	b020      	add	sp, #128	; 0x80
 8005014:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8005016:	462c      	mov	r4, r5
 8005018:	e7fa      	b.n	8005010 <ai_network_get_report+0x70>
 800501a:	bf00      	nop
 800501c:	08011214 	.word	0x08011214
 8005020:	0801124f 	.word	0x0801124f
 8005024:	08011270 	.word	0x08011270
 8005028:	08011289 	.word	0x08011289
 800502c:	080185b9 	.word	0x080185b9
 8005030:	0028ac70 	.word	0x0028ac70
 8005034:	a1facade 	.word	0xa1facade

08005038 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005038:	f000 bd12 	b.w	8005a60 <ai_platform_network_get_error>

0800503c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800503c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800503e:	2305      	movs	r3, #5
 8005040:	2200      	movs	r2, #0
 8005042:	e9cd 3200 	strd	r3, r2, [sp]
 8005046:	4a03      	ldr	r2, [pc, #12]	; (8005054 <ai_network_create+0x18>)
 8005048:	2301      	movs	r3, #1
 800504a:	f001 f83d 	bl	80060c8 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800504e:	b003      	add	sp, #12
 8005050:	f85d fb04 	ldr.w	pc, [sp], #4
 8005054:	20001698 	.word	0x20001698

08005058 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8005058:	f001 b90c 	b.w	8006274 <ai_platform_network_destroy>

0800505c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800505c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005060:	4607      	mov	r7, r0
 8005062:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005064:	f001 f972 	bl	800634c <ai_platform_network_init>
  if (!net_ctx) return false;
 8005068:	4604      	mov	r4, r0
 800506a:	2800      	cmp	r0, #0
 800506c:	f000 816b 	beq.w	8005346 <ai_network_init+0x2ea>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8005070:	f8df 83b4 	ldr.w	r8, [pc, #948]	; 8005428 <ai_network_init+0x3cc>
 8005074:	4632      	mov	r2, r6
 8005076:	2101      	movs	r1, #1
 8005078:	4640      	mov	r0, r8
 800507a:	f000 fadd 	bl	8005638 <ai_platform_get_weights_map>
 800507e:	4605      	mov	r5, r0
 8005080:	2800      	cmp	r0, #0
 8005082:	f000 8162 	beq.w	800534a <ai_network_init+0x2ee>
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005086:	4ab7      	ldr	r2, [pc, #732]	; (8005364 <ai_network_init+0x308>)
 8005088:	6813      	ldr	r3, [r2, #0]
 800508a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800508e:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005090:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005094:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005098:	4ab3      	ldr	r2, [pc, #716]	; (8005368 <ai_network_init+0x30c>)
 800509a:	6811      	ldr	r1, [r2, #0]
 800509c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050a0:	6011      	str	r1, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 4096);
 80050a2:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
    conv2d_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4096);
 80050a6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80050aa:	4ab0      	ldr	r2, [pc, #704]	; (800536c <ai_network_init+0x310>)
 80050ac:	6811      	ldr	r1, [r2, #0]
 80050ae:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050b2:	6011      	str	r1, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 4352);
 80050b4:	f503 5188 	add.w	r1, r3, #4352	; 0x1100
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4352);
 80050b8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80050bc:	4aac      	ldr	r2, [pc, #688]	; (8005370 <ai_network_init+0x314>)
 80050be:	6811      	ldr	r1, [r2, #0]
 80050c0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050c4:	6011      	str	r1, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 4928);
 80050c6:	f503 519a 	add.w	r1, r3, #4928	; 0x1340
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4928);
 80050ca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80050ce:	4aa9      	ldr	r2, [pc, #676]	; (8005374 <ai_network_init+0x318>)
 80050d0:	6811      	ldr	r1, [r2, #0]
 80050d2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050d6:	6011      	str	r1, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 5184);
 80050d8:	f503 51a2 	add.w	r1, r3, #5184	; 0x1440
    conv2d_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5184);
 80050dc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80050e0:	4aa5      	ldr	r2, [pc, #660]	; (8005378 <ai_network_init+0x31c>)
 80050e2:	6811      	ldr	r1, [r2, #0]
 80050e4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050e8:	6011      	str	r1, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 9280);
 80050ea:	f503 5111 	add.w	r1, r3, #9280	; 0x2440
    conv2d_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 9280);
 80050ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_11_weights_array.format |= AI_FMT_FLAG_CONST;
 80050f2:	4aa2      	ldr	r2, [pc, #648]	; (800537c <ai_network_init+0x320>)
 80050f4:	6811      	ldr	r1, [r2, #0]
 80050f6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050fa:	6011      	str	r1, [r2, #0]
    dense_11_weights_array.data = AI_PTR(g_network_weights_map[0] + 9536);
 80050fc:	f503 5115 	add.w	r1, r3, #9536	; 0x2540
    dense_11_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 9536);
 8005100:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005104:	4a9e      	ldr	r2, [pc, #632]	; (8005380 <ai_network_init+0x324>)
 8005106:	6811      	ldr	r1, [r2, #0]
 8005108:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800510c:	6011      	str	r1, [r2, #0]
    dense_11_bias_array.data = AI_PTR(g_network_weights_map[0] + 10304);
 800510e:	f503 5121 	add.w	r1, r3, #10304	; 0x2840
    dense_11_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 10304);
 8005112:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005116:	4a9b      	ldr	r2, [pc, #620]	; (8005384 <ai_network_init+0x328>)
 8005118:	6811      	ldr	r1, [r2, #0]
 800511a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800511e:	6011      	str	r1, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 10352);
 8005120:	f503 5121 	add.w	r1, r3, #10304	; 0x2840
 8005124:	3130      	adds	r1, #48	; 0x30
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 10352);
 8005126:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800512a:	4a97      	ldr	r2, [pc, #604]	; (8005388 <ai_network_init+0x32c>)
 800512c:	6811      	ldr	r1, [r2, #0]
 800512e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005132:	6011      	str	r1, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 12912);
 8005134:	f503 5149 	add.w	r1, r3, #12864	; 0x3240
 8005138:	3130      	adds	r1, #48	; 0x30
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 12912);
 800513a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800513e:	4a93      	ldr	r2, [pc, #588]	; (800538c <ai_network_init+0x330>)
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005146:	6011      	str	r1, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 13168);
 8005148:	f503 514d 	add.w	r1, r3, #13120	; 0x3340
 800514c:	3130      	adds	r1, #48	; 0x30
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 13168);
 800514e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005152:	4a8f      	ldr	r2, [pc, #572]	; (8005390 <ai_network_init+0x334>)
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800515a:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 13744);
 800515c:	f503 5156 	add.w	r1, r3, #13696	; 0x3580
 8005160:	3130      	adds	r1, #48	; 0x30
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 13744);
 8005162:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005166:	4a8b      	ldr	r2, [pc, #556]	; (8005394 <ai_network_init+0x338>)
 8005168:	6811      	ldr	r1, [r2, #0]
 800516a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800516e:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 14000);
 8005170:	f503 515a 	add.w	r1, r3, #13952	; 0x3680
 8005174:	3130      	adds	r1, #48	; 0x30
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 14000);
 8005176:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800517a:	4a87      	ldr	r2, [pc, #540]	; (8005398 <ai_network_init+0x33c>)
 800517c:	6811      	ldr	r1, [r2, #0]
 800517e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005182:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 18096);
 8005184:	f503 418d 	add.w	r1, r3, #18048	; 0x4680
 8005188:	3130      	adds	r1, #48	; 0x30
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 18096);
 800518a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800518e:	4a83      	ldr	r2, [pc, #524]	; (800539c <ai_network_init+0x340>)
 8005190:	6811      	ldr	r1, [r2, #0]
 8005192:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005196:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 18352);
 8005198:	f503 418f 	add.w	r1, r3, #18304	; 0x4780
 800519c:	3130      	adds	r1, #48	; 0x30
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 18352);
 800519e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80051a2:	4a7f      	ldr	r2, [pc, #508]	; (80053a0 <ai_network_init+0x344>)
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80051aa:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 18928);
 80051ac:	f503 4193 	add.w	r1, r3, #18816	; 0x4980
 80051b0:	3170      	adds	r1, #112	; 0x70
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 18928);
 80051b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80051b6:	4a7b      	ldr	r2, [pc, #492]	; (80053a4 <ai_network_init+0x348>)
 80051b8:	6811      	ldr	r1, [r2, #0]
 80051ba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80051be:	6011      	str	r1, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 19184);
 80051c0:	f503 4195 	add.w	r1, r3, #19072	; 0x4a80
 80051c4:	3170      	adds	r1, #112	; 0x70
    conv2d_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 19184);
 80051c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80051ca:	4a77      	ldr	r2, [pc, #476]	; (80053a8 <ai_network_init+0x34c>)
 80051cc:	6811      	ldr	r1, [r2, #0]
 80051ce:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80051d2:	6011      	str	r1, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 23280);
 80051d4:	f503 41b5 	add.w	r1, r3, #23168	; 0x5a80
 80051d8:	3170      	adds	r1, #112	; 0x70
    conv2d_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 23280);
 80051da:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 80051de:	4a73      	ldr	r2, [pc, #460]	; (80053ac <ai_network_init+0x350>)
 80051e0:	6811      	ldr	r1, [r2, #0]
 80051e2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80051e6:	6011      	str	r1, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 23536);
 80051e8:	f503 41b7 	add.w	r1, r3, #23424	; 0x5b80
 80051ec:	3170      	adds	r1, #112	; 0x70
    conv2d_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 23536);
 80051ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80051f2:	4a6f      	ldr	r2, [pc, #444]	; (80053b0 <ai_network_init+0x354>)
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 24112);
 80051f4:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80051f8:	6811      	ldr	r1, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 24112);
 80051fa:	3330      	adds	r3, #48	; 0x30
    conv2d_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 24112);
 80051fc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005200:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005204:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8005206:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800542c <ai_network_init+0x3d0>
 800520a:	4632      	mov	r2, r6
 800520c:	2101      	movs	r1, #1
 800520e:	4640      	mov	r0, r8
 8005210:	f000 fa66 	bl	80056e0 <ai_platform_get_activations_map>
 8005214:	4606      	mov	r6, r0
 8005216:	2800      	cmp	r0, #0
 8005218:	f000 809d 	beq.w	8005356 <ai_network_init+0x2fa>
    input_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800521c:	f8d8 3000 	ldr.w	r3, [r8]
 8005220:	4a64      	ldr	r2, [pc, #400]	; (80053b4 <ai_network_init+0x358>)
    input_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005222:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 492);
 8005226:	4a64      	ldr	r2, [pc, #400]	; (80053b8 <ai_network_init+0x35c>)
 8005228:	f503 71f6 	add.w	r1, r3, #492	; 0x1ec
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 492);
 800522c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 6412);
 8005230:	4962      	ldr	r1, [pc, #392]	; (80053bc <ai_network_init+0x360>)
 8005232:	f503 52c8 	add.w	r2, r3, #6400	; 0x1900
 8005236:	320c      	adds	r2, #12
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6412);
 8005238:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 2316);
 800523c:	4a60      	ldr	r2, [pc, #384]	; (80053c0 <ai_network_init+0x364>)
 800523e:	f603 110c 	addw	r1, r3, #2316	; 0x90c
    conv2d_1_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2316);
 8005242:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 14412);
 8005246:	495f      	ldr	r1, [pc, #380]	; (80053c4 <ai_network_init+0x368>)
 8005248:	f503 5261 	add.w	r2, r3, #14400	; 0x3840
 800524c:	320c      	adds	r2, #12
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 14412);
 800524e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 1996);
 8005252:	4a5d      	ldr	r2, [pc, #372]	; (80053c8 <ai_network_init+0x36c>)
 8005254:	f203 71cc 	addw	r1, r3, #1996	; 0x7cc
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1996);
 8005258:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1100);
 800525c:	4a5b      	ldr	r2, [pc, #364]	; (80053cc <ai_network_init+0x370>)
 800525e:	f203 414c 	addw	r1, r3, #1100	; 0x44c
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1100);
 8005262:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 9996);
 8005266:	495a      	ldr	r1, [pc, #360]	; (80053d0 <ai_network_init+0x374>)
 8005268:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 800526c:	320c      	adds	r2, #12
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9996);
 800526e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 5900);
 8005272:	4958      	ldr	r1, [pc, #352]	; (80053d4 <ai_network_init+0x378>)
 8005274:	f503 52b8 	add.w	r2, r3, #5888	; 0x1700
 8005278:	320c      	adds	r2, #12
    conv2d_3_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5900);
 800527a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800527e:	4a56      	ldr	r2, [pc, #344]	; (80053d8 <ai_network_init+0x37c>)
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 5580);
 8005280:	4956      	ldr	r1, [pc, #344]	; (80053dc <ai_network_init+0x380>)
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005282:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 5580);
 8005286:	f503 52ae 	add.w	r2, r3, #5568	; 0x15c0
 800528a:	320c      	adds	r2, #12
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5580);
 800528c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005290:	4a53      	ldr	r2, [pc, #332]	; (80053e0 <ai_network_init+0x384>)
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 5260);
 8005292:	4954      	ldr	r1, [pc, #336]	; (80053e4 <ai_network_init+0x388>)
    conv2d_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005294:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 5260);
 8005298:	f503 52a4 	add.w	r2, r3, #5248	; 0x1480
 800529c:	320c      	adds	r2, #12
    conv2d_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5260);
 800529e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_5_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 1164);
 80052a2:	4a51      	ldr	r2, [pc, #324]	; (80053e8 <ai_network_init+0x38c>)
 80052a4:	f203 418c 	addw	r1, r3, #1164	; 0x48c
    conv2d_5_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1164);
 80052a8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 13260);
 80052ac:	494f      	ldr	r1, [pc, #316]	; (80053ec <ai_network_init+0x390>)
 80052ae:	f503 524f 	add.w	r2, r3, #13248	; 0x33c0
 80052b2:	320c      	adds	r2, #12
    conv2d_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 13260);
 80052b4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_5_output_array.data = AI_PTR(g_network_activations_map[0] + 844);
 80052b8:	4a4d      	ldr	r2, [pc, #308]	; (80053f0 <ai_network_init+0x394>)
 80052ba:	f503 7153 	add.w	r1, r3, #844	; 0x34c
    conv2d_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 844);
 80052be:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8844);
 80052c2:	494c      	ldr	r1, [pc, #304]	; (80053f4 <ai_network_init+0x398>)
 80052c4:	f503 520a 	add.w	r2, r3, #8832	; 0x2280
 80052c8:	320c      	adds	r2, #12
    conv2d_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 8844);
 80052ca:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[0] + 9740);
 80052ce:	494a      	ldr	r1, [pc, #296]	; (80053f8 <ai_network_init+0x39c>)
 80052d0:	f503 5218 	add.w	r2, r3, #9728	; 0x2600
 80052d4:	320c      	adds	r2, #12
    conv2d_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9740);
 80052d6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 5644);
 80052da:	4948      	ldr	r1, [pc, #288]	; (80053fc <ai_network_init+0x3a0>)
 80052dc:	f503 52b0 	add.w	r2, r3, #5632	; 0x1600
 80052e0:	320c      	adds	r2, #12
    conv2d_7_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5644);
 80052e2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80052e6:	4a46      	ldr	r2, [pc, #280]	; (8005400 <ai_network_init+0x3a4>)
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 5324);
 80052e8:	4946      	ldr	r1, [pc, #280]	; (8005404 <ai_network_init+0x3a8>)
    conv2d_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80052ea:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 5324);
 80052ee:	f503 52a6 	add.w	r2, r3, #5312	; 0x14c0
 80052f2:	320c      	adds	r2, #12
    conv2d_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5324);
 80052f4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80052f8:	4a43      	ldr	r2, [pc, #268]	; (8005408 <ai_network_init+0x3ac>)
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[0] + 5004);
 80052fa:	4944      	ldr	r1, [pc, #272]	; (800540c <ai_network_init+0x3b0>)
    conv2d_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80052fc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[0] + 5004);
 8005300:	f503 529c 	add.w	r2, r3, #4992	; 0x1380
 8005304:	320c      	adds	r2, #12
    conv2d_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5004);
 8005306:	e9c1 2202 	strd	r2, r2, [r1, #8]
    pool_9_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800530a:	4a41      	ldr	r2, [pc, #260]	; (8005410 <ai_network_init+0x3b4>)
    pool_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800530c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_11_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 64);
 8005310:	4a40      	ldr	r2, [pc, #256]	; (8005414 <ai_network_init+0x3b8>)
 8005312:	f103 0140 	add.w	r1, r3, #64	; 0x40
    dense_11_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 8005316:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_11_output_array.data = AI_PTR(g_network_activations_map[0] + 192);
 800531a:	4a3f      	ldr	r2, [pc, #252]	; (8005418 <ai_network_init+0x3bc>)
 800531c:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    dense_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 192);
 8005320:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_11_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005324:	4a3d      	ldr	r2, [pc, #244]	; (800541c <ai_network_init+0x3c0>)
    dense_11_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005326:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_12_output_array.data = AI_PTR(g_network_activations_map[0] + 48);
 800532a:	4a3d      	ldr	r2, [pc, #244]	; (8005420 <ai_network_init+0x3c4>)
 800532c:	f103 0130 	add.w	r1, r3, #48	; 0x30
    nl_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 48);
 8005330:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_12_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005334:	4a3b      	ldr	r2, [pc, #236]	; (8005424 <ai_network_init+0x3c8>)
    nl_12_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005336:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800533a:	4638      	mov	r0, r7
 800533c:	f001 f8f4 	bl	8006528 <ai_platform_network_post_init>
 8005340:	4030      	ands	r0, r6
 8005342:	4028      	ands	r0, r5
 8005344:	b2c0      	uxtb	r0, r0

  return ok;
}
 8005346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800534a:	2212      	movs	r2, #18
 800534c:	2130      	movs	r1, #48	; 0x30
 800534e:	4620      	mov	r0, r4
 8005350:	f000 fbf4 	bl	8005b3c <ai_platform_network_set_error>
  return false;
 8005354:	e757      	b.n	8005206 <ai_network_init+0x1aa>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005356:	2213      	movs	r2, #19
 8005358:	2130      	movs	r1, #48	; 0x30
 800535a:	4620      	mov	r0, r4
 800535c:	f000 fbee 	bl	8005b3c <ai_platform_network_set_error>
  return false;
 8005360:	e7eb      	b.n	800533a <ai_network_init+0x2de>
 8005362:	bf00      	nop
 8005364:	20001338 	.word	0x20001338
 8005368:	20001274 	.word	0x20001274
 800536c:	20001480 	.word	0x20001480
 8005370:	20001364 	.word	0x20001364
 8005374:	20001570 	.word	0x20001570
 8005378:	200014ac 	.word	0x200014ac
 800537c:	20001688 	.word	0x20001688
 8005380:	200015e8 	.word	0x200015e8
 8005384:	20000c90 	.word	0x20000c90
 8005388:	20000bcc 	.word	0x20000bcc
 800538c:	20000dd8 	.word	0x20000dd8
 8005390:	20000cbc 	.word	0x20000cbc
 8005394:	20000ec8 	.word	0x20000ec8
 8005398:	20000e04 	.word	0x20000e04
 800539c:	20001010 	.word	0x20001010
 80053a0:	20000ef4 	.word	0x20000ef4
 80053a4:	20001100 	.word	0x20001100
 80053a8:	2000103c 	.word	0x2000103c
 80053ac:	20001248 	.word	0x20001248
 80053b0:	2000112c 	.word	0x2000112c
 80053b4:	20001700 	.word	0x20001700
 80053b8:	20000c64 	.word	0x20000c64
 80053bc:	20000c38 	.word	0x20000c38
 80053c0:	20000d80 	.word	0x20000d80
 80053c4:	20000dac 	.word	0x20000dac
 80053c8:	20000d28 	.word	0x20000d28
 80053cc:	20000e9c 	.word	0x20000e9c
 80053d0:	20000e70 	.word	0x20000e70
 80053d4:	20000fb8 	.word	0x20000fb8
 80053d8:	20000fe4 	.word	0x20000fe4
 80053dc:	20000f60 	.word	0x20000f60
 80053e0:	200010d4 	.word	0x200010d4
 80053e4:	200010a8 	.word	0x200010a8
 80053e8:	200011f0 	.word	0x200011f0
 80053ec:	2000121c 	.word	0x2000121c
 80053f0:	20001198 	.word	0x20001198
 80053f4:	2000130c 	.word	0x2000130c
 80053f8:	200012e0 	.word	0x200012e0
 80053fc:	20001428 	.word	0x20001428
 8005400:	20001454 	.word	0x20001454
 8005404:	200013d0 	.word	0x200013d0
 8005408:	20001544 	.word	0x20001544
 800540c:	20001518 	.word	0x20001518
 8005410:	200017fc 	.word	0x200017fc
 8005414:	2000165c 	.word	0x2000165c
 8005418:	20001630 	.word	0x20001630
 800541c:	200015bc 	.word	0x200015bc
 8005420:	20001798 	.word	0x20001798
 8005424:	2000174c 	.word	0x2000174c
 8005428:	20006988 	.word	0x20006988
 800542c:	20006984 	.word	0x20006984

08005430 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005430:	f001 b902 	b.w	8006638 <ai_platform_network_process>

08005434 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8005434:	2200      	movs	r2, #0
 8005436:	f001 b8ff 	b.w	8006638 <ai_platform_network_process>
	...

0800543c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800543c:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800543e:	4603      	mov	r3, r0
{
 8005440:	b085      	sub	sp, #20
  if (!params) return false;
 8005442:	b170      	cbz	r0, 8005462 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8005444:	4c08      	ldr	r4, [pc, #32]	; (8005468 <ai_network_data_params_get+0x2c>)
 8005446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800544a:	466a      	mov	r2, sp
 800544c:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005450:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005454:	ad02      	add	r5, sp, #8
 8005456:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800545a:	4629      	mov	r1, r5
 800545c:	4618      	mov	r0, r3
 800545e:	f000 f993 	bl	8005788 <ai_platform_bind_network_params>
}
 8005462:	b005      	add	sp, #20
 8005464:	bd30      	pop	{r4, r5, pc}
 8005466:	bf00      	nop
 8005468:	08011174 	.word	0x08011174

0800546c <ai_buffer_get_size>:
 800546c:	b378      	cbz	r0, 80054ce <ai_buffer_get_size+0x62>
 800546e:	b410      	push	{r4}
 8005470:	6803      	ldr	r3, [r0, #0]
 8005472:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <ai_buffer_get_size+0x64>)
 8005474:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005478:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800547c:	4293      	cmp	r3, r2
 800547e:	d01e      	beq.n	80054be <ai_buffer_get_size+0x52>
 8005480:	6984      	ldr	r4, [r0, #24]
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	7d03      	ldrb	r3, [r0, #20]
 8005486:	6941      	ldr	r1, [r0, #20]
 8005488:	f1a3 0301 	sub.w	r3, r3, #1
 800548c:	fab3 f383 	clz	r3, r3
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005496:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800549a:	da0b      	bge.n	80054b4 <ai_buffer_get_size+0x48>
 800549c:	2b01      	cmp	r3, #1
 800549e:	d102      	bne.n	80054a6 <ai_buffer_get_size+0x3a>
 80054a0:	2802      	cmp	r0, #2
 80054a2:	d007      	beq.n	80054b4 <ai_buffer_get_size+0x48>
 80054a4:	2302      	movs	r3, #2
 80054a6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80054aa:	3301      	adds	r3, #1
 80054ac:	4298      	cmp	r0, r3
 80054ae:	fb01 f202 	mul.w	r2, r1, r2
 80054b2:	d1f3      	bne.n	800549c <ai_buffer_get_size+0x30>
 80054b4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80054b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	2900      	cmp	r1, #0
 80054c0:	d0de      	beq.n	8005480 <ai_buffer_get_size+0x14>
 80054c2:	6984      	ldr	r4, [r0, #24]
 80054c4:	6863      	ldr	r3, [r4, #4]
 80054c6:	331f      	adds	r3, #31
 80054c8:	f023 021f 	bic.w	r2, r3, #31
 80054cc:	e7da      	b.n	8005484 <ai_buffer_get_size+0x18>
 80054ce:	4770      	bx	lr
 80054d0:	000400c0 	.word	0x000400c0

080054d4 <ai_buffer_get_byte_size>:
 80054d4:	b128      	cbz	r0, 80054e2 <ai_buffer_get_byte_size+0xe>
 80054d6:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80054da:	fb01 f000 	mul.w	r0, r1, r0
 80054de:	3007      	adds	r0, #7
 80054e0:	08c0      	lsrs	r0, r0, #3
 80054e2:	4770      	bx	lr

080054e4 <ai_buffer_array_sane>:
 80054e4:	b138      	cbz	r0, 80054f6 <ai_buffer_array_sane+0x12>
 80054e6:	6843      	ldr	r3, [r0, #4]
 80054e8:	b123      	cbz	r3, 80054f4 <ai_buffer_array_sane+0x10>
 80054ea:	8840      	ldrh	r0, [r0, #2]
 80054ec:	3800      	subs	r0, #0
 80054ee:	bf18      	it	ne
 80054f0:	2001      	movne	r0, #1
 80054f2:	4770      	bx	lr
 80054f4:	4618      	mov	r0, r3
 80054f6:	4770      	bx	lr

080054f8 <ai_buffer_array_item_set_address>:
 80054f8:	b150      	cbz	r0, 8005510 <ai_buffer_array_item_set_address+0x18>
 80054fa:	6843      	ldr	r3, [r0, #4]
 80054fc:	b14b      	cbz	r3, 8005512 <ai_buffer_array_item_set_address+0x1a>
 80054fe:	8840      	ldrh	r0, [r0, #2]
 8005500:	b900      	cbnz	r0, 8005504 <ai_buffer_array_item_set_address+0xc>
 8005502:	4770      	bx	lr
 8005504:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005508:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800550c:	2001      	movs	r0, #1
 800550e:	604a      	str	r2, [r1, #4]
 8005510:	4770      	bx	lr
 8005512:	4618      	mov	r0, r3
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop

08005518 <_platform_observer_node_exec_cb>:
 8005518:	2a00      	cmp	r2, #0
 800551a:	d07d      	beq.n	8005618 <_platform_observer_node_exec_cb+0x100>
 800551c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005520:	6815      	ldr	r5, [r2, #0]
 8005522:	b085      	sub	sp, #20
 8005524:	4614      	mov	r4, r2
 8005526:	2d00      	cmp	r5, #0
 8005528:	d078      	beq.n	800561c <_platform_observer_node_exec_cb+0x104>
 800552a:	8992      	ldrh	r2, [r2, #12]
 800552c:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 8005530:	2a00      	cmp	r2, #0
 8005532:	460b      	mov	r3, r1
 8005534:	f240 3102 	movw	r1, #770	; 0x302
 8005538:	f240 2e02 	movw	lr, #514	; 0x202
 800553c:	bf08      	it	eq
 800553e:	460e      	moveq	r6, r1
 8005540:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005544:	f240 2101 	movw	r1, #513	; 0x201
 8005548:	bf1c      	itt	ne
 800554a:	4676      	movne	r6, lr
 800554c:	f44f 7901 	movne.w	r9, #516	; 0x204
 8005550:	f240 3e01 	movw	lr, #769	; 0x301
 8005554:	bf0e      	itee	eq
 8005556:	f44f 7941 	moveq.w	r9, #772	; 0x304
 800555a:	468e      	movne	lr, r1
 800555c:	f04f 0804 	movne.w	r8, #4
 8005560:	f240 1101 	movw	r1, #257	; 0x101
 8005564:	bf0d      	iteet	eq
 8005566:	f44f 7882 	moveq.w	r8, #260	; 0x104
 800556a:	2101      	movne	r1, #1
 800556c:	2702      	movne	r7, #2
 800556e:	f44f 7781 	moveq.w	r7, #258	; 0x102
 8005572:	4594      	cmp	ip, r2
 8005574:	d034      	beq.n	80055e0 <_platform_observer_node_exec_cb+0xc8>
 8005576:	b300      	cbz	r0, 80055ba <_platform_observer_node_exec_cb+0xa2>
 8005578:	2801      	cmp	r0, #1
 800557a:	d053      	beq.n	8005624 <_platform_observer_node_exec_cb+0x10c>
 800557c:	2802      	cmp	r0, #2
 800557e:	d035      	beq.n	80055ec <_platform_observer_node_exec_cb+0xd4>
 8005580:	2803      	cmp	r0, #3
 8005582:	d116      	bne.n	80055b2 <_platform_observer_node_exec_cb+0x9a>
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	075b      	lsls	r3, r3, #29
 8005588:	d511      	bpl.n	80055ae <_platform_observer_node_exec_cb+0x96>
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	f8ad 2000 	strh.w	r2, [sp]
 8005590:	885a      	ldrh	r2, [r3, #2]
 8005592:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005596:	881a      	ldrh	r2, [r3, #0]
 8005598:	f8ad 2002 	strh.w	r2, [sp, #2]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	6860      	ldr	r0, [r4, #4]
 80055a0:	2300      	movs	r3, #0
 80055a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80055a6:	4641      	mov	r1, r8
 80055a8:	466a      	mov	r2, sp
 80055aa:	47a8      	blx	r5
 80055ac:	89a2      	ldrh	r2, [r4, #12]
 80055ae:	3201      	adds	r2, #1
 80055b0:	81a2      	strh	r2, [r4, #12]
 80055b2:	2000      	movs	r0, #0
 80055b4:	b005      	add	sp, #20
 80055b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ba:	68a6      	ldr	r6, [r4, #8]
 80055bc:	07f6      	lsls	r6, r6, #31
 80055be:	d5f6      	bpl.n	80055ae <_platform_observer_node_exec_cb+0x96>
 80055c0:	9002      	str	r0, [sp, #8]
 80055c2:	8858      	ldrh	r0, [r3, #2]
 80055c4:	f8ad 0004 	strh.w	r0, [sp, #4]
 80055c8:	8818      	ldrh	r0, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f8ad 2000 	strh.w	r2, [sp]
 80055d0:	f8ad 0002 	strh.w	r0, [sp, #2]
 80055d4:	466a      	mov	r2, sp
 80055d6:	6860      	ldr	r0, [r4, #4]
 80055d8:	9303      	str	r3, [sp, #12]
 80055da:	47a8      	blx	r5
 80055dc:	89a2      	ldrh	r2, [r4, #12]
 80055de:	e7e6      	b.n	80055ae <_platform_observer_node_exec_cb+0x96>
 80055e0:	46c8      	mov	r8, r9
 80055e2:	4637      	mov	r7, r6
 80055e4:	4671      	mov	r1, lr
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d1c6      	bne.n	8005578 <_platform_observer_node_exec_cb+0x60>
 80055ea:	e7e6      	b.n	80055ba <_platform_observer_node_exec_cb+0xa2>
 80055ec:	68a1      	ldr	r1, [r4, #8]
 80055ee:	6123      	str	r3, [r4, #16]
 80055f0:	0789      	lsls	r1, r1, #30
 80055f2:	d5de      	bpl.n	80055b2 <_platform_observer_node_exec_cb+0x9a>
 80055f4:	f8ad 2000 	strh.w	r2, [sp]
 80055f8:	885a      	ldrh	r2, [r3, #2]
 80055fa:	f8ad 2004 	strh.w	r2, [sp, #4]
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	6860      	ldr	r0, [r4, #4]
 8005604:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005608:	2400      	movs	r4, #0
 800560a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800560e:	4639      	mov	r1, r7
 8005610:	466a      	mov	r2, sp
 8005612:	47a8      	blx	r5
 8005614:	4620      	mov	r0, r4
 8005616:	e7cd      	b.n	80055b4 <_platform_observer_node_exec_cb+0x9c>
 8005618:	2001      	movs	r0, #1
 800561a:	4770      	bx	lr
 800561c:	2001      	movs	r0, #1
 800561e:	b005      	add	sp, #20
 8005620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005624:	2000      	movs	r0, #0
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	81a0      	strh	r0, [r4, #12]
 800562a:	b005      	add	sp, #20
 800562c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005630 <_ai_platform_acquire_crc>:
 8005630:	2001      	movs	r0, #1
 8005632:	4770      	bx	lr

08005634 <_ai_platform_release_crc>:
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop

08005638 <ai_platform_get_weights_map>:
 8005638:	2a00      	cmp	r2, #0
 800563a:	d037      	beq.n	80056ac <ai_platform_get_weights_map+0x74>
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	4604      	mov	r4, r0
 8005640:	b1a0      	cbz	r0, 800566c <ai_platform_get_weights_map+0x34>
 8005642:	460f      	mov	r7, r1
 8005644:	b191      	cbz	r1, 800566c <ai_platform_get_weights_map+0x34>
 8005646:	4b25      	ldr	r3, [pc, #148]	; (80056dc <ai_platform_get_weights_map+0xa4>)
 8005648:	6810      	ldr	r0, [r2, #0]
 800564a:	4298      	cmp	r0, r3
 800564c:	4615      	mov	r5, r2
 800564e:	d00f      	beq.n	8005670 <ai_platform_get_weights_map+0x38>
 8005650:	6855      	ldr	r5, [r2, #4]
 8005652:	b15d      	cbz	r5, 800566c <ai_platform_get_weights_map+0x34>
 8005654:	682e      	ldr	r6, [r5, #0]
 8005656:	429e      	cmp	r6, r3
 8005658:	d02a      	beq.n	80056b0 <ai_platform_get_weights_map+0x78>
 800565a:	f1a1 0001 	sub.w	r0, r1, #1
 800565e:	6025      	str	r5, [r4, #0]
 8005660:	fab0 f080 	clz	r0, r0
 8005664:	0940      	lsrs	r0, r0, #5
 8005666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005668:	42a7      	cmp	r7, r4
 800566a:	d034      	beq.n	80056d6 <ai_platform_get_weights_map+0x9e>
 800566c:	2000      	movs	r0, #0
 800566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005670:	1d10      	adds	r0, r2, #4
 8005672:	f7ff ff37 	bl	80054e4 <ai_buffer_array_sane>
 8005676:	2800      	cmp	r0, #0
 8005678:	d0f8      	beq.n	800566c <ai_platform_get_weights_map+0x34>
 800567a:	88eb      	ldrh	r3, [r5, #6]
 800567c:	429f      	cmp	r7, r3
 800567e:	d1f5      	bne.n	800566c <ai_platform_get_weights_map+0x34>
 8005680:	f04f 0e00 	mov.w	lr, #0
 8005684:	1f23      	subs	r3, r4, #4
 8005686:	4670      	mov	r0, lr
 8005688:	68aa      	ldr	r2, [r5, #8]
 800568a:	eb02 0c0e 	add.w	ip, r2, lr
 800568e:	f10e 0e1c 	add.w	lr, lr, #28
 8005692:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005696:	b124      	cbz	r4, 80056a2 <ai_platform_get_weights_map+0x6a>
 8005698:	3001      	adds	r0, #1
 800569a:	4287      	cmp	r7, r0
 800569c:	f843 4f04 	str.w	r4, [r3, #4]!
 80056a0:	d1f2      	bne.n	8005688 <ai_platform_get_weights_map+0x50>
 80056a2:	1a38      	subs	r0, r7, r0
 80056a4:	fab0 f080 	clz	r0, r0
 80056a8:	0940      	lsrs	r0, r0, #5
 80056aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ac:	2000      	movs	r0, #0
 80056ae:	4770      	bx	lr
 80056b0:	1f23      	subs	r3, r4, #4
 80056b2:	4628      	mov	r0, r5
 80056b4:	2400      	movs	r4, #0
 80056b6:	e000      	b.n	80056ba <ai_platform_get_weights_map+0x82>
 80056b8:	4614      	mov	r4, r2
 80056ba:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80056be:	42b2      	cmp	r2, r6
 80056c0:	d0d2      	beq.n	8005668 <ai_platform_get_weights_map+0x30>
 80056c2:	f843 2f04 	str.w	r2, [r3, #4]!
 80056c6:	1c62      	adds	r2, r4, #1
 80056c8:	4297      	cmp	r7, r2
 80056ca:	d1f5      	bne.n	80056b8 <ai_platform_get_weights_map+0x80>
 80056cc:	3402      	adds	r4, #2
 80056ce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80056d2:	42b3      	cmp	r3, r6
 80056d4:	d1ca      	bne.n	800566c <ai_platform_get_weights_map+0x34>
 80056d6:	2001      	movs	r0, #1
 80056d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056da:	bf00      	nop
 80056dc:	a1facade 	.word	0xa1facade

080056e0 <ai_platform_get_activations_map>:
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	d038      	beq.n	8005756 <ai_platform_get_activations_map+0x76>
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	4604      	mov	r4, r0
 80056e8:	b1a0      	cbz	r0, 8005714 <ai_platform_get_activations_map+0x34>
 80056ea:	460f      	mov	r7, r1
 80056ec:	b191      	cbz	r1, 8005714 <ai_platform_get_activations_map+0x34>
 80056ee:	4b25      	ldr	r3, [pc, #148]	; (8005784 <ai_platform_get_activations_map+0xa4>)
 80056f0:	6810      	ldr	r0, [r2, #0]
 80056f2:	4298      	cmp	r0, r3
 80056f4:	4615      	mov	r5, r2
 80056f6:	d00f      	beq.n	8005718 <ai_platform_get_activations_map+0x38>
 80056f8:	6a15      	ldr	r5, [r2, #32]
 80056fa:	b15d      	cbz	r5, 8005714 <ai_platform_get_activations_map+0x34>
 80056fc:	682e      	ldr	r6, [r5, #0]
 80056fe:	429e      	cmp	r6, r3
 8005700:	d02b      	beq.n	800575a <ai_platform_get_activations_map+0x7a>
 8005702:	f1a1 0001 	sub.w	r0, r1, #1
 8005706:	6025      	str	r5, [r4, #0]
 8005708:	fab0 f080 	clz	r0, r0
 800570c:	0940      	lsrs	r0, r0, #5
 800570e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005710:	42a7      	cmp	r7, r4
 8005712:	d035      	beq.n	8005780 <ai_platform_get_activations_map+0xa0>
 8005714:	2000      	movs	r0, #0
 8005716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005718:	f102 000c 	add.w	r0, r2, #12
 800571c:	f7ff fee2 	bl	80054e4 <ai_buffer_array_sane>
 8005720:	2800      	cmp	r0, #0
 8005722:	d0f7      	beq.n	8005714 <ai_platform_get_activations_map+0x34>
 8005724:	89eb      	ldrh	r3, [r5, #14]
 8005726:	429f      	cmp	r7, r3
 8005728:	d1f4      	bne.n	8005714 <ai_platform_get_activations_map+0x34>
 800572a:	f04f 0e00 	mov.w	lr, #0
 800572e:	1f23      	subs	r3, r4, #4
 8005730:	4670      	mov	r0, lr
 8005732:	692a      	ldr	r2, [r5, #16]
 8005734:	eb02 0c0e 	add.w	ip, r2, lr
 8005738:	f10e 0e1c 	add.w	lr, lr, #28
 800573c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005740:	b124      	cbz	r4, 800574c <ai_platform_get_activations_map+0x6c>
 8005742:	3001      	adds	r0, #1
 8005744:	4287      	cmp	r7, r0
 8005746:	f843 4f04 	str.w	r4, [r3, #4]!
 800574a:	d1f2      	bne.n	8005732 <ai_platform_get_activations_map+0x52>
 800574c:	1a38      	subs	r0, r7, r0
 800574e:	fab0 f080 	clz	r0, r0
 8005752:	0940      	lsrs	r0, r0, #5
 8005754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005756:	2000      	movs	r0, #0
 8005758:	4770      	bx	lr
 800575a:	1f23      	subs	r3, r4, #4
 800575c:	4628      	mov	r0, r5
 800575e:	2400      	movs	r4, #0
 8005760:	e000      	b.n	8005764 <ai_platform_get_activations_map+0x84>
 8005762:	4614      	mov	r4, r2
 8005764:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005768:	42b2      	cmp	r2, r6
 800576a:	d0d1      	beq.n	8005710 <ai_platform_get_activations_map+0x30>
 800576c:	f843 2f04 	str.w	r2, [r3, #4]!
 8005770:	1c62      	adds	r2, r4, #1
 8005772:	4297      	cmp	r7, r2
 8005774:	d1f5      	bne.n	8005762 <ai_platform_get_activations_map+0x82>
 8005776:	3402      	adds	r4, #2
 8005778:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800577c:	42b3      	cmp	r3, r6
 800577e:	d1c9      	bne.n	8005714 <ai_platform_get_activations_map+0x34>
 8005780:	2001      	movs	r0, #1
 8005782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005784:	a1facade 	.word	0xa1facade

08005788 <ai_platform_bind_network_params>:
 8005788:	b1a0      	cbz	r0, 80057b4 <ai_platform_bind_network_params+0x2c>
 800578a:	b1b1      	cbz	r1, 80057ba <ai_platform_bind_network_params+0x32>
 800578c:	b1c2      	cbz	r2, 80057c0 <ai_platform_bind_network_params+0x38>
 800578e:	b410      	push	{r4}
 8005790:	4603      	mov	r3, r0
 8005792:	4c0d      	ldr	r4, [pc, #52]	; (80057c8 <ai_platform_bind_network_params+0x40>)
 8005794:	f843 4b04 	str.w	r4, [r3], #4
 8005798:	f100 0c0c 	add.w	ip, r0, #12
 800579c:	c903      	ldmia	r1, {r0, r1}
 800579e:	e883 0003 	stmia.w	r3, {r0, r1}
 80057a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057a6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80057aa:	2301      	movs	r3, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	4603      	mov	r3, r0
 80057b6:	4618      	mov	r0, r3
 80057b8:	4770      	bx	lr
 80057ba:	460b      	mov	r3, r1
 80057bc:	4618      	mov	r0, r3
 80057be:	4770      	bx	lr
 80057c0:	4613      	mov	r3, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	a1facade 	.word	0xa1facade

080057cc <ai_platform_runtime_get_revision>:
 80057cc:	b508      	push	{r3, lr}
 80057ce:	f7ff ff2f 	bl	8005630 <_ai_platform_acquire_crc>
 80057d2:	4b14      	ldr	r3, [pc, #80]	; (8005824 <ai_platform_runtime_get_revision+0x58>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d010      	beq.n	8005802 <ai_platform_runtime_get_revision+0x36>
 80057e0:	4a11      	ldr	r2, [pc, #68]	; (8005828 <ai_platform_runtime_get_revision+0x5c>)
 80057e2:	2301      	movs	r3, #1
 80057e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80057e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1fb      	bne.n	80057e8 <ai_platform_runtime_get_revision+0x1c>
 80057f0:	4b0e      	ldr	r3, [pc, #56]	; (800582c <ai_platform_runtime_get_revision+0x60>)
 80057f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80057f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <ai_platform_runtime_get_revision+0x64>)
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d00c      	beq.n	800581a <ai_platform_runtime_get_revision+0x4e>
 8005800:	e7fe      	b.n	8005800 <ai_platform_runtime_get_revision+0x34>
 8005802:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <ai_platform_runtime_get_revision+0x68>)
 8005804:	2301      	movs	r3, #1
 8005806:	6093      	str	r3, [r2, #8]
 8005808:	6893      	ldr	r3, [r2, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1fc      	bne.n	8005808 <ai_platform_runtime_get_revision+0x3c>
 800580e:	4b07      	ldr	r3, [pc, #28]	; (800582c <ai_platform_runtime_get_revision+0x60>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <ai_platform_runtime_get_revision+0x64>)
 8005816:	429a      	cmp	r2, r3
 8005818:	d103      	bne.n	8005822 <ai_platform_runtime_get_revision+0x56>
 800581a:	f7ff ff0b 	bl	8005634 <_ai_platform_release_crc>
 800581e:	4806      	ldr	r0, [pc, #24]	; (8005838 <ai_platform_runtime_get_revision+0x6c>)
 8005820:	bd08      	pop	{r3, pc}
 8005822:	e7fe      	b.n	8005822 <ai_platform_runtime_get_revision+0x56>
 8005824:	e0042000 	.word	0xe0042000
 8005828:	58024000 	.word	0x58024000
 800582c:	f407a5c2 	.word	0xf407a5c2
 8005830:	b5e8b5cd 	.word	0xb5e8b5cd
 8005834:	40023000 	.word	0x40023000
 8005838:	08018078 	.word	0x08018078

0800583c <ai_platform_runtime_get_version>:
 800583c:	b500      	push	{lr}
 800583e:	b083      	sub	sp, #12
 8005840:	f7ff fef6 	bl	8005630 <_ai_platform_acquire_crc>
 8005844:	4b15      	ldr	r3, [pc, #84]	; (800589c <ai_platform_runtime_get_version+0x60>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800584c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005850:	d010      	beq.n	8005874 <ai_platform_runtime_get_version+0x38>
 8005852:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <ai_platform_runtime_get_version+0x64>)
 8005854:	2301      	movs	r3, #1
 8005856:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800585a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1fb      	bne.n	800585a <ai_platform_runtime_get_version+0x1e>
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <ai_platform_runtime_get_version+0x68>)
 8005864:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005868:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800586c:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <ai_platform_runtime_get_version+0x6c>)
 800586e:	429a      	cmp	r2, r3
 8005870:	d00c      	beq.n	800588c <ai_platform_runtime_get_version+0x50>
 8005872:	e7fe      	b.n	8005872 <ai_platform_runtime_get_version+0x36>
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <ai_platform_runtime_get_version+0x70>)
 8005876:	2301      	movs	r3, #1
 8005878:	6093      	str	r3, [r2, #8]
 800587a:	6893      	ldr	r3, [r2, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1fc      	bne.n	800587a <ai_platform_runtime_get_version+0x3e>
 8005880:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <ai_platform_runtime_get_version+0x68>)
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <ai_platform_runtime_get_version+0x6c>)
 8005888:	429a      	cmp	r2, r3
 800588a:	d105      	bne.n	8005898 <ai_platform_runtime_get_version+0x5c>
 800588c:	f7ff fed2 	bl	8005634 <_ai_platform_release_crc>
 8005890:	2008      	movs	r0, #8
 8005892:	b003      	add	sp, #12
 8005894:	f85d fb04 	ldr.w	pc, [sp], #4
 8005898:	e7fe      	b.n	8005898 <ai_platform_runtime_get_version+0x5c>
 800589a:	bf00      	nop
 800589c:	e0042000 	.word	0xe0042000
 80058a0:	58024000 	.word	0x58024000
 80058a4:	f407a5c2 	.word	0xf407a5c2
 80058a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80058ac:	40023000 	.word	0x40023000

080058b0 <ai_platform_api_get_version>:
 80058b0:	b500      	push	{lr}
 80058b2:	b083      	sub	sp, #12
 80058b4:	f7ff febc 	bl	8005630 <_ai_platform_acquire_crc>
 80058b8:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <ai_platform_api_get_version+0x80>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c4:	d010      	beq.n	80058e8 <ai_platform_api_get_version+0x38>
 80058c6:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <ai_platform_api_get_version+0x84>)
 80058c8:	2301      	movs	r3, #1
 80058ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80058ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1fb      	bne.n	80058ce <ai_platform_api_get_version+0x1e>
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <ai_platform_api_get_version+0x88>)
 80058d8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80058dc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <ai_platform_api_get_version+0x8c>)
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d00c      	beq.n	8005900 <ai_platform_api_get_version+0x50>
 80058e6:	e7fe      	b.n	80058e6 <ai_platform_api_get_version+0x36>
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <ai_platform_api_get_version+0x90>)
 80058ea:	2301      	movs	r3, #1
 80058ec:	6093      	str	r3, [r2, #8]
 80058ee:	6893      	ldr	r3, [r2, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1fc      	bne.n	80058ee <ai_platform_api_get_version+0x3e>
 80058f4:	4b10      	ldr	r3, [pc, #64]	; (8005938 <ai_platform_api_get_version+0x88>)
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	4b10      	ldr	r3, [pc, #64]	; (800593c <ai_platform_api_get_version+0x8c>)
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d115      	bne.n	800592c <ai_platform_api_get_version+0x7c>
 8005900:	f7ff fe98 	bl	8005634 <_ai_platform_release_crc>
 8005904:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <ai_platform_api_get_version+0x94>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2000      	movs	r0, #0
 800590a:	b2da      	uxtb	r2, r3
 800590c:	f362 0007 	bfi	r0, r2, #0, #8
 8005910:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005914:	f362 200f 	bfi	r0, r2, #8, #8
 8005918:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800591c:	f362 4017 	bfi	r0, r2, #16, #8
 8005920:	0e1b      	lsrs	r3, r3, #24
 8005922:	f363 601f 	bfi	r0, r3, #24, #8
 8005926:	b003      	add	sp, #12
 8005928:	f85d fb04 	ldr.w	pc, [sp], #4
 800592c:	e7fe      	b.n	800592c <ai_platform_api_get_version+0x7c>
 800592e:	bf00      	nop
 8005930:	e0042000 	.word	0xe0042000
 8005934:	58024000 	.word	0x58024000
 8005938:	f407a5c2 	.word	0xf407a5c2
 800593c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005940:	40023000 	.word	0x40023000
 8005944:	08018030 	.word	0x08018030

08005948 <ai_platform_interface_api_get_version>:
 8005948:	b500      	push	{lr}
 800594a:	b083      	sub	sp, #12
 800594c:	f7ff fe70 	bl	8005630 <_ai_platform_acquire_crc>
 8005950:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <ai_platform_interface_api_get_version+0x80>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d010      	beq.n	8005980 <ai_platform_interface_api_get_version+0x38>
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <ai_platform_interface_api_get_version+0x84>)
 8005960:	2301      	movs	r3, #1
 8005962:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005966:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1fb      	bne.n	8005966 <ai_platform_interface_api_get_version+0x1e>
 800596e:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <ai_platform_interface_api_get_version+0x88>)
 8005970:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005974:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005978:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <ai_platform_interface_api_get_version+0x8c>)
 800597a:	429a      	cmp	r2, r3
 800597c:	d00c      	beq.n	8005998 <ai_platform_interface_api_get_version+0x50>
 800597e:	e7fe      	b.n	800597e <ai_platform_interface_api_get_version+0x36>
 8005980:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <ai_platform_interface_api_get_version+0x90>)
 8005982:	2301      	movs	r3, #1
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	6893      	ldr	r3, [r2, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1fc      	bne.n	8005986 <ai_platform_interface_api_get_version+0x3e>
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <ai_platform_interface_api_get_version+0x88>)
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <ai_platform_interface_api_get_version+0x8c>)
 8005994:	429a      	cmp	r2, r3
 8005996:	d115      	bne.n	80059c4 <ai_platform_interface_api_get_version+0x7c>
 8005998:	f7ff fe4c 	bl	8005634 <_ai_platform_release_crc>
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <ai_platform_interface_api_get_version+0x94>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2000      	movs	r0, #0
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	f362 0007 	bfi	r0, r2, #0, #8
 80059a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80059ac:	f362 200f 	bfi	r0, r2, #8, #8
 80059b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80059b4:	f362 4017 	bfi	r0, r2, #16, #8
 80059b8:	0e1b      	lsrs	r3, r3, #24
 80059ba:	f363 601f 	bfi	r0, r3, #24, #8
 80059be:	b003      	add	sp, #12
 80059c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80059c4:	e7fe      	b.n	80059c4 <ai_platform_interface_api_get_version+0x7c>
 80059c6:	bf00      	nop
 80059c8:	e0042000 	.word	0xe0042000
 80059cc:	58024000 	.word	0x58024000
 80059d0:	f407a5c2 	.word	0xf407a5c2
 80059d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80059d8:	40023000 	.word	0x40023000
 80059dc:	08018034 	.word	0x08018034

080059e0 <ai_platform_context_acquire>:
 80059e0:	b510      	push	{r4, lr}
 80059e2:	4604      	mov	r4, r0
 80059e4:	b120      	cbz	r0, 80059f0 <ai_platform_context_acquire+0x10>
 80059e6:	4b18      	ldr	r3, [pc, #96]	; (8005a48 <ai_platform_context_acquire+0x68>)
 80059e8:	6802      	ldr	r2, [r0, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	bf18      	it	ne
 80059ee:	2400      	movne	r4, #0
 80059f0:	f7ff fe1e 	bl	8005630 <_ai_platform_acquire_crc>
 80059f4:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <ai_platform_context_acquire+0x6c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a00:	d010      	beq.n	8005a24 <ai_platform_context_acquire+0x44>
 8005a02:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <ai_platform_context_acquire+0x70>)
 8005a04:	2301      	movs	r3, #1
 8005a06:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1fb      	bne.n	8005a0a <ai_platform_context_acquire+0x2a>
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <ai_platform_context_acquire+0x74>)
 8005a14:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a18:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <ai_platform_context_acquire+0x78>)
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d00c      	beq.n	8005a3c <ai_platform_context_acquire+0x5c>
 8005a22:	e7fe      	b.n	8005a22 <ai_platform_context_acquire+0x42>
 8005a24:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <ai_platform_context_acquire+0x7c>)
 8005a26:	2301      	movs	r3, #1
 8005a28:	6093      	str	r3, [r2, #8]
 8005a2a:	6893      	ldr	r3, [r2, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1fc      	bne.n	8005a2a <ai_platform_context_acquire+0x4a>
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <ai_platform_context_acquire+0x74>)
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <ai_platform_context_acquire+0x78>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d103      	bne.n	8005a44 <ai_platform_context_acquire+0x64>
 8005a3c:	f7ff fdfa 	bl	8005634 <_ai_platform_release_crc>
 8005a40:	4620      	mov	r0, r4
 8005a42:	bd10      	pop	{r4, pc}
 8005a44:	e7fe      	b.n	8005a44 <ai_platform_context_acquire+0x64>
 8005a46:	bf00      	nop
 8005a48:	a1c00100 	.word	0xa1c00100
 8005a4c:	e0042000 	.word	0xe0042000
 8005a50:	58024000 	.word	0x58024000
 8005a54:	f407a5c2 	.word	0xf407a5c2
 8005a58:	b5e8b5cd 	.word	0xb5e8b5cd
 8005a5c:	40023000 	.word	0x40023000

08005a60 <ai_platform_network_get_error>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	b1f0      	cbz	r0, 8005aa2 <ai_platform_network_get_error+0x42>
 8005a64:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <ai_platform_network_get_error+0xc4>)
 8005a66:	6802      	ldr	r2, [r0, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	d119      	bne.n	8005aa2 <ai_platform_network_get_error+0x42>
 8005a6e:	f7ff fddf 	bl	8005630 <_ai_platform_acquire_crc>
 8005a72:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <ai_platform_network_get_error+0xc8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7e:	d03c      	beq.n	8005afa <ai_platform_network_get_error+0x9a>
 8005a80:	4a2a      	ldr	r2, [pc, #168]	; (8005b2c <ai_platform_network_get_error+0xcc>)
 8005a82:	2301      	movs	r3, #1
 8005a84:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1fb      	bne.n	8005a88 <ai_platform_network_get_error+0x28>
 8005a90:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <ai_platform_network_get_error+0xd0>)
 8005a92:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a96:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a9a:	4b26      	ldr	r3, [pc, #152]	; (8005b34 <ai_platform_network_get_error+0xd4>)
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d038      	beq.n	8005b12 <ai_platform_network_get_error+0xb2>
 8005aa0:	e7fe      	b.n	8005aa0 <ai_platform_network_get_error+0x40>
 8005aa2:	f7ff fdc5 	bl	8005630 <_ai_platform_acquire_crc>
 8005aa6:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <ai_platform_network_get_error+0xc8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab2:	d010      	beq.n	8005ad6 <ai_platform_network_get_error+0x76>
 8005ab4:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <ai_platform_network_get_error+0xcc>)
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005abc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1fb      	bne.n	8005abc <ai_platform_network_get_error+0x5c>
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <ai_platform_network_get_error+0xd0>)
 8005ac6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005aca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ace:	4b19      	ldr	r3, [pc, #100]	; (8005b34 <ai_platform_network_get_error+0xd4>)
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d00d      	beq.n	8005af0 <ai_platform_network_get_error+0x90>
 8005ad4:	e7fe      	b.n	8005ad4 <ai_platform_network_get_error+0x74>
 8005ad6:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <ai_platform_network_get_error+0xd8>)
 8005ad8:	2301      	movs	r3, #1
 8005ada:	6093      	str	r3, [r2, #8]
 8005adc:	6893      	ldr	r3, [r2, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1fc      	bne.n	8005adc <ai_platform_network_get_error+0x7c>
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <ai_platform_network_get_error+0xd0>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <ai_platform_network_get_error+0xd4>)
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d000      	beq.n	8005af0 <ai_platform_network_get_error+0x90>
 8005aee:	e7fe      	b.n	8005aee <ai_platform_network_get_error+0x8e>
 8005af0:	f7ff fda0 	bl	8005634 <_ai_platform_release_crc>
 8005af4:	f241 0010 	movw	r0, #4112	; 0x1010
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	4a0f      	ldr	r2, [pc, #60]	; (8005b38 <ai_platform_network_get_error+0xd8>)
 8005afc:	2301      	movs	r3, #1
 8005afe:	6093      	str	r3, [r2, #8]
 8005b00:	6893      	ldr	r3, [r2, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1fc      	bne.n	8005b00 <ai_platform_network_get_error+0xa0>
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <ai_platform_network_get_error+0xd0>)
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <ai_platform_network_get_error+0xd4>)
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d107      	bne.n	8005b22 <ai_platform_network_get_error+0xc2>
 8005b12:	f7ff fd8f 	bl	8005634 <_ai_platform_release_crc>
 8005b16:	f104 0010 	add.w	r0, r4, #16
 8005b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b1e:	f001 bb3b 	b.w	8007198 <core_get_error>
 8005b22:	e7fe      	b.n	8005b22 <ai_platform_network_get_error+0xc2>
 8005b24:	a1c00100 	.word	0xa1c00100
 8005b28:	e0042000 	.word	0xe0042000
 8005b2c:	58024000 	.word	0x58024000
 8005b30:	f407a5c2 	.word	0xf407a5c2
 8005b34:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b38:	40023000 	.word	0x40023000

08005b3c <ai_platform_network_set_error>:
 8005b3c:	b110      	cbz	r0, 8005b44 <ai_platform_network_set_error+0x8>
 8005b3e:	3010      	adds	r0, #16
 8005b40:	f001 bb30 	b.w	80071a4 <core_set_error>
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop

08005b48 <ai_platform_api_get_network_report>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	b087      	sub	sp, #28
 8005b4e:	b1f8      	cbz	r0, 8005b90 <ai_platform_api_get_network_report+0x48>
 8005b50:	4b95      	ldr	r3, [pc, #596]	; (8005da8 <ai_platform_api_get_network_report+0x260>)
 8005b52:	6802      	ldr	r2, [r0, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	4607      	mov	r7, r0
 8005b58:	d11a      	bne.n	8005b90 <ai_platform_api_get_network_report+0x48>
 8005b5a:	468b      	mov	fp, r1
 8005b5c:	f7ff fd68 	bl	8005630 <_ai_platform_acquire_crc>
 8005b60:	4b92      	ldr	r3, [pc, #584]	; (8005dac <ai_platform_api_get_network_report+0x264>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6c:	d03e      	beq.n	8005bec <ai_platform_api_get_network_report+0xa4>
 8005b6e:	4a90      	ldr	r2, [pc, #576]	; (8005db0 <ai_platform_api_get_network_report+0x268>)
 8005b70:	2301      	movs	r3, #1
 8005b72:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005b76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1fb      	bne.n	8005b76 <ai_platform_api_get_network_report+0x2e>
 8005b7e:	4b8d      	ldr	r3, [pc, #564]	; (8005db4 <ai_platform_api_get_network_report+0x26c>)
 8005b80:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b88:	4b8b      	ldr	r3, [pc, #556]	; (8005db8 <ai_platform_api_get_network_report+0x270>)
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d03a      	beq.n	8005c04 <ai_platform_api_get_network_report+0xbc>
 8005b8e:	e7fe      	b.n	8005b8e <ai_platform_api_get_network_report+0x46>
 8005b90:	f7ff fd4e 	bl	8005630 <_ai_platform_acquire_crc>
 8005b94:	4b85      	ldr	r3, [pc, #532]	; (8005dac <ai_platform_api_get_network_report+0x264>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba0:	d010      	beq.n	8005bc4 <ai_platform_api_get_network_report+0x7c>
 8005ba2:	4a83      	ldr	r2, [pc, #524]	; (8005db0 <ai_platform_api_get_network_report+0x268>)
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005baa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1fb      	bne.n	8005baa <ai_platform_api_get_network_report+0x62>
 8005bb2:	4b80      	ldr	r3, [pc, #512]	; (8005db4 <ai_platform_api_get_network_report+0x26c>)
 8005bb4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005bb8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005bbc:	4b7e      	ldr	r3, [pc, #504]	; (8005db8 <ai_platform_api_get_network_report+0x270>)
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d00d      	beq.n	8005bde <ai_platform_api_get_network_report+0x96>
 8005bc2:	e7fe      	b.n	8005bc2 <ai_platform_api_get_network_report+0x7a>
 8005bc4:	4a7d      	ldr	r2, [pc, #500]	; (8005dbc <ai_platform_api_get_network_report+0x274>)
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	6093      	str	r3, [r2, #8]
 8005bca:	6893      	ldr	r3, [r2, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1fc      	bne.n	8005bca <ai_platform_api_get_network_report+0x82>
 8005bd0:	4b78      	ldr	r3, [pc, #480]	; (8005db4 <ai_platform_api_get_network_report+0x26c>)
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	4b78      	ldr	r3, [pc, #480]	; (8005db8 <ai_platform_api_get_network_report+0x270>)
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d000      	beq.n	8005bde <ai_platform_api_get_network_report+0x96>
 8005bdc:	e7fe      	b.n	8005bdc <ai_platform_api_get_network_report+0x94>
 8005bde:	f7ff fd29 	bl	8005634 <_ai_platform_release_crc>
 8005be2:	2400      	movs	r4, #0
 8005be4:	4620      	mov	r0, r4
 8005be6:	b007      	add	sp, #28
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	4a73      	ldr	r2, [pc, #460]	; (8005dbc <ai_platform_api_get_network_report+0x274>)
 8005bee:	2301      	movs	r3, #1
 8005bf0:	6093      	str	r3, [r2, #8]
 8005bf2:	6893      	ldr	r3, [r2, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1fc      	bne.n	8005bf2 <ai_platform_api_get_network_report+0xaa>
 8005bf8:	4b6e      	ldr	r3, [pc, #440]	; (8005db4 <ai_platform_api_get_network_report+0x26c>)
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	4b6e      	ldr	r3, [pc, #440]	; (8005db8 <ai_platform_api_get_network_report+0x270>)
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d112      	bne.n	8005c2a <ai_platform_api_get_network_report+0xe2>
 8005c04:	f7ff fd16 	bl	8005634 <_ai_platform_release_crc>
 8005c08:	f1bb 0f00 	cmp.w	fp, #0
 8005c0c:	d0e9      	beq.n	8005be2 <ai_platform_api_get_network_report+0x9a>
 8005c0e:	2400      	movs	r4, #0
 8005c10:	f8cb 4074 	str.w	r4, [fp, #116]	; 0x74
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	b14b      	cbz	r3, 8005c2c <ai_platform_api_get_network_report+0xe4>
 8005c18:	3401      	adds	r4, #1
 8005c1a:	f8cb 4074 	str.w	r4, [fp, #116]	; 0x74
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d003      	beq.n	8005c2c <ai_platform_api_get_network_report+0xe4>
 8005c24:	b112      	cbz	r2, 8005c2c <ai_platform_api_get_network_report+0xe4>
 8005c26:	4613      	mov	r3, r2
 8005c28:	e7f5      	b.n	8005c16 <ai_platform_api_get_network_report+0xce>
 8005c2a:	e7fe      	b.n	8005c2a <ai_platform_api_get_network_report+0xe2>
 8005c2c:	2c00      	cmp	r4, #0
 8005c2e:	f000 819d 	beq.w	8005f6c <ai_platform_api_get_network_report+0x424>
 8005c32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d04e      	beq.n	8005cd6 <ai_platform_api_get_network_report+0x18e>
 8005c38:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8005c3c:	f1b9 0f00 	cmp.w	r9, #0
 8005c40:	d049      	beq.n	8005cd6 <ai_platform_api_get_network_report+0x18e>
 8005c42:	f04f 0a00 	mov.w	sl, #0
 8005c46:	e9cd 7b00 	strd	r7, fp, [sp]
 8005c4a:	4655      	mov	r5, sl
 8005c4c:	e016      	b.n	8005c7c <ai_platform_api_get_network_report+0x134>
 8005c4e:	2101      	movs	r1, #1
 8005c50:	f847 100e 	str.w	r1, [r7, lr]
 8005c54:	69b1      	ldr	r1, [r6, #24]
 8005c56:	6849      	ldr	r1, [r1, #4]
 8005c58:	60a3      	str	r3, [r4, #8]
 8005c5a:	f04f 0301 	mov.w	r3, #1
 8005c5e:	7523      	strb	r3, [r4, #20]
 8005c60:	2300      	movs	r3, #0
 8005c62:	60e3      	str	r3, [r4, #12]
 8005c64:	6963      	ldr	r3, [r4, #20]
 8005c66:	6121      	str	r1, [r4, #16]
 8005c68:	e9c4 0200 	strd	r0, r2, [r4]
 8005c6c:	f368 231f 	bfi	r3, r8, #8, #24
 8005c70:	f8c4 b018 	str.w	fp, [r4, #24]
 8005c74:	3501      	adds	r5, #1
 8005c76:	f10a 0a1c 	add.w	sl, sl, #28
 8005c7a:	6163      	str	r3, [r4, #20]
 8005c7c:	f8b9 3000 	ldrh.w	r3, [r9]
 8005c80:	42ab      	cmp	r3, r5
 8005c82:	b2aa      	uxth	r2, r5
 8005c84:	d933      	bls.n	8005cee <ai_platform_api_get_network_report+0x1a6>
 8005c86:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005c8a:	b383      	cbz	r3, 8005cee <ai_platform_api_get_network_report+0x1a6>
 8005c8c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005c90:	b36e      	cbz	r6, 8005cee <ai_platform_api_get_network_report+0x1a6>
 8005c92:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005c96:	69b2      	ldr	r2, [r6, #24]
 8005c98:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8005c9c:	6810      	ldr	r0, [r2, #0]
 8005c9e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005ca2:	68b3      	ldr	r3, [r6, #8]
 8005ca4:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005ca8:	f007 f89e 	bl	800cde8 <ai_array_to_buffer_fmt>
 8005cac:	69b1      	ldr	r1, [r6, #24]
 8005cae:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005cb2:	688a      	ldr	r2, [r1, #8]
 8005cb4:	4454      	add	r4, sl
 8005cb6:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0cb      	beq.n	8005c56 <ai_platform_api_get_network_report+0x10e>
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005cc4:	6831      	ldr	r1, [r6, #0]
 8005cc6:	6059      	str	r1, [r3, #4]
 8005cc8:	b111      	cbz	r1, 8005cd0 <ai_platform_api_get_network_report+0x188>
 8005cca:	8849      	ldrh	r1, [r1, #2]
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	d1be      	bne.n	8005c4e <ai_platform_api_get_network_report+0x106>
 8005cd0:	69b1      	ldr	r1, [r6, #24]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e7bf      	b.n	8005c56 <ai_platform_api_get_network_report+0x10e>
 8005cd6:	2400      	movs	r4, #0
 8005cd8:	f8cb 4034 	str.w	r4, [fp, #52]	; 0x34
 8005cdc:	f8ab 4030 	strh.w	r4, [fp, #48]	; 0x30
 8005ce0:	2218      	movs	r2, #24
 8005ce2:	2112      	movs	r1, #18
 8005ce4:	f107 0010 	add.w	r0, r7, #16
 8005ce8:	f001 fa5c 	bl	80071a4 <core_set_error>
 8005cec:	e77a      	b.n	8005be4 <ai_platform_api_get_network_report+0x9c>
 8005cee:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	d0ef      	beq.n	8005cd6 <ai_platform_api_get_network_report+0x18e>
 8005cf6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8005d00:	f8ab 2030 	strh.w	r2, [fp, #48]	; 0x30
 8005d04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	f240 8124 	bls.w	8005f54 <ai_platform_api_get_network_report+0x40c>
 8005d0c:	f04f 0a00 	mov.w	sl, #0
 8005d10:	e9cd 7b00 	strd	r7, fp, [sp]
 8005d14:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8005d18:	4655      	mov	r5, sl
 8005d1a:	e016      	b.n	8005d4a <ai_platform_api_get_network_report+0x202>
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	f847 100e 	str.w	r1, [r7, lr]
 8005d22:	69b1      	ldr	r1, [r6, #24]
 8005d24:	6849      	ldr	r1, [r1, #4]
 8005d26:	60a3      	str	r3, [r4, #8]
 8005d28:	f04f 0301 	mov.w	r3, #1
 8005d2c:	7523      	strb	r3, [r4, #20]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60e3      	str	r3, [r4, #12]
 8005d32:	6963      	ldr	r3, [r4, #20]
 8005d34:	6121      	str	r1, [r4, #16]
 8005d36:	e9c4 0200 	strd	r0, r2, [r4]
 8005d3a:	f368 231f 	bfi	r3, r8, #8, #24
 8005d3e:	f8c4 b018 	str.w	fp, [r4, #24]
 8005d42:	3501      	adds	r5, #1
 8005d44:	f10a 0a1c 	add.w	sl, sl, #28
 8005d48:	6163      	str	r3, [r4, #20]
 8005d4a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005d4e:	42ab      	cmp	r3, r5
 8005d50:	b2aa      	uxth	r2, r5
 8005d52:	d935      	bls.n	8005dc0 <ai_platform_api_get_network_report+0x278>
 8005d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d031      	beq.n	8005dc0 <ai_platform_api_get_network_report+0x278>
 8005d5c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005d60:	b376      	cbz	r6, 8005dc0 <ai_platform_api_get_network_report+0x278>
 8005d62:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005d66:	69b2      	ldr	r2, [r6, #24]
 8005d68:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8005d6c:	6810      	ldr	r0, [r2, #0]
 8005d6e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005d72:	68b3      	ldr	r3, [r6, #8]
 8005d74:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005d78:	f007 f836 	bl	800cde8 <ai_array_to_buffer_fmt>
 8005d7c:	69b1      	ldr	r1, [r6, #24]
 8005d7e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005d82:	688a      	ldr	r2, [r1, #8]
 8005d84:	4454      	add	r4, sl
 8005d86:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ca      	beq.n	8005d24 <ai_platform_api_get_network_report+0x1dc>
 8005d8e:	2100      	movs	r1, #0
 8005d90:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005d94:	6831      	ldr	r1, [r6, #0]
 8005d96:	6059      	str	r1, [r3, #4]
 8005d98:	b111      	cbz	r1, 8005da0 <ai_platform_api_get_network_report+0x258>
 8005d9a:	8849      	ldrh	r1, [r1, #2]
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	d1bd      	bne.n	8005d1c <ai_platform_api_get_network_report+0x1d4>
 8005da0:	69b1      	ldr	r1, [r6, #24]
 8005da2:	2300      	movs	r3, #0
 8005da4:	e7be      	b.n	8005d24 <ai_platform_api_get_network_report+0x1dc>
 8005da6:	bf00      	nop
 8005da8:	a1c00100 	.word	0xa1c00100
 8005dac:	e0042000 	.word	0xe0042000
 8005db0:	58024000 	.word	0x58024000
 8005db4:	f407a5c2 	.word	0xf407a5c2
 8005db8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005dbc:	40023000 	.word	0x40023000
 8005dc0:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	f000 80c5 	beq.w	8005f54 <ai_platform_api_get_network_report+0x40c>
 8005dca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005dce:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
 8005dd8:	f8ab 2032 	strh.w	r2, [fp, #50]	; 0x32
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f7ff fb81 	bl	80054e4 <ai_buffer_array_sane>
 8005de2:	4604      	mov	r4, r0
 8005de4:	b938      	cbnz	r0, 8005df6 <ai_platform_api_get_network_report+0x2ae>
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7ff fb7c 	bl	80054e4 <ai_buffer_array_sane>
 8005dec:	b118      	cbz	r0, 8005df6 <ai_platform_api_get_network_report+0x2ae>
 8005dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 80c4 	bne.w	8005f7e <ai_platform_api_get_network_report+0x436>
 8005df6:	f107 061c 	add.w	r6, r7, #28
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7ff fb72 	bl	80054e4 <ai_buffer_array_sane>
 8005e00:	4604      	mov	r4, r0
 8005e02:	b938      	cbnz	r0, 8005e14 <ai_platform_api_get_network_report+0x2cc>
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff fb6d 	bl	80054e4 <ai_buffer_array_sane>
 8005e0a:	b118      	cbz	r0, 8005e14 <ai_platform_api_get_network_report+0x2cc>
 8005e0c:	8bfb      	ldrh	r3, [r7, #30]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 80bc 	bne.w	8005f8c <ai_platform_api_get_network_report+0x444>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8cb 3078 	str.w	r3, [fp, #120]	; 0x78
 8005e1a:	f7ff fc09 	bl	8005630 <_ai_platform_acquire_crc>
 8005e1e:	4ba1      	ldr	r3, [pc, #644]	; (80060a4 <ai_platform_api_get_network_report+0x55c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2a:	d010      	beq.n	8005e4e <ai_platform_api_get_network_report+0x306>
 8005e2c:	4a9e      	ldr	r2, [pc, #632]	; (80060a8 <ai_platform_api_get_network_report+0x560>)
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005e34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1fb      	bne.n	8005e34 <ai_platform_api_get_network_report+0x2ec>
 8005e3c:	4b9b      	ldr	r3, [pc, #620]	; (80060ac <ai_platform_api_get_network_report+0x564>)
 8005e3e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005e42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e46:	4b9a      	ldr	r3, [pc, #616]	; (80060b0 <ai_platform_api_get_network_report+0x568>)
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d00d      	beq.n	8005e68 <ai_platform_api_get_network_report+0x320>
 8005e4c:	e7fe      	b.n	8005e4c <ai_platform_api_get_network_report+0x304>
 8005e4e:	4a99      	ldr	r2, [pc, #612]	; (80060b4 <ai_platform_api_get_network_report+0x56c>)
 8005e50:	2301      	movs	r3, #1
 8005e52:	6093      	str	r3, [r2, #8]
 8005e54:	6893      	ldr	r3, [r2, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1fc      	bne.n	8005e54 <ai_platform_api_get_network_report+0x30c>
 8005e5a:	4b94      	ldr	r3, [pc, #592]	; (80060ac <ai_platform_api_get_network_report+0x564>)
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	4b93      	ldr	r3, [pc, #588]	; (80060b0 <ai_platform_api_get_network_report+0x568>)
 8005e62:	429a      	cmp	r2, r3
 8005e64:	f040 8089 	bne.w	8005f7a <ai_platform_api_get_network_report+0x432>
 8005e68:	f7ff fbe4 	bl	8005634 <_ai_platform_release_crc>
 8005e6c:	4b92      	ldr	r3, [pc, #584]	; (80060b8 <ai_platform_api_get_network_report+0x570>)
 8005e6e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005e72:	f7ff fbdd 	bl	8005630 <_ai_platform_acquire_crc>
 8005e76:	4b8b      	ldr	r3, [pc, #556]	; (80060a4 <ai_platform_api_get_network_report+0x55c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e82:	d010      	beq.n	8005ea6 <ai_platform_api_get_network_report+0x35e>
 8005e84:	4b88      	ldr	r3, [pc, #544]	; (80060a8 <ai_platform_api_get_network_report+0x560>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005e8c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005e90:	2a00      	cmp	r2, #0
 8005e92:	d1fb      	bne.n	8005e8c <ai_platform_api_get_network_report+0x344>
 8005e94:	4a85      	ldr	r2, [pc, #532]	; (80060ac <ai_platform_api_get_network_report+0x564>)
 8005e96:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005e9a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005e9e:	4b84      	ldr	r3, [pc, #528]	; (80060b0 <ai_platform_api_get_network_report+0x568>)
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d00c      	beq.n	8005ebe <ai_platform_api_get_network_report+0x376>
 8005ea4:	e7fe      	b.n	8005ea4 <ai_platform_api_get_network_report+0x35c>
 8005ea6:	4b83      	ldr	r3, [pc, #524]	; (80060b4 <ai_platform_api_get_network_report+0x56c>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	609a      	str	r2, [r3, #8]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d1fc      	bne.n	8005eac <ai_platform_api_get_network_report+0x364>
 8005eb2:	4a7e      	ldr	r2, [pc, #504]	; (80060ac <ai_platform_api_get_network_report+0x564>)
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4b7d      	ldr	r3, [pc, #500]	; (80060b0 <ai_platform_api_get_network_report+0x568>)
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d15e      	bne.n	8005f7c <ai_platform_api_get_network_report+0x434>
 8005ebe:	f7ff fbb9 	bl	8005634 <_ai_platform_release_crc>
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	f8cb 3014 	str.w	r3, [fp, #20]
 8005ec8:	f7ff fbb2 	bl	8005630 <_ai_platform_acquire_crc>
 8005ecc:	4b75      	ldr	r3, [pc, #468]	; (80060a4 <ai_platform_api_get_network_report+0x55c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed8:	d010      	beq.n	8005efc <ai_platform_api_get_network_report+0x3b4>
 8005eda:	4b73      	ldr	r3, [pc, #460]	; (80060a8 <ai_platform_api_get_network_report+0x560>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005ee2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	d1fb      	bne.n	8005ee2 <ai_platform_api_get_network_report+0x39a>
 8005eea:	4a70      	ldr	r2, [pc, #448]	; (80060ac <ai_platform_api_get_network_report+0x564>)
 8005eec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005ef0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005ef4:	4b6e      	ldr	r3, [pc, #440]	; (80060b0 <ai_platform_api_get_network_report+0x568>)
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d00c      	beq.n	8005f14 <ai_platform_api_get_network_report+0x3cc>
 8005efa:	e7fe      	b.n	8005efa <ai_platform_api_get_network_report+0x3b2>
 8005efc:	4b6d      	ldr	r3, [pc, #436]	; (80060b4 <ai_platform_api_get_network_report+0x56c>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	d1fc      	bne.n	8005f02 <ai_platform_api_get_network_report+0x3ba>
 8005f08:	4a68      	ldr	r2, [pc, #416]	; (80060ac <ai_platform_api_get_network_report+0x564>)
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b68      	ldr	r3, [pc, #416]	; (80060b0 <ai_platform_api_get_network_report+0x568>)
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d142      	bne.n	8005f9a <ai_platform_api_get_network_report+0x452>
 8005f14:	f7ff fb8e 	bl	8005634 <_ai_platform_release_crc>
 8005f18:	f240 2301 	movw	r3, #513	; 0x201
 8005f1c:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8005f20:	f7ff fb86 	bl	8005630 <_ai_platform_acquire_crc>
 8005f24:	4b5f      	ldr	r3, [pc, #380]	; (80060a4 <ai_platform_api_get_network_report+0x55c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f30:	d034      	beq.n	8005f9c <ai_platform_api_get_network_report+0x454>
 8005f32:	4b5d      	ldr	r3, [pc, #372]	; (80060a8 <ai_platform_api_get_network_report+0x560>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005f3a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005f3e:	2a00      	cmp	r2, #0
 8005f40:	d1fb      	bne.n	8005f3a <ai_platform_api_get_network_report+0x3f2>
 8005f42:	4a5a      	ldr	r2, [pc, #360]	; (80060ac <ai_platform_api_get_network_report+0x564>)
 8005f44:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005f48:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005f4c:	4b58      	ldr	r3, [pc, #352]	; (80060b0 <ai_platform_api_get_network_report+0x568>)
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d030      	beq.n	8005fb4 <ai_platform_api_get_network_report+0x46c>
 8005f52:	e7fe      	b.n	8005f52 <ai_platform_api_get_network_report+0x40a>
 8005f54:	2400      	movs	r4, #0
 8005f56:	f8cb 4038 	str.w	r4, [fp, #56]	; 0x38
 8005f5a:	f8ab 4032 	strh.w	r4, [fp, #50]	; 0x32
 8005f5e:	2218      	movs	r2, #24
 8005f60:	2113      	movs	r1, #19
 8005f62:	f107 0010 	add.w	r0, r7, #16
 8005f66:	f001 f91d 	bl	80071a4 <core_set_error>
 8005f6a:	e63b      	b.n	8005be4 <ai_platform_api_get_network_report+0x9c>
 8005f6c:	2218      	movs	r2, #24
 8005f6e:	2111      	movs	r1, #17
 8005f70:	f107 0010 	add.w	r0, r7, #16
 8005f74:	f001 f916 	bl	80071a4 <core_set_error>
 8005f78:	e634      	b.n	8005be4 <ai_platform_api_get_network_report+0x9c>
 8005f7a:	e7fe      	b.n	8005f7a <ai_platform_api_get_network_report+0x432>
 8005f7c:	e7fe      	b.n	8005f7c <ai_platform_api_get_network_report+0x434>
 8005f7e:	2213      	movs	r2, #19
 8005f80:	2111      	movs	r1, #17
 8005f82:	f107 0010 	add.w	r0, r7, #16
 8005f86:	f001 f90d 	bl	80071a4 <core_set_error>
 8005f8a:	e62b      	b.n	8005be4 <ai_platform_api_get_network_report+0x9c>
 8005f8c:	2212      	movs	r2, #18
 8005f8e:	2111      	movs	r1, #17
 8005f90:	f107 0010 	add.w	r0, r7, #16
 8005f94:	f001 f906 	bl	80071a4 <core_set_error>
 8005f98:	e624      	b.n	8005be4 <ai_platform_api_get_network_report+0x9c>
 8005f9a:	e7fe      	b.n	8005f9a <ai_platform_api_get_network_report+0x452>
 8005f9c:	4b45      	ldr	r3, [pc, #276]	; (80060b4 <ai_platform_api_get_network_report+0x56c>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	609a      	str	r2, [r3, #8]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d1fc      	bne.n	8005fa2 <ai_platform_api_get_network_report+0x45a>
 8005fa8:	4a40      	ldr	r2, [pc, #256]	; (80060ac <ai_platform_api_get_network_report+0x564>)
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <ai_platform_api_get_network_report+0x568>)
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d149      	bne.n	8006048 <ai_platform_api_get_network_report+0x500>
 8005fb4:	f7ff fb3e 	bl	8005634 <_ai_platform_release_crc>
 8005fb8:	f240 5301 	movw	r3, #1281	; 0x501
 8005fbc:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8005fc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005fc2:	f006 fee7 	bl	800cd94 <ai_platform_version_get>
 8005fc6:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <ai_platform_api_get_network_report+0x574>)
 8005fc8:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 8005fcc:	f8cb 0020 	str.w	r0, [fp, #32]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d10d      	bne.n	8005ff0 <ai_platform_api_get_network_report+0x4a8>
 8005fd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005fd8:	f10b 0248 	add.w	r2, fp, #72	; 0x48
 8005fdc:	e882 0003 	stmia.w	r2, {r0, r1}
 8005fe0:	e896 0003 	ldmia.w	r6, {r0, r1}
 8005fe4:	f10b 0340 	add.w	r3, fp, #64	; 0x40
 8005fe8:	e883 0003 	stmia.w	r3, {r0, r1}
 8005fec:	2401      	movs	r4, #1
 8005fee:	e5f9      	b.n	8005be4 <ai_platform_api_get_network_report+0x9c>
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	e9cb 2210 	strd	r2, r2, [fp, #64]	; 0x40
 8005ff6:	e9cb 2212 	strd	r2, r2, [fp, #72]	; 0x48
 8005ffa:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <ai_platform_api_get_network_report+0x578>)
 8005ffc:	4a31      	ldr	r2, [pc, #196]	; (80060c4 <ai_platform_api_get_network_report+0x57c>)
 8005ffe:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
 8006002:	f240 4201 	movw	r2, #1025	; 0x401
 8006006:	f8cb 2050 	str.w	r2, [fp, #80]	; 0x50
 800600a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800600c:	f10d 0908 	add.w	r9, sp, #8
 8006010:	f10b 043c 	add.w	r4, fp, #60	; 0x3c
 8006014:	f8cb 9054 	str.w	r9, [fp, #84]	; 0x54
 8006018:	46a6      	mov	lr, r4
 800601a:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 800601e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006022:	f10b 0858 	add.w	r8, fp, #88	; 0x58
 8006026:	46c4      	mov	ip, r8
 8006028:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800602c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006030:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8006034:	4628      	mov	r0, r5
 8006036:	f7ff fa55 	bl	80054e4 <ai_buffer_array_sane>
 800603a:	b990      	cbnz	r0, 8006062 <ai_platform_api_get_network_report+0x51a>
 800603c:	4630      	mov	r0, r6
 800603e:	f7ff fa51 	bl	80054e4 <ai_buffer_array_sane>
 8006042:	b910      	cbnz	r0, 800604a <ai_platform_api_get_network_report+0x502>
 8006044:	2401      	movs	r4, #1
 8006046:	e5cd      	b.n	8005be4 <ai_platform_api_get_network_report+0x9c>
 8006048:	e7fe      	b.n	8006048 <ai_platform_api_get_network_report+0x500>
 800604a:	4630      	mov	r0, r6
 800604c:	f7ff fa4a 	bl	80054e4 <ai_buffer_array_sane>
 8006050:	b1b0      	cbz	r0, 8006080 <ai_platform_api_get_network_report+0x538>
 8006052:	6a3d      	ldr	r5, [r7, #32]
 8006054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006058:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800605c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006060:	e7f0      	b.n	8006044 <ai_platform_api_get_network_report+0x4fc>
 8006062:	4628      	mov	r0, r5
 8006064:	f7ff fa3e 	bl	80054e4 <ai_buffer_array_sane>
 8006068:	b190      	cbz	r0, 8006090 <ai_platform_api_get_network_report+0x548>
 800606a:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 800606e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006072:	4645      	mov	r5, r8
 8006074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006076:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800607a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800607e:	e7dd      	b.n	800603c <ai_platform_api_get_network_report+0x4f4>
 8006080:	4605      	mov	r5, r0
 8006082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800608a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800608e:	deff      	udf	#255	; 0xff
 8006090:	4604      	mov	r4, r0
 8006092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006094:	4645      	mov	r5, r8
 8006096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006098:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800609c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060a0:	deff      	udf	#255	; 0xff
 80060a2:	bf00      	nop
 80060a4:	e0042000 	.word	0xe0042000
 80060a8:	58024000 	.word	0x58024000
 80060ac:	f407a5c2 	.word	0xf407a5c2
 80060b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80060b4:	40023000 	.word	0x40023000
 80060b8:	08018078 	.word	0x08018078
 80060bc:	a1facade 	.word	0xa1facade
 80060c0:	08011184 	.word	0x08011184
 80060c4:	00040440 	.word	0x00040440

080060c8 <ai_platform_network_create>:
 80060c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060cc:	b083      	sub	sp, #12
 80060ce:	4606      	mov	r6, r0
 80060d0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80060d4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80060d8:	4615      	mov	r5, r2
 80060da:	461f      	mov	r7, r3
 80060dc:	f7ff faa8 	bl	8005630 <_ai_platform_acquire_crc>
 80060e0:	b188      	cbz	r0, 8006106 <ai_platform_network_create+0x3e>
 80060e2:	4a5d      	ldr	r2, [pc, #372]	; (8006258 <ai_platform_network_create+0x190>)
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80060ea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80060ee:	4603      	mov	r3, r0
 80060f0:	d00e      	beq.n	8006110 <ai_platform_network_create+0x48>
 80060f2:	4a5a      	ldr	r2, [pc, #360]	; (800625c <ai_platform_network_create+0x194>)
 80060f4:	2118      	movs	r1, #24
 80060f6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80060fa:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80060fe:	2918      	cmp	r1, #24
 8006100:	d018      	beq.n	8006134 <ai_platform_network_create+0x6c>
 8006102:	f7ff fa97 	bl	8005634 <_ai_platform_release_crc>
 8006106:	f244 1033 	movw	r0, #16691	; 0x4133
 800610a:	b003      	add	sp, #12
 800610c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006110:	4a53      	ldr	r2, [pc, #332]	; (8006260 <ai_platform_network_create+0x198>)
 8006112:	2101      	movs	r1, #1
 8006114:	6091      	str	r1, [r2, #8]
 8006116:	2114      	movs	r1, #20
 8006118:	e001      	b.n	800611e <ai_platform_network_create+0x56>
 800611a:	3901      	subs	r1, #1
 800611c:	d002      	beq.n	8006124 <ai_platform_network_create+0x5c>
 800611e:	6894      	ldr	r4, [r2, #8]
 8006120:	2c00      	cmp	r4, #0
 8006122:	d1fa      	bne.n	800611a <ai_platform_network_create+0x52>
 8006124:	4a4e      	ldr	r2, [pc, #312]	; (8006260 <ai_platform_network_create+0x198>)
 8006126:	6891      	ldr	r1, [r2, #8]
 8006128:	b911      	cbnz	r1, 8006130 <ai_platform_network_create+0x68>
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	3201      	adds	r2, #1
 800612e:	d008      	beq.n	8006142 <ai_platform_network_create+0x7a>
 8006130:	4618      	mov	r0, r3
 8006132:	e7e6      	b.n	8006102 <ai_platform_network_create+0x3a>
 8006134:	2101      	movs	r1, #1
 8006136:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800613a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800613e:	2900      	cmp	r1, #0
 8006140:	d1fb      	bne.n	800613a <ai_platform_network_create+0x72>
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fa76 	bl	8005634 <_ai_platform_release_crc>
 8006148:	f7ff fa72 	bl	8005630 <_ai_platform_acquire_crc>
 800614c:	4b42      	ldr	r3, [pc, #264]	; (8006258 <ai_platform_network_create+0x190>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006158:	d010      	beq.n	800617c <ai_platform_network_create+0xb4>
 800615a:	4b40      	ldr	r3, [pc, #256]	; (800625c <ai_platform_network_create+0x194>)
 800615c:	2201      	movs	r2, #1
 800615e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006162:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8006166:	2900      	cmp	r1, #0
 8006168:	d1fb      	bne.n	8006162 <ai_platform_network_create+0x9a>
 800616a:	4a3e      	ldr	r2, [pc, #248]	; (8006264 <ai_platform_network_create+0x19c>)
 800616c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006170:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006174:	4b3c      	ldr	r3, [pc, #240]	; (8006268 <ai_platform_network_create+0x1a0>)
 8006176:	429a      	cmp	r2, r3
 8006178:	d00c      	beq.n	8006194 <ai_platform_network_create+0xcc>
 800617a:	e7fe      	b.n	800617a <ai_platform_network_create+0xb2>
 800617c:	4a38      	ldr	r2, [pc, #224]	; (8006260 <ai_platform_network_create+0x198>)
 800617e:	2301      	movs	r3, #1
 8006180:	6093      	str	r3, [r2, #8]
 8006182:	6893      	ldr	r3, [r2, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1fc      	bne.n	8006182 <ai_platform_network_create+0xba>
 8006188:	4b36      	ldr	r3, [pc, #216]	; (8006264 <ai_platform_network_create+0x19c>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	4b36      	ldr	r3, [pc, #216]	; (8006268 <ai_platform_network_create+0x1a0>)
 8006190:	429a      	cmp	r2, r3
 8006192:	d122      	bne.n	80061da <ai_platform_network_create+0x112>
 8006194:	f7ff fa4e 	bl	8005634 <_ai_platform_release_crc>
 8006198:	b38e      	cbz	r6, 80061fe <ai_platform_network_create+0x136>
 800619a:	4b34      	ldr	r3, [pc, #208]	; (800626c <ai_platform_network_create+0x1a4>)
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	6035      	str	r5, [r6, #0]
 80061a0:	f000 fff8 	bl	8007194 <core_init>
 80061a4:	b1d0      	cbz	r0, 80061dc <ai_platform_network_create+0x114>
 80061a6:	f7ff fa43 	bl	8005630 <_ai_platform_acquire_crc>
 80061aa:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <ai_platform_network_create+0x190>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b6:	d025      	beq.n	8006204 <ai_platform_network_create+0x13c>
 80061b8:	4a28      	ldr	r2, [pc, #160]	; (800625c <ai_platform_network_create+0x194>)
 80061ba:	2301      	movs	r3, #1
 80061bc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80061c0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1fb      	bne.n	80061c0 <ai_platform_network_create+0xf8>
 80061c8:	4b26      	ldr	r3, [pc, #152]	; (8006264 <ai_platform_network_create+0x19c>)
 80061ca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80061ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80061d2:	4b25      	ldr	r3, [pc, #148]	; (8006268 <ai_platform_network_create+0x1a0>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d022      	beq.n	800621e <ai_platform_network_create+0x156>
 80061d8:	e7fe      	b.n	80061d8 <ai_platform_network_create+0x110>
 80061da:	e7fe      	b.n	80061da <ai_platform_network_create+0x112>
 80061dc:	2430      	movs	r4, #48	; 0x30
 80061de:	2300      	movs	r3, #0
 80061e0:	6033      	str	r3, [r6, #0]
 80061e2:	2610      	movs	r6, #16
 80061e4:	464a      	mov	r2, r9
 80061e6:	4641      	mov	r1, r8
 80061e8:	4638      	mov	r0, r7
 80061ea:	f006 fdcd 	bl	800cd88 <ai_version_get>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2000      	movs	r0, #0
 80061f2:	f364 0007 	bfi	r0, r4, #0, #8
 80061f6:	64ab      	str	r3, [r5, #72]	; 0x48
 80061f8:	f366 201f 	bfi	r0, r6, #8, #24
 80061fc:	e785      	b.n	800610a <ai_platform_network_create+0x42>
 80061fe:	f241 0010 	movw	r0, #4112	; 0x1010
 8006202:	e782      	b.n	800610a <ai_platform_network_create+0x42>
 8006204:	4a16      	ldr	r2, [pc, #88]	; (8006260 <ai_platform_network_create+0x198>)
 8006206:	2301      	movs	r3, #1
 8006208:	6093      	str	r3, [r2, #8]
 800620a:	6893      	ldr	r3, [r2, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1fc      	bne.n	800620a <ai_platform_network_create+0x142>
 8006210:	4b14      	ldr	r3, [pc, #80]	; (8006264 <ai_platform_network_create+0x19c>)
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	4b14      	ldr	r3, [pc, #80]	; (8006268 <ai_platform_network_create+0x1a0>)
 8006218:	429a      	cmp	r2, r3
 800621a:	d000      	beq.n	800621e <ai_platform_network_create+0x156>
 800621c:	e7fe      	b.n	800621c <ai_platform_network_create+0x154>
 800621e:	f7ff fa09 	bl	8005634 <_ai_platform_release_crc>
 8006222:	2200      	movs	r2, #0
 8006224:	4641      	mov	r1, r8
 8006226:	4638      	mov	r0, r7
 8006228:	f006 fdae 	bl	800cd88 <ai_version_get>
 800622c:	2200      	movs	r2, #0
 800622e:	4604      	mov	r4, r0
 8006230:	2105      	movs	r1, #5
 8006232:	2001      	movs	r0, #1
 8006234:	f006 fda8 	bl	800cd88 <ai_version_get>
 8006238:	4284      	cmp	r4, r0
 800623a:	d001      	beq.n	8006240 <ai_platform_network_create+0x178>
 800623c:	2401      	movs	r4, #1
 800623e:	e7ce      	b.n	80061de <ai_platform_network_create+0x116>
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <ai_platform_network_create+0x1a8>)
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	a801      	add	r0, sp, #4
 8006246:	f001 ff3b 	bl	80080c0 <ai_check_custom_types>
 800624a:	b110      	cbz	r0, 8006252 <ai_platform_network_create+0x18a>
 800624c:	2600      	movs	r6, #0
 800624e:	4634      	mov	r4, r6
 8006250:	e7c8      	b.n	80061e4 <ai_platform_network_create+0x11c>
 8006252:	2402      	movs	r4, #2
 8006254:	e7c3      	b.n	80061de <ai_platform_network_create+0x116>
 8006256:	bf00      	nop
 8006258:	e0042000 	.word	0xe0042000
 800625c:	58024000 	.word	0x58024000
 8006260:	40023000 	.word	0x40023000
 8006264:	f407a5c2 	.word	0xf407a5c2
 8006268:	b5e8b5cd 	.word	0xb5e8b5cd
 800626c:	a1c00100 	.word	0xa1c00100
 8006270:	84048403 	.word	0x84048403

08006274 <ai_platform_network_destroy>:
 8006274:	b510      	push	{r4, lr}
 8006276:	4604      	mov	r4, r0
 8006278:	b1e8      	cbz	r0, 80062b6 <ai_platform_network_destroy+0x42>
 800627a:	4b2e      	ldr	r3, [pc, #184]	; (8006334 <ai_platform_network_destroy+0xc0>)
 800627c:	6802      	ldr	r2, [r0, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d119      	bne.n	80062b6 <ai_platform_network_destroy+0x42>
 8006282:	f7ff f9d5 	bl	8005630 <_ai_platform_acquire_crc>
 8006286:	4b2c      	ldr	r3, [pc, #176]	; (8006338 <ai_platform_network_destroy+0xc4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006292:	d03b      	beq.n	800630c <ai_platform_network_destroy+0x98>
 8006294:	4a29      	ldr	r2, [pc, #164]	; (800633c <ai_platform_network_destroy+0xc8>)
 8006296:	2301      	movs	r3, #1
 8006298:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800629c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1fb      	bne.n	800629c <ai_platform_network_destroy+0x28>
 80062a4:	4b26      	ldr	r3, [pc, #152]	; (8006340 <ai_platform_network_destroy+0xcc>)
 80062a6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80062aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062ae:	4b25      	ldr	r3, [pc, #148]	; (8006344 <ai_platform_network_destroy+0xd0>)
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d037      	beq.n	8006324 <ai_platform_network_destroy+0xb0>
 80062b4:	e7fe      	b.n	80062b4 <ai_platform_network_destroy+0x40>
 80062b6:	f7ff f9bb 	bl	8005630 <_ai_platform_acquire_crc>
 80062ba:	4b1f      	ldr	r3, [pc, #124]	; (8006338 <ai_platform_network_destroy+0xc4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c6:	d010      	beq.n	80062ea <ai_platform_network_destroy+0x76>
 80062c8:	4a1c      	ldr	r2, [pc, #112]	; (800633c <ai_platform_network_destroy+0xc8>)
 80062ca:	2301      	movs	r3, #1
 80062cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1fb      	bne.n	80062d0 <ai_platform_network_destroy+0x5c>
 80062d8:	4b19      	ldr	r3, [pc, #100]	; (8006340 <ai_platform_network_destroy+0xcc>)
 80062da:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80062de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062e2:	4b18      	ldr	r3, [pc, #96]	; (8006344 <ai_platform_network_destroy+0xd0>)
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d00d      	beq.n	8006304 <ai_platform_network_destroy+0x90>
 80062e8:	e7fe      	b.n	80062e8 <ai_platform_network_destroy+0x74>
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <ai_platform_network_destroy+0xd4>)
 80062ec:	2301      	movs	r3, #1
 80062ee:	6093      	str	r3, [r2, #8]
 80062f0:	6893      	ldr	r3, [r2, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1fc      	bne.n	80062f0 <ai_platform_network_destroy+0x7c>
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <ai_platform_network_destroy+0xcc>)
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <ai_platform_network_destroy+0xd0>)
 80062fe:	429a      	cmp	r2, r3
 8006300:	d000      	beq.n	8006304 <ai_platform_network_destroy+0x90>
 8006302:	e7fe      	b.n	8006302 <ai_platform_network_destroy+0x8e>
 8006304:	f7ff f996 	bl	8005634 <_ai_platform_release_crc>
 8006308:	4620      	mov	r0, r4
 800630a:	bd10      	pop	{r4, pc}
 800630c:	4a0e      	ldr	r2, [pc, #56]	; (8006348 <ai_platform_network_destroy+0xd4>)
 800630e:	2301      	movs	r3, #1
 8006310:	6093      	str	r3, [r2, #8]
 8006312:	6893      	ldr	r3, [r2, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1fc      	bne.n	8006312 <ai_platform_network_destroy+0x9e>
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <ai_platform_network_destroy+0xcc>)
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <ai_platform_network_destroy+0xd0>)
 8006320:	429a      	cmp	r2, r3
 8006322:	d106      	bne.n	8006332 <ai_platform_network_destroy+0xbe>
 8006324:	f7ff f986 	bl	8005634 <_ai_platform_release_crc>
 8006328:	4620      	mov	r0, r4
 800632a:	f001 ff8d 	bl	8008248 <ai_layers_destroy_all>
 800632e:	2000      	movs	r0, #0
 8006330:	bd10      	pop	{r4, pc}
 8006332:	e7fe      	b.n	8006332 <ai_platform_network_destroy+0xbe>
 8006334:	a1c00100 	.word	0xa1c00100
 8006338:	e0042000 	.word	0xe0042000
 800633c:	58024000 	.word	0x58024000
 8006340:	f407a5c2 	.word	0xf407a5c2
 8006344:	b5e8b5cd 	.word	0xb5e8b5cd
 8006348:	40023000 	.word	0x40023000

0800634c <ai_platform_network_init>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	b1f8      	cbz	r0, 8006392 <ai_platform_network_init+0x46>
 8006352:	4b6e      	ldr	r3, [pc, #440]	; (800650c <ai_platform_network_init+0x1c0>)
 8006354:	6802      	ldr	r2, [r0, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	4604      	mov	r4, r0
 800635a:	d11a      	bne.n	8006392 <ai_platform_network_init+0x46>
 800635c:	460e      	mov	r6, r1
 800635e:	f7ff f967 	bl	8005630 <_ai_platform_acquire_crc>
 8006362:	4b6b      	ldr	r3, [pc, #428]	; (8006510 <ai_platform_network_init+0x1c4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636e:	d03d      	beq.n	80063ec <ai_platform_network_init+0xa0>
 8006370:	4a68      	ldr	r2, [pc, #416]	; (8006514 <ai_platform_network_init+0x1c8>)
 8006372:	2301      	movs	r3, #1
 8006374:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006378:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1fb      	bne.n	8006378 <ai_platform_network_init+0x2c>
 8006380:	4b65      	ldr	r3, [pc, #404]	; (8006518 <ai_platform_network_init+0x1cc>)
 8006382:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006386:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800638a:	4b64      	ldr	r3, [pc, #400]	; (800651c <ai_platform_network_init+0x1d0>)
 800638c:	429a      	cmp	r2, r3
 800638e:	d039      	beq.n	8006404 <ai_platform_network_init+0xb8>
 8006390:	e7fe      	b.n	8006390 <ai_platform_network_init+0x44>
 8006392:	f7ff f94d 	bl	8005630 <_ai_platform_acquire_crc>
 8006396:	4b5e      	ldr	r3, [pc, #376]	; (8006510 <ai_platform_network_init+0x1c4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a2:	d010      	beq.n	80063c6 <ai_platform_network_init+0x7a>
 80063a4:	4a5b      	ldr	r2, [pc, #364]	; (8006514 <ai_platform_network_init+0x1c8>)
 80063a6:	2301      	movs	r3, #1
 80063a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80063ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1fb      	bne.n	80063ac <ai_platform_network_init+0x60>
 80063b4:	4b58      	ldr	r3, [pc, #352]	; (8006518 <ai_platform_network_init+0x1cc>)
 80063b6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80063ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80063be:	4b57      	ldr	r3, [pc, #348]	; (800651c <ai_platform_network_init+0x1d0>)
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d00d      	beq.n	80063e0 <ai_platform_network_init+0x94>
 80063c4:	e7fe      	b.n	80063c4 <ai_platform_network_init+0x78>
 80063c6:	4a56      	ldr	r2, [pc, #344]	; (8006520 <ai_platform_network_init+0x1d4>)
 80063c8:	2301      	movs	r3, #1
 80063ca:	6093      	str	r3, [r2, #8]
 80063cc:	6893      	ldr	r3, [r2, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1fc      	bne.n	80063cc <ai_platform_network_init+0x80>
 80063d2:	4b51      	ldr	r3, [pc, #324]	; (8006518 <ai_platform_network_init+0x1cc>)
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	4b50      	ldr	r3, [pc, #320]	; (800651c <ai_platform_network_init+0x1d0>)
 80063da:	429a      	cmp	r2, r3
 80063dc:	d000      	beq.n	80063e0 <ai_platform_network_init+0x94>
 80063de:	e7fe      	b.n	80063de <ai_platform_network_init+0x92>
 80063e0:	f7ff f928 	bl	8005634 <_ai_platform_release_crc>
 80063e4:	2600      	movs	r6, #0
 80063e6:	4630      	mov	r0, r6
 80063e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ec:	4a4c      	ldr	r2, [pc, #304]	; (8006520 <ai_platform_network_init+0x1d4>)
 80063ee:	2301      	movs	r3, #1
 80063f0:	6093      	str	r3, [r2, #8]
 80063f2:	6893      	ldr	r3, [r2, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1fc      	bne.n	80063f2 <ai_platform_network_init+0xa6>
 80063f8:	4b47      	ldr	r3, [pc, #284]	; (8006518 <ai_platform_network_init+0x1cc>)
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	4b47      	ldr	r3, [pc, #284]	; (800651c <ai_platform_network_init+0x1d0>)
 8006400:	429a      	cmp	r2, r3
 8006402:	d11c      	bne.n	800643e <ai_platform_network_init+0xf2>
 8006404:	f7ff f916 	bl	8005634 <_ai_platform_release_crc>
 8006408:	2e00      	cmp	r6, #0
 800640a:	d06f      	beq.n	80064ec <ai_platform_network_init+0x1a0>
 800640c:	4b45      	ldr	r3, [pc, #276]	; (8006524 <ai_platform_network_init+0x1d8>)
 800640e:	6832      	ldr	r2, [r6, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d115      	bne.n	8006440 <ai_platform_network_init+0xf4>
 8006414:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8006418:	6933      	ldr	r3, [r6, #16]
 800641a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800641e:	89f7      	ldrh	r7, [r6, #14]
 8006420:	62a3      	str	r3, [r4, #40]	; 0x28
 8006422:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8006426:	2303      	movs	r3, #3
 8006428:	84e7      	strh	r7, [r4, #38]	; 0x26
 800642a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800642e:	60e3      	str	r3, [r4, #12]
 8006430:	4620      	mov	r0, r4
 8006432:	4626      	mov	r6, r4
 8006434:	f001 fe9c 	bl	8008170 <ai_layers_init_all>
 8006438:	4630      	mov	r0, r6
 800643a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800643e:	e7fe      	b.n	800643e <ai_platform_network_init+0xf2>
 8006440:	2101      	movs	r1, #1
 8006442:	4630      	mov	r0, r6
 8006444:	4635      	mov	r5, r6
 8006446:	6876      	ldr	r6, [r6, #4]
 8006448:	f7ff f810 	bl	800546c <ai_buffer_get_size>
 800644c:	f105 081c 	add.w	r8, r5, #28
 8006450:	4681      	mov	r9, r0
 8006452:	2101      	movs	r1, #1
 8006454:	4640      	mov	r0, r8
 8006456:	6a2f      	ldr	r7, [r5, #32]
 8006458:	f7ff f808 	bl	800546c <ai_buffer_get_size>
 800645c:	f1b9 0f00 	cmp.w	r9, #0
 8006460:	d025      	beq.n	80064ae <ai_platform_network_init+0x162>
 8006462:	2201      	movs	r2, #1
 8006464:	4696      	mov	lr, r2
 8006466:	bb30      	cbnz	r0, 80064b6 <ai_platform_network_init+0x16a>
 8006468:	4680      	mov	r8, r0
 800646a:	4607      	mov	r7, r0
 800646c:	b376      	cbz	r6, 80064cc <ai_platform_network_init+0x180>
 800646e:	8be3      	ldrh	r3, [r4, #30]
 8006470:	4573      	cmp	r3, lr
 8006472:	d323      	bcc.n	80064bc <ai_platform_network_init+0x170>
 8006474:	b142      	cbz	r2, 8006488 <ai_platform_network_init+0x13c>
 8006476:	46ac      	mov	ip, r5
 8006478:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800647c:	6a25      	ldr	r5, [r4, #32]
 800647e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006480:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006484:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006488:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800648a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800648e:	2600      	movs	r6, #0
 8006490:	42bb      	cmp	r3, r7
 8006492:	83a6      	strh	r6, [r4, #28]
 8006494:	d323      	bcc.n	80064de <ai_platform_network_init+0x192>
 8006496:	b37f      	cbz	r7, 80064f8 <ai_platform_network_init+0x1ac>
 8006498:	46c4      	mov	ip, r8
 800649a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800649e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80064a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064a2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80064a6:	46b6      	mov	lr, r6
 80064a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80064ac:	e7bb      	b.n	8006426 <ai_platform_network_init+0xda>
 80064ae:	464a      	mov	r2, r9
 80064b0:	46ce      	mov	lr, r9
 80064b2:	464d      	mov	r5, r9
 80064b4:	e7d7      	b.n	8006466 <ai_platform_network_init+0x11a>
 80064b6:	b30f      	cbz	r7, 80064fc <ai_platform_network_init+0x1b0>
 80064b8:	2701      	movs	r7, #1
 80064ba:	e7d7      	b.n	800646c <ai_platform_network_init+0x120>
 80064bc:	2212      	movs	r2, #18
 80064be:	2116      	movs	r1, #22
 80064c0:	f104 0010 	add.w	r0, r4, #16
 80064c4:	f000 fe6e 	bl	80071a4 <core_set_error>
 80064c8:	2600      	movs	r6, #0
 80064ca:	e78c      	b.n	80063e6 <ai_platform_network_init+0x9a>
 80064cc:	f1b9 0f00 	cmp.w	r9, #0
 80064d0:	d0cd      	beq.n	800646e <ai_platform_network_init+0x122>
 80064d2:	2110      	movs	r1, #16
 80064d4:	2212      	movs	r2, #18
 80064d6:	1860      	adds	r0, r4, r1
 80064d8:	f000 fe64 	bl	80071a4 <core_set_error>
 80064dc:	e783      	b.n	80063e6 <ai_platform_network_init+0x9a>
 80064de:	2213      	movs	r2, #19
 80064e0:	2116      	movs	r1, #22
 80064e2:	f104 0010 	add.w	r0, r4, #16
 80064e6:	f000 fe5d 	bl	80071a4 <core_set_error>
 80064ea:	e77c      	b.n	80063e6 <ai_platform_network_init+0x9a>
 80064ec:	2110      	movs	r1, #16
 80064ee:	2211      	movs	r2, #17
 80064f0:	1860      	adds	r0, r4, r1
 80064f2:	f000 fe57 	bl	80071a4 <core_set_error>
 80064f6:	e776      	b.n	80063e6 <ai_platform_network_init+0x9a>
 80064f8:	46be      	mov	lr, r7
 80064fa:	e794      	b.n	8006426 <ai_platform_network_init+0xda>
 80064fc:	2110      	movs	r1, #16
 80064fe:	2213      	movs	r2, #19
 8006500:	1860      	adds	r0, r4, r1
 8006502:	f000 fe4f 	bl	80071a4 <core_set_error>
 8006506:	463e      	mov	r6, r7
 8006508:	e76d      	b.n	80063e6 <ai_platform_network_init+0x9a>
 800650a:	bf00      	nop
 800650c:	a1c00100 	.word	0xa1c00100
 8006510:	e0042000 	.word	0xe0042000
 8006514:	58024000 	.word	0x58024000
 8006518:	f407a5c2 	.word	0xf407a5c2
 800651c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006520:	40023000 	.word	0x40023000
 8006524:	a1facade 	.word	0xa1facade

08006528 <ai_platform_network_post_init>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	b1f0      	cbz	r0, 800656a <ai_platform_network_post_init+0x42>
 800652c:	4b3c      	ldr	r3, [pc, #240]	; (8006620 <ai_platform_network_post_init+0xf8>)
 800652e:	6802      	ldr	r2, [r0, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	4604      	mov	r4, r0
 8006534:	d119      	bne.n	800656a <ai_platform_network_post_init+0x42>
 8006536:	f7ff f87b 	bl	8005630 <_ai_platform_acquire_crc>
 800653a:	4b3a      	ldr	r3, [pc, #232]	; (8006624 <ai_platform_network_post_init+0xfc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006546:	d03b      	beq.n	80065c0 <ai_platform_network_post_init+0x98>
 8006548:	4a37      	ldr	r2, [pc, #220]	; (8006628 <ai_platform_network_post_init+0x100>)
 800654a:	2301      	movs	r3, #1
 800654c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006550:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1fb      	bne.n	8006550 <ai_platform_network_post_init+0x28>
 8006558:	4b34      	ldr	r3, [pc, #208]	; (800662c <ai_platform_network_post_init+0x104>)
 800655a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800655e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006562:	4b33      	ldr	r3, [pc, #204]	; (8006630 <ai_platform_network_post_init+0x108>)
 8006564:	429a      	cmp	r2, r3
 8006566:	d037      	beq.n	80065d8 <ai_platform_network_post_init+0xb0>
 8006568:	e7fe      	b.n	8006568 <ai_platform_network_post_init+0x40>
 800656a:	f7ff f861 	bl	8005630 <_ai_platform_acquire_crc>
 800656e:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <ai_platform_network_post_init+0xfc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657a:	d010      	beq.n	800659e <ai_platform_network_post_init+0x76>
 800657c:	4a2a      	ldr	r2, [pc, #168]	; (8006628 <ai_platform_network_post_init+0x100>)
 800657e:	2301      	movs	r3, #1
 8006580:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006584:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1fb      	bne.n	8006584 <ai_platform_network_post_init+0x5c>
 800658c:	4b27      	ldr	r3, [pc, #156]	; (800662c <ai_platform_network_post_init+0x104>)
 800658e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006592:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <ai_platform_network_post_init+0x108>)
 8006598:	429a      	cmp	r2, r3
 800659a:	d00d      	beq.n	80065b8 <ai_platform_network_post_init+0x90>
 800659c:	e7fe      	b.n	800659c <ai_platform_network_post_init+0x74>
 800659e:	4a25      	ldr	r2, [pc, #148]	; (8006634 <ai_platform_network_post_init+0x10c>)
 80065a0:	2301      	movs	r3, #1
 80065a2:	6093      	str	r3, [r2, #8]
 80065a4:	6893      	ldr	r3, [r2, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1fc      	bne.n	80065a4 <ai_platform_network_post_init+0x7c>
 80065aa:	4b20      	ldr	r3, [pc, #128]	; (800662c <ai_platform_network_post_init+0x104>)
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	4b1f      	ldr	r3, [pc, #124]	; (8006630 <ai_platform_network_post_init+0x108>)
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d000      	beq.n	80065b8 <ai_platform_network_post_init+0x90>
 80065b6:	e7fe      	b.n	80065b6 <ai_platform_network_post_init+0x8e>
 80065b8:	f7ff f83c 	bl	8005634 <_ai_platform_release_crc>
 80065bc:	2000      	movs	r0, #0
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <ai_platform_network_post_init+0x10c>)
 80065c2:	2301      	movs	r3, #1
 80065c4:	6093      	str	r3, [r2, #8]
 80065c6:	6893      	ldr	r3, [r2, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1fc      	bne.n	80065c6 <ai_platform_network_post_init+0x9e>
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <ai_platform_network_post_init+0x104>)
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	4b17      	ldr	r3, [pc, #92]	; (8006630 <ai_platform_network_post_init+0x108>)
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d11a      	bne.n	800660e <ai_platform_network_post_init+0xe6>
 80065d8:	f7ff f82c 	bl	8005634 <_ai_platform_release_crc>
 80065dc:	68e3      	ldr	r3, [r4, #12]
 80065de:	f013 0502 	ands.w	r5, r3, #2
 80065e2:	d015      	beq.n	8006610 <ai_platform_network_post_init+0xe8>
 80065e4:	4620      	mov	r0, r4
 80065e6:	f001 fdd1 	bl	800818c <ai_layers_post_init_all>
 80065ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80065ec:	b16b      	cbz	r3, 800660a <ai_platform_network_post_init+0xe2>
 80065ee:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80065f0:	e007      	b.n	8006602 <ai_platform_network_post_init+0xda>
 80065f2:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80065f6:	4798      	blx	r3
 80065f8:	692b      	ldr	r3, [r5, #16]
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	d005      	beq.n	800660a <ai_platform_network_post_init+0xe2>
 80065fe:	b123      	cbz	r3, 800660a <ai_platform_network_post_init+0xe2>
 8006600:	461d      	mov	r5, r3
 8006602:	4629      	mov	r1, r5
 8006604:	2000      	movs	r0, #0
 8006606:	2d00      	cmp	r5, #0
 8006608:	d1f3      	bne.n	80065f2 <ai_platform_network_post_init+0xca>
 800660a:	2001      	movs	r0, #1
 800660c:	bd38      	pop	{r3, r4, r5, pc}
 800660e:	e7fe      	b.n	800660e <ai_platform_network_post_init+0xe6>
 8006610:	2210      	movs	r2, #16
 8006612:	2111      	movs	r1, #17
 8006614:	18a0      	adds	r0, r4, r2
 8006616:	f000 fdc5 	bl	80071a4 <core_set_error>
 800661a:	4628      	mov	r0, r5
 800661c:	bd38      	pop	{r3, r4, r5, pc}
 800661e:	bf00      	nop
 8006620:	a1c00100 	.word	0xa1c00100
 8006624:	e0042000 	.word	0xe0042000
 8006628:	58024000 	.word	0x58024000
 800662c:	f407a5c2 	.word	0xf407a5c2
 8006630:	b5e8b5cd 	.word	0xb5e8b5cd
 8006634:	40023000 	.word	0x40023000

08006638 <ai_platform_network_process>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	460e      	mov	r6, r1
 800663e:	b085      	sub	sp, #20
 8006640:	4693      	mov	fp, r2
 8006642:	4605      	mov	r5, r0
 8006644:	b120      	cbz	r0, 8006650 <ai_platform_network_process+0x18>
 8006646:	4bb8      	ldr	r3, [pc, #736]	; (8006928 <ai_platform_network_process+0x2f0>)
 8006648:	6802      	ldr	r2, [r0, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	bf18      	it	ne
 800664e:	2500      	movne	r5, #0
 8006650:	f7fe ffee 	bl	8005630 <_ai_platform_acquire_crc>
 8006654:	4bb5      	ldr	r3, [pc, #724]	; (800692c <ai_platform_network_process+0x2f4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006660:	d010      	beq.n	8006684 <ai_platform_network_process+0x4c>
 8006662:	4ab3      	ldr	r2, [pc, #716]	; (8006930 <ai_platform_network_process+0x2f8>)
 8006664:	2301      	movs	r3, #1
 8006666:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800666a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1fb      	bne.n	800666a <ai_platform_network_process+0x32>
 8006672:	4bb0      	ldr	r3, [pc, #704]	; (8006934 <ai_platform_network_process+0x2fc>)
 8006674:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006678:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800667c:	4bae      	ldr	r3, [pc, #696]	; (8006938 <ai_platform_network_process+0x300>)
 800667e:	429a      	cmp	r2, r3
 8006680:	d00d      	beq.n	800669e <ai_platform_network_process+0x66>
 8006682:	e7fe      	b.n	8006682 <ai_platform_network_process+0x4a>
 8006684:	4aad      	ldr	r2, [pc, #692]	; (800693c <ai_platform_network_process+0x304>)
 8006686:	2301      	movs	r3, #1
 8006688:	6093      	str	r3, [r2, #8]
 800668a:	6893      	ldr	r3, [r2, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1fc      	bne.n	800668a <ai_platform_network_process+0x52>
 8006690:	4ba8      	ldr	r3, [pc, #672]	; (8006934 <ai_platform_network_process+0x2fc>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	4ba8      	ldr	r3, [pc, #672]	; (8006938 <ai_platform_network_process+0x300>)
 8006698:	429a      	cmp	r2, r3
 800669a:	f040 812c 	bne.w	80068f6 <ai_platform_network_process+0x2be>
 800669e:	f7fe ffc9 	bl	8005634 <_ai_platform_release_crc>
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	f000 8154 	beq.w	8006950 <ai_platform_network_process+0x318>
 80066a8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8124 	beq.w	80068f8 <ai_platform_network_process+0x2c0>
 80066b0:	68eb      	ldr	r3, [r5, #12]
 80066b2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	2700      	movs	r7, #0
 80066bc:	2b03      	cmp	r3, #3
 80066be:	616f      	str	r7, [r5, #20]
 80066c0:	f040 813e 	bne.w	8006940 <ai_platform_network_process+0x308>
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	f000 811d 	beq.w	8006904 <ai_platform_network_process+0x2cc>
 80066ca:	f1ba 0f00 	cmp.w	sl, #0
 80066ce:	f000 8119 	beq.w	8006904 <ai_platform_network_process+0x2cc>
 80066d2:	f8ba 3000 	ldrh.w	r3, [sl]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 8114 	beq.w	8006904 <ai_platform_network_process+0x2cc>
 80066dc:	69b3      	ldr	r3, [r6, #24]
 80066de:	f8cd b00c 	str.w	fp, [sp, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80066e8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d072      	beq.n	80067d6 <ai_platform_network_process+0x19e>
 80066f0:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80066f4:	2c00      	cmp	r4, #0
 80066f6:	d06e      	beq.n	80067d6 <ai_platform_network_process+0x19e>
 80066f8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80066fc:	f8d3 9000 	ldr.w	r9, [r3]
 8006700:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8006704:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006708:	f000 81e0 	beq.w	8006acc <ai_platform_network_process+0x494>
 800670c:	69a3      	ldr	r3, [r4, #24]
 800670e:	2101      	movs	r1, #1
 8006710:	4630      	mov	r0, r6
 8006712:	685d      	ldr	r5, [r3, #4]
 8006714:	f7fe feaa 	bl	800546c <ai_buffer_get_size>
 8006718:	4285      	cmp	r5, r0
 800671a:	f0c0 811b 	bcc.w	8006954 <ai_platform_network_process+0x31c>
 800671e:	68e0      	ldr	r0, [r4, #12]
 8006720:	69b1      	ldr	r1, [r6, #24]
 8006722:	68c2      	ldr	r2, [r0, #12]
 8006724:	68cb      	ldr	r3, [r1, #12]
 8006726:	429a      	cmp	r2, r3
 8006728:	f040 8114 	bne.w	8006954 <ai_platform_network_process+0x31c>
 800672c:	6882      	ldr	r2, [r0, #8]
 800672e:	688b      	ldr	r3, [r1, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	f040 810f 	bne.w	8006954 <ai_platform_network_process+0x31c>
 8006736:	6842      	ldr	r2, [r0, #4]
 8006738:	684b      	ldr	r3, [r1, #4]
 800673a:	429a      	cmp	r2, r3
 800673c:	f040 810a 	bne.w	8006954 <ai_platform_network_process+0x31c>
 8006740:	69a3      	ldr	r3, [r4, #24]
 8006742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006746:	f006 fbe3 	bl	800cf10 <ai_array_get_data_byte_size>
 800674a:	4605      	mov	r5, r0
 800674c:	4620      	mov	r0, r4
 800674e:	f006 fb33 	bl	800cdb8 <get_tensor_byte_size>
 8006752:	4285      	cmp	r5, r0
 8006754:	f0c0 80fe 	bcc.w	8006954 <ai_platform_network_process+0x31c>
 8006758:	69a3      	ldr	r3, [r4, #24]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	f006 fb44 	bl	800cde8 <ai_array_to_buffer_fmt>
 8006760:	6833      	ldr	r3, [r6, #0]
 8006762:	4058      	eors	r0, r3
 8006764:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006768:	f040 81bb 	bne.w	8006ae2 <ai_platform_network_process+0x4aa>
 800676c:	6873      	ldr	r3, [r6, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 81ae 	beq.w	8006ad0 <ai_platform_network_process+0x498>
 8006774:	69b3      	ldr	r3, [r6, #24]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 819e 	beq.w	8006aba <ai_platform_network_process+0x482>
 800677e:	9a01      	ldr	r2, [sp, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	bf38      	it	cc
 8006784:	461a      	movcc	r2, r3
 8006786:	4620      	mov	r0, r4
 8006788:	9201      	str	r2, [sp, #4]
 800678a:	f006 fb15 	bl	800cdb8 <get_tensor_byte_size>
 800678e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006792:	69b3      	ldr	r3, [r6, #24]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	fb00 f303 	mul.w	r3, r0, r3
 800679a:	f8c8 300c 	str.w	r3, [r8, #12]
 800679e:	6871      	ldr	r1, [r6, #4]
 80067a0:	f8c8 1004 	str.w	r1, [r8, #4]
 80067a4:	440b      	add	r3, r1
 80067a6:	f849 300b 	str.w	r3, [r9, fp]
 80067aa:	69a0      	ldr	r0, [r4, #24]
 80067ac:	6803      	ldr	r3, [r0, #0]
 80067ae:	009a      	lsls	r2, r3, #2
 80067b0:	f107 0701 	add.w	r7, r7, #1
 80067b4:	f106 061c 	add.w	r6, r6, #28
 80067b8:	f100 80af 	bmi.w	800691a <ai_platform_network_process+0x2e2>
 80067bc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	4419      	add	r1, r3
 80067c4:	6081      	str	r1, [r0, #8]
 80067c6:	69a3      	ldr	r3, [r4, #24]
 80067c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	f8ba 3000 	ldrh.w	r3, [sl]
 80067d2:	42bb      	cmp	r3, r7
 80067d4:	d888      	bhi.n	80066e8 <ai_platform_network_process+0xb0>
 80067d6:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80067da:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80067dc:	f1bb 0f00 	cmp.w	fp, #0
 80067e0:	f000 8188 	beq.w	8006af4 <ai_platform_network_process+0x4bc>
 80067e4:	2a01      	cmp	r2, #1
 80067e6:	f240 8160 	bls.w	8006aaa <ai_platform_network_process+0x472>
 80067ea:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80067ee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 8159 	beq.w	8006aaa <ai_platform_network_process+0x472>
 80067f8:	465e      	mov	r6, fp
 80067fa:	2700      	movs	r7, #0
 80067fc:	462c      	mov	r4, r5
 80067fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80b4 	beq.w	8006970 <ai_platform_network_process+0x338>
 8006808:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800680c:	2d00      	cmp	r5, #0
 800680e:	f000 80af 	beq.w	8006970 <ai_platform_network_process+0x338>
 8006812:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006816:	f8d3 8000 	ldr.w	r8, [r3]
 800681a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800681e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006822:	f000 8173 	beq.w	8006b0c <ai_platform_network_process+0x4d4>
 8006826:	69ab      	ldr	r3, [r5, #24]
 8006828:	2101      	movs	r1, #1
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	9302      	str	r3, [sp, #8]
 800682e:	4630      	mov	r0, r6
 8006830:	f7fe fe1c 	bl	800546c <ai_buffer_get_size>
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	4283      	cmp	r3, r0
 8006838:	f0c0 8136 	bcc.w	8006aa8 <ai_platform_network_process+0x470>
 800683c:	68e8      	ldr	r0, [r5, #12]
 800683e:	69b1      	ldr	r1, [r6, #24]
 8006840:	68c2      	ldr	r2, [r0, #12]
 8006842:	68cb      	ldr	r3, [r1, #12]
 8006844:	429a      	cmp	r2, r3
 8006846:	f040 812f 	bne.w	8006aa8 <ai_platform_network_process+0x470>
 800684a:	6882      	ldr	r2, [r0, #8]
 800684c:	688b      	ldr	r3, [r1, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	f040 812a 	bne.w	8006aa8 <ai_platform_network_process+0x470>
 8006854:	6842      	ldr	r2, [r0, #4]
 8006856:	684b      	ldr	r3, [r1, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	f040 8125 	bne.w	8006aa8 <ai_platform_network_process+0x470>
 800685e:	69ab      	ldr	r3, [r5, #24]
 8006860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006864:	f006 fb54 	bl	800cf10 <ai_array_get_data_byte_size>
 8006868:	9002      	str	r0, [sp, #8]
 800686a:	4628      	mov	r0, r5
 800686c:	f006 faa4 	bl	800cdb8 <get_tensor_byte_size>
 8006870:	9b02      	ldr	r3, [sp, #8]
 8006872:	4283      	cmp	r3, r0
 8006874:	f0c0 8118 	bcc.w	8006aa8 <ai_platform_network_process+0x470>
 8006878:	69ab      	ldr	r3, [r5, #24]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	f006 fab4 	bl	800cde8 <ai_array_to_buffer_fmt>
 8006880:	6833      	ldr	r3, [r6, #0]
 8006882:	4058      	eors	r0, r3
 8006884:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006888:	f040 8138 	bne.w	8006afc <ai_platform_network_process+0x4c4>
 800688c:	6873      	ldr	r3, [r6, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 814f 	beq.w	8006b32 <ai_platform_network_process+0x4fa>
 8006894:	69b3      	ldr	r3, [r6, #24]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8141 	beq.w	8006b20 <ai_platform_network_process+0x4e8>
 800689e:	9a01      	ldr	r2, [sp, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	bf38      	it	cc
 80068a4:	461a      	movcc	r2, r3
 80068a6:	4628      	mov	r0, r5
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	f006 fa85 	bl	800cdb8 <get_tensor_byte_size>
 80068ae:	f8ca 0008 	str.w	r0, [sl, #8]
 80068b2:	69b3      	ldr	r3, [r6, #24]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	fb00 f303 	mul.w	r3, r0, r3
 80068ba:	f8ca 300c 	str.w	r3, [sl, #12]
 80068be:	6871      	ldr	r1, [r6, #4]
 80068c0:	f8ca 1004 	str.w	r1, [sl, #4]
 80068c4:	440b      	add	r3, r1
 80068c6:	f848 300b 	str.w	r3, [r8, fp]
 80068ca:	69a8      	ldr	r0, [r5, #24]
 80068cc:	6803      	ldr	r3, [r0, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	f107 0701 	add.w	r7, r7, #1
 80068d4:	f106 061c 	add.w	r6, r6, #28
 80068d8:	d445      	bmi.n	8006966 <ai_platform_network_process+0x32e>
 80068da:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	4419      	add	r1, r3
 80068e2:	6081      	str	r1, [r0, #8]
 80068e4:	69ab      	ldr	r3, [r5, #24]
 80068e6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80068f0:	429f      	cmp	r7, r3
 80068f2:	d384      	bcc.n	80067fe <ai_platform_network_process+0x1c6>
 80068f4:	e03c      	b.n	8006970 <ai_platform_network_process+0x338>
 80068f6:	e7fe      	b.n	80068f6 <ai_platform_network_process+0x2be>
 80068f8:	68ea      	ldr	r2, [r5, #12]
 80068fa:	616b      	str	r3, [r5, #20]
 80068fc:	f002 0203 	and.w	r2, r2, #3
 8006900:	2a03      	cmp	r2, #3
 8006902:	d11d      	bne.n	8006940 <ai_platform_network_process+0x308>
 8006904:	2217      	movs	r2, #23
 8006906:	2112      	movs	r1, #18
 8006908:	f105 0010 	add.w	r0, r5, #16
 800690c:	f000 fc4a 	bl	80071a4 <core_set_error>
 8006910:	2400      	movs	r4, #0
 8006912:	4620      	mov	r0, r4
 8006914:	b005      	add	sp, #20
 8006916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691a:	f8ba 3000 	ldrh.w	r3, [sl]
 800691e:	429f      	cmp	r7, r3
 8006920:	f4ff aee2 	bcc.w	80066e8 <ai_platform_network_process+0xb0>
 8006924:	e757      	b.n	80067d6 <ai_platform_network_process+0x19e>
 8006926:	bf00      	nop
 8006928:	a1c00100 	.word	0xa1c00100
 800692c:	e0042000 	.word	0xe0042000
 8006930:	58024000 	.word	0x58024000
 8006934:	f407a5c2 	.word	0xf407a5c2
 8006938:	b5e8b5cd 	.word	0xb5e8b5cd
 800693c:	40023000 	.word	0x40023000
 8006940:	2230      	movs	r2, #48	; 0x30
 8006942:	2111      	movs	r1, #17
 8006944:	f105 0010 	add.w	r0, r5, #16
 8006948:	f000 fc2c 	bl	80071a4 <core_set_error>
 800694c:	2400      	movs	r4, #0
 800694e:	e7e0      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006950:	462c      	mov	r4, r5
 8006952:	e7de      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006954:	9d02      	ldr	r5, [sp, #8]
 8006956:	2218      	movs	r2, #24
 8006958:	2112      	movs	r1, #18
 800695a:	f105 0010 	add.w	r0, r5, #16
 800695e:	f000 fc21 	bl	80071a4 <core_set_error>
 8006962:	2400      	movs	r4, #0
 8006964:	e7d5      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006966:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800696a:	429f      	cmp	r7, r3
 800696c:	f4ff af47 	bcc.w	80067fe <ai_platform_network_process+0x1c6>
 8006970:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006974:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006976:	82a3      	strh	r3, [r4, #20]
 8006978:	4625      	mov	r5, r4
 800697a:	2a00      	cmp	r2, #0
 800697c:	f040 808e 	bne.w	8006a9c <ai_platform_network_process+0x464>
 8006980:	4616      	mov	r6, r2
 8006982:	4617      	mov	r7, r2
 8006984:	8aec      	ldrh	r4, [r5, #22]
 8006986:	429c      	cmp	r4, r3
 8006988:	bf38      	it	cc
 800698a:	46ab      	movcc	fp, r5
 800698c:	d2c1      	bcs.n	8006912 <ai_platform_network_process+0x2da>
 800698e:	2e00      	cmp	r6, #0
 8006990:	d030      	beq.n	80069f4 <ai_platform_network_process+0x3bc>
 8006992:	f04f 0800 	mov.w	r8, #0
 8006996:	e014      	b.n	80069c2 <ai_platform_network_process+0x38a>
 8006998:	6882      	ldr	r2, [r0, #8]
 800699a:	68c5      	ldr	r5, [r0, #12]
 800699c:	6863      	ldr	r3, [r4, #4]
 800699e:	1b52      	subs	r2, r2, r5
 80069a0:	4413      	add	r3, r2
 80069a2:	6083      	str	r3, [r0, #8]
 80069a4:	698b      	ldr	r3, [r1, #24]
 80069a6:	6862      	ldr	r2, [r4, #4]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80069ae:	f859 200a 	ldr.w	r2, [r9, sl]
 80069b2:	440b      	add	r3, r1
 80069b4:	4293      	cmp	r3, r2
 80069b6:	bf24      	itt	cs
 80069b8:	68e3      	ldrcs	r3, [r4, #12]
 80069ba:	1ad3      	subcs	r3, r2, r3
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	8833      	ldrh	r3, [r6, #0]
 80069c4:	4543      	cmp	r3, r8
 80069c6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80069ca:	d913      	bls.n	80069f4 <ai_platform_network_process+0x3bc>
 80069cc:	6873      	ldr	r3, [r6, #4]
 80069ce:	b18b      	cbz	r3, 80069f4 <ai_platform_network_process+0x3bc>
 80069d0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80069d4:	b171      	cbz	r1, 80069f4 <ai_platform_network_process+0x3bc>
 80069d6:	6988      	ldr	r0, [r1, #24]
 80069d8:	68b2      	ldr	r2, [r6, #8]
 80069da:	6803      	ldr	r3, [r0, #0]
 80069dc:	f8d2 9000 	ldr.w	r9, [r2]
 80069e0:	009d      	lsls	r5, r3, #2
 80069e2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80069e6:	d5d7      	bpl.n	8006998 <ai_platform_network_process+0x360>
 80069e8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80069ec:	6880      	ldr	r0, [r0, #8]
 80069ee:	f006 fca9 	bl	800d344 <memcpy>
 80069f2:	e7da      	b.n	80069aa <ai_platform_network_process+0x372>
 80069f4:	4658      	mov	r0, fp
 80069f6:	f001 fbdd 	bl	80081b4 <ai_layers_forward_all>
 80069fa:	2f00      	cmp	r7, #0
 80069fc:	d03f      	beq.n	8006a7e <ai_platform_network_process+0x446>
 80069fe:	2400      	movs	r4, #0
 8006a00:	e016      	b.n	8006a30 <ai_platform_network_process+0x3f8>
 8006a02:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006a06:	f859 100a 	ldr.w	r1, [r9, sl]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	bf24      	itt	cs
 8006a10:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006a14:	1acb      	subcs	r3, r1, r3
 8006a16:	f8c8 3004 	str.w	r3, [r8, #4]
 8006a1a:	6981      	ldr	r1, [r0, #24]
 8006a1c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006a20:	1b52      	subs	r2, r2, r5
 8006a22:	4413      	add	r3, r2
 8006a24:	608b      	str	r3, [r1, #8]
 8006a26:	6983      	ldr	r3, [r0, #24]
 8006a28:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006a2c:	60da      	str	r2, [r3, #12]
 8006a2e:	3401      	adds	r4, #1
 8006a30:	883b      	ldrh	r3, [r7, #0]
 8006a32:	42a3      	cmp	r3, r4
 8006a34:	d923      	bls.n	8006a7e <ai_platform_network_process+0x446>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	b30b      	cbz	r3, 8006a7e <ai_platform_network_process+0x446>
 8006a3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006a3e:	b1f0      	cbz	r0, 8006a7e <ai_platform_network_process+0x446>
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	6983      	ldr	r3, [r0, #24]
 8006a44:	f8d2 9000 	ldr.w	r9, [r2]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	0092      	lsls	r2, r2, #2
 8006a4c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8006a50:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006a54:	d5d5      	bpl.n	8006a02 <ai_platform_network_process+0x3ca>
 8006a56:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006a5a:	6899      	ldr	r1, [r3, #8]
 8006a5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006a60:	f006 fc70 	bl	800d344 <memcpy>
 8006a64:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006a68:	f859 200a 	ldr.w	r2, [r9, sl]
 8006a6c:	440b      	add	r3, r1
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	bf24      	itt	cs
 8006a72:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006a76:	1ad3      	subcs	r3, r2, r3
 8006a78:	f8c8 3004 	str.w	r3, [r8, #4]
 8006a7c:	e7d7      	b.n	8006a2e <ai_platform_network_process+0x3f6>
 8006a7e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8006a82:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006a86:	3401      	adds	r4, #1
 8006a88:	b2a4      	uxth	r4, r4
 8006a8a:	42a3      	cmp	r3, r4
 8006a8c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8006a90:	f63f af7d 	bhi.w	800698e <ai_platform_network_process+0x356>
 8006a94:	4620      	mov	r0, r4
 8006a96:	b005      	add	sp, #20
 8006a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9c:	2a01      	cmp	r2, #1
 8006a9e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8006aa0:	d03c      	beq.n	8006b1c <ai_platform_network_process+0x4e4>
 8006aa2:	f106 070c 	add.w	r7, r6, #12
 8006aa6:	e76d      	b.n	8006984 <ai_platform_network_process+0x34c>
 8006aa8:	4625      	mov	r5, r4
 8006aaa:	2218      	movs	r2, #24
 8006aac:	2113      	movs	r1, #19
 8006aae:	f105 0010 	add.w	r0, r5, #16
 8006ab2:	f000 fb77 	bl	80071a4 <core_set_error>
 8006ab6:	2400      	movs	r4, #0
 8006ab8:	e72b      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006aba:	9d02      	ldr	r5, [sp, #8]
 8006abc:	4604      	mov	r4, r0
 8006abe:	2221      	movs	r2, #33	; 0x21
 8006ac0:	2112      	movs	r1, #18
 8006ac2:	f105 0010 	add.w	r0, r5, #16
 8006ac6:	f000 fb6d 	bl	80071a4 <core_set_error>
 8006aca:	e722      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006acc:	9d02      	ldr	r5, [sp, #8]
 8006ace:	e719      	b.n	8006904 <ai_platform_network_process+0x2cc>
 8006ad0:	9d02      	ldr	r5, [sp, #8]
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	2217      	movs	r2, #23
 8006ad6:	2112      	movs	r1, #18
 8006ad8:	f105 0010 	add.w	r0, r5, #16
 8006adc:	f000 fb62 	bl	80071a4 <core_set_error>
 8006ae0:	e717      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006ae2:	9d02      	ldr	r5, [sp, #8]
 8006ae4:	2219      	movs	r2, #25
 8006ae6:	2112      	movs	r1, #18
 8006ae8:	f105 0010 	add.w	r0, r5, #16
 8006aec:	f000 fb5a 	bl	80071a4 <core_set_error>
 8006af0:	2400      	movs	r4, #0
 8006af2:	e70e      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006af4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006af8:	82ab      	strh	r3, [r5, #20]
 8006afa:	e73e      	b.n	800697a <ai_platform_network_process+0x342>
 8006afc:	f104 0010 	add.w	r0, r4, #16
 8006b00:	2219      	movs	r2, #25
 8006b02:	2113      	movs	r1, #19
 8006b04:	f000 fb4e 	bl	80071a4 <core_set_error>
 8006b08:	2400      	movs	r4, #0
 8006b0a:	e702      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006b0c:	f104 0010 	add.w	r0, r4, #16
 8006b10:	2217      	movs	r2, #23
 8006b12:	2113      	movs	r1, #19
 8006b14:	f000 fb46 	bl	80071a4 <core_set_error>
 8006b18:	4654      	mov	r4, sl
 8006b1a:	e6fa      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006b1c:	2700      	movs	r7, #0
 8006b1e:	e731      	b.n	8006984 <ai_platform_network_process+0x34c>
 8006b20:	4625      	mov	r5, r4
 8006b22:	2221      	movs	r2, #33	; 0x21
 8006b24:	4604      	mov	r4, r0
 8006b26:	2113      	movs	r1, #19
 8006b28:	f105 0010 	add.w	r0, r5, #16
 8006b2c:	f000 fb3a 	bl	80071a4 <core_set_error>
 8006b30:	e6ef      	b.n	8006912 <ai_platform_network_process+0x2da>
 8006b32:	4625      	mov	r5, r4
 8006b34:	2217      	movs	r2, #23
 8006b36:	4604      	mov	r4, r0
 8006b38:	2113      	movs	r1, #19
 8006b3a:	f105 0010 	add.w	r0, r5, #16
 8006b3e:	f000 fb31 	bl	80071a4 <core_set_error>
 8006b42:	e6e6      	b.n	8006912 <ai_platform_network_process+0x2da>

08006b44 <ai_platform_observer_node_info>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	b1f8      	cbz	r0, 8006b88 <ai_platform_observer_node_info+0x44>
 8006b48:	4b4f      	ldr	r3, [pc, #316]	; (8006c88 <ai_platform_observer_node_info+0x144>)
 8006b4a:	6802      	ldr	r2, [r0, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	4604      	mov	r4, r0
 8006b50:	d11a      	bne.n	8006b88 <ai_platform_observer_node_info+0x44>
 8006b52:	460d      	mov	r5, r1
 8006b54:	f7fe fd6c 	bl	8005630 <_ai_platform_acquire_crc>
 8006b58:	4b4c      	ldr	r3, [pc, #304]	; (8006c8c <ai_platform_observer_node_info+0x148>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b64:	d03b      	beq.n	8006bde <ai_platform_observer_node_info+0x9a>
 8006b66:	4a4a      	ldr	r2, [pc, #296]	; (8006c90 <ai_platform_observer_node_info+0x14c>)
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b6e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1fb      	bne.n	8006b6e <ai_platform_observer_node_info+0x2a>
 8006b76:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <ai_platform_observer_node_info+0x150>)
 8006b78:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006b7c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b80:	4b45      	ldr	r3, [pc, #276]	; (8006c98 <ai_platform_observer_node_info+0x154>)
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d037      	beq.n	8006bf6 <ai_platform_observer_node_info+0xb2>
 8006b86:	e7fe      	b.n	8006b86 <ai_platform_observer_node_info+0x42>
 8006b88:	f7fe fd52 	bl	8005630 <_ai_platform_acquire_crc>
 8006b8c:	4b3f      	ldr	r3, [pc, #252]	; (8006c8c <ai_platform_observer_node_info+0x148>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b98:	d010      	beq.n	8006bbc <ai_platform_observer_node_info+0x78>
 8006b9a:	4a3d      	ldr	r2, [pc, #244]	; (8006c90 <ai_platform_observer_node_info+0x14c>)
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006ba2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1fb      	bne.n	8006ba2 <ai_platform_observer_node_info+0x5e>
 8006baa:	4b3a      	ldr	r3, [pc, #232]	; (8006c94 <ai_platform_observer_node_info+0x150>)
 8006bac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006bb0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006bb4:	4b38      	ldr	r3, [pc, #224]	; (8006c98 <ai_platform_observer_node_info+0x154>)
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d00d      	beq.n	8006bd6 <ai_platform_observer_node_info+0x92>
 8006bba:	e7fe      	b.n	8006bba <ai_platform_observer_node_info+0x76>
 8006bbc:	4a37      	ldr	r2, [pc, #220]	; (8006c9c <ai_platform_observer_node_info+0x158>)
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	6093      	str	r3, [r2, #8]
 8006bc2:	6893      	ldr	r3, [r2, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1fc      	bne.n	8006bc2 <ai_platform_observer_node_info+0x7e>
 8006bc8:	4b32      	ldr	r3, [pc, #200]	; (8006c94 <ai_platform_observer_node_info+0x150>)
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	4b32      	ldr	r3, [pc, #200]	; (8006c98 <ai_platform_observer_node_info+0x154>)
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d000      	beq.n	8006bd6 <ai_platform_observer_node_info+0x92>
 8006bd4:	e7fe      	b.n	8006bd4 <ai_platform_observer_node_info+0x90>
 8006bd6:	f7fe fd2d 	bl	8005634 <_ai_platform_release_crc>
 8006bda:	2000      	movs	r0, #0
 8006bdc:	bd70      	pop	{r4, r5, r6, pc}
 8006bde:	4a2f      	ldr	r2, [pc, #188]	; (8006c9c <ai_platform_observer_node_info+0x158>)
 8006be0:	2301      	movs	r3, #1
 8006be2:	6093      	str	r3, [r2, #8]
 8006be4:	6893      	ldr	r3, [r2, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1fc      	bne.n	8006be4 <ai_platform_observer_node_info+0xa0>
 8006bea:	4b2a      	ldr	r3, [pc, #168]	; (8006c94 <ai_platform_observer_node_info+0x150>)
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	6812      	ldr	r2, [r2, #0]
 8006bf0:	4b29      	ldr	r3, [pc, #164]	; (8006c98 <ai_platform_observer_node_info+0x154>)
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d11d      	bne.n	8006c32 <ai_platform_observer_node_info+0xee>
 8006bf6:	f7fe fd1d 	bl	8005634 <_ai_platform_release_crc>
 8006bfa:	b1dd      	cbz	r5, 8006c34 <ai_platform_observer_node_info+0xf0>
 8006bfc:	68e3      	ldr	r3, [r4, #12]
 8006bfe:	f013 0602 	ands.w	r6, r3, #2
 8006c02:	d03a      	beq.n	8006c7a <ai_platform_observer_node_info+0x136>
 8006c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c06:	2100      	movs	r1, #0
 8006c08:	e001      	b.n	8006c0e <ai_platform_observer_node_info+0xca>
 8006c0a:	b152      	cbz	r2, 8006c22 <ai_platform_observer_node_info+0xde>
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	b288      	uxth	r0, r1
 8006c10:	b13b      	cbz	r3, 8006c22 <ai_platform_observer_node_info+0xde>
 8006c12:	882a      	ldrh	r2, [r5, #0]
 8006c14:	4282      	cmp	r2, r0
 8006c16:	f101 0101 	add.w	r1, r1, #1
 8006c1a:	d012      	beq.n	8006c42 <ai_platform_observer_node_info+0xfe>
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d1f3      	bne.n	8006c0a <ai_platform_observer_node_info+0xc6>
 8006c22:	2214      	movs	r2, #20
 8006c24:	4611      	mov	r1, r2
 8006c26:	f104 0010 	add.w	r0, r4, #16
 8006c2a:	f000 fabb 	bl	80071a4 <core_set_error>
 8006c2e:	2000      	movs	r0, #0
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	e7fe      	b.n	8006c32 <ai_platform_observer_node_info+0xee>
 8006c34:	2210      	movs	r2, #16
 8006c36:	4611      	mov	r1, r2
 8006c38:	18a0      	adds	r0, r4, r2
 8006c3a:	f000 fab3 	bl	80071a4 <core_set_error>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	bd70      	pop	{r4, r5, r6, pc}
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	60ea      	str	r2, [r5, #12]
 8006c46:	8819      	ldrh	r1, [r3, #0]
 8006c48:	f240 120f 	movw	r2, #271	; 0x10f
 8006c4c:	4291      	cmp	r1, r2
 8006c4e:	d007      	beq.n	8006c60 <ai_platform_observer_node_info+0x11c>
 8006c50:	885a      	ldrh	r2, [r3, #2]
 8006c52:	80aa      	strh	r2, [r5, #4]
 8006c54:	881a      	ldrh	r2, [r3, #0]
 8006c56:	806a      	strh	r2, [r5, #2]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60ab      	str	r3, [r5, #8]
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	69da      	ldr	r2, [r3, #28]
 8006c62:	8853      	ldrh	r3, [r2, #2]
 8006c64:	80ab      	strh	r3, [r5, #4]
 8006c66:	8813      	ldrh	r3, [r2, #0]
 8006c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c70:	806b      	strh	r3, [r5, #2]
 8006c72:	6993      	ldr	r3, [r2, #24]
 8006c74:	60ab      	str	r3, [r5, #8]
 8006c76:	2001      	movs	r0, #1
 8006c78:	bd70      	pop	{r4, r5, r6, pc}
 8006c7a:	2210      	movs	r2, #16
 8006c7c:	2111      	movs	r1, #17
 8006c7e:	18a0      	adds	r0, r4, r2
 8006c80:	f000 fa90 	bl	80071a4 <core_set_error>
 8006c84:	4630      	mov	r0, r6
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	a1c00100 	.word	0xa1c00100
 8006c8c:	e0042000 	.word	0xe0042000
 8006c90:	58024000 	.word	0x58024000
 8006c94:	f407a5c2 	.word	0xf407a5c2
 8006c98:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c9c:	40023000 	.word	0x40023000

08006ca0 <ai_platform_observer_register>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	b308      	cbz	r0, 8006cea <ai_platform_observer_register+0x4a>
 8006ca6:	4691      	mov	r9, r2
 8006ca8:	461f      	mov	r7, r3
 8006caa:	6802      	ldr	r2, [r0, #0]
 8006cac:	4b45      	ldr	r3, [pc, #276]	; (8006dc4 <ai_platform_observer_register+0x124>)
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	d11a      	bne.n	8006cea <ai_platform_observer_register+0x4a>
 8006cb4:	4688      	mov	r8, r1
 8006cb6:	f7fe fcbb 	bl	8005630 <_ai_platform_acquire_crc>
 8006cba:	4b43      	ldr	r3, [pc, #268]	; (8006dc8 <ai_platform_observer_register+0x128>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc6:	d03c      	beq.n	8006d42 <ai_platform_observer_register+0xa2>
 8006cc8:	4e40      	ldr	r6, [pc, #256]	; (8006dcc <ai_platform_observer_register+0x12c>)
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f8c6 3c08 	str.w	r3, [r6, #3080]	; 0xc08
 8006cd0:	f8d6 4c08 	ldr.w	r4, [r6, #3080]	; 0xc08
 8006cd4:	2c00      	cmp	r4, #0
 8006cd6:	d1fb      	bne.n	8006cd0 <ai_platform_observer_register+0x30>
 8006cd8:	4b3d      	ldr	r3, [pc, #244]	; (8006dd0 <ai_platform_observer_register+0x130>)
 8006cda:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
 8006cde:	f8d6 2c00 	ldr.w	r2, [r6, #3072]	; 0xc00
 8006ce2:	4b3c      	ldr	r3, [pc, #240]	; (8006dd4 <ai_platform_observer_register+0x134>)
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d038      	beq.n	8006d5a <ai_platform_observer_register+0xba>
 8006ce8:	e7fe      	b.n	8006ce8 <ai_platform_observer_register+0x48>
 8006cea:	f7fe fca1 	bl	8005630 <_ai_platform_acquire_crc>
 8006cee:	4b36      	ldr	r3, [pc, #216]	; (8006dc8 <ai_platform_observer_register+0x128>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfa:	d010      	beq.n	8006d1e <ai_platform_observer_register+0x7e>
 8006cfc:	4a33      	ldr	r2, [pc, #204]	; (8006dcc <ai_platform_observer_register+0x12c>)
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1fb      	bne.n	8006d04 <ai_platform_observer_register+0x64>
 8006d0c:	4b30      	ldr	r3, [pc, #192]	; (8006dd0 <ai_platform_observer_register+0x130>)
 8006d0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d12:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d16:	4b2f      	ldr	r3, [pc, #188]	; (8006dd4 <ai_platform_observer_register+0x134>)
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d00d      	beq.n	8006d38 <ai_platform_observer_register+0x98>
 8006d1c:	e7fe      	b.n	8006d1c <ai_platform_observer_register+0x7c>
 8006d1e:	4a2e      	ldr	r2, [pc, #184]	; (8006dd8 <ai_platform_observer_register+0x138>)
 8006d20:	2301      	movs	r3, #1
 8006d22:	6093      	str	r3, [r2, #8]
 8006d24:	6893      	ldr	r3, [r2, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1fc      	bne.n	8006d24 <ai_platform_observer_register+0x84>
 8006d2a:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <ai_platform_observer_register+0x130>)
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	4b28      	ldr	r3, [pc, #160]	; (8006dd4 <ai_platform_observer_register+0x134>)
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d000      	beq.n	8006d38 <ai_platform_observer_register+0x98>
 8006d36:	e7fe      	b.n	8006d36 <ai_platform_observer_register+0x96>
 8006d38:	f7fe fc7c 	bl	8005634 <_ai_platform_release_crc>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d42:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <ai_platform_observer_register+0x138>)
 8006d44:	2301      	movs	r3, #1
 8006d46:	6093      	str	r3, [r2, #8]
 8006d48:	6893      	ldr	r3, [r2, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1fc      	bne.n	8006d48 <ai_platform_observer_register+0xa8>
 8006d4e:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <ai_platform_observer_register+0x130>)
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	6812      	ldr	r2, [r2, #0]
 8006d54:	4b1f      	ldr	r3, [pc, #124]	; (8006dd4 <ai_platform_observer_register+0x134>)
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d10b      	bne.n	8006d72 <ai_platform_observer_register+0xd2>
 8006d5a:	f7fe fc6b 	bl	8005634 <_ai_platform_release_crc>
 8006d5e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006d60:	b144      	cbz	r4, 8006d74 <ai_platform_observer_register+0xd4>
 8006d62:	2240      	movs	r2, #64	; 0x40
 8006d64:	2111      	movs	r1, #17
 8006d66:	f105 0010 	add.w	r0, r5, #16
 8006d6a:	f000 fa1b 	bl	80071a4 <core_set_error>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e7e5      	b.n	8006d3e <ai_platform_observer_register+0x9e>
 8006d72:	e7fe      	b.n	8006d72 <ai_platform_observer_register+0xd2>
 8006d74:	2014      	movs	r0, #20
 8006d76:	f000 f8a3 	bl	8006ec0 <core_mem_alloc>
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	b1d8      	cbz	r0, 8006db6 <ai_platform_observer_register+0x116>
 8006d7e:	81c4      	strh	r4, [r0, #14]
 8006d80:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006d82:	2101      	movs	r1, #1
 8006d84:	e006      	b.n	8006d94 <ai_platform_observer_register+0xf4>
 8006d86:	81f1      	strh	r1, [r6, #14]
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	b2a1      	uxth	r1, r4
 8006d8e:	d004      	beq.n	8006d9a <ai_platform_observer_register+0xfa>
 8006d90:	b11a      	cbz	r2, 8006d9a <ai_platform_observer_register+0xfa>
 8006d92:	4613      	mov	r3, r2
 8006d94:	1c4c      	adds	r4, r1, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f5      	bne.n	8006d86 <ai_platform_observer_register+0xe6>
 8006d9a:	4a10      	ldr	r2, [pc, #64]	; (8006ddc <ai_platform_observer_register+0x13c>)
 8006d9c:	f8c6 8000 	str.w	r8, [r6]
 8006da0:	b2fb      	uxtb	r3, r7
 8006da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da6:	2100      	movs	r1, #0
 8006da8:	e9c6 9301 	strd	r9, r3, [r6, #4]
 8006dac:	81b1      	strh	r1, [r6, #12]
 8006dae:	2001      	movs	r0, #1
 8006db0:	e9c5 260f 	strd	r2, r6, [r5, #60]	; 0x3c
 8006db4:	e7c3      	b.n	8006d3e <ai_platform_observer_register+0x9e>
 8006db6:	2210      	movs	r2, #16
 8006db8:	2131      	movs	r1, #49	; 0x31
 8006dba:	18a8      	adds	r0, r5, r2
 8006dbc:	f000 f9f2 	bl	80071a4 <core_set_error>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	e7bc      	b.n	8006d3e <ai_platform_observer_register+0x9e>
 8006dc4:	a1c00100 	.word	0xa1c00100
 8006dc8:	e0042000 	.word	0xe0042000
 8006dcc:	58024000 	.word	0x58024000
 8006dd0:	f407a5c2 	.word	0xf407a5c2
 8006dd4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006dd8:	40023000 	.word	0x40023000
 8006ddc:	08005519 	.word	0x08005519

08006de0 <ai_platform_observer_unregister>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	b1f0      	cbz	r0, 8006e22 <ai_platform_observer_unregister+0x42>
 8006de4:	4b30      	ldr	r3, [pc, #192]	; (8006ea8 <ai_platform_observer_unregister+0xc8>)
 8006de6:	6802      	ldr	r2, [r0, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	4604      	mov	r4, r0
 8006dec:	d119      	bne.n	8006e22 <ai_platform_observer_unregister+0x42>
 8006dee:	f7fe fc1f 	bl	8005630 <_ai_platform_acquire_crc>
 8006df2:	4b2e      	ldr	r3, [pc, #184]	; (8006eac <ai_platform_observer_unregister+0xcc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfe:	d03b      	beq.n	8006e78 <ai_platform_observer_unregister+0x98>
 8006e00:	4a2b      	ldr	r2, [pc, #172]	; (8006eb0 <ai_platform_observer_unregister+0xd0>)
 8006e02:	2301      	movs	r3, #1
 8006e04:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e08:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1fb      	bne.n	8006e08 <ai_platform_observer_unregister+0x28>
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <ai_platform_observer_unregister+0xd4>)
 8006e12:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e16:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e1a:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <ai_platform_observer_unregister+0xd8>)
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d037      	beq.n	8006e90 <ai_platform_observer_unregister+0xb0>
 8006e20:	e7fe      	b.n	8006e20 <ai_platform_observer_unregister+0x40>
 8006e22:	f7fe fc05 	bl	8005630 <_ai_platform_acquire_crc>
 8006e26:	4b21      	ldr	r3, [pc, #132]	; (8006eac <ai_platform_observer_unregister+0xcc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e32:	d010      	beq.n	8006e56 <ai_platform_observer_unregister+0x76>
 8006e34:	4a1e      	ldr	r2, [pc, #120]	; (8006eb0 <ai_platform_observer_unregister+0xd0>)
 8006e36:	2301      	movs	r3, #1
 8006e38:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e3c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1fb      	bne.n	8006e3c <ai_platform_observer_unregister+0x5c>
 8006e44:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <ai_platform_observer_unregister+0xd4>)
 8006e46:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e4a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <ai_platform_observer_unregister+0xd8>)
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d00d      	beq.n	8006e70 <ai_platform_observer_unregister+0x90>
 8006e54:	e7fe      	b.n	8006e54 <ai_platform_observer_unregister+0x74>
 8006e56:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <ai_platform_observer_unregister+0xdc>)
 8006e58:	2301      	movs	r3, #1
 8006e5a:	6093      	str	r3, [r2, #8]
 8006e5c:	6893      	ldr	r3, [r2, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1fc      	bne.n	8006e5c <ai_platform_observer_unregister+0x7c>
 8006e62:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <ai_platform_observer_unregister+0xd4>)
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <ai_platform_observer_unregister+0xd8>)
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d000      	beq.n	8006e70 <ai_platform_observer_unregister+0x90>
 8006e6e:	e7fe      	b.n	8006e6e <ai_platform_observer_unregister+0x8e>
 8006e70:	f7fe fbe0 	bl	8005634 <_ai_platform_release_crc>
 8006e74:	2000      	movs	r0, #0
 8006e76:	bd10      	pop	{r4, pc}
 8006e78:	4a10      	ldr	r2, [pc, #64]	; (8006ebc <ai_platform_observer_unregister+0xdc>)
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	6093      	str	r3, [r2, #8]
 8006e7e:	6893      	ldr	r3, [r2, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1fc      	bne.n	8006e7e <ai_platform_observer_unregister+0x9e>
 8006e84:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <ai_platform_observer_unregister+0xd4>)
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <ai_platform_observer_unregister+0xd8>)
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d10a      	bne.n	8006ea6 <ai_platform_observer_unregister+0xc6>
 8006e90:	f7fe fbd0 	bl	8005634 <_ai_platform_release_crc>
 8006e94:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006e96:	b108      	cbz	r0, 8006e9c <ai_platform_observer_unregister+0xbc>
 8006e98:	f000 f820 	bl	8006edc <core_mem_free>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	e7fe      	b.n	8006ea6 <ai_platform_observer_unregister+0xc6>
 8006ea8:	a1c00100 	.word	0xa1c00100
 8006eac:	e0042000 	.word	0xe0042000
 8006eb0:	58024000 	.word	0x58024000
 8006eb4:	f407a5c2 	.word	0xf407a5c2
 8006eb8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ebc:	40023000 	.word	0x40023000

08006ec0 <core_mem_alloc>:
 8006ec0:	b148      	cbz	r0, 8006ed6 <core_mem_alloc+0x16>
 8006ec2:	b508      	push	{r3, lr}
 8006ec4:	3004      	adds	r0, #4
 8006ec6:	f7fd fb3f 	bl	8004548 <__wrap_malloc>
 8006eca:	b110      	cbz	r0, 8006ed2 <core_mem_alloc+0x12>
 8006ecc:	6000      	str	r0, [r0, #0]
 8006ece:	3004      	adds	r0, #4
 8006ed0:	bd08      	pop	{r3, pc}
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	bd08      	pop	{r3, pc}
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop

08006edc <core_mem_free>:
 8006edc:	b150      	cbz	r0, 8006ef4 <core_mem_free+0x18>
 8006ede:	b508      	push	{r3, lr}
 8006ee0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006ee4:	1f03      	subs	r3, r0, #4
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d103      	bne.n	8006ef2 <core_mem_free+0x16>
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fd fb54 	bl	8004598 <__wrap_free>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	bd08      	pop	{r3, pc}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop

08006ef8 <node_convert>:
 8006ef8:	6982      	ldr	r2, [r0, #24]
 8006efa:	8813      	ldrh	r3, [r2, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d04a      	beq.n	8006f96 <node_convert+0x9e>
 8006f00:	6852      	ldr	r2, [r2, #4]
 8006f02:	6850      	ldr	r0, [r2, #4]
 8006f04:	b100      	cbz	r0, 8006f08 <node_convert+0x10>
 8006f06:	6800      	ldr	r0, [r0, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	f000 813c 	beq.w	8007186 <node_convert+0x28e>
 8006f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f12:	6915      	ldr	r5, [r2, #16]
 8006f14:	b105      	cbz	r5, 8006f18 <node_convert+0x20>
 8006f16:	682d      	ldr	r5, [r5, #0]
 8006f18:	6883      	ldr	r3, [r0, #8]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	f000 80ed 	beq.w	80070fa <node_convert+0x202>
 8006f20:	68c1      	ldr	r1, [r0, #12]
 8006f22:	2401      	movs	r4, #1
 8006f24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006f28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f2c:	4299      	cmp	r1, r3
 8006f2e:	fb02 f404 	mul.w	r4, r2, r4
 8006f32:	d1f9      	bne.n	8006f28 <node_convert+0x30>
 8006f34:	6982      	ldr	r2, [r0, #24]
 8006f36:	69af      	ldr	r7, [r5, #24]
 8006f38:	6813      	ldr	r3, [r2, #0]
 8006f3a:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8006f3e:	2901      	cmp	r1, #1
 8006f40:	d02b      	beq.n	8006f9a <node_convert+0xa2>
 8006f42:	6801      	ldr	r1, [r0, #0]
 8006f44:	68bd      	ldr	r5, [r7, #8]
 8006f46:	2900      	cmp	r1, #0
 8006f48:	d069      	beq.n	800701e <node_convert+0x126>
 8006f4a:	684e      	ldr	r6, [r1, #4]
 8006f4c:	6892      	ldr	r2, [r2, #8]
 8006f4e:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	f000 80b7 	beq.w	80070c6 <node_convert+0x1ce>
 8006f58:	884b      	ldrh	r3, [r1, #2]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8088 	beq.w	8007070 <node_convert+0x178>
 8006f60:	6833      	ldr	r3, [r6, #0]
 8006f62:	ed93 7a00 	vldr	s14, [r3]
 8006f66:	6873      	ldr	r3, [r6, #4]
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	f000 80c4 	beq.w	80070f6 <node_convert+0x1fe>
 8006f6e:	f993 0000 	ldrsb.w	r0, [r3]
 8006f72:	b174      	cbz	r4, 8006f92 <node_convert+0x9a>
 8006f74:	4629      	mov	r1, r5
 8006f76:	4414      	add	r4, r2
 8006f78:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8006f7c:	1a1b      	subs	r3, r3, r0
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f86:	42a2      	cmp	r2, r4
 8006f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f8c:	ece1 7a01 	vstmia	r1!, {s15}
 8006f90:	d1f2      	bne.n	8006f78 <node_convert+0x80>
 8006f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	deff      	udf	#255	; 0xff
 8006f9a:	682e      	ldr	r6, [r5, #0]
 8006f9c:	6895      	ldr	r5, [r2, #8]
 8006f9e:	2e00      	cmp	r6, #0
 8006fa0:	f000 80ad 	beq.w	80070fe <node_convert+0x206>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6871      	ldr	r1, [r6, #4]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	d063      	beq.n	800707a <node_convert+0x182>
 8006fb2:	8870      	ldrh	r0, [r6, #2]
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d066      	beq.n	8007086 <node_convert+0x18e>
 8006fb8:	6808      	ldr	r0, [r1, #0]
 8006fba:	edd0 7a00 	vldr	s15, [r0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80d6 	beq.w	8007170 <node_convert+0x278>
 8006fc4:	684b      	ldr	r3, [r1, #4]
 8006fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8006fca:	ee06 3a90 	vmov	s13, r3
 8006fce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006fd2:	2c00      	cmp	r4, #0
 8006fd4:	d0dd      	beq.n	8006f92 <node_convert+0x9a>
 8006fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fda:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006fde:	4414      	add	r4, r2
 8006fe0:	ed9f 5a6a 	vldr	s10, [pc, #424]	; 800718c <node_convert+0x294>
 8006fe4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8006fe8:	ecb5 7a01 	vldmia	r5!, {s14}
 8006fec:	eef0 7a66 	vmov.f32	s15, s13
 8006ff0:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ffc:	bfac      	ite	ge
 8006ffe:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8007002:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8007006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800700a:	ee17 3a90 	vmov	r3, s15
 800700e:	f303 0307 	ssat	r3, #8, r3
 8007012:	f802 3b01 	strb.w	r3, [r2], #1
 8007016:	42a2      	cmp	r2, r4
 8007018:	d1e6      	bne.n	8006fe8 <node_convert+0xf0>
 800701a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701e:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8007022:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8007026:	1b8e      	subs	r6, r1, r6
 8007028:	3640      	adds	r6, #64	; 0x40
 800702a:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800702e:	2908      	cmp	r1, #8
 8007030:	6890      	ldr	r0, [r2, #8]
 8007032:	eba6 0603 	sub.w	r6, r6, r3
 8007036:	4622      	mov	r2, r4
 8007038:	4629      	mov	r1, r5
 800703a:	f000 808b 	beq.w	8007154 <node_convert+0x25c>
 800703e:	f005 fdd7 	bl	800cbf0 <arm_q15_to_float>
 8007042:	2e00      	cmp	r6, #0
 8007044:	d0a5      	beq.n	8006f92 <node_convert+0x9a>
 8007046:	ee07 6a90 	vmov	s15, r6
 800704a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800704e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8007052:	f008 fd91 	bl	800fb78 <powf>
 8007056:	2c00      	cmp	r4, #0
 8007058:	d09b      	beq.n	8006f92 <node_convert+0x9a>
 800705a:	2300      	movs	r3, #0
 800705c:	ecf5 7a01 	vldmia	r5!, {s15}
 8007060:	3301      	adds	r3, #1
 8007062:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007066:	429c      	cmp	r4, r3
 8007068:	ed45 7a01 	vstr	s15, [r5, #-4]
 800706c:	d1f6      	bne.n	800705c <node_convert+0x164>
 800706e:	e790      	b.n	8006f92 <node_convert+0x9a>
 8007070:	b358      	cbz	r0, 80070ca <node_convert+0x1d2>
 8007072:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007190 <node_convert+0x298>
 8007076:	4618      	mov	r0, r3
 8007078:	e77b      	b.n	8006f72 <node_convert+0x7a>
 800707a:	b133      	cbz	r3, 800708a <node_convert+0x192>
 800707c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8007190 <node_convert+0x298>
 8007080:	eef0 7a66 	vmov.f32	s15, s13
 8007084:	e7a5      	b.n	8006fd2 <node_convert+0xda>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f8      	bne.n	800707c <node_convert+0x184>
 800708a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8007190 <node_convert+0x298>
 800708e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007092:	2c00      	cmp	r4, #0
 8007094:	f43f af7d 	beq.w	8006f92 <node_convert+0x9a>
 8007098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800709c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80070a0:	4414      	add	r4, r2
 80070a2:	ecb5 7a01 	vldmia	r5!, {s14}
 80070a6:	eef0 7a66 	vmov.f32	s15, s13
 80070aa:	eee7 7a06 	vfma.f32	s15, s14, s12
 80070ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070b2:	ee17 3a90 	vmov	r3, s15
 80070b6:	f383 0308 	usat	r3, #8, r3
 80070ba:	f802 3b01 	strb.w	r3, [r2], #1
 80070be:	42a2      	cmp	r2, r4
 80070c0:	d1ef      	bne.n	80070a2 <node_convert+0x1aa>
 80070c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d147      	bne.n	800715a <node_convert+0x262>
 80070ca:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007190 <node_convert+0x298>
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	f43f af5f 	beq.w	8006f92 <node_convert+0x9a>
 80070d4:	4629      	mov	r1, r5
 80070d6:	4414      	add	r4, r2
 80070d8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80070dc:	1a1b      	subs	r3, r3, r0
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070e6:	42a2      	cmp	r2, r4
 80070e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070ec:	ece1 7a01 	vstmia	r1!, {s15}
 80070f0:	d1f2      	bne.n	80070d8 <node_convert+0x1e0>
 80070f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f6:	7818      	ldrb	r0, [r3, #0]
 80070f8:	e7e9      	b.n	80070ce <node_convert+0x1d6>
 80070fa:	2401      	movs	r4, #1
 80070fc:	e71a      	b.n	8006f34 <node_convert+0x3c>
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8007104:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8007108:	eba8 0303 	sub.w	r3, r8, r3
 800710c:	3340      	adds	r3, #64	; 0x40
 800710e:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	d014      	beq.n	8007140 <node_convert+0x248>
 8007116:	425b      	negs	r3, r3
 8007118:	ee00 3a90 	vmov	s1, r3
 800711c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007120:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007124:	f008 fd28 	bl	800fb78 <powf>
 8007128:	b154      	cbz	r4, 8007140 <node_convert+0x248>
 800712a:	4633      	mov	r3, r6
 800712c:	462a      	mov	r2, r5
 800712e:	ecf2 7a01 	vldmia	r2!, {s15}
 8007132:	3301      	adds	r3, #1
 8007134:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007138:	42a3      	cmp	r3, r4
 800713a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800713e:	d1f6      	bne.n	800712e <node_convert+0x236>
 8007140:	f1b8 0f08 	cmp.w	r8, #8
 8007144:	d00d      	beq.n	8007162 <node_convert+0x26a>
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	4622      	mov	r2, r4
 800714a:	4628      	mov	r0, r5
 800714c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007150:	f005 bbaa 	b.w	800c8a8 <arm_float_to_q15>
 8007154:	f005 fdb2 	bl	800ccbc <arm_q7_to_float>
 8007158:	e773      	b.n	8007042 <node_convert+0x14a>
 800715a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007190 <node_convert+0x298>
 800715e:	4630      	mov	r0, r6
 8007160:	e707      	b.n	8006f72 <node_convert+0x7a>
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	4622      	mov	r2, r4
 8007166:	4628      	mov	r0, r5
 8007168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	f005 bc62 	b.w	800ca34 <arm_float_to_q7>
 8007170:	684b      	ldr	r3, [r1, #4]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	ee06 3a90 	vmov	s13, r3
 8007178:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800717c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007180:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007184:	e785      	b.n	8007092 <node_convert+0x19a>
 8007186:	2300      	movs	r3, #0
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	deff      	udf	#255	; 0xff
 800718c:	3efffffc 	.word	0x3efffffc
 8007190:	00000000 	.word	0x00000000

08007194 <core_init>:
 8007194:	2001      	movs	r0, #1
 8007196:	4770      	bx	lr

08007198 <core_get_error>:
 8007198:	4603      	mov	r3, r0
 800719a:	2200      	movs	r2, #0
 800719c:	6800      	ldr	r0, [r0, #0]
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop

080071a4 <core_set_error>:
 80071a4:	4603      	mov	r3, r0
 80071a6:	7800      	ldrb	r0, [r0, #0]
 80071a8:	b108      	cbz	r0, 80071ae <core_set_error+0xa>
 80071aa:	2000      	movs	r0, #0
 80071ac:	4770      	bx	lr
 80071ae:	7019      	strb	r1, [r3, #0]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	f362 211f 	bfi	r1, r2, #8, #24
 80071b6:	2001      	movs	r0, #1
 80071b8:	6019      	str	r1, [r3, #0]
 80071ba:	4770      	bx	lr

080071bc <forward_dense_integer_SSSA>:
 80071bc:	6982      	ldr	r2, [r0, #24]
 80071be:	8813      	ldrh	r3, [r2, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 80c8 	beq.w	8007356 <forward_dense_integer_SSSA+0x19a>
 80071c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	6852      	ldr	r2, [r2, #4]
 80071cc:	6854      	ldr	r4, [r2, #4]
 80071ce:	b093      	sub	sp, #76	; 0x4c
 80071d0:	b104      	cbz	r4, 80071d4 <forward_dense_integer_SSSA+0x18>
 80071d2:	6824      	ldr	r4, [r4, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f000 815f 	beq.w	8007498 <forward_dense_integer_SSSA+0x2dc>
 80071da:	6911      	ldr	r1, [r2, #16]
 80071dc:	b101      	cbz	r1, 80071e0 <forward_dense_integer_SSSA+0x24>
 80071de:	6809      	ldr	r1, [r1, #0]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	f000 815c 	beq.w	800749e <forward_dense_integer_SSSA+0x2e2>
 80071e6:	69d5      	ldr	r5, [r2, #28]
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	f000 8108 	beq.w	80073fe <forward_dense_integer_SSSA+0x242>
 80071ee:	8b16      	ldrh	r6, [r2, #24]
 80071f0:	6828      	ldr	r0, [r5, #0]
 80071f2:	2e01      	cmp	r6, #1
 80071f4:	f240 812d 	bls.w	8007452 <forward_dense_integer_SSSA+0x296>
 80071f8:	686d      	ldr	r5, [r5, #4]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	f000 8152 	beq.w	80074a4 <forward_dense_integer_SSSA+0x2e8>
 8007200:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 8007204:	69ab      	ldr	r3, [r5, #24]
 8007206:	f1b9 0f00 	cmp.w	r9, #0
 800720a:	f000 810f 	beq.w	800742c <forward_dense_integer_SSSA+0x270>
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	68e2      	ldr	r2, [r4, #12]
 8007212:	930b      	str	r3, [sp, #44]	; 0x2c
 8007214:	68cb      	ldr	r3, [r1, #12]
 8007216:	6856      	ldr	r6, [r2, #4]
 8007218:	f8d9 9000 	ldr.w	r9, [r9]
 800721c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8007220:	698d      	ldr	r5, [r1, #24]
 8007222:	960f      	str	r6, [sp, #60]	; 0x3c
 8007224:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	fb03 f302 	mul.w	r3, r3, r2
 800722e:	930c      	str	r3, [sp, #48]	; 0x30
 8007230:	b2b2      	uxth	r2, r6
 8007232:	fa1f f38a 	uxth.w	r3, sl
 8007236:	f1b9 0f00 	cmp.w	r9, #0
 800723a:	d003      	beq.n	8007244 <forward_dense_integer_SSSA+0x88>
 800723c:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8007240:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8007244:	6827      	ldr	r7, [r4, #0]
 8007246:	f8d0 b000 	ldr.w	fp, [r0]
 800724a:	680c      	ldr	r4, [r1, #0]
 800724c:	6981      	ldr	r1, [r0, #24]
 800724e:	2f00      	cmp	r7, #0
 8007250:	f000 8083 	beq.w	800735a <forward_dense_integer_SSSA+0x19e>
 8007254:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8007258:	f1bc 0f00 	cmp.w	ip, #0
 800725c:	f000 80b1 	beq.w	80073c2 <forward_dense_integer_SSSA+0x206>
 8007260:	8878      	ldrh	r0, [r7, #2]
 8007262:	2800      	cmp	r0, #0
 8007264:	f000 809c 	beq.w	80073a0 <forward_dense_integer_SSSA+0x1e4>
 8007268:	f8dc 6000 	ldr.w	r6, [ip]
 800726c:	edd6 7a00 	vldr	s15, [r6]
 8007270:	2c00      	cmp	r4, #0
 8007272:	f000 809a 	beq.w	80073aa <forward_dense_integer_SSSA+0x1ee>
 8007276:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800727a:	f1b8 0f00 	cmp.w	r8, #0
 800727e:	f000 80a9 	beq.w	80073d4 <forward_dense_integer_SSSA+0x218>
 8007282:	8860      	ldrh	r0, [r4, #2]
 8007284:	2800      	cmp	r0, #0
 8007286:	d074      	beq.n	8007372 <forward_dense_integer_SSSA+0x1b6>
 8007288:	68ae      	ldr	r6, [r5, #8]
 800728a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800728e:	950d      	str	r5, [sp, #52]	; 0x34
 8007290:	f8d8 5000 	ldr.w	r5, [r8]
 8007294:	6889      	ldr	r1, [r1, #8]
 8007296:	ed95 0a00 	vldr	s0, [r5]
 800729a:	f1bc 0f00 	cmp.w	ip, #0
 800729e:	d076      	beq.n	800738e <forward_dense_integer_SSSA+0x1d2>
 80072a0:	8878      	ldrh	r0, [r7, #2]
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f000 80a3 	beq.w	80073ee <forward_dense_integer_SSSA+0x232>
 80072a8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80072ac:	f990 7000 	ldrsb.w	r7, [r0]
 80072b0:	2c00      	cmp	r4, #0
 80072b2:	f000 80d6 	beq.w	8007462 <forward_dense_integer_SSSA+0x2a6>
 80072b6:	f1b8 0f00 	cmp.w	r8, #0
 80072ba:	f000 809d 	beq.w	80073f8 <forward_dense_integer_SSSA+0x23c>
 80072be:	8860      	ldrh	r0, [r4, #2]
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d167      	bne.n	8007394 <forward_dense_integer_SSSA+0x1d8>
 80072c4:	900a      	str	r0, [sp, #40]	; 0x28
 80072c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072ca:	910e      	str	r1, [sp, #56]	; 0x38
 80072cc:	f1bb 0f00 	cmp.w	fp, #0
 80072d0:	f000 80dc 	beq.w	800748c <forward_dense_integer_SSSA+0x2d0>
 80072d4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80072d8:	2800      	cmp	r0, #0
 80072da:	f000 80d7 	beq.w	800748c <forward_dense_integer_SSSA+0x2d0>
 80072de:	6800      	ldr	r0, [r0, #0]
 80072e0:	2400      	movs	r4, #0
 80072e2:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 80072e6:	9411      	str	r4, [sp, #68]	; 0x44
 80072e8:	ed90 7a00 	vldr	s14, [r0]
 80072ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072f0:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 80072f4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80072f8:	4640      	mov	r0, r8
 80072fa:	f002 fc63 	bl	8009bc4 <align_factor>
 80072fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007300:	9011      	str	r0, [sp, #68]	; 0x44
 8007302:	b32b      	cbz	r3, 8007350 <forward_dense_integer_SSSA+0x194>
 8007304:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007308:	4699      	mov	r9, r3
 800730a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800730c:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8007310:	9a08      	ldr	r2, [sp, #32]
 8007312:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007314:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007316:	970d      	str	r7, [sp, #52]	; 0x34
 8007318:	fa1f fa8a 	uxth.w	sl, sl
 800731c:	461f      	mov	r7, r3
 800731e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007320:	9306      	str	r3, [sp, #24]
 8007322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007328:	9303      	str	r3, [sp, #12]
 800732a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800732c:	9605      	str	r6, [sp, #20]
 800732e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8007332:	ab11      	add	r3, sp, #68	; 0x44
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	4628      	mov	r0, r5
 8007338:	3401      	adds	r4, #1
 800733a:	463b      	mov	r3, r7
 800733c:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8007340:	f002 fd88 	bl	8009e54 <st_sssa8_fully_connected>
 8007344:	454c      	cmp	r4, r9
 8007346:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800734a:	4456      	add	r6, sl
 800734c:	445d      	add	r5, fp
 800734e:	d1e6      	bne.n	800731e <forward_dense_integer_SSSA+0x162>
 8007350:	b013      	add	sp, #76	; 0x4c
 8007352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	deff      	udf	#255	; 0xff
 800735a:	2c00      	cmp	r4, #0
 800735c:	d056      	beq.n	800740c <forward_dense_integer_SSSA+0x250>
 800735e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007362:	f1b8 0f00 	cmp.w	r8, #0
 8007366:	d05d      	beq.n	8007424 <forward_dense_integer_SSSA+0x268>
 8007368:	8860      	ldrh	r0, [r4, #2]
 800736a:	2800      	cmp	r0, #0
 800736c:	d17b      	bne.n	8007466 <forward_dense_integer_SSSA+0x2aa>
 800736e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 8007372:	68ae      	ldr	r6, [r5, #8]
 8007374:	f8de 5008 	ldr.w	r5, [lr, #8]
 8007378:	6889      	ldr	r1, [r1, #8]
 800737a:	950d      	str	r5, [sp, #52]	; 0x34
 800737c:	2f00      	cmp	r7, #0
 800737e:	d041      	beq.n	8007404 <forward_dense_integer_SSSA+0x248>
 8007380:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8007384:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 8007388:	f1bc 0f00 	cmp.w	ip, #0
 800738c:	d188      	bne.n	80072a0 <forward_dense_integer_SSSA+0xe4>
 800738e:	4667      	mov	r7, ip
 8007390:	2800      	cmp	r0, #0
 8007392:	d097      	beq.n	80072c4 <forward_dense_integer_SSSA+0x108>
 8007394:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007398:	f990 0000 	ldrsb.w	r0, [r0]
 800739c:	900a      	str	r0, [sp, #40]	; 0x28
 800739e:	e792      	b.n	80072c6 <forward_dense_integer_SSSA+0x10a>
 80073a0:	eddf 7a42 	vldr	s15, [pc, #264]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 80073a4:	2c00      	cmp	r4, #0
 80073a6:	f47f af66 	bne.w	8007276 <forward_dense_integer_SSSA+0xba>
 80073aa:	68ae      	ldr	r6, [r5, #8]
 80073ac:	f8de 5008 	ldr.w	r5, [lr, #8]
 80073b0:	6889      	ldr	r1, [r1, #8]
 80073b2:	950d      	str	r5, [sp, #52]	; 0x34
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d14e      	bne.n	8007456 <forward_dense_integer_SSSA+0x29a>
 80073b8:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 80073bc:	900a      	str	r0, [sp, #40]	; 0x28
 80073be:	4607      	mov	r7, r0
 80073c0:	e781      	b.n	80072c6 <forward_dense_integer_SSSA+0x10a>
 80073c2:	b31c      	cbz	r4, 800740c <forward_dense_integer_SSSA+0x250>
 80073c4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80073c8:	eddf 7a38 	vldr	s15, [pc, #224]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 80073cc:	f1b8 0f00 	cmp.w	r8, #0
 80073d0:	f47f af57 	bne.w	8007282 <forward_dense_integer_SSSA+0xc6>
 80073d4:	f8de 0008 	ldr.w	r0, [lr, #8]
 80073d8:	68ae      	ldr	r6, [r5, #8]
 80073da:	6889      	ldr	r1, [r1, #8]
 80073dc:	900d      	str	r0, [sp, #52]	; 0x34
 80073de:	f1bc 0f00 	cmp.w	ip, #0
 80073e2:	d00e      	beq.n	8007402 <forward_dense_integer_SSSA+0x246>
 80073e4:	8878      	ldrh	r0, [r7, #2]
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d149      	bne.n	800747e <forward_dense_integer_SSSA+0x2c2>
 80073ea:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 80073ee:	2700      	movs	r7, #0
 80073f0:	f1b8 0f00 	cmp.w	r8, #0
 80073f4:	f47f af63 	bne.w	80072be <forward_dense_integer_SSSA+0x102>
 80073f8:	2000      	movs	r0, #0
 80073fa:	900a      	str	r0, [sp, #40]	; 0x28
 80073fc:	e763      	b.n	80072c6 <forward_dense_integer_SSSA+0x10a>
 80073fe:	4628      	mov	r0, r5
 8007400:	e6fb      	b.n	80071fa <forward_dense_integer_SSSA+0x3e>
 8007402:	4667      	mov	r7, ip
 8007404:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 8007408:	970a      	str	r7, [sp, #40]	; 0x28
 800740a:	e75c      	b.n	80072c6 <forward_dense_integer_SSSA+0x10a>
 800740c:	eddf 7a27 	vldr	s15, [pc, #156]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 8007410:	4627      	mov	r7, r4
 8007412:	f8de 0008 	ldr.w	r0, [lr, #8]
 8007416:	68ae      	ldr	r6, [r5, #8]
 8007418:	6889      	ldr	r1, [r1, #8]
 800741a:	900d      	str	r0, [sp, #52]	; 0x34
 800741c:	eeb0 0a67 	vmov.f32	s0, s15
 8007420:	970a      	str	r7, [sp, #40]	; 0x28
 8007422:	e750      	b.n	80072c6 <forward_dense_integer_SSSA+0x10a>
 8007424:	eddf 7a21 	vldr	s15, [pc, #132]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 8007428:	4647      	mov	r7, r8
 800742a:	e7f2      	b.n	8007412 <forward_dense_integer_SSSA+0x256>
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	68e2      	ldr	r2, [r4, #12]
 8007430:	930b      	str	r3, [sp, #44]	; 0x2c
 8007432:	68cb      	ldr	r3, [r1, #12]
 8007434:	6856      	ldr	r6, [r2, #4]
 8007436:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800743a:	698d      	ldr	r5, [r1, #24]
 800743c:	960f      	str	r6, [sp, #60]	; 0x3c
 800743e:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	fb03 f302 	mul.w	r3, r3, r2
 8007448:	930c      	str	r3, [sp, #48]	; 0x30
 800744a:	b2b2      	uxth	r2, r6
 800744c:	fa1f f38a 	uxth.w	r3, sl
 8007450:	e6f8      	b.n	8007244 <forward_dense_integer_SSSA+0x88>
 8007452:	2500      	movs	r5, #0
 8007454:	e6d1      	b.n	80071fa <forward_dense_integer_SSSA+0x3e>
 8007456:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800745a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 800745e:	f990 7000 	ldrsb.w	r7, [r0]
 8007462:	940a      	str	r4, [sp, #40]	; 0x28
 8007464:	e72f      	b.n	80072c6 <forward_dense_integer_SSSA+0x10a>
 8007466:	f8de 0008 	ldr.w	r0, [lr, #8]
 800746a:	900d      	str	r0, [sp, #52]	; 0x34
 800746c:	f8d8 0000 	ldr.w	r0, [r8]
 8007470:	68ae      	ldr	r6, [r5, #8]
 8007472:	6889      	ldr	r1, [r1, #8]
 8007474:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 8007478:	ed90 0a00 	vldr	s0, [r0]
 800747c:	e78a      	b.n	8007394 <forward_dense_integer_SSSA+0x1d8>
 800747e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007482:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80074ac <forward_dense_integer_SSSA+0x2f0>
 8007486:	f990 7000 	ldrsb.w	r7, [r0]
 800748a:	e7b5      	b.n	80073f8 <forward_dense_integer_SSSA+0x23c>
 800748c:	2300      	movs	r3, #0
 800748e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8007492:	9311      	str	r3, [sp, #68]	; 0x44
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	deff      	udf	#255	; 0xff
 8007498:	2300      	movs	r3, #0
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	deff      	udf	#255	; 0xff
 800749e:	2300      	movs	r3, #0
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	deff      	udf	#255	; 0xff
 80074a4:	2300      	movs	r3, #0
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	deff      	udf	#255	; 0xff
 80074aa:	bf00      	nop
 80074ac:	00000000 	.word	0x00000000

080074b0 <forward_sm>:
 80074b0:	6982      	ldr	r2, [r0, #24]
 80074b2:	8813      	ldrh	r3, [r2, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d07c      	beq.n	80075b2 <forward_sm+0x102>
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	ed2d 8b04 	vpush	{d8-d9}
 80074c0:	6852      	ldr	r2, [r2, #4]
 80074c2:	6854      	ldr	r4, [r2, #4]
 80074c4:	b085      	sub	sp, #20
 80074c6:	b104      	cbz	r4, 80074ca <forward_sm+0x1a>
 80074c8:	6824      	ldr	r4, [r4, #0]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d076      	beq.n	80075bc <forward_sm+0x10c>
 80074ce:	6913      	ldr	r3, [r2, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d076      	beq.n	80075c2 <forward_sm+0x112>
 80074d4:	681e      	ldr	r6, [r3, #0]
 80074d6:	68a3      	ldr	r3, [r4, #8]
 80074d8:	68e0      	ldr	r0, [r4, #12]
 80074da:	68f2      	ldr	r2, [r6, #12]
 80074dc:	6845      	ldr	r5, [r0, #4]
 80074de:	6857      	ldr	r7, [r2, #4]
 80074e0:	0a1b      	lsrs	r3, r3, #8
 80074e2:	d068      	beq.n	80075b6 <forward_sm+0x106>
 80074e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80074e8:	2201      	movs	r2, #1
 80074ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074ee:	4298      	cmp	r0, r3
 80074f0:	fb01 f202 	mul.w	r2, r1, r2
 80074f4:	d1f9      	bne.n	80074ea <forward_sm+0x3a>
 80074f6:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80074fa:	69a2      	ldr	r2, [r4, #24]
 80074fc:	69b3      	ldr	r3, [r6, #24]
 80074fe:	6892      	ldr	r2, [r2, #8]
 8007500:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8007504:	eb02 0309 	add.w	r3, r2, r9
 8007508:	429a      	cmp	r2, r3
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	d24c      	bcs.n	80075a8 <forward_sm+0xf8>
 800750e:	00bb      	lsls	r3, r7, #2
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8007516:	00ab      	lsls	r3, r5, #2
 8007518:	2d01      	cmp	r5, #1
 800751a:	ed92 8a00 	vldr	s16, [r2]
 800751e:	9302      	str	r3, [sp, #8]
 8007520:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8007524:	463e      	mov	r6, r7
 8007526:	d93c      	bls.n	80075a2 <forward_sm+0xf2>
 8007528:	1d13      	adds	r3, r2, #4
 800752a:	ecf3 7a01 	vldmia	r3!, {s15}
 800752e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007536:	bfb8      	it	lt
 8007538:	eeb0 8a67 	vmovlt.f32	s16, s15
 800753c:	429e      	cmp	r6, r3
 800753e:	d1f4      	bne.n	800752a <forward_sm+0x7a>
 8007540:	eddf 8a21 	vldr	s17, [pc, #132]	; 80075c8 <forward_sm+0x118>
 8007544:	4692      	mov	sl, r2
 8007546:	46c3      	mov	fp, r8
 8007548:	46c1      	mov	r9, r8
 800754a:	2400      	movs	r4, #0
 800754c:	ecba 0a01 	vldmia	sl!, {s0}
 8007550:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007554:	f008 fada 	bl	800fb0c <expf>
 8007558:	3401      	adds	r4, #1
 800755a:	42a5      	cmp	r5, r4
 800755c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8007560:	eca9 0a01 	vstmia	r9!, {s0}
 8007564:	d8f2      	bhi.n	800754c <forward_sm+0x9c>
 8007566:	eef5 8a40 	vcmp.f32	s17, #0.0
 800756a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756e:	d00b      	beq.n	8007588 <forward_sm+0xd8>
 8007570:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8007574:	2300      	movs	r3, #0
 8007576:	3301      	adds	r3, #1
 8007578:	429d      	cmp	r5, r3
 800757a:	eddb 7a00 	vldr	s15, [fp]
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	eceb 7a01 	vstmia	fp!, {s15}
 8007586:	d8f6      	bhi.n	8007576 <forward_sm+0xc6>
 8007588:	9b03      	ldr	r3, [sp, #12]
 800758a:	9901      	ldr	r1, [sp, #4]
 800758c:	4498      	add	r8, r3
 800758e:	9b02      	ldr	r3, [sp, #8]
 8007590:	42b9      	cmp	r1, r7
 8007592:	463a      	mov	r2, r7
 8007594:	441e      	add	r6, r3
 8007596:	d907      	bls.n	80075a8 <forward_sm+0xf8>
 8007598:	2d01      	cmp	r5, #1
 800759a:	ed92 8a00 	vldr	s16, [r2]
 800759e:	441f      	add	r7, r3
 80075a0:	d8c2      	bhi.n	8007528 <forward_sm+0x78>
 80075a2:	2d00      	cmp	r5, #0
 80075a4:	d0f0      	beq.n	8007588 <forward_sm+0xd8>
 80075a6:	e7cb      	b.n	8007540 <forward_sm+0x90>
 80075a8:	b005      	add	sp, #20
 80075aa:	ecbd 8b04 	vpop	{d8-d9}
 80075ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	deff      	udf	#255	; 0xff
 80075b6:	f04f 0904 	mov.w	r9, #4
 80075ba:	e79e      	b.n	80074fa <forward_sm+0x4a>
 80075bc:	2300      	movs	r3, #0
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	deff      	udf	#255	; 0xff
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	deff      	udf	#255	; 0xff
 80075c6:	bf00      	nop
 80075c8:	00000000 	.word	0x00000000

080075cc <forward_pad>:
 80075cc:	6982      	ldr	r2, [r0, #24]
 80075ce:	8813      	ldrh	r3, [r2, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d052      	beq.n	800767a <forward_pad+0xae>
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	ed2d 8b02 	vpush	{d8}
 80075dc:	6852      	ldr	r2, [r2, #4]
 80075de:	6857      	ldr	r7, [r2, #4]
 80075e0:	b091      	sub	sp, #68	; 0x44
 80075e2:	b107      	cbz	r7, 80075e6 <forward_pad+0x1a>
 80075e4:	683f      	ldr	r7, [r7, #0]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	f000 81e9 	beq.w	80079be <forward_pad+0x3f2>
 80075ec:	6913      	ldr	r3, [r2, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 81e3 	beq.w	80079ba <forward_pad+0x3ee>
 80075f4:	681d      	ldr	r5, [r3, #0]
 80075f6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80075fa:	68aa      	ldr	r2, [r5, #8]
 80075fc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075fe:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8007602:	f8de 100c 	ldr.w	r1, [lr, #12]
 8007606:	9102      	str	r1, [sp, #8]
 8007608:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800760c:	f9b6 1000 	ldrsh.w	r1, [r6]
 8007610:	bf28      	it	cs
 8007612:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 8007616:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 800761a:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 800761e:	9103      	str	r1, [sp, #12]
 8007620:	bf38      	it	cc
 8007622:	2201      	movcc	r2, #1
 8007624:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8007628:	9201      	str	r2, [sp, #4]
 800762a:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 800762e:	6895      	ldr	r5, [r2, #8]
 8007630:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8007634:	7f03      	ldrb	r3, [r0, #28]
 8007636:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 800763a:	68f7      	ldr	r7, [r6, #12]
 800763c:	9708      	str	r7, [sp, #32]
 800763e:	fb07 f404 	mul.w	r4, r7, r4
 8007642:	463e      	mov	r6, r7
 8007644:	9f03      	ldr	r7, [sp, #12]
 8007646:	940d      	str	r4, [sp, #52]	; 0x34
 8007648:	fb06 f607 	mul.w	r6, r6, r7
 800764c:	68d4      	ldr	r4, [r2, #12]
 800764e:	9405      	str	r4, [sp, #20]
 8007650:	2b01      	cmp	r3, #1
 8007652:	960c      	str	r6, [sp, #48]	; 0x30
 8007654:	f8dc 8008 	ldr.w	r8, [ip, #8]
 8007658:	6894      	ldr	r4, [r2, #8]
 800765a:	fb0b f601 	mul.w	r6, fp, r1
 800765e:	fb0b f709 	mul.w	r7, fp, r9
 8007662:	d00c      	beq.n	800767e <forward_pad+0xb2>
 8007664:	2b02      	cmp	r3, #2
 8007666:	f000 8107 	beq.w	8007878 <forward_pad+0x2ac>
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80a8 	beq.w	80077c0 <forward_pad+0x1f4>
 8007670:	b011      	add	sp, #68	; 0x44
 8007672:	ecbd 8b02 	vpop	{d8}
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	deff      	udf	#255	; 0xff
 800767e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007682:	930e      	str	r3, [sp, #56]	; 0x38
 8007684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007686:	eb05 0903 	add.w	r9, r5, r3
 800768a:	9b02      	ldr	r3, [sp, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	dd6a      	ble.n	8007766 <forward_pad+0x19a>
 8007690:	f8de 3008 	ldr.w	r3, [lr, #8]
 8007694:	9801      	ldr	r0, [sp, #4]
 8007696:	f8da 2008 	ldr.w	r2, [sl, #8]
 800769a:	9204      	str	r2, [sp, #16]
 800769c:	4419      	add	r1, r3
 800769e:	fb01 f000 	mul.w	r0, r1, r0
 80076a2:	9905      	ldr	r1, [sp, #20]
 80076a4:	9007      	str	r0, [sp, #28]
 80076a6:	440f      	add	r7, r1
 80076a8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80076ac:	fb01 0202 	mla	r2, r1, r2, r0
 80076b0:	fb0b 5202 	mla	r2, fp, r2, r5
 80076b4:	9204      	str	r2, [sp, #16]
 80076b6:	1e9a      	subs	r2, r3, #2
 80076b8:	fb04 f303 	mul.w	r3, r4, r3
 80076bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80076be:	fb04 8302 	mla	r3, r4, r2, r8
 80076c2:	9303      	str	r3, [sp, #12]
 80076c4:	fb0b f301 	mul.w	r3, fp, r1
 80076c8:	19b8      	adds	r0, r7, r6
 80076ca:	9309      	str	r3, [sp, #36]	; 0x24
 80076cc:	2300      	movs	r3, #0
 80076ce:	900a      	str	r0, [sp, #40]	; 0x28
 80076d0:	9306      	str	r3, [sp, #24]
 80076d2:	eb09 0006 	add.w	r0, r9, r6
 80076d6:	f1cb 0300 	rsb	r3, fp, #0
 80076da:	ee08 8a10 	vmov	s16, r8
 80076de:	9001      	str	r0, [sp, #4]
 80076e0:	460f      	mov	r7, r1
 80076e2:	950f      	str	r5, [sp, #60]	; 0x3c
 80076e4:	4698      	mov	r8, r3
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	454b      	cmp	r3, r9
 80076ea:	bf18      	it	ne
 80076ec:	ee18 5a10 	vmovne	r5, s16
 80076f0:	d009      	beq.n	8007706 <forward_pad+0x13a>
 80076f2:	4443      	add	r3, r8
 80076f4:	4425      	add	r5, r4
 80076f6:	4618      	mov	r0, r3
 80076f8:	4622      	mov	r2, r4
 80076fa:	4629      	mov	r1, r5
 80076fc:	f005 fe22 	bl	800d344 <memcpy>
 8007700:	4548      	cmp	r0, r9
 8007702:	4603      	mov	r3, r0
 8007704:	d1f5      	bne.n	80076f2 <forward_pad+0x126>
 8007706:	ee18 3a10 	vmov	r3, s16
 800770a:	9a05      	ldr	r2, [sp, #20]
 800770c:	9801      	ldr	r0, [sp, #4]
 800770e:	4413      	add	r3, r2
 8007710:	ee18 1a10 	vmov	r1, s16
 8007714:	ee08 3a10 	vmov	s16, r3
 8007718:	f005 fe14 	bl	800d344 <memcpy>
 800771c:	9b07      	ldr	r3, [sp, #28]
 800771e:	429f      	cmp	r7, r3
 8007720:	dd0d      	ble.n	800773e <forward_pad+0x172>
 8007722:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 8007726:	461d      	mov	r5, r3
 8007728:	4651      	mov	r1, sl
 800772a:	4630      	mov	r0, r6
 800772c:	3501      	adds	r5, #1
 800772e:	4622      	mov	r2, r4
 8007730:	f005 fe08 	bl	800d344 <memcpy>
 8007734:	42af      	cmp	r7, r5
 8007736:	ebaa 0a04 	sub.w	sl, sl, r4
 800773a:	445e      	add	r6, fp
 800773c:	d1f4      	bne.n	8007728 <forward_pad+0x15c>
 800773e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007740:	9901      	ldr	r1, [sp, #4]
 8007742:	9b06      	ldr	r3, [sp, #24]
 8007744:	4411      	add	r1, r2
 8007746:	4491      	add	r9, r2
 8007748:	9101      	str	r1, [sp, #4]
 800774a:	9a04      	ldr	r2, [sp, #16]
 800774c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800774e:	440a      	add	r2, r1
 8007750:	9204      	str	r2, [sp, #16]
 8007752:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007754:	9a03      	ldr	r2, [sp, #12]
 8007756:	440a      	add	r2, r1
 8007758:	9203      	str	r2, [sp, #12]
 800775a:	9a02      	ldr	r2, [sp, #8]
 800775c:	3301      	adds	r3, #1
 800775e:	429a      	cmp	r2, r3
 8007760:	9306      	str	r3, [sp, #24]
 8007762:	d1c0      	bne.n	80076e6 <forward_pad+0x11a>
 8007764:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007768:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 800776c:	42a5      	cmp	r5, r4
 800776e:	d00c      	beq.n	800778a <forward_pad+0x1be>
 8007770:	9b08      	ldr	r3, [sp, #32]
 8007772:	462e      	mov	r6, r5
 8007774:	425f      	negs	r7, r3
 8007776:	4698      	mov	r8, r3
 8007778:	4621      	mov	r1, r4
 800777a:	4630      	mov	r0, r6
 800777c:	4642      	mov	r2, r8
 800777e:	4446      	add	r6, r8
 8007780:	443c      	add	r4, r7
 8007782:	f005 fddf 	bl	800d344 <memcpy>
 8007786:	42a6      	cmp	r6, r4
 8007788:	d1f6      	bne.n	8007778 <forward_pad+0x1ac>
 800778a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800778c:	9a08      	ldr	r2, [sp, #32]
 800778e:	3b01      	subs	r3, #1
 8007790:	fb02 5503 	mla	r5, r2, r3, r5
 8007794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007796:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 800779a:	42a5      	cmp	r5, r4
 800779c:	f43f af68 	beq.w	8007670 <forward_pad+0xa4>
 80077a0:	4617      	mov	r7, r2
 80077a2:	4256      	negs	r6, r2
 80077a4:	4621      	mov	r1, r4
 80077a6:	4628      	mov	r0, r5
 80077a8:	463a      	mov	r2, r7
 80077aa:	4435      	add	r5, r6
 80077ac:	443c      	add	r4, r7
 80077ae:	f005 fdc9 	bl	800d344 <memcpy>
 80077b2:	42a5      	cmp	r5, r4
 80077b4:	d1f6      	bne.n	80077a4 <forward_pad+0x1d8>
 80077b6:	b011      	add	sp, #68	; 0x44
 80077b8:	ecbd 8b02 	vpop	{d8}
 80077bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c0:	f8dc 1000 	ldr.w	r1, [ip]
 80077c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80077c6:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80077ca:	2908      	cmp	r1, #8
 80077cc:	f000 80b7 	beq.w	800793e <forward_pad+0x372>
 80077d0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80077d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	dd0a      	ble.n	80077f0 <forward_pad+0x224>
 80077da:	4693      	mov	fp, r2
 80077dc:	469a      	mov	sl, r3
 80077de:	4628      	mov	r0, r5
 80077e0:	68a1      	ldr	r1, [r4, #8]
 80077e2:	44ca      	add	sl, r9
 80077e4:	464a      	mov	r2, r9
 80077e6:	f005 fdad 	bl	800d344 <memcpy>
 80077ea:	45d3      	cmp	fp, sl
 80077ec:	444d      	add	r5, r9
 80077ee:	dcf6      	bgt.n	80077de <forward_pad+0x212>
 80077f0:	9b02      	ldr	r3, [sp, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	dd2d      	ble.n	8007852 <forward_pad+0x286>
 80077f6:	f04f 0a00 	mov.w	sl, #0
 80077fa:	f8dd b014 	ldr.w	fp, [sp, #20]
 80077fe:	f8cd a004 	str.w	sl, [sp, #4]
 8007802:	2e00      	cmp	r6, #0
 8007804:	bfc8      	it	gt
 8007806:	f04f 0a00 	movgt.w	sl, #0
 800780a:	dd08      	ble.n	800781e <forward_pad+0x252>
 800780c:	4628      	mov	r0, r5
 800780e:	68a1      	ldr	r1, [r4, #8]
 8007810:	464a      	mov	r2, r9
 8007812:	44ca      	add	sl, r9
 8007814:	f005 fd96 	bl	800d344 <memcpy>
 8007818:	4556      	cmp	r6, sl
 800781a:	444d      	add	r5, r9
 800781c:	dcf6      	bgt.n	800780c <forward_pad+0x240>
 800781e:	4641      	mov	r1, r8
 8007820:	4628      	mov	r0, r5
 8007822:	465a      	mov	r2, fp
 8007824:	f005 fd8e 	bl	800d344 <memcpy>
 8007828:	2f00      	cmp	r7, #0
 800782a:	44d8      	add	r8, fp
 800782c:	445d      	add	r5, fp
 800782e:	dd0a      	ble.n	8007846 <forward_pad+0x27a>
 8007830:	f04f 0a00 	mov.w	sl, #0
 8007834:	4628      	mov	r0, r5
 8007836:	68a1      	ldr	r1, [r4, #8]
 8007838:	464a      	mov	r2, r9
 800783a:	44ca      	add	sl, r9
 800783c:	f005 fd82 	bl	800d344 <memcpy>
 8007840:	4557      	cmp	r7, sl
 8007842:	444d      	add	r5, r9
 8007844:	dcf6      	bgt.n	8007834 <forward_pad+0x268>
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	9a02      	ldr	r2, [sp, #8]
 800784a:	3301      	adds	r3, #1
 800784c:	429a      	cmp	r2, r3
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	d1d7      	bne.n	8007802 <forward_pad+0x236>
 8007852:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007854:	2f00      	cmp	r7, #0
 8007856:	f77f af0b 	ble.w	8007670 <forward_pad+0xa4>
 800785a:	2600      	movs	r6, #0
 800785c:	4628      	mov	r0, r5
 800785e:	68a1      	ldr	r1, [r4, #8]
 8007860:	464a      	mov	r2, r9
 8007862:	444e      	add	r6, r9
 8007864:	f005 fd6e 	bl	800d344 <memcpy>
 8007868:	42b7      	cmp	r7, r6
 800786a:	444d      	add	r5, r9
 800786c:	dcf6      	bgt.n	800785c <forward_pad+0x290>
 800786e:	b011      	add	sp, #68	; 0x44
 8007870:	ecbd 8b02 	vpop	{d8}
 8007874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007878:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800787a:	9b02      	ldr	r3, [sp, #8]
 800787c:	442f      	add	r7, r5
 800787e:	2b00      	cmp	r3, #0
 8007880:	9706      	str	r7, [sp, #24]
 8007882:	dd33      	ble.n	80078ec <forward_pad+0x320>
 8007884:	fb04 f309 	mul.w	r3, r4, r9
 8007888:	9304      	str	r3, [sp, #16]
 800788a:	2300      	movs	r3, #0
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	9507      	str	r5, [sp, #28]
 8007890:	2e00      	cmp	r6, #0
 8007892:	bfc8      	it	gt
 8007894:	2500      	movgt	r5, #0
 8007896:	dd08      	ble.n	80078aa <forward_pad+0x2de>
 8007898:	4638      	mov	r0, r7
 800789a:	4425      	add	r5, r4
 800789c:	4622      	mov	r2, r4
 800789e:	4641      	mov	r1, r8
 80078a0:	f005 fd50 	bl	800d344 <memcpy>
 80078a4:	42ae      	cmp	r6, r5
 80078a6:	4427      	add	r7, r4
 80078a8:	dcf6      	bgt.n	8007898 <forward_pad+0x2cc>
 80078aa:	9b05      	ldr	r3, [sp, #20]
 80078ac:	4641      	mov	r1, r8
 80078ae:	4638      	mov	r0, r7
 80078b0:	461a      	mov	r2, r3
 80078b2:	4498      	add	r8, r3
 80078b4:	441f      	add	r7, r3
 80078b6:	f005 fd45 	bl	800d344 <memcpy>
 80078ba:	f1b9 0f00 	cmp.w	r9, #0
 80078be:	eba8 0a04 	sub.w	sl, r8, r4
 80078c2:	dd0c      	ble.n	80078de <forward_pad+0x312>
 80078c4:	46bb      	mov	fp, r7
 80078c6:	2500      	movs	r5, #0
 80078c8:	4658      	mov	r0, fp
 80078ca:	3501      	adds	r5, #1
 80078cc:	4622      	mov	r2, r4
 80078ce:	4651      	mov	r1, sl
 80078d0:	f005 fd38 	bl	800d344 <memcpy>
 80078d4:	45a9      	cmp	r9, r5
 80078d6:	44a3      	add	fp, r4
 80078d8:	d1f6      	bne.n	80078c8 <forward_pad+0x2fc>
 80078da:	9b04      	ldr	r3, [sp, #16]
 80078dc:	441f      	add	r7, r3
 80078de:	9b01      	ldr	r3, [sp, #4]
 80078e0:	9a02      	ldr	r2, [sp, #8]
 80078e2:	3301      	adds	r3, #1
 80078e4:	429a      	cmp	r2, r3
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	d1d2      	bne.n	8007890 <forward_pad+0x2c4>
 80078ea:	9d07      	ldr	r5, [sp, #28]
 80078ec:	9b06      	ldr	r3, [sp, #24]
 80078ee:	429d      	cmp	r5, r3
 80078f0:	d00a      	beq.n	8007908 <forward_pad+0x33c>
 80078f2:	9e08      	ldr	r6, [sp, #32]
 80078f4:	461f      	mov	r7, r3
 80078f6:	462c      	mov	r4, r5
 80078f8:	4620      	mov	r0, r4
 80078fa:	4632      	mov	r2, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	4434      	add	r4, r6
 8007900:	f005 fd20 	bl	800d344 <memcpy>
 8007904:	42a7      	cmp	r7, r4
 8007906:	d1f7      	bne.n	80078f8 <forward_pad+0x32c>
 8007908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800790c:	4413      	add	r3, r2
 800790e:	9a08      	ldr	r2, [sp, #32]
 8007910:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007912:	3b01      	subs	r3, #1
 8007914:	fb02 5503 	mla	r5, r2, r3, r5
 8007918:	442c      	add	r4, r5
 800791a:	42a5      	cmp	r5, r4
 800791c:	f43f aea8 	beq.w	8007670 <forward_pad+0xa4>
 8007920:	4617      	mov	r7, r2
 8007922:	4256      	negs	r6, r2
 8007924:	4620      	mov	r0, r4
 8007926:	463a      	mov	r2, r7
 8007928:	4629      	mov	r1, r5
 800792a:	4434      	add	r4, r6
 800792c:	f005 fd0a 	bl	800d344 <memcpy>
 8007930:	42a5      	cmp	r5, r4
 8007932:	d1f7      	bne.n	8007924 <forward_pad+0x358>
 8007934:	b011      	add	sp, #68	; 0x44
 8007936:	ecbd 8b02 	vpop	{d8}
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793e:	68a2      	ldr	r2, [r4, #8]
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	f992 9000 	ldrsb.w	r9, [r2]
 8007946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007948:	4629      	mov	r1, r5
 800794a:	18ac      	adds	r4, r5, r2
 800794c:	4648      	mov	r0, r9
 800794e:	9403      	str	r4, [sp, #12]
 8007950:	f003 ff44 	bl	800b7dc <st_int8_fill>
 8007954:	9b02      	ldr	r3, [sp, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	dd25      	ble.n	80079a6 <forward_pad+0x3da>
 800795a:	9b01      	ldr	r3, [sp, #4]
 800795c:	9601      	str	r6, [sp, #4]
 800795e:	469b      	mov	fp, r3
 8007960:	9b05      	ldr	r3, [sp, #20]
 8007962:	eb06 0a07 	add.w	sl, r6, r7
 8007966:	4625      	mov	r5, r4
 8007968:	449a      	add	sl, r3
 800796a:	4434      	add	r4, r6
 800796c:	461e      	mov	r6, r3
 800796e:	4629      	mov	r1, r5
 8007970:	9a01      	ldr	r2, [sp, #4]
 8007972:	4648      	mov	r0, r9
 8007974:	f003 ff32 	bl	800b7dc <st_int8_fill>
 8007978:	4621      	mov	r1, r4
 800797a:	4640      	mov	r0, r8
 800797c:	4632      	mov	r2, r6
 800797e:	f003 ff8f 	bl	800b8a0 <st_int8_copy>
 8007982:	19a1      	adds	r1, r4, r6
 8007984:	463a      	mov	r2, r7
 8007986:	4648      	mov	r0, r9
 8007988:	f003 ff28 	bl	800b7dc <st_int8_fill>
 800798c:	9b02      	ldr	r3, [sp, #8]
 800798e:	f10b 0b01 	add.w	fp, fp, #1
 8007992:	455b      	cmp	r3, fp
 8007994:	4455      	add	r5, sl
 8007996:	44b0      	add	r8, r6
 8007998:	4454      	add	r4, sl
 800799a:	d1e8      	bne.n	800796e <forward_pad+0x3a2>
 800799c:	461a      	mov	r2, r3
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	fb0a 3302 	mla	r3, sl, r2, r3
 80079a4:	9303      	str	r3, [sp, #12]
 80079a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079a8:	9903      	ldr	r1, [sp, #12]
 80079aa:	4648      	mov	r0, r9
 80079ac:	b011      	add	sp, #68	; 0x44
 80079ae:	ecbd 8b02 	vpop	{d8}
 80079b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b6:	f003 bf11 	b.w	800b7dc <st_int8_fill>
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	deff      	udf	#255	; 0xff
 80079be:	2300      	movs	r3, #0
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	deff      	udf	#255	; 0xff

080079c4 <func_dummy>:
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop

080079c8 <forward_dw_3x3_sssa8_ch>:
 80079c8:	6983      	ldr	r3, [r0, #24]
 80079ca:	881a      	ldrh	r2, [r3, #0]
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	f000 80d8 	beq.w	8007b82 <forward_dw_3x3_sssa8_ch+0x1ba>
 80079d2:	6859      	ldr	r1, [r3, #4]
 80079d4:	684b      	ldr	r3, [r1, #4]
 80079d6:	b103      	cbz	r3, 80079da <forward_dw_3x3_sssa8_ch+0x12>
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2a01      	cmp	r2, #1
 80079dc:	f000 80f2 	beq.w	8007bc4 <forward_dw_3x3_sssa8_ch+0x1fc>
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80079e8:	b097      	sub	sp, #92	; 0x5c
 80079ea:	f1b8 0f00 	cmp.w	r8, #0
 80079ee:	d001      	beq.n	80079f4 <forward_dw_3x3_sssa8_ch+0x2c>
 80079f0:	f8d8 8000 	ldr.w	r8, [r8]
 80079f4:	2a02      	cmp	r2, #2
 80079f6:	f000 80c1 	beq.w	8007b7c <forward_dw_3x3_sssa8_ch+0x1b4>
 80079fa:	69cc      	ldr	r4, [r1, #28]
 80079fc:	2c00      	cmp	r4, #0
 80079fe:	f000 80d8 	beq.w	8007bb2 <forward_dw_3x3_sssa8_ch+0x1ea>
 8007a02:	8b0d      	ldrh	r5, [r1, #24]
 8007a04:	f8d4 e000 	ldr.w	lr, [r4]
 8007a08:	2d01      	cmp	r5, #1
 8007a0a:	f200 80bc 	bhi.w	8007b86 <forward_dw_3x3_sssa8_ch+0x1be>
 8007a0e:	2500      	movs	r5, #0
 8007a10:	2a03      	cmp	r2, #3
 8007a12:	f000 80da 	beq.w	8007bca <forward_dw_3x3_sssa8_ch+0x202>
 8007a16:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	f000 80cf 	beq.w	8007bbc <forward_dw_3x3_sssa8_ch+0x1f4>
 8007a1e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007a20:	6817      	ldr	r7, [r2, #0]
 8007a22:	910e      	str	r1, [sp, #56]	; 0x38
 8007a24:	2900      	cmp	r1, #0
 8007a26:	f000 80bc 	beq.w	8007ba2 <forward_dw_3x3_sssa8_ch+0x1da>
 8007a2a:	6856      	ldr	r6, [r2, #4]
 8007a2c:	69a9      	ldr	r1, [r5, #24]
 8007a2e:	68f5      	ldr	r5, [r6, #12]
 8007a30:	6889      	ldr	r1, [r1, #8]
 8007a32:	9115      	str	r1, [sp, #84]	; 0x54
 8007a34:	68d9      	ldr	r1, [r3, #12]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8007a3c:	68ef      	ldr	r7, [r5, #12]
 8007a3e:	68ad      	ldr	r5, [r5, #8]
 8007a40:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8007a44:	9510      	str	r5, [sp, #64]	; 0x40
 8007a46:	68cd      	ldr	r5, [r1, #12]
 8007a48:	6889      	ldr	r1, [r1, #8]
 8007a4a:	9112      	str	r1, [sp, #72]	; 0x48
 8007a4c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8007a4e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007a50:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007a52:	9114      	str	r1, [sp, #80]	; 0x50
 8007a54:	6892      	ldr	r2, [r2, #8]
 8007a56:	970f      	str	r7, [sp, #60]	; 0x3c
 8007a58:	9511      	str	r5, [sp, #68]	; 0x44
 8007a5a:	fa1f f18c 	uxth.w	r1, ip
 8007a5e:	2c00      	cmp	r4, #0
 8007a60:	f000 8099 	beq.w	8007b96 <forward_dw_3x3_sssa8_ch+0x1ce>
 8007a64:	68a4      	ldr	r4, [r4, #8]
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	f000 8095 	beq.w	8007b96 <forward_dw_3x3_sssa8_ch+0x1ce>
 8007a6c:	69a7      	ldr	r7, [r4, #24]
 8007a6e:	2f00      	cmp	r7, #0
 8007a70:	bf18      	it	ne
 8007a72:	4627      	movne	r7, r4
 8007a74:	681c      	ldr	r4, [r3, #0]
 8007a76:	6835      	ldr	r5, [r6, #0]
 8007a78:	f8de 0000 	ldr.w	r0, [lr]
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	f000 8087 	beq.w	8007b90 <forward_dw_3x3_sssa8_ch+0x1c8>
 8007a82:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007a86:	f1b9 0f00 	cmp.w	r9, #0
 8007a8a:	f000 8081 	beq.w	8007b90 <forward_dw_3x3_sssa8_ch+0x1c8>
 8007a8e:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 8007a92:	f1ba 0f00 	cmp.w	sl, #0
 8007a96:	d07b      	beq.n	8007b90 <forward_dw_3x3_sssa8_ch+0x1c8>
 8007a98:	f8d9 9000 	ldr.w	r9, [r9]
 8007a9c:	ed99 0a00 	vldr	s0, [r9]
 8007aa0:	2d00      	cmp	r5, #0
 8007aa2:	d072      	beq.n	8007b8a <forward_dw_3x3_sssa8_ch+0x1c2>
 8007aa4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8007aa8:	f1b9 0f00 	cmp.w	r9, #0
 8007aac:	d06d      	beq.n	8007b8a <forward_dw_3x3_sssa8_ch+0x1c2>
 8007aae:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 8007ab2:	f1ba 0f00 	cmp.w	sl, #0
 8007ab6:	d068      	beq.n	8007b8a <forward_dw_3x3_sssa8_ch+0x1c2>
 8007ab8:	f8d9 9000 	ldr.w	r9, [r9]
 8007abc:	edd9 0a00 	vldr	s1, [r9]
 8007ac0:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8007ac4:	f8de 3018 	ldr.w	r3, [lr, #24]
 8007ac8:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	930c      	str	r3, [sp, #48]	; 0x30
 8007ad0:	69b3      	ldr	r3, [r6, #24]
 8007ad2:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8007ad6:	b110      	cbz	r0, 8007ade <forward_dw_3x3_sssa8_ch+0x116>
 8007ad8:	6840      	ldr	r0, [r0, #4]
 8007ada:	b100      	cbz	r0, 8007ade <forward_dw_3x3_sssa8_ch+0x116>
 8007adc:	6800      	ldr	r0, [r0, #0]
 8007ade:	b13c      	cbz	r4, 8007af0 <forward_dw_3x3_sssa8_ch+0x128>
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d061      	beq.n	8007baa <forward_dw_3x3_sssa8_ch+0x1e2>
 8007ae6:	8864      	ldrh	r4, [r4, #2]
 8007ae8:	b114      	cbz	r4, 8007af0 <forward_dw_3x3_sssa8_ch+0x128>
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f993 4000 	ldrsb.w	r4, [r3]
 8007af0:	b13d      	cbz	r5, 8007b02 <forward_dw_3x3_sssa8_ch+0x13a>
 8007af2:	686b      	ldr	r3, [r5, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d05a      	beq.n	8007bae <forward_dw_3x3_sssa8_ch+0x1e6>
 8007af8:	886d      	ldrh	r5, [r5, #2]
 8007afa:	b115      	cbz	r5, 8007b02 <forward_dw_3x3_sssa8_ch+0x13a>
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f993 5000 	ldrsb.w	r5, [r3]
 8007b02:	920d      	str	r2, [sp, #52]	; 0x34
 8007b04:	fa1f fc8c 	uxth.w	ip, ip
 8007b08:	231a      	movs	r3, #26
 8007b0a:	fb03 230c 	mla	r3, r3, ip, r2
 8007b0e:	f002 f8ad 	bl	8009c6c <align_factor_ch>
 8007b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b14:	9303      	str	r3, [sp, #12]
 8007b16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b18:	9302      	str	r3, [sp, #8]
 8007b1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8007b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b28:	9404      	str	r4, [sp, #16]
 8007b2a:	9308      	str	r3, [sp, #32]
 8007b2c:	2400      	movs	r4, #0
 8007b2e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8007b32:	920a      	str	r2, [sp, #40]	; 0x28
 8007b34:	9307      	str	r3, [sp, #28]
 8007b36:	e9cd 5a05 	strd	r5, sl, [sp, #20]
 8007b3a:	465b      	mov	r3, fp
 8007b3c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8007b40:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8007b44:	9409      	str	r4, [sp, #36]	; 0x24
 8007b46:	4648      	mov	r0, r9
 8007b48:	f001 fa76 	bl	8009038 <forward_lite_dw_3x3_sssa8_ch>
 8007b4c:	68b3      	ldr	r3, [r6, #8]
 8007b4e:	0a1b      	lsrs	r3, r3, #8
 8007b50:	d032      	beq.n	8007bb8 <forward_dw_3x3_sssa8_ch+0x1f0>
 8007b52:	68f0      	ldr	r0, [r6, #12]
 8007b54:	2201      	movs	r2, #1
 8007b56:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b5e:	4298      	cmp	r0, r3
 8007b60:	fb01 f202 	mul.w	r2, r1, r2
 8007b64:	d1f9      	bne.n	8007b5a <forward_dw_3x3_sssa8_ch+0x192>
 8007b66:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8007b6a:	ee17 ca90 	vmov	ip, s15
 8007b6e:	463b      	mov	r3, r7
 8007b70:	4631      	mov	r1, r6
 8007b72:	4640      	mov	r0, r8
 8007b74:	b017      	add	sp, #92	; 0x5c
 8007b76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	4760      	bx	ip
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	deff      	udf	#255	; 0xff
 8007b82:	6853      	ldr	r3, [r2, #4]
 8007b84:	deff      	udf	#255	; 0xff
 8007b86:	6865      	ldr	r5, [r4, #4]
 8007b88:	e742      	b.n	8007a10 <forward_dw_3x3_sssa8_ch+0x48>
 8007b8a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8007bd4 <forward_dw_3x3_sssa8_ch+0x20c>
 8007b8e:	e797      	b.n	8007ac0 <forward_dw_3x3_sssa8_ch+0xf8>
 8007b90:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007bd4 <forward_dw_3x3_sssa8_ch+0x20c>
 8007b94:	e784      	b.n	8007aa0 <forward_dw_3x3_sssa8_ch+0xd8>
 8007b96:	6a07      	ldr	r7, [r0, #32]
 8007b98:	2f00      	cmp	r7, #0
 8007b9a:	f43f af6b 	beq.w	8007a74 <forward_dw_3x3_sssa8_ch+0xac>
 8007b9e:	68bf      	ldr	r7, [r7, #8]
 8007ba0:	e768      	b.n	8007a74 <forward_dw_3x3_sssa8_ch+0xac>
 8007ba2:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <forward_dw_3x3_sssa8_ch+0x210>)
 8007ba4:	920e      	str	r2, [sp, #56]	; 0x38
 8007ba6:	4646      	mov	r6, r8
 8007ba8:	e740      	b.n	8007a2c <forward_dw_3x3_sssa8_ch+0x64>
 8007baa:	461c      	mov	r4, r3
 8007bac:	e7a0      	b.n	8007af0 <forward_dw_3x3_sssa8_ch+0x128>
 8007bae:	461d      	mov	r5, r3
 8007bb0:	e7a7      	b.n	8007b02 <forward_dw_3x3_sssa8_ch+0x13a>
 8007bb2:	46a6      	mov	lr, r4
 8007bb4:	4625      	mov	r5, r4
 8007bb6:	e72b      	b.n	8007a10 <forward_dw_3x3_sssa8_ch+0x48>
 8007bb8:	2201      	movs	r2, #1
 8007bba:	e7d4      	b.n	8007b66 <forward_dw_3x3_sssa8_ch+0x19e>
 8007bbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007bbe:	b93b      	cbnz	r3, 8007bd0 <forward_dw_3x3_sssa8_ch+0x208>
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	deff      	udf	#255	; 0xff
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	deff      	udf	#255	; 0xff
 8007bca:	2300      	movs	r3, #0
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	deff      	udf	#255	; 0xff
 8007bd0:	68d3      	ldr	r3, [r2, #12]
 8007bd2:	deff      	udf	#255	; 0xff
 8007bd4:	00000000 	.word	0x00000000
 8007bd8:	080079c5 	.word	0x080079c5

08007bdc <func_dummy>:
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <forward_pw_sssa8_ch>:
 8007be0:	6983      	ldr	r3, [r0, #24]
 8007be2:	8819      	ldrh	r1, [r3, #0]
 8007be4:	2900      	cmp	r1, #0
 8007be6:	f000 80fa 	beq.w	8007dde <forward_pw_sssa8_ch+0x1fe>
 8007bea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bee:	ed2d 8b02 	vpush	{d8}
 8007bf2:	685c      	ldr	r4, [r3, #4]
 8007bf4:	6863      	ldr	r3, [r4, #4]
 8007bf6:	b095      	sub	sp, #84	; 0x54
 8007bf8:	b103      	cbz	r3, 8007bfc <forward_pw_sssa8_ch+0x1c>
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2901      	cmp	r1, #1
 8007bfe:	f000 8114 	beq.w	8007e2a <forward_pw_sssa8_ch+0x24a>
 8007c02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c06:	f1bb 0f00 	cmp.w	fp, #0
 8007c0a:	d001      	beq.n	8007c10 <forward_pw_sssa8_ch+0x30>
 8007c0c:	f8db b000 	ldr.w	fp, [fp]
 8007c10:	2902      	cmp	r1, #2
 8007c12:	f000 80e1 	beq.w	8007dd8 <forward_pw_sssa8_ch+0x1f8>
 8007c16:	69e5      	ldr	r5, [r4, #28]
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	f000 80ff 	beq.w	8007e1c <forward_pw_sssa8_ch+0x23c>
 8007c1e:	8b26      	ldrh	r6, [r4, #24]
 8007c20:	682a      	ldr	r2, [r5, #0]
 8007c22:	2e01      	cmp	r6, #1
 8007c24:	f200 80dd 	bhi.w	8007de2 <forward_pw_sssa8_ch+0x202>
 8007c28:	2600      	movs	r6, #0
 8007c2a:	2903      	cmp	r1, #3
 8007c2c:	f000 8100 	beq.w	8007e30 <forward_pw_sssa8_ch+0x250>
 8007c30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007c32:	2900      	cmp	r1, #0
 8007c34:	f000 80f5 	beq.w	8007e22 <forward_pw_sssa8_ch+0x242>
 8007c38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c3a:	680f      	ldr	r7, [r1, #0]
 8007c3c:	9411      	str	r4, [sp, #68]	; 0x44
 8007c3e:	970d      	str	r7, [sp, #52]	; 0x34
 8007c40:	2c00      	cmp	r4, #0
 8007c42:	f000 80e7 	beq.w	8007e14 <forward_pw_sssa8_ch+0x234>
 8007c46:	684f      	ldr	r7, [r1, #4]
 8007c48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007c4a:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8007c4e:	69a4      	ldr	r4, [r4, #24]
 8007c50:	69b1      	ldr	r1, [r6, #24]
 8007c52:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8007c56:	68de      	ldr	r6, [r3, #12]
 8007c58:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8007c5c:	9410      	str	r4, [sp, #64]	; 0x40
 8007c5e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8007c62:	6889      	ldr	r1, [r1, #8]
 8007c64:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8007c68:	9412      	str	r4, [sp, #72]	; 0x48
 8007c6a:	68f4      	ldr	r4, [r6, #12]
 8007c6c:	9113      	str	r1, [sp, #76]	; 0x4c
 8007c6e:	940a      	str	r4, [sp, #40]	; 0x28
 8007c70:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007c74:	68b4      	ldr	r4, [r6, #8]
 8007c76:	940e      	str	r4, [sp, #56]	; 0x38
 8007c78:	fa1f f48e 	uxth.w	r4, lr
 8007c7c:	ee08 4a10 	vmov	s16, r4
 8007c80:	b28c      	uxth	r4, r1
 8007c82:	940c      	str	r4, [sp, #48]	; 0x30
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	f000 80b4 	beq.w	8007df2 <forward_pw_sssa8_ch+0x212>
 8007c8a:	68ac      	ldr	r4, [r5, #8]
 8007c8c:	2c00      	cmp	r4, #0
 8007c8e:	f000 80b0 	beq.w	8007df2 <forward_pw_sssa8_ch+0x212>
 8007c92:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8007c96:	f1b8 0f00 	cmp.w	r8, #0
 8007c9a:	bf18      	it	ne
 8007c9c:	46a0      	movne	r8, r4
 8007c9e:	681d      	ldr	r5, [r3, #0]
 8007ca0:	683e      	ldr	r6, [r7, #0]
 8007ca2:	6810      	ldr	r0, [r2, #0]
 8007ca4:	2d00      	cmp	r5, #0
 8007ca6:	f000 80a1 	beq.w	8007dec <forward_pw_sssa8_ch+0x20c>
 8007caa:	686c      	ldr	r4, [r5, #4]
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	f000 809d 	beq.w	8007dec <forward_pw_sssa8_ch+0x20c>
 8007cb2:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8007cb6:	f1bc 0f00 	cmp.w	ip, #0
 8007cba:	f000 8097 	beq.w	8007dec <forward_pw_sssa8_ch+0x20c>
 8007cbe:	6824      	ldr	r4, [r4, #0]
 8007cc0:	ed94 0a00 	vldr	s0, [r4]
 8007cc4:	2e00      	cmp	r6, #0
 8007cc6:	f000 808e 	beq.w	8007de6 <forward_pw_sssa8_ch+0x206>
 8007cca:	6874      	ldr	r4, [r6, #4]
 8007ccc:	2c00      	cmp	r4, #0
 8007cce:	f000 808a 	beq.w	8007de6 <forward_pw_sssa8_ch+0x206>
 8007cd2:	f8b6 c002 	ldrh.w	ip, [r6, #2]
 8007cd6:	f1bc 0f00 	cmp.w	ip, #0
 8007cda:	f000 8084 	beq.w	8007de6 <forward_pw_sssa8_ch+0x206>
 8007cde:	6824      	ldr	r4, [r4, #0]
 8007ce0:	edd4 0a00 	vldr	s1, [r4]
 8007ce4:	699c      	ldr	r4, [r3, #24]
 8007ce6:	6993      	ldr	r3, [r2, #24]
 8007ce8:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf6:	b110      	cbz	r0, 8007cfe <forward_pw_sssa8_ch+0x11e>
 8007cf8:	6840      	ldr	r0, [r0, #4]
 8007cfa:	b100      	cbz	r0, 8007cfe <forward_pw_sssa8_ch+0x11e>
 8007cfc:	6800      	ldr	r0, [r0, #0]
 8007cfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d02:	fb03 f202 	mul.w	r2, r3, r2
 8007d06:	b28b      	uxth	r3, r1
 8007d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d0a:	fb03 1202 	mla	r2, r3, r2, r1
 8007d0e:	4591      	cmp	r9, r2
 8007d10:	d278      	bcs.n	8007e04 <forward_pw_sssa8_ch+0x224>
 8007d12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d16:	fa1f fc8e 	uxth.w	ip, lr
 8007d1a:	fb02 f404 	mul.w	r4, r2, r4
 8007d1e:	fb0c 9404 	mla	r4, ip, r4, r9
 8007d22:	42a1      	cmp	r1, r4
 8007d24:	bf2c      	ite	cs
 8007d26:	2400      	movcs	r4, #0
 8007d28:	2401      	movcc	r4, #1
 8007d2a:	b13d      	cbz	r5, 8007d3c <forward_pw_sssa8_ch+0x15c>
 8007d2c:	686a      	ldr	r2, [r5, #4]
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	d06c      	beq.n	8007e0c <forward_pw_sssa8_ch+0x22c>
 8007d32:	886d      	ldrh	r5, [r5, #2]
 8007d34:	b115      	cbz	r5, 8007d3c <forward_pw_sssa8_ch+0x15c>
 8007d36:	6852      	ldr	r2, [r2, #4]
 8007d38:	f992 5000 	ldrsb.w	r5, [r2]
 8007d3c:	b13e      	cbz	r6, 8007d4e <forward_pw_sssa8_ch+0x16e>
 8007d3e:	6872      	ldr	r2, [r6, #4]
 8007d40:	2a00      	cmp	r2, #0
 8007d42:	d065      	beq.n	8007e10 <forward_pw_sssa8_ch+0x230>
 8007d44:	8876      	ldrh	r6, [r6, #2]
 8007d46:	b116      	cbz	r6, 8007d4e <forward_pw_sssa8_ch+0x16e>
 8007d48:	6852      	ldr	r2, [r2, #4]
 8007d4a:	f992 6000 	ldrsb.w	r6, [r2]
 8007d4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d50:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8007d54:	4652      	mov	r2, sl
 8007d56:	f001 ff89 	bl	8009c6c <align_factor_ch>
 8007d5a:	2c00      	cmp	r4, #0
 8007d5c:	d154      	bne.n	8007e08 <forward_pw_sssa8_ch+0x228>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8007d64:	930a      	str	r3, [sp, #40]	; 0x28
 8007d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d68:	9210      	str	r2, [sp, #64]	; 0x40
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d70:	f005 f8a6 	bl	800cec0 <ai_array_get_byte_size>
 8007d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d76:	9306      	str	r3, [sp, #24]
 8007d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d7c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8007d80:	9503      	str	r5, [sp, #12]
 8007d82:	e9cd 6304 	strd	r6, r3, [sp, #16]
 8007d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d88:	9302      	str	r3, [sp, #8]
 8007d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	2401      	movs	r4, #1
 8007d90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	e9cd 0a08 	strd	r0, sl, [sp, #32]
 8007d98:	ee18 3a10 	vmov	r3, s16
 8007d9c:	9407      	str	r4, [sp, #28]
 8007d9e:	4648      	mov	r0, r9
 8007da0:	f000 fb58 	bl	8008454 <forward_lite_pw_sssa8_ch>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	4622      	mov	r2, r4
 8007daa:	d008      	beq.n	8007dbe <forward_pw_sssa8_ch+0x1de>
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007db2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007db6:	4298      	cmp	r0, r3
 8007db8:	fb01 f202 	mul.w	r2, r1, r2
 8007dbc:	d1f9      	bne.n	8007db2 <forward_pw_sssa8_ch+0x1d2>
 8007dbe:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8007dc2:	ee17 ca90 	vmov	ip, s15
 8007dc6:	4643      	mov	r3, r8
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4658      	mov	r0, fp
 8007dcc:	b015      	add	sp, #84	; 0x54
 8007dce:	ecbd 8b02 	vpop	{d8}
 8007dd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd6:	4760      	bx	ip
 8007dd8:	2300      	movs	r3, #0
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	deff      	udf	#255	; 0xff
 8007dde:	684b      	ldr	r3, [r1, #4]
 8007de0:	deff      	udf	#255	; 0xff
 8007de2:	686e      	ldr	r6, [r5, #4]
 8007de4:	e721      	b.n	8007c2a <forward_pw_sssa8_ch+0x4a>
 8007de6:	eddf 0a15 	vldr	s1, [pc, #84]	; 8007e3c <forward_pw_sssa8_ch+0x25c>
 8007dea:	e77b      	b.n	8007ce4 <forward_pw_sssa8_ch+0x104>
 8007dec:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8007e3c <forward_pw_sssa8_ch+0x25c>
 8007df0:	e768      	b.n	8007cc4 <forward_pw_sssa8_ch+0xe4>
 8007df2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	f43f af50 	beq.w	8007c9e <forward_pw_sssa8_ch+0xbe>
 8007dfe:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8007e02:	e74c      	b.n	8007c9e <forward_pw_sssa8_ch+0xbe>
 8007e04:	2400      	movs	r4, #0
 8007e06:	e790      	b.n	8007d2a <forward_pw_sssa8_ch+0x14a>
 8007e08:	4622      	mov	r2, r4
 8007e0a:	e7ac      	b.n	8007d66 <forward_pw_sssa8_ch+0x186>
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	e795      	b.n	8007d3c <forward_pw_sssa8_ch+0x15c>
 8007e10:	4616      	mov	r6, r2
 8007e12:	e79c      	b.n	8007d4e <forward_pw_sssa8_ch+0x16e>
 8007e14:	490a      	ldr	r1, [pc, #40]	; (8007e40 <forward_pw_sssa8_ch+0x260>)
 8007e16:	9111      	str	r1, [sp, #68]	; 0x44
 8007e18:	465f      	mov	r7, fp
 8007e1a:	e715      	b.n	8007c48 <forward_pw_sssa8_ch+0x68>
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	462e      	mov	r6, r5
 8007e20:	e703      	b.n	8007c2a <forward_pw_sssa8_ch+0x4a>
 8007e22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e24:	b93b      	cbnz	r3, 8007e36 <forward_pw_sssa8_ch+0x256>
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	deff      	udf	#255	; 0xff
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	deff      	udf	#255	; 0xff
 8007e30:	2300      	movs	r3, #0
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	deff      	udf	#255	; 0xff
 8007e36:	68cb      	ldr	r3, [r1, #12]
 8007e38:	deff      	udf	#255	; 0xff
 8007e3a:	bf00      	nop
 8007e3c:	00000000 	.word	0x00000000
 8007e40:	08007bdd 	.word	0x08007bdd

08007e44 <func_dummy>:
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop

08007e48 <forward_conv2d_sssa8_ch>:
 8007e48:	6982      	ldr	r2, [r0, #24]
 8007e4a:	8813      	ldrh	r3, [r2, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 8109 	beq.w	8008064 <forward_conv2d_sssa8_ch+0x21c>
 8007e52:	6852      	ldr	r2, [r2, #4]
 8007e54:	6851      	ldr	r1, [r2, #4]
 8007e56:	b101      	cbz	r1, 8007e5a <forward_conv2d_sssa8_ch+0x12>
 8007e58:	6809      	ldr	r1, [r1, #0]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	f000 8123 	beq.w	80080a6 <forward_conv2d_sssa8_ch+0x25e>
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	ed2d 8b02 	vpush	{d8}
 8007e68:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8007e6c:	b0a3      	sub	sp, #140	; 0x8c
 8007e6e:	f1b9 0f00 	cmp.w	r9, #0
 8007e72:	d001      	beq.n	8007e78 <forward_conv2d_sssa8_ch+0x30>
 8007e74:	f8d9 9000 	ldr.w	r9, [r9]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	f000 80f0 	beq.w	800805e <forward_conv2d_sssa8_ch+0x216>
 8007e7e:	69d4      	ldr	r4, [r2, #28]
 8007e80:	2c00      	cmp	r4, #0
 8007e82:	f000 810a 	beq.w	800809a <forward_conv2d_sssa8_ch+0x252>
 8007e86:	8b15      	ldrh	r5, [r2, #24]
 8007e88:	f8d4 c000 	ldr.w	ip, [r4]
 8007e8c:	2d01      	cmp	r5, #1
 8007e8e:	f200 80eb 	bhi.w	8008068 <forward_conv2d_sssa8_ch+0x220>
 8007e92:	2500      	movs	r5, #0
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	f000 8109 	beq.w	80080ac <forward_conv2d_sssa8_ch+0x264>
 8007e9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007e9c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80fe 	beq.w	80080a0 <forward_conv2d_sssa8_ch+0x258>
 8007ea4:	f8d3 b000 	ldr.w	fp, [r3]
 8007ea8:	9216      	str	r2, [sp, #88]	; 0x58
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	f000 80ed 	beq.w	800808a <forward_conv2d_sssa8_ch+0x242>
 8007eb0:	685f      	ldr	r7, [r3, #4]
 8007eb2:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8007eb6:	68fe      	ldr	r6, [r7, #12]
 8007eb8:	69ab      	ldr	r3, [r5, #24]
 8007eba:	f8ba 5004 	ldrh.w	r5, [sl, #4]
 8007ebe:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8007ec2:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f8db 2018 	ldr.w	r2, [fp, #24]
 8007ecc:	9321      	str	r3, [sp, #132]	; 0x84
 8007ece:	ee08 5a90 	vmov	s17, r5
 8007ed2:	68f5      	ldr	r5, [r6, #12]
 8007ed4:	9517      	str	r5, [sp, #92]	; 0x5c
 8007ed6:	68b5      	ldr	r5, [r6, #8]
 8007ed8:	9518      	str	r5, [sp, #96]	; 0x60
 8007eda:	f8da 500c 	ldr.w	r5, [sl, #12]
 8007ede:	9519      	str	r5, [sp, #100]	; 0x64
 8007ee0:	f8da 5008 	ldr.w	r5, [sl, #8]
 8007ee4:	951a      	str	r5, [sp, #104]	; 0x68
 8007ee6:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 8007ee8:	951b      	str	r5, [sp, #108]	; 0x6c
 8007eea:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
 8007eec:	951c      	str	r5, [sp, #112]	; 0x70
 8007eee:	f8b8 5000 	ldrh.w	r5, [r8]
 8007ef2:	951d      	str	r5, [sp, #116]	; 0x74
 8007ef4:	f8b8 5004 	ldrh.w	r5, [r8, #4]
 8007ef8:	6873      	ldr	r3, [r6, #4]
 8007efa:	951e      	str	r5, [sp, #120]	; 0x78
 8007efc:	f8de 5008 	ldr.w	r5, [lr, #8]
 8007f00:	951f      	str	r5, [sp, #124]	; 0x7c
 8007f02:	f8de 5004 	ldr.w	r5, [lr, #4]
 8007f06:	6892      	ldr	r2, [r2, #8]
 8007f08:	9520      	str	r5, [sp, #128]	; 0x80
 8007f0a:	fa1f fa83 	uxth.w	sl, r3
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	f000 80b2 	beq.w	8008078 <forward_conv2d_sssa8_ch+0x230>
 8007f14:	68a4      	ldr	r4, [r4, #8]
 8007f16:	2c00      	cmp	r4, #0
 8007f18:	f000 80ae 	beq.w	8008078 <forward_conv2d_sssa8_ch+0x230>
 8007f1c:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8007f20:	f1b8 0f00 	cmp.w	r8, #0
 8007f24:	bf18      	it	ne
 8007f26:	46a0      	movne	r8, r4
 8007f28:	680d      	ldr	r5, [r1, #0]
 8007f2a:	683e      	ldr	r6, [r7, #0]
 8007f2c:	f8dc 0000 	ldr.w	r0, [ip]
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	f000 809e 	beq.w	8008072 <forward_conv2d_sssa8_ch+0x22a>
 8007f36:	686c      	ldr	r4, [r5, #4]
 8007f38:	2c00      	cmp	r4, #0
 8007f3a:	f000 809a 	beq.w	8008072 <forward_conv2d_sssa8_ch+0x22a>
 8007f3e:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8007f42:	f1be 0f00 	cmp.w	lr, #0
 8007f46:	f000 8094 	beq.w	8008072 <forward_conv2d_sssa8_ch+0x22a>
 8007f4a:	6824      	ldr	r4, [r4, #0]
 8007f4c:	ed94 0a00 	vldr	s0, [r4]
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	f000 808b 	beq.w	800806c <forward_conv2d_sssa8_ch+0x224>
 8007f56:	6874      	ldr	r4, [r6, #4]
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	f000 8087 	beq.w	800806c <forward_conv2d_sssa8_ch+0x224>
 8007f5e:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 8007f62:	f1be 0f00 	cmp.w	lr, #0
 8007f66:	f000 8081 	beq.w	800806c <forward_conv2d_sssa8_ch+0x224>
 8007f6a:	6824      	ldr	r4, [r4, #0]
 8007f6c:	edd4 0a00 	vldr	s1, [r4]
 8007f70:	698c      	ldr	r4, [r1, #24]
 8007f72:	f8dc 1018 	ldr.w	r1, [ip, #24]
 8007f76:	68a4      	ldr	r4, [r4, #8]
 8007f78:	6889      	ldr	r1, [r1, #8]
 8007f7a:	9114      	str	r1, [sp, #80]	; 0x50
 8007f7c:	69b9      	ldr	r1, [r7, #24]
 8007f7e:	6889      	ldr	r1, [r1, #8]
 8007f80:	9113      	str	r1, [sp, #76]	; 0x4c
 8007f82:	ee08 4a10 	vmov	s16, r4
 8007f86:	b110      	cbz	r0, 8007f8e <forward_conv2d_sssa8_ch+0x146>
 8007f88:	6840      	ldr	r0, [r0, #4]
 8007f8a:	b100      	cbz	r0, 8007f8e <forward_conv2d_sssa8_ch+0x146>
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	b13d      	cbz	r5, 8007fa2 <forward_conv2d_sssa8_ch+0x15a>
 8007f92:	6869      	ldr	r1, [r5, #4]
 8007f94:	2900      	cmp	r1, #0
 8007f96:	d07c      	beq.n	8008092 <forward_conv2d_sssa8_ch+0x24a>
 8007f98:	886d      	ldrh	r5, [r5, #2]
 8007f9a:	b115      	cbz	r5, 8007fa2 <forward_conv2d_sssa8_ch+0x15a>
 8007f9c:	6849      	ldr	r1, [r1, #4]
 8007f9e:	f991 5000 	ldrsb.w	r5, [r1]
 8007fa2:	b13e      	cbz	r6, 8007fb4 <forward_conv2d_sssa8_ch+0x16c>
 8007fa4:	6871      	ldr	r1, [r6, #4]
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	d075      	beq.n	8008096 <forward_conv2d_sssa8_ch+0x24e>
 8007faa:	8876      	ldrh	r6, [r6, #2]
 8007fac:	b116      	cbz	r6, 8007fb4 <forward_conv2d_sssa8_ch+0x16c>
 8007fae:	6849      	ldr	r1, [r1, #4]
 8007fb0:	f991 6000 	ldrsb.w	r6, [r1]
 8007fb4:	9215      	str	r2, [sp, #84]	; 0x54
 8007fb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007fba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fbe:	4651      	mov	r1, sl
 8007fc0:	f001 fe54 	bl	8009c6c <align_factor_ch>
 8007fc4:	f8db 3018 	ldr.w	r3, [fp, #24]
 8007fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fcc:	f004 ff78 	bl	800cec0 <ai_array_get_byte_size>
 8007fd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fd4:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8007fd8:	9509      	str	r5, [sp, #36]	; 0x24
 8007fda:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 8007fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe0:	9308      	str	r3, [sp, #32]
 8007fe2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fe4:	9307      	str	r3, [sp, #28]
 8007fe6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fe8:	9306      	str	r3, [sp, #24]
 8007fea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007fec:	9305      	str	r3, [sp, #20]
 8007fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8007ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8007ffc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8008000:	930c      	str	r3, [sp, #48]	; 0x30
 8008002:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8008006:	9303      	str	r3, [sp, #12]
 8008008:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800800c:	9302      	str	r3, [sp, #8]
 800800e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
 8008012:	ee18 3a90 	vmov	r3, s17
 8008016:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 800801a:	f8cd a004 	str.w	sl, [sp, #4]
 800801e:	2401      	movs	r4, #1
 8008020:	ee18 0a10 	vmov	r0, s16
 8008024:	940e      	str	r4, [sp, #56]	; 0x38
 8008026:	f000 fab5 	bl	8008594 <forward_lite_conv2d_sssa8_ch>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	0a1b      	lsrs	r3, r3, #8
 800802e:	4622      	mov	r2, r4
 8008030:	d008      	beq.n	8008044 <forward_conv2d_sssa8_ch+0x1fc>
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008038:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800803c:	4298      	cmp	r0, r3
 800803e:	fb01 f202 	mul.w	r2, r1, r2
 8008042:	d1f9      	bne.n	8008038 <forward_conv2d_sssa8_ch+0x1f0>
 8008044:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8008048:	ee17 ca90 	vmov	ip, s15
 800804c:	4643      	mov	r3, r8
 800804e:	4639      	mov	r1, r7
 8008050:	4648      	mov	r0, r9
 8008052:	b023      	add	sp, #140	; 0x8c
 8008054:	ecbd 8b02 	vpop	{d8}
 8008058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	4760      	bx	ip
 800805e:	2300      	movs	r3, #0
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	deff      	udf	#255	; 0xff
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	deff      	udf	#255	; 0xff
 8008068:	6865      	ldr	r5, [r4, #4]
 800806a:	e713      	b.n	8007e94 <forward_conv2d_sssa8_ch+0x4c>
 800806c:	eddf 0a12 	vldr	s1, [pc, #72]	; 80080b8 <forward_conv2d_sssa8_ch+0x270>
 8008070:	e77e      	b.n	8007f70 <forward_conv2d_sssa8_ch+0x128>
 8008072:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80080b8 <forward_conv2d_sssa8_ch+0x270>
 8008076:	e76b      	b.n	8007f50 <forward_conv2d_sssa8_ch+0x108>
 8008078:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800807c:	f1b8 0f00 	cmp.w	r8, #0
 8008080:	f43f af52 	beq.w	8007f28 <forward_conv2d_sssa8_ch+0xe0>
 8008084:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8008088:	e74e      	b.n	8007f28 <forward_conv2d_sssa8_ch+0xe0>
 800808a:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <forward_conv2d_sssa8_ch+0x274>)
 800808c:	9316      	str	r3, [sp, #88]	; 0x58
 800808e:	464f      	mov	r7, r9
 8008090:	e70f      	b.n	8007eb2 <forward_conv2d_sssa8_ch+0x6a>
 8008092:	460d      	mov	r5, r1
 8008094:	e785      	b.n	8007fa2 <forward_conv2d_sssa8_ch+0x15a>
 8008096:	460e      	mov	r6, r1
 8008098:	e78c      	b.n	8007fb4 <forward_conv2d_sssa8_ch+0x16c>
 800809a:	46a4      	mov	ip, r4
 800809c:	4625      	mov	r5, r4
 800809e:	e6f9      	b.n	8007e94 <forward_conv2d_sssa8_ch+0x4c>
 80080a0:	b93a      	cbnz	r2, 80080b2 <forward_conv2d_sssa8_ch+0x26a>
 80080a2:	6993      	ldr	r3, [r2, #24]
 80080a4:	deff      	udf	#255	; 0xff
 80080a6:	2300      	movs	r3, #0
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	deff      	udf	#255	; 0xff
 80080ac:	2300      	movs	r3, #0
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	deff      	udf	#255	; 0xff
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	deff      	udf	#255	; 0xff
 80080b6:	bf00      	nop
 80080b8:	00000000 	.word	0x00000000
 80080bc:	08007e45 	.word	0x08007e45

080080c0 <ai_check_custom_types>:
 80080c0:	b082      	sub	sp, #8
 80080c2:	4b13      	ldr	r3, [pc, #76]	; (8008110 <ai_check_custom_types+0x50>)
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	b118      	cbz	r0, 80080d0 <ai_check_custom_types+0x10>
 80080c8:	7803      	ldrb	r3, [r0, #0]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d002      	beq.n	80080d4 <ai_check_custom_types+0x14>
 80080ce:	2000      	movs	r0, #0
 80080d0:	b002      	add	sp, #8
 80080d2:	4770      	bx	lr
 80080d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <ai_check_custom_types+0x26>
 80080dc:	2001      	movs	r0, #1
 80080de:	f080 0001 	eor.w	r0, r0, #1
 80080e2:	b002      	add	sp, #8
 80080e4:	4770      	bx	lr
 80080e6:	7842      	ldrb	r2, [r0, #1]
 80080e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	f100 0001 	add.w	r0, r0, #1
 80080f2:	d1f3      	bne.n	80080dc <ai_check_custom_types+0x1c>
 80080f4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80080f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d1ed      	bne.n	80080dc <ai_check_custom_types+0x1c>
 8008100:	7842      	ldrb	r2, [r0, #1]
 8008102:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008106:	429a      	cmp	r2, r3
 8008108:	d1e8      	bne.n	80080dc <ai_check_custom_types+0x1c>
 800810a:	2000      	movs	r0, #0
 800810c:	e7e7      	b.n	80080de <ai_check_custom_types+0x1e>
 800810e:	bf00      	nop
 8008110:	84048403 	.word	0x84048403

08008114 <ai_layer_type_name>:
 8008114:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
 8008118:	d809      	bhi.n	800812e <ai_layer_type_name+0x1a>
 800811a:	f5b0 7f99 	cmp.w	r0, #306	; 0x132
 800811e:	d217      	bcs.n	8008150 <ai_layer_type_name+0x3c>
 8008120:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8008124:	d80e      	bhi.n	8008144 <ai_layer_type_name+0x30>
 8008126:	28ff      	cmp	r0, #255	; 0xff
 8008128:	d805      	bhi.n	8008136 <ai_layer_type_name+0x22>
 800812a:	480e      	ldr	r0, [pc, #56]	; (8008164 <ai_layer_type_name+0x50>)
 800812c:	4770      	bx	lr
 800812e:	f5a0 73c0 	sub.w	r3, r0, #384	; 0x180
 8008132:	2b03      	cmp	r3, #3
 8008134:	d8f9      	bhi.n	800812a <ai_layer_type_name+0x16>
 8008136:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800813a:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <ai_layer_type_name+0x54>)
 800813c:	b280      	uxth	r0, r0
 800813e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008142:	4770      	bx	lr
 8008144:	f5a0 7383 	sub.w	r3, r0, #262	; 0x106
 8008148:	2b27      	cmp	r3, #39	; 0x27
 800814a:	d9f4      	bls.n	8008136 <ai_layer_type_name+0x22>
 800814c:	4805      	ldr	r0, [pc, #20]	; (8008164 <ai_layer_type_name+0x50>)
 800814e:	4770      	bx	lr
 8008150:	f5a0 7399 	sub.w	r3, r0, #306	; 0x132
 8008154:	b29a      	uxth	r2, r3
 8008156:	4905      	ldr	r1, [pc, #20]	; (800816c <ai_layer_type_name+0x58>)
 8008158:	2301      	movs	r3, #1
 800815a:	4093      	lsls	r3, r2
 800815c:	420b      	tst	r3, r1
 800815e:	d1ea      	bne.n	8008136 <ai_layer_type_name+0x22>
 8008160:	4800      	ldr	r0, [pc, #0]	; (8008164 <ai_layer_type_name+0x50>)
 8008162:	4770      	bx	lr
 8008164:	08018078 	.word	0x08018078
 8008168:	08018264 	.word	0x08018264
 800816c:	00012007 	.word	0x00012007

08008170 <ai_layers_init_all>:
 8008170:	4601      	mov	r1, r0
 8008172:	2000      	movs	r0, #0
 8008174:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008176:	b143      	cbz	r3, 800818a <ai_layers_init_all+0x1a>
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	60d9      	str	r1, [r3, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	f100 0001 	add.w	r0, r0, #1
 8008182:	d002      	beq.n	800818a <ai_layers_init_all+0x1a>
 8008184:	b10a      	cbz	r2, 800818a <ai_layers_init_all+0x1a>
 8008186:	4613      	mov	r3, r2
 8008188:	e7f5      	b.n	8008176 <ai_layers_init_all+0x6>
 800818a:	4770      	bx	lr

0800818c <ai_layers_post_init_all>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008190:	2500      	movs	r5, #0
 8008192:	b16c      	cbz	r4, 80081b0 <ai_layers_post_init_all+0x24>
 8008194:	6863      	ldr	r3, [r4, #4]
 8008196:	07db      	lsls	r3, r3, #31
 8008198:	d504      	bpl.n	80081a4 <ai_layers_post_init_all+0x18>
 800819a:	6a23      	ldr	r3, [r4, #32]
 800819c:	4620      	mov	r0, r4
 800819e:	b10b      	cbz	r3, 80081a4 <ai_layers_post_init_all+0x18>
 80081a0:	4798      	blx	r3
 80081a2:	3501      	adds	r5, #1
 80081a4:	6923      	ldr	r3, [r4, #16]
 80081a6:	42a3      	cmp	r3, r4
 80081a8:	d002      	beq.n	80081b0 <ai_layers_post_init_all+0x24>
 80081aa:	b10b      	cbz	r3, 80081b0 <ai_layers_post_init_all+0x24>
 80081ac:	461c      	mov	r4, r3
 80081ae:	e7f0      	b.n	8008192 <ai_layers_post_init_all+0x6>
 80081b0:	4628      	mov	r0, r5
 80081b2:	bd38      	pop	{r3, r4, r5, pc}

080081b4 <ai_layers_forward_all>:
 80081b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80081bc:	4604      	mov	r4, r0
 80081be:	f1b8 0f00 	cmp.w	r8, #0
 80081c2:	d02b      	beq.n	800821c <ai_layers_forward_all+0x68>
 80081c4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80081c6:	6381      	str	r1, [r0, #56]	; 0x38
 80081c8:	b321      	cbz	r1, 8008214 <ai_layers_forward_all+0x60>
 80081ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80081cc:	2001      	movs	r0, #1
 80081ce:	47c0      	blx	r8
 80081d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80081d2:	b1fe      	cbz	r6, 8008214 <ai_layers_forward_all+0x60>
 80081d4:	2700      	movs	r7, #0
 80081d6:	4631      	mov	r1, r6
 80081d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081da:	2002      	movs	r0, #2
 80081dc:	47c0      	blx	r8
 80081de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80081e0:	4628      	mov	r0, r5
 80081e2:	696b      	ldr	r3, [r5, #20]
 80081e4:	4798      	blx	r3
 80081e6:	692e      	ldr	r6, [r5, #16]
 80081e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80081ec:	42b5      	cmp	r5, r6
 80081ee:	f04f 0003 	mov.w	r0, #3
 80081f2:	d007      	beq.n	8008204 <ai_layers_forward_all+0x50>
 80081f4:	47c0      	blx	r8
 80081f6:	3701      	adds	r7, #1
 80081f8:	63a6      	str	r6, [r4, #56]	; 0x38
 80081fa:	2e00      	cmp	r6, #0
 80081fc:	d1eb      	bne.n	80081d6 <ai_layers_forward_all+0x22>
 80081fe:	4638      	mov	r0, r7
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	2003      	movs	r0, #3
 8008206:	47c0      	blx	r8
 8008208:	2300      	movs	r3, #0
 800820a:	3701      	adds	r7, #1
 800820c:	63a3      	str	r3, [r4, #56]	; 0x38
 800820e:	4638      	mov	r0, r7
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008214:	2700      	movs	r7, #0
 8008216:	4638      	mov	r0, r7
 8008218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800821c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800821e:	6385      	str	r5, [r0, #56]	; 0x38
 8008220:	2d00      	cmp	r5, #0
 8008222:	d0f7      	beq.n	8008214 <ai_layers_forward_all+0x60>
 8008224:	4647      	mov	r7, r8
 8008226:	696b      	ldr	r3, [r5, #20]
 8008228:	4628      	mov	r0, r5
 800822a:	4798      	blx	r3
 800822c:	462b      	mov	r3, r5
 800822e:	692d      	ldr	r5, [r5, #16]
 8008230:	429d      	cmp	r5, r3
 8008232:	d004      	beq.n	800823e <ai_layers_forward_all+0x8a>
 8008234:	63a5      	str	r5, [r4, #56]	; 0x38
 8008236:	3701      	adds	r7, #1
 8008238:	2d00      	cmp	r5, #0
 800823a:	d1f4      	bne.n	8008226 <ai_layers_forward_all+0x72>
 800823c:	e7df      	b.n	80081fe <ai_layers_forward_all+0x4a>
 800823e:	2300      	movs	r3, #0
 8008240:	63a3      	str	r3, [r4, #56]	; 0x38
 8008242:	3701      	adds	r7, #1
 8008244:	e7db      	b.n	80081fe <ai_layers_forward_all+0x4a>
 8008246:	bf00      	nop

08008248 <ai_layers_destroy_all>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800824c:	2500      	movs	r5, #0
 800824e:	b16c      	cbz	r4, 800826c <ai_layers_destroy_all+0x24>
 8008250:	6863      	ldr	r3, [r4, #4]
 8008252:	075b      	lsls	r3, r3, #29
 8008254:	d504      	bpl.n	8008260 <ai_layers_destroy_all+0x18>
 8008256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008258:	4620      	mov	r0, r4
 800825a:	b10b      	cbz	r3, 8008260 <ai_layers_destroy_all+0x18>
 800825c:	4798      	blx	r3
 800825e:	3501      	adds	r5, #1
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	42a3      	cmp	r3, r4
 8008264:	d002      	beq.n	800826c <ai_layers_destroy_all+0x24>
 8008266:	b10b      	cbz	r3, 800826c <ai_layers_destroy_all+0x24>
 8008268:	461c      	mov	r4, r3
 800826a:	e7f0      	b.n	800824e <ai_layers_destroy_all+0x6>
 800826c:	4628      	mov	r0, r5
 800826e:	bd38      	pop	{r3, r4, r5, pc}

08008270 <forward_ap_integer_INT8>:
 8008270:	6983      	ldr	r3, [r0, #24]
 8008272:	881a      	ldrh	r2, [r3, #0]
 8008274:	2a00      	cmp	r2, #0
 8008276:	d074      	beq.n	8008362 <forward_ap_integer_INT8+0xf2>
 8008278:	6859      	ldr	r1, [r3, #4]
 800827a:	684b      	ldr	r3, [r1, #4]
 800827c:	b103      	cbz	r3, 8008280 <forward_ap_integer_INT8+0x10>
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2a01      	cmp	r2, #1
 8008282:	f000 80e0 	beq.w	8008446 <forward_ap_integer_INT8+0x1d6>
 8008286:	690a      	ldr	r2, [r1, #16]
 8008288:	2a00      	cmp	r2, #0
 800828a:	f000 80df 	beq.w	800844c <forward_ap_integer_INT8+0x1dc>
 800828e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008292:	68de      	ldr	r6, [r3, #12]
 8008294:	6811      	ldr	r1, [r2, #0]
 8008296:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8008298:	681c      	ldr	r4, [r3, #0]
 800829a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 800829e:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 80082a2:	8932      	ldrh	r2, [r6, #8]
 80082a4:	89b3      	ldrh	r3, [r6, #12]
 80082a6:	8b86      	ldrh	r6, [r0, #28]
 80082a8:	68cd      	ldr	r5, [r1, #12]
 80082aa:	f8d1 a018 	ldr.w	sl, [r1, #24]
 80082ae:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 80082b2:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 80082b6:	b095      	sub	sp, #84	; 0x54
 80082b8:	960d      	str	r6, [sp, #52]	; 0x34
 80082ba:	8c06      	ldrh	r6, [r0, #32]
 80082bc:	960e      	str	r6, [sp, #56]	; 0x38
 80082be:	88be      	ldrh	r6, [r7, #4]
 80082c0:	960f      	str	r6, [sp, #60]	; 0x3c
 80082c2:	883e      	ldrh	r6, [r7, #0]
 80082c4:	9610      	str	r6, [sp, #64]	; 0x40
 80082c6:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 80082c8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80082ca:	9611      	str	r6, [sp, #68]	; 0x44
 80082cc:	9012      	str	r0, [sp, #72]	; 0x48
 80082ce:	680e      	ldr	r6, [r1, #0]
 80082d0:	2c00      	cmp	r4, #0
 80082d2:	d060      	beq.n	8008396 <forward_ap_integer_INT8+0x126>
 80082d4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	d043      	beq.n	8008366 <forward_ap_integer_INT8+0xf6>
 80082de:	8865      	ldrh	r5, [r4, #2]
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	d06e      	beq.n	80083c2 <forward_ap_integer_INT8+0x152>
 80082e4:	f8d9 1000 	ldr.w	r1, [r9]
 80082e8:	ed91 0a00 	vldr	s0, [r1]
 80082ec:	2e00      	cmp	r6, #0
 80082ee:	d06c      	beq.n	80083ca <forward_ap_integer_INT8+0x15a>
 80082f0:	6877      	ldr	r7, [r6, #4]
 80082f2:	2f00      	cmp	r7, #0
 80082f4:	d03e      	beq.n	8008374 <forward_ap_integer_INT8+0x104>
 80082f6:	8871      	ldrh	r1, [r6, #2]
 80082f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80082fa:	2900      	cmp	r1, #0
 80082fc:	d053      	beq.n	80083a6 <forward_ap_integer_INT8+0x136>
 80082fe:	683d      	ldr	r5, [r7, #0]
 8008300:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008304:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008308:	edd5 0a00 	vldr	s1, [r5]
 800830c:	f1b9 0f00 	cmp.w	r9, #0
 8008310:	d055      	beq.n	80083be <forward_ap_integer_INT8+0x14e>
 8008312:	8864      	ldrh	r4, [r4, #2]
 8008314:	2c00      	cmp	r4, #0
 8008316:	d039      	beq.n	800838c <forward_ap_integer_INT8+0x11c>
 8008318:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800831c:	f994 4000 	ldrsb.w	r4, [r4]
 8008320:	2e00      	cmp	r6, #0
 8008322:	d036      	beq.n	8008392 <forward_ap_integer_INT8+0x122>
 8008324:	2f00      	cmp	r7, #0
 8008326:	d034      	beq.n	8008392 <forward_ap_integer_INT8+0x122>
 8008328:	8875      	ldrh	r5, [r6, #2]
 800832a:	9513      	str	r5, [sp, #76]	; 0x4c
 800832c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800832e:	b115      	cbz	r5, 8008336 <forward_ap_integer_INT8+0xc6>
 8008330:	687d      	ldr	r5, [r7, #4]
 8008332:	f995 5000 	ldrsb.w	r5, [r5]
 8008336:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800833a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800833c:	9406      	str	r4, [sp, #24]
 800833e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008340:	9405      	str	r4, [sp, #20]
 8008342:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008344:	9404      	str	r4, [sp, #16]
 8008346:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008348:	9403      	str	r4, [sp, #12]
 800834a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800834c:	9402      	str	r4, [sp, #8]
 800834e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008350:	e9cd ce07 	strd	ip, lr, [sp, #28]
 8008354:	e9cd 8400 	strd	r8, r4, [sp]
 8008358:	f004 f87a 	bl	800c450 <st_int8_avepool>
 800835c:	b015      	add	sp, #84	; 0x54
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	6853      	ldr	r3, [r2, #4]
 8008364:	deff      	udf	#255	; 0xff
 8008366:	2e00      	cmp	r6, #0
 8008368:	d039      	beq.n	80083de <forward_ap_integer_INT8+0x16e>
 800836a:	6877      	ldr	r7, [r6, #4]
 800836c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 8008370:	2f00      	cmp	r7, #0
 8008372:	d1c0      	bne.n	80082f6 <forward_ap_integer_INT8+0x86>
 8008374:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008378:	f8da 1008 	ldr.w	r1, [sl, #8]
 800837c:	f1b9 0f00 	cmp.w	r9, #0
 8008380:	d05c      	beq.n	800843c <forward_ap_integer_INT8+0x1cc>
 8008382:	8864      	ldrh	r4, [r4, #2]
 8008384:	2c00      	cmp	r4, #0
 8008386:	d152      	bne.n	800842e <forward_ap_integer_INT8+0x1be>
 8008388:	eddf 0a31 	vldr	s1, [pc, #196]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 800838c:	2400      	movs	r4, #0
 800838e:	2f00      	cmp	r7, #0
 8008390:	d1ca      	bne.n	8008328 <forward_ap_integer_INT8+0xb8>
 8008392:	2500      	movs	r5, #0
 8008394:	e7cf      	b.n	8008336 <forward_ap_integer_INT8+0xc6>
 8008396:	b316      	cbz	r6, 80083de <forward_ap_integer_INT8+0x16e>
 8008398:	6877      	ldr	r7, [r6, #4]
 800839a:	b35f      	cbz	r7, 80083f4 <forward_ap_integer_INT8+0x184>
 800839c:	8871      	ldrh	r1, [r6, #2]
 800839e:	9113      	str	r1, [sp, #76]	; 0x4c
 80083a0:	bb99      	cbnz	r1, 800840a <forward_ap_integer_INT8+0x19a>
 80083a2:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 80083a6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80083aa:	f8da 1008 	ldr.w	r1, [sl, #8]
 80083ae:	b194      	cbz	r4, 80083d6 <forward_ap_integer_INT8+0x166>
 80083b0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80083b4:	eddf 0a26 	vldr	s1, [pc, #152]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 80083b8:	f1b9 0f00 	cmp.w	r9, #0
 80083bc:	d1a9      	bne.n	8008312 <forward_ap_integer_INT8+0xa2>
 80083be:	464c      	mov	r4, r9
 80083c0:	e7b4      	b.n	800832c <forward_ap_integer_INT8+0xbc>
 80083c2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 80083c6:	2e00      	cmp	r6, #0
 80083c8:	d192      	bne.n	80082f0 <forward_ap_integer_INT8+0x80>
 80083ca:	f8db 0008 	ldr.w	r0, [fp, #8]
 80083ce:	f8da 1008 	ldr.w	r1, [sl, #8]
 80083d2:	bb25      	cbnz	r5, 800841e <forward_ap_integer_INT8+0x1ae>
 80083d4:	462c      	mov	r4, r5
 80083d6:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 80083da:	4625      	mov	r5, r4
 80083dc:	e7ab      	b.n	8008336 <forward_ap_integer_INT8+0xc6>
 80083de:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 80083e2:	f8db 0008 	ldr.w	r0, [fp, #8]
 80083e6:	f8da 1008 	ldr.w	r1, [sl, #8]
 80083ea:	4634      	mov	r4, r6
 80083ec:	eef0 0a40 	vmov.f32	s1, s0
 80083f0:	4635      	mov	r5, r6
 80083f2:	e7a0      	b.n	8008336 <forward_ap_integer_INT8+0xc6>
 80083f4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 80083f8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80083fc:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008400:	463c      	mov	r4, r7
 8008402:	eef0 0a40 	vmov.f32	s1, s0
 8008406:	463d      	mov	r5, r7
 8008408:	e795      	b.n	8008336 <forward_ap_integer_INT8+0xc6>
 800840a:	683d      	ldr	r5, [r7, #0]
 800840c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008410:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008414:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 8008418:	edd5 0a00 	vldr	s1, [r5]
 800841c:	e788      	b.n	8008330 <forward_ap_integer_INT8+0xc0>
 800841e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008422:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 8008426:	f994 4000 	ldrsb.w	r4, [r4]
 800842a:	4635      	mov	r5, r6
 800842c:	e783      	b.n	8008336 <forward_ap_integer_INT8+0xc6>
 800842e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008432:	eddf 0a07 	vldr	s1, [pc, #28]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 8008436:	f994 4000 	ldrsb.w	r4, [r4]
 800843a:	e7aa      	b.n	8008392 <forward_ap_integer_INT8+0x122>
 800843c:	eddf 0a04 	vldr	s1, [pc, #16]	; 8008450 <forward_ap_integer_INT8+0x1e0>
 8008440:	464c      	mov	r4, r9
 8008442:	464d      	mov	r5, r9
 8008444:	e777      	b.n	8008336 <forward_ap_integer_INT8+0xc6>
 8008446:	2300      	movs	r3, #0
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	deff      	udf	#255	; 0xff
 800844c:	68d3      	ldr	r3, [r2, #12]
 800844e:	deff      	udf	#255	; 0xff
 8008450:	00000000 	.word	0x00000000

08008454 <forward_lite_pw_sssa8_ch>:
 8008454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008458:	b093      	sub	sp, #76	; 0x4c
 800845a:	4604      	mov	r4, r0
 800845c:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8008460:	920d      	str	r2, [sp, #52]	; 0x34
 8008462:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008464:	9110      	str	r1, [sp, #64]	; 0x40
 8008466:	930a      	str	r3, [sp, #40]	; 0x28
 8008468:	eb02 0187 	add.w	r1, r2, r7, lsl #2
 800846c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8008470:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008474:	930b      	str	r3, [sp, #44]	; 0x2c
 8008476:	f99d 307c 	ldrsb.w	r3, [sp, #124]	; 0x7c
 800847a:	930e      	str	r3, [sp, #56]	; 0x38
 800847c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8008480:	930f      	str	r3, [sp, #60]	; 0x3c
 8008482:	00bb      	lsls	r3, r7, #2
 8008484:	9311      	str	r3, [sp, #68]	; 0x44
 8008486:	007b      	lsls	r3, r7, #1
 8008488:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800848c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8008490:	f99d c080 	ldrsb.w	ip, [sp, #128]	; 0x80
 8008494:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008496:	930c      	str	r3, [sp, #48]	; 0x30
 8008498:	eb02 09c7 	add.w	r9, r2, r7, lsl #3
 800849c:	2f00      	cmp	r7, #0
 800849e:	d075      	beq.n	800858c <forward_lite_pw_sssa8_ch+0x138>
 80084a0:	3104      	adds	r1, #4
 80084a2:	4648      	mov	r0, r9
 80084a4:	eb09 0e03 	add.w	lr, r9, r3
 80084a8:	f04f 0801 	mov.w	r8, #1
 80084ac:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80084b0:	1e5a      	subs	r2, r3, #1
 80084b2:	b292      	uxth	r2, r2
 80084b4:	fa08 f603 	lsl.w	r6, r8, r3
 80084b8:	2a14      	cmp	r2, #20
 80084ba:	fa0c f303 	lsl.w	r3, ip, r3
 80084be:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 80084c2:	d846      	bhi.n	8008552 <forward_lite_pw_sssa8_ch+0xfe>
 80084c4:	4586      	cmp	lr, r0
 80084c6:	f841 3c04 	str.w	r3, [r1, #-4]
 80084ca:	f101 0104 	add.w	r1, r1, #4
 80084ce:	d1ed      	bne.n	80084ac <forward_lite_pw_sssa8_ch+0x58>
 80084d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084d2:	eba9 0903 	sub.w	r9, r9, r3
 80084d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084da:	ebae 0303 	sub.w	r3, lr, r3
 80084de:	930c      	str	r3, [sp, #48]	; 0x30
 80084e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e2:	fb02 f303 	mul.w	r3, r2, r3
 80084e6:	930d      	str	r3, [sp, #52]	; 0x34
 80084e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d038      	beq.n	8008560 <forward_lite_pw_sssa8_ch+0x10c>
 80084ee:	2300      	movs	r3, #0
 80084f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80084f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084f4:	b353      	cbz	r3, 800854c <forward_lite_pw_sssa8_ch+0xf8>
 80084f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80084fa:	fb07 f203 	mul.w	r2, r7, r3
 80084fe:	fb01 f803 	mul.w	r8, r1, r3
 8008502:	4651      	mov	r1, sl
 8008504:	46ba      	mov	sl, r7
 8008506:	464f      	mov	r7, r9
 8008508:	4691      	mov	r9, r2
 800850a:	465a      	mov	r2, fp
 800850c:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8008510:	2600      	movs	r6, #0
 8008512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008514:	9308      	str	r3, [sp, #32]
 8008516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008518:	921e      	str	r2, [sp, #120]	; 0x78
 800851a:	e9cd 7306 	strd	r7, r3, [sp, #24]
 800851e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008520:	9305      	str	r3, [sp, #20]
 8008522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008524:	911c      	str	r1, [sp, #112]	; 0x70
 8008526:	e9cd a303 	strd	sl, r3, [sp, #12]
 800852a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852c:	9302      	str	r3, [sp, #8]
 800852e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	4620      	mov	r0, r4
 8008538:	462b      	mov	r3, r5
 800853a:	3601      	adds	r6, #1
 800853c:	f002 fb64 	bl	800ac08 <st_sssa8_ch_nn_mat_mult_nt_t>
 8008540:	45b3      	cmp	fp, r6
 8008542:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008544:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008546:	444d      	add	r5, r9
 8008548:	4444      	add	r4, r8
 800854a:	d1e2      	bne.n	8008512 <forward_lite_pw_sssa8_ch+0xbe>
 800854c:	b013      	add	sp, #76	; 0x4c
 800854e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008552:	4586      	cmp	lr, r0
 8008554:	f841 cc04 	str.w	ip, [r1, #-4]
 8008558:	f101 0104 	add.w	r1, r1, #4
 800855c:	d1a6      	bne.n	80084ac <forward_lite_pw_sssa8_ch+0x58>
 800855e:	e7b7      	b.n	80084d0 <forward_lite_pw_sssa8_ch+0x7c>
 8008560:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008562:	f06f 0309 	mvn.w	r3, #9
 8008566:	fb03 2307 	mla	r3, r3, r7, r2
 800856a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800856c:	fb07 f202 	mul.w	r2, r7, r2
 8008570:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8008574:	dbbb      	blt.n	80084ee <forward_lite_pw_sssa8_ch+0x9a>
 8008576:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800857c:	9601      	str	r6, [sp, #4]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4639      	mov	r1, r7
 8008582:	4650      	mov	r0, sl
 8008584:	f002 fb00 	bl	800ab88 <st_sssa8_ch_fullW_prefetch>
 8008588:	960f      	str	r6, [sp, #60]	; 0x3c
 800858a:	e7b2      	b.n	80084f2 <forward_lite_pw_sssa8_ch+0x9e>
 800858c:	46ce      	mov	lr, r9
 800858e:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 8008592:	e7a0      	b.n	80084d6 <forward_lite_pw_sssa8_ch+0x82>

08008594 <forward_lite_conv2d_sssa8_ch>:
 8008594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	ed2d 8b08 	vpush	{d8-d11}
 800859c:	b0cf      	sub	sp, #316	; 0x13c
 800859e:	4699      	mov	r9, r3
 80085a0:	f8bd 5190 	ldrh.w	r5, [sp, #400]	; 0x190
 80085a4:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 80085a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80085a8:	f8bd 2184 	ldrh.w	r2, [sp, #388]	; 0x184
 80085ac:	900e      	str	r0, [sp, #56]	; 0x38
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	9870      	ldr	r0, [sp, #448]	; 0x1c0
 80085b2:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
 80085b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80085b8:	4688      	mov	r8, r1
 80085ba:	f8bd 5194 	ldrh.w	r5, [sp, #404]	; 0x194
 80085be:	f8bd 1188 	ldrh.w	r1, [sp, #392]	; 0x188
 80085c2:	f8bd 61b0 	ldrh.w	r6, [sp, #432]	; 0x1b0
 80085c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80085c8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	9519      	str	r5, [sp, #100]	; 0x64
 80085d0:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 80085d2:	f8bd 5198 	ldrh.w	r5, [sp, #408]	; 0x198
 80085d6:	f99d 71a4 	ldrsb.w	r7, [sp, #420]	; 0x1a4
 80085da:	911c      	str	r1, [sp, #112]	; 0x70
 80085dc:	468a      	mov	sl, r1
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80085e4:	460b      	mov	r3, r1
 80085e6:	4648      	mov	r0, r9
 80085e8:	9516      	str	r5, [sp, #88]	; 0x58
 80085ea:	960c      	str	r6, [sp, #48]	; 0x30
 80085ec:	f8bd 519c 	ldrh.w	r5, [sp, #412]	; 0x19c
 80085f0:	f8bd 61b4 	ldrh.w	r6, [sp, #436]	; 0x1b4
 80085f4:	9960      	ldr	r1, [sp, #384]	; 0x180
 80085f6:	9522      	str	r5, [sp, #136]	; 0x88
 80085f8:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 80085fc:	ee09 2a90 	vmov	s19, r2
 8008600:	961f      	str	r6, [sp, #124]	; 0x7c
 8008602:	f99d 51a8 	ldrsb.w	r5, [sp, #424]	; 0x1a8
 8008606:	f8bd 61b8 	ldrh.w	r6, [sp, #440]	; 0x1b8
 800860a:	9702      	str	r7, [sp, #8]
 800860c:	f001 fb94 	bl	8009d38 <st_sssa8_ch_convolve_rank1upd>
 8008610:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008612:	fb1a f303 	smulbb	r3, sl, r3
 8008616:	fb13 f309 	smulbb	r3, r3, r9
 800861a:	ee19 2a90 	vmov	r2, s19
 800861e:	b29b      	uxth	r3, r3
 8008620:	eb04 000b 	add.w	r0, r4, fp
 8008624:	9314      	str	r3, [sp, #80]	; 0x50
 8008626:	f06f 0309 	mvn.w	r3, #9
 800862a:	fb03 0302 	mla	r3, r3, r2, r0
 800862e:	ee0a 3a90 	vmov	s21, r3
 8008632:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008636:	9013      	str	r0, [sp, #76]	; 0x4c
 8008638:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800863c:	931d      	str	r3, [sp, #116]	; 0x74
 800863e:	b1ba      	cbz	r2, 8008670 <forward_lite_conv2d_sssa8_ch+0xdc>
 8008640:	1d19      	adds	r1, r3, #4
 8008642:	f04f 0c01 	mov.w	ip, #1
 8008646:	f934 3b02 	ldrsh.w	r3, [r4], #2
 800864a:	1e5a      	subs	r2, r3, #1
 800864c:	b292      	uxth	r2, r2
 800864e:	fa0c f003 	lsl.w	r0, ip, r3
 8008652:	2a14      	cmp	r2, #20
 8008654:	fa05 f303 	lsl.w	r3, r5, r3
 8008658:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800865c:	f200 82b9 	bhi.w	8008bd2 <forward_lite_conv2d_sssa8_ch+0x63e>
 8008660:	f841 3c04 	str.w	r3, [r1, #-4]
 8008664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008666:	42a3      	cmp	r3, r4
 8008668:	f101 0104 	add.w	r1, r1, #4
 800866c:	d1eb      	bne.n	8008646 <forward_lite_conv2d_sssa8_ch+0xb2>
 800866e:	461c      	mov	r4, r3
 8008670:	eba4 030b 	sub.w	r3, r4, fp
 8008674:	931e      	str	r3, [sp, #120]	; 0x78
 8008676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008678:	932f      	str	r3, [sp, #188]	; 0xbc
 800867a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800867c:	9334      	str	r3, [sp, #208]	; 0xd0
 800867e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008680:	9333      	str	r3, [sp, #204]	; 0xcc
 8008682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008684:	9346      	str	r3, [sp, #280]	; 0x118
 8008686:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008688:	9347      	str	r3, [sp, #284]	; 0x11c
 800868a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800868c:	9348      	str	r3, [sp, #288]	; 0x120
 800868e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008690:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008692:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8008694:	9349      	str	r3, [sp, #292]	; 0x124
 8008696:	ab36      	add	r3, sp, #216	; 0xd8
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	aa2e      	add	r2, sp, #184	; 0xb8
 800869c:	ab32      	add	r3, sp, #200	; 0xc8
 800869e:	a944      	add	r1, sp, #272	; 0x110
 80086a0:	a83a      	add	r0, sp, #232	; 0xe8
 80086a2:	9438      	str	r4, [sp, #224]	; 0xe0
 80086a4:	9537      	str	r5, [sp, #220]	; 0xdc
 80086a6:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 80086aa:	f001 fecd 	bl	800a448 <ai_padding_opt_init>
 80086ae:	4629      	mov	r1, r5
 80086b0:	ee19 0a90 	vmov	r0, s19
 80086b4:	fb05 f504 	mul.w	r5, r5, r4
 80086b8:	fb09 f305 	mul.w	r3, r9, r5
 80086bc:	fb00 f303 	mul.w	r3, r0, r3
 80086c0:	4622      	mov	r2, r4
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80086c8:	bfd4      	ite	le
 80086ca:	ebca 0403 	rsble	r4, sl, r3
 80086ce:	f5ca 54a0 	rsbgt	r4, sl, #5120	; 0x1400
 80086d2:	fb09 fa02 	mul.w	sl, r9, r2
 80086d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086d8:	fb0a f301 	mul.w	r3, sl, r1
 80086dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086e0:	2e01      	cmp	r6, #1
 80086e2:	ee0a 3a10 	vmov	s20, r3
 80086e6:	ea4f 0464 	mov.w	r4, r4, asr #1
 80086ea:	f000 8483 	beq.w	8008ff4 <forward_lite_conv2d_sssa8_ch+0xa60>
 80086ee:	2300      	movs	r3, #0
 80086f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80086f2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80086f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f6:	ee19 1a90 	vmov	r1, s19
 80086fa:	fb02 f303 	mul.w	r3, r2, r3
 80086fe:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
 8008700:	fb01 2303 	mla	r3, r1, r3, r2
 8008704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008706:	429a      	cmp	r2, r3
 8008708:	f080 813b 	bcs.w	8008982 <forward_lite_conv2d_sssa8_ch+0x3ee>
 800870c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800870e:	fb03 f308 	mul.w	r3, r3, r8
 8008712:	fb09 2303 	mla	r3, r9, r3, r2
 8008716:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
 8008718:	429a      	cmp	r2, r3
 800871a:	f080 8132 	bcs.w	8008982 <forward_lite_conv2d_sssa8_ch+0x3ee>
 800871e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008720:	fb94 f3f3 	sdiv	r3, r4, r3
 8008724:	b29b      	uxth	r3, r3
 8008726:	4619      	mov	r1, r3
 8008728:	ee19 3a90 	vmov	r3, s19
 800872c:	4299      	cmp	r1, r3
 800872e:	bf28      	it	cs
 8008730:	4619      	movcs	r1, r3
 8008732:	fbb3 f2f1 	udiv	r2, r3, r1
 8008736:	fb01 3312 	mls	r3, r1, r2, r3
 800873a:	b29b      	uxth	r3, r3
 800873c:	b292      	uxth	r2, r2
 800873e:	912b      	str	r1, [sp, #172]	; 0xac
 8008740:	9229      	str	r2, [sp, #164]	; 0xa4
 8008742:	2b00      	cmp	r3, #0
 8008744:	f040 8468 	bne.w	8009018 <forward_lite_conv2d_sssa8_ch+0xa84>
 8008748:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 8393 	beq.w	8008e76 <forward_lite_conv2d_sssa8_ch+0x8e2>
 8008750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008752:	f8cd 8020 	str.w	r8, [sp, #32]
 8008756:	fb09 f505 	mul.w	r5, r9, r5
 800875a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800875e:	9311      	str	r3, [sp, #68]	; 0x44
 8008760:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008762:	3b01      	subs	r3, #1
 8008764:	b29b      	uxth	r3, r3
 8008766:	932d      	str	r3, [sp, #180]	; 0xb4
 8008768:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800876a:	425b      	negs	r3, r3
 800876c:	b29b      	uxth	r3, r3
 800876e:	932a      	str	r3, [sp, #168]	; 0xa8
 8008770:	f009 0303 	and.w	r3, r9, #3
 8008774:	b23e      	sxth	r6, r7
 8008776:	930d      	str	r3, [sp, #52]	; 0x34
 8008778:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800877c:	2400      	movs	r4, #0
 800877e:	9312      	str	r3, [sp, #72]	; 0x48
 8008780:	ee08 aa90 	vmov	s17, sl
 8008784:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8008788:	ee09 9a10 	vmov	s18, r9
 800878c:	ee0b 6a90 	vmov	s23, r6
 8008790:	9326      	str	r3, [sp, #152]	; 0x98
 8008792:	4625      	mov	r5, r4
 8008794:	a83a      	add	r0, sp, #232	; 0xe8
 8008796:	f001 feaf 	bl	800a4f8 <ai_padding_opt_phase1>
 800879a:	ee19 3a90 	vmov	r3, s19
 800879e:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
 80087a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80087a2:	fb05 f303 	mul.w	r3, r5, r3
 80087a6:	fb01 2303 	mla	r3, r1, r3, r2
 80087aa:	931a      	str	r3, [sp, #104]	; 0x68
 80087ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80087ae:	b953      	cbnz	r3, 80087c6 <forward_lite_conv2d_sssa8_ch+0x232>
 80087b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f040 8410 	bne.w	8008fd8 <forward_lite_conv2d_sssa8_ch+0xa44>
 80087b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80087ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087bc:	9860      	ldr	r0, [sp, #384]	; 0x180
 80087be:	ee1a 1a10 	vmov	r1, s20
 80087c2:	f002 f83f 	bl	800a844 <st_int8_to16_dual_interleaved>
 80087c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 8410 	beq.w	8008fee <forward_lite_conv2d_sssa8_ch+0xa5a>
 80087ce:	b2a3      	uxth	r3, r4
 80087d0:	932c      	str	r3, [sp, #176]	; 0xb0
 80087d2:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80087da:	edcd 9a25 	vstr	s19, [sp, #148]	; 0x94
 80087de:	fb05 3302 	mla	r3, r5, r2, r3
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 80087e8:	9310      	str	r3, [sp, #64]	; 0x40
 80087ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80087ec:	9324      	str	r3, [sp, #144]	; 0x90
 80087ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80087f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80087f2:	9b60      	ldr	r3, [sp, #384]	; 0x180
 80087f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80087f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80087fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80087fc:	9321      	str	r3, [sp, #132]	; 0x84
 80087fe:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8008800:	9320      	str	r3, [sp, #128]	; 0x80
 8008802:	eeb0 ba6a 	vmov.f32	s22, s21
 8008806:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8008808:	923b      	str	r2, [sp, #236]	; 0xec
 800880a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800880c:	923c      	str	r2, [sp, #240]	; 0xf0
 800880e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008810:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8008812:	933a      	str	r3, [sp, #232]	; 0xe8
 8008814:	2a00      	cmp	r2, #0
 8008816:	f000 82e7 	beq.w	8008de8 <forward_lite_conv2d_sssa8_ch+0x854>
 800881a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800881c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800881e:	4252      	negs	r2, r2
 8008820:	b292      	uxth	r2, r2
 8008822:	9207      	str	r2, [sp, #28]
 8008824:	2100      	movs	r1, #0
 8008826:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008828:	9215      	str	r2, [sp, #84]	; 0x54
 800882a:	460a      	mov	r2, r1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d070      	beq.n	8008912 <forward_lite_conv2d_sssa8_ch+0x37e>
 8008830:	3b01      	subs	r3, #1
 8008832:	933a      	str	r3, [sp, #232]	; 0xe8
 8008834:	2301      	movs	r3, #1
 8008836:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800883a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800883e:	4283      	cmp	r3, r0
 8008840:	dd75      	ble.n	800892e <forward_lite_conv2d_sssa8_ch+0x39a>
 8008842:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008844:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008846:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 800884a:	fb02 3200 	mla	r2, r2, r0, r3
 800884e:	b28b      	uxth	r3, r1
 8008850:	930a      	str	r3, [sp, #40]	; 0x28
 8008852:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008854:	1ad5      	subs	r5, r2, r3
 8008856:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800885a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800885c:	ee19 7a10 	vmov	r7, s18
 8008860:	ee1b 8a90 	vmov	r8, s23
 8008864:	461e      	mov	r6, r3
 8008866:	4693      	mov	fp, r2
 8008868:	45ab      	cmp	fp, r5
 800886a:	da39      	bge.n	80088e0 <forward_lite_conv2d_sssa8_ch+0x34c>
 800886c:	9a08      	ldr	r2, [sp, #32]
 800886e:	2e00      	cmp	r6, #0
 8008870:	fb03 f202 	mul.w	r2, r3, r2
 8008874:	9206      	str	r2, [sp, #24]
 8008876:	f2c0 8398 	blt.w	8008faa <forward_lite_conv2d_sssa8_ch+0xa16>
 800887a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800887c:	2a00      	cmp	r2, #0
 800887e:	f000 833f 	beq.w	8008f00 <forward_lite_conv2d_sssa8_ch+0x96c>
 8008882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008884:	429a      	cmp	r2, r3
 8008886:	46da      	mov	sl, fp
 8008888:	f340 82fa 	ble.w	8008e80 <forward_lite_conv2d_sssa8_ch+0x8ec>
 800888c:	46dc      	mov	ip, fp
 800888e:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 8008892:	46b3      	mov	fp, r6
 8008894:	e011      	b.n	80088ba <forward_lite_conv2d_sssa8_ch+0x326>
 8008896:	9e08      	ldr	r6, [sp, #32]
 8008898:	9b06      	ldr	r3, [sp, #24]
 800889a:	4566      	cmp	r6, ip
 800889c:	4463      	add	r3, ip
 800889e:	dd12      	ble.n	80088c6 <forward_lite_conv2d_sssa8_ch+0x332>
 80088a0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80088a2:	f10a 0a01 	add.w	sl, sl, #1
 80088a6:	fa0f fa8a 	sxth.w	sl, sl
 80088aa:	fb07 0003 	mla	r0, r7, r3, r0
 80088ae:	f001 fe3d 	bl	800a52c <st_int8_to16_no_shift>
 80088b2:	45aa      	cmp	sl, r5
 80088b4:	444c      	add	r4, r9
 80088b6:	46d4      	mov	ip, sl
 80088b8:	da0f      	bge.n	80088da <forward_lite_conv2d_sssa8_ch+0x346>
 80088ba:	f1ba 0f00 	cmp.w	sl, #0
 80088be:	463a      	mov	r2, r7
 80088c0:	4621      	mov	r1, r4
 80088c2:	4640      	mov	r0, r8
 80088c4:	dae7      	bge.n	8008896 <forward_lite_conv2d_sssa8_ch+0x302>
 80088c6:	f10a 0a01 	add.w	sl, sl, #1
 80088ca:	fa0f fa8a 	sxth.w	sl, sl
 80088ce:	f003 ffbd 	bl	800c84c <arm_fill_q15>
 80088d2:	45aa      	cmp	sl, r5
 80088d4:	444c      	add	r4, r9
 80088d6:	46d4      	mov	ip, sl
 80088d8:	dbef      	blt.n	80088ba <forward_lite_conv2d_sssa8_ch+0x326>
 80088da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80088dc:	465e      	mov	r6, fp
 80088de:	469b      	mov	fp, r3
 80088e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088e2:	3601      	adds	r6, #1
 80088e4:	b236      	sxth	r6, r6
 80088e6:	4296      	cmp	r6, r2
 80088e8:	4633      	mov	r3, r6
 80088ea:	dbbd      	blt.n	8008868 <forward_lite_conv2d_sssa8_ch+0x2d4>
 80088ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	d022      	beq.n	8008938 <forward_lite_conv2d_sssa8_ch+0x3a4>
 80088f2:	9b07      	ldr	r3, [sp, #28]
 80088f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088f8:	4413      	add	r3, r2
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	3101      	adds	r1, #1
 80088fe:	9307      	str	r3, [sp, #28]
 8008900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008902:	b209      	sxth	r1, r1
 8008904:	428b      	cmp	r3, r1
 8008906:	460a      	mov	r2, r1
 8008908:	f340 8256 	ble.w	8008db8 <forward_lite_conv2d_sssa8_ch+0x824>
 800890c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d18e      	bne.n	8008830 <forward_lite_conv2d_sssa8_ch+0x29c>
 8008912:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8008914:	2b00      	cmp	r3, #0
 8008916:	f040 82c0 	bne.w	8008e9a <forward_lite_conv2d_sssa8_ch+0x906>
 800891a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800891c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800891e:	3b01      	subs	r3, #1
 8008920:	933c      	str	r3, [sp, #240]	; 0xf0
 8008922:	2301      	movs	r3, #1
 8008924:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8008928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892a:	4283      	cmp	r3, r0
 800892c:	dc89      	bgt.n	8008842 <forward_lite_conv2d_sssa8_ch+0x2ae>
 800892e:	b28b      	uxth	r3, r1
 8008930:	930a      	str	r3, [sp, #40]	; 0x28
 8008932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008934:	42a3      	cmp	r3, r4
 8008936:	d1dc      	bne.n	80088f2 <forward_lite_conv2d_sssa8_ch+0x35e>
 8008938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008942:	9303      	str	r3, [sp, #12]
 8008944:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008946:	9302      	str	r3, [sp, #8]
 8008948:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800894e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	ee1b 2a10 	vmov	r2, s22
 8008956:	ee19 3a90 	vmov	r3, s19
 800895a:	ee1a 0a10 	vmov	r0, s20
 800895e:	f003 f84d 	bl	800b9fc <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8008962:	9b07      	ldr	r3, [sp, #28]
 8008964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008966:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008968:	9015      	str	r0, [sp, #84]	; 0x54
 800896a:	4413      	add	r3, r2
 800896c:	b29b      	uxth	r3, r3
 800896e:	3101      	adds	r1, #1
 8008970:	9307      	str	r3, [sp, #28]
 8008972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008974:	b209      	sxth	r1, r1
 8008976:	428b      	cmp	r3, r1
 8008978:	460a      	mov	r2, r1
 800897a:	f340 8235 	ble.w	8008de8 <forward_lite_conv2d_sssa8_ch+0x854>
 800897e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008980:	e7c4      	b.n	800890c <forward_lite_conv2d_sssa8_ch+0x378>
 8008982:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008984:	fb94 f3f3 	sdiv	r3, r4, r3
 8008988:	b29b      	uxth	r3, r3
 800898a:	4619      	mov	r1, r3
 800898c:	ee19 3a90 	vmov	r3, s19
 8008990:	4299      	cmp	r1, r3
 8008992:	bf28      	it	cs
 8008994:	4619      	movcs	r1, r3
 8008996:	fbb3 f2f1 	udiv	r2, r3, r1
 800899a:	fb01 3312 	mls	r3, r1, r2, r3
 800899e:	b29b      	uxth	r3, r3
 80089a0:	b292      	uxth	r2, r2
 80089a2:	911b      	str	r1, [sp, #108]	; 0x6c
 80089a4:	9221      	str	r2, [sp, #132]	; 0x84
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 811c 	beq.w	8008be4 <forward_lite_conv2d_sssa8_ch+0x650>
 80089ac:	4613      	mov	r3, r2
 80089ae:	3301      	adds	r3, #1
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 825f 	beq.w	8008e76 <forward_lite_conv2d_sssa8_ch+0x8e2>
 80089b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089ba:	edcd 9a24 	vstr	s19, [sp, #144]	; 0x90
 80089be:	fb09 f505 	mul.w	r5, r9, r5
 80089c2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80089c6:	9311      	str	r3, [sp, #68]	; 0x44
 80089c8:	f009 0303 	and.w	r3, r9, #3
 80089cc:	b23e      	sxth	r6, r7
 80089ce:	930d      	str	r3, [sp, #52]	; 0x34
 80089d0:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80089d4:	9312      	str	r3, [sp, #72]	; 0x48
 80089d6:	ee08 6a90 	vmov	s17, r6
 80089da:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80089de:	9320      	str	r3, [sp, #128]	; 0x80
 80089e0:	f8cd 8020 	str.w	r8, [sp, #32]
 80089e4:	464f      	mov	r7, r9
 80089e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80089e8:	b953      	cbnz	r3, 8008a00 <forward_lite_conv2d_sssa8_ch+0x46c>
 80089ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 81db 	bne.w	8008da8 <forward_lite_conv2d_sssa8_ch+0x814>
 80089f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089f6:	9860      	ldr	r0, [sp, #384]	; 0x180
 80089f8:	ee1a 1a10 	vmov	r1, s20
 80089fc:	f001 ff22 	bl	800a844 <st_int8_to16_dual_interleaved>
 8008a00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80b7 	beq.w	8008b76 <forward_lite_conv2d_sssa8_ch+0x5e2>
 8008a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a0a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008a0c:	425b      	negs	r3, r3
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a12:	2400      	movs	r4, #0
 8008a14:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
 8008a16:	9318      	str	r3, [sp, #96]	; 0x60
 8008a18:	4626      	mov	r6, r4
 8008a1a:	a83a      	add	r0, sp, #232	; 0xe8
 8008a1c:	f001 fd6c 	bl	800a4f8 <ai_padding_opt_phase1>
 8008a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 81bd 	beq.w	8008da2 <forward_lite_conv2d_sssa8_ch+0x80e>
 8008a28:	b2a3      	uxth	r3, r4
 8008a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a2c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008a30:	1a9b      	subs	r3, r3, r2
 8008a32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a34:	fb06 3302 	mla	r3, r6, r2, r3
 8008a38:	9309      	str	r3, [sp, #36]	; 0x24
 8008a3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a3c:	425b      	negs	r3, r3
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	9307      	str	r3, [sp, #28]
 8008a42:	2100      	movs	r1, #0
 8008a44:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8008a48:	9310      	str	r3, [sp, #64]	; 0x40
 8008a4a:	460a      	mov	r2, r1
 8008a4c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 80da 	beq.w	8008c08 <forward_lite_conv2d_sssa8_ch+0x674>
 8008a54:	3b01      	subs	r3, #1
 8008a56:	933a      	str	r3, [sp, #232]	; 0xe8
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8008a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a62:	4283      	cmp	r3, r0
 8008a64:	f280 80de 	bge.w	8008c24 <forward_lite_conv2d_sssa8_ch+0x690>
 8008a68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008a6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a6c:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8008a70:	fb02 3200 	mla	r2, r2, r0, r3
 8008a74:	b28b      	uxth	r3, r1
 8008a76:	930a      	str	r3, [sp, #40]	; 0x28
 8008a78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a7a:	1ad4      	subs	r4, r2, r3
 8008a7c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8008a80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a82:	ee08 aa10 	vmov	s16, sl
 8008a86:	ee18 8a90 	vmov	r8, s17
 8008a8a:	461e      	mov	r6, r3
 8008a8c:	4693      	mov	fp, r2
 8008a8e:	45a3      	cmp	fp, r4
 8008a90:	da35      	bge.n	8008afe <forward_lite_conv2d_sssa8_ch+0x56a>
 8008a92:	9a08      	ldr	r2, [sp, #32]
 8008a94:	2e00      	cmp	r6, #0
 8008a96:	fb03 f202 	mul.w	r2, r3, r2
 8008a9a:	9206      	str	r2, [sp, #24]
 8008a9c:	f2c0 8173 	blt.w	8008d86 <forward_lite_conv2d_sssa8_ch+0x7f2>
 8008aa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	f000 811c 	beq.w	8008ce0 <forward_lite_conv2d_sssa8_ch+0x74c>
 8008aa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	46da      	mov	sl, fp
 8008aae:	f340 809e 	ble.w	8008bee <forward_lite_conv2d_sssa8_ch+0x65a>
 8008ab2:	46dc      	mov	ip, fp
 8008ab4:	9615      	str	r6, [sp, #84]	; 0x54
 8008ab6:	e011      	b.n	8008adc <forward_lite_conv2d_sssa8_ch+0x548>
 8008ab8:	9e08      	ldr	r6, [sp, #32]
 8008aba:	9b06      	ldr	r3, [sp, #24]
 8008abc:	4566      	cmp	r6, ip
 8008abe:	4463      	add	r3, ip
 8008ac0:	dd12      	ble.n	8008ae8 <forward_lite_conv2d_sssa8_ch+0x554>
 8008ac2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008ac4:	f10a 0a01 	add.w	sl, sl, #1
 8008ac8:	fa0f fa8a 	sxth.w	sl, sl
 8008acc:	fb07 0003 	mla	r0, r7, r3, r0
 8008ad0:	f001 fd2c 	bl	800a52c <st_int8_to16_no_shift>
 8008ad4:	4554      	cmp	r4, sl
 8008ad6:	444d      	add	r5, r9
 8008ad8:	46d4      	mov	ip, sl
 8008ada:	dd0f      	ble.n	8008afc <forward_lite_conv2d_sssa8_ch+0x568>
 8008adc:	f1ba 0f00 	cmp.w	sl, #0
 8008ae0:	463a      	mov	r2, r7
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	dae7      	bge.n	8008ab8 <forward_lite_conv2d_sssa8_ch+0x524>
 8008ae8:	f10a 0a01 	add.w	sl, sl, #1
 8008aec:	fa0f fa8a 	sxth.w	sl, sl
 8008af0:	f003 feac 	bl	800c84c <arm_fill_q15>
 8008af4:	4554      	cmp	r4, sl
 8008af6:	444d      	add	r5, r9
 8008af8:	46d4      	mov	ip, sl
 8008afa:	dcef      	bgt.n	8008adc <forward_lite_conv2d_sssa8_ch+0x548>
 8008afc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b00:	3601      	adds	r6, #1
 8008b02:	b236      	sxth	r6, r6
 8008b04:	4296      	cmp	r6, r2
 8008b06:	4633      	mov	r3, r6
 8008b08:	dbc1      	blt.n	8008a8e <forward_lite_conv2d_sssa8_ch+0x4fa>
 8008b0a:	ee18 aa10 	vmov	sl, s16
 8008b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b10:	42ab      	cmp	r3, r5
 8008b12:	f000 808d 	beq.w	8008c30 <forward_lite_conv2d_sssa8_ch+0x69c>
 8008b16:	9b07      	ldr	r3, [sp, #28]
 8008b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b1c:	4413      	add	r3, r2
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3101      	adds	r1, #1
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b26:	b209      	sxth	r1, r1
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	dc8e      	bgt.n	8008a4c <forward_lite_conv2d_sssa8_ch+0x4b8>
 8008b2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b32:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8008b34:	4413      	add	r3, r2
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	3401      	adds	r4, #1
 8008b3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008b3e:	b224      	sxth	r4, r4
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	4626      	mov	r6, r4
 8008b44:	f73f af69 	bgt.w	8008a1a <forward_lite_conv2d_sssa8_ch+0x486>
 8008b48:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b4a:	42a9      	cmp	r1, r5
 8008b4c:	d013      	beq.n	8008b76 <forward_lite_conv2d_sssa8_ch+0x5e2>
 8008b4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b54:	9304      	str	r3, [sp, #16]
 8008b56:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	ee1a 2a90 	vmov	r2, s21
 8008b6a:	ee19 3a90 	vmov	r3, s19
 8008b6e:	ee1a 0a10 	vmov	r0, s20
 8008b72:	f003 fa61 	bl	800c038 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8008b76:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	b299      	uxth	r1, r3
 8008b7e:	428a      	cmp	r2, r1
 8008b80:	4613      	mov	r3, r2
 8008b82:	bf28      	it	cs
 8008b84:	460b      	movcs	r3, r1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	9124      	str	r1, [sp, #144]	; 0x90
 8008b8a:	b1cb      	cbz	r3, 8008bc0 <forward_lite_conv2d_sssa8_ch+0x62c>
 8008b8c:	9960      	ldr	r1, [sp, #384]	; 0x180
 8008b8e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008b90:	fb00 1102 	mla	r1, r0, r2, r1
 8008b94:	9160      	str	r1, [sp, #384]	; 0x180
 8008b96:	ee1a 1a90 	vmov	r1, s21
 8008b9a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b9e:	ee0a 1a90 	vmov	s21, r1
 8008ba2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008ba4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8008ba8:	911e      	str	r1, [sp, #120]	; 0x78
 8008baa:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8008bac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bb0:	9170      	str	r1, [sp, #448]	; 0x1c0
 8008bb2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008bb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bb8:	911d      	str	r1, [sp, #116]	; 0x74
 8008bba:	996b      	ldr	r1, [sp, #428]	; 0x1ac
 8008bbc:	4411      	add	r1, r2
 8008bbe:	916b      	str	r1, [sp, #428]	; 0x1ac
 8008bc0:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008bc2:	1e4a      	subs	r2, r1, #1
 8008bc4:	b292      	uxth	r2, r2
 8008bc6:	2900      	cmp	r1, #0
 8008bc8:	f000 8155 	beq.w	8008e76 <forward_lite_conv2d_sssa8_ch+0x8e2>
 8008bcc:	9221      	str	r2, [sp, #132]	; 0x84
 8008bce:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bd0:	e709      	b.n	80089e6 <forward_lite_conv2d_sssa8_ch+0x452>
 8008bd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bd4:	f841 5c04 	str.w	r5, [r1, #-4]
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	f101 0104 	add.w	r1, r1, #4
 8008bde:	f47f ad32 	bne.w	8008646 <forward_lite_conv2d_sssa8_ch+0xb2>
 8008be2:	e544      	b.n	800866e <forward_lite_conv2d_sssa8_ch+0xda>
 8008be4:	4613      	mov	r3, r2
 8008be6:	3a01      	subs	r2, #1
 8008be8:	b292      	uxth	r2, r2
 8008bea:	9221      	str	r2, [sp, #132]	; 0x84
 8008bec:	e6e1      	b.n	80089b2 <forward_lite_conv2d_sssa8_ch+0x41e>
 8008bee:	f10a 0a01 	add.w	sl, sl, #1
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	463a      	mov	r2, r7
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	fa0f fa8a 	sxth.w	sl, sl
 8008bfc:	f003 fe26 	bl	800c84c <arm_fill_q15>
 8008c00:	45a2      	cmp	sl, r4
 8008c02:	444d      	add	r5, r9
 8008c04:	dbf3      	blt.n	8008bee <forward_lite_conv2d_sssa8_ch+0x65a>
 8008c06:	e77a      	b.n	8008afe <forward_lite_conv2d_sssa8_ch+0x56a>
 8008c08:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d135      	bne.n	8008c7a <forward_lite_conv2d_sssa8_ch+0x6e6>
 8008c0e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8008c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c12:	3b01      	subs	r3, #1
 8008c14:	933c      	str	r3, [sp, #240]	; 0xf0
 8008c16:	2301      	movs	r3, #1
 8008c18:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8008c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c1e:	4283      	cmp	r3, r0
 8008c20:	f6ff af22 	blt.w	8008a68 <forward_lite_conv2d_sssa8_ch+0x4d4>
 8008c24:	b28b      	uxth	r3, r1
 8008c26:	930a      	str	r3, [sp, #40]	; 0x28
 8008c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c2a:	42ab      	cmp	r3, r5
 8008c2c:	f47f af73 	bne.w	8008b16 <forward_lite_conv2d_sssa8_ch+0x582>
 8008c30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c36:	9304      	str	r3, [sp, #16]
 8008c38:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8008c3a:	9303      	str	r3, [sp, #12]
 8008c3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c3e:	9302      	str	r3, [sp, #8]
 8008c40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	ee1a 2a90 	vmov	r2, s21
 8008c4e:	ee19 3a90 	vmov	r3, s19
 8008c52:	ee1a 0a10 	vmov	r0, s20
 8008c56:	f002 fed1 	bl	800b9fc <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8008c5a:	9b07      	ldr	r3, [sp, #28]
 8008c5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008c62:	9018      	str	r0, [sp, #96]	; 0x60
 8008c64:	4413      	add	r3, r2
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	3101      	adds	r1, #1
 8008c6a:	9307      	str	r3, [sp, #28]
 8008c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c6e:	b209      	sxth	r1, r1
 8008c70:	428b      	cmp	r3, r1
 8008c72:	460a      	mov	r2, r1
 8008c74:	f73f aeea 	bgt.w	8008a4c <forward_lite_conv2d_sssa8_ch+0x4b8>
 8008c78:	e759      	b.n	8008b2e <forward_lite_conv2d_sssa8_ch+0x59a>
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	933b      	str	r3, [sp, #236]	; 0xec
 8008c7e:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 8008c82:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	f43f aee9 	beq.w	8008a5e <forward_lite_conv2d_sssa8_ch+0x4ca>
 8008c8c:	b28b      	uxth	r3, r1
 8008c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c92:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d152      	bne.n	8008d40 <forward_lite_conv2d_sssa8_ch+0x7ac>
 8008c9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c9e:	428b      	cmp	r3, r1
 8008ca0:	f6bf af35 	bge.w	8008b0e <forward_lite_conv2d_sssa8_ch+0x57a>
 8008ca4:	46b8      	mov	r8, r7
 8008ca6:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8008caa:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008cae:	9f08      	ldr	r7, [sp, #32]
 8008cb0:	4652      	mov	r2, sl
 8008cb2:	461e      	mov	r6, r3
 8008cb4:	46aa      	mov	sl, r5
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	460d      	mov	r5, r1
 8008cba:	fb00 4007 	mla	r0, r0, r7, r4
 8008cbe:	3601      	adds	r6, #1
 8008cc0:	fb08 9000 	mla	r0, r8, r0, r9
 8008cc4:	4651      	mov	r1, sl
 8008cc6:	b236      	sxth	r6, r6
 8008cc8:	9206      	str	r2, [sp, #24]
 8008cca:	f001 fc8f 	bl	800a5ec <st_int8_to16_no_shift_interleaved>
 8008cce:	42ae      	cmp	r6, r5
 8008cd0:	9a06      	ldr	r2, [sp, #24]
 8008cd2:	44da      	add	sl, fp
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	dbf0      	blt.n	8008cba <forward_lite_conv2d_sssa8_ch+0x726>
 8008cd8:	4655      	mov	r5, sl
 8008cda:	4647      	mov	r7, r8
 8008cdc:	4692      	mov	sl, r2
 8008cde:	e716      	b.n	8008b0e <forward_lite_conv2d_sssa8_ch+0x57a>
 8008ce0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	46da      	mov	sl, fp
 8008ce6:	dd1e      	ble.n	8008d26 <forward_lite_conv2d_sssa8_ch+0x792>
 8008ce8:	46dc      	mov	ip, fp
 8008cea:	9615      	str	r6, [sp, #84]	; 0x54
 8008cec:	e012      	b.n	8008d14 <forward_lite_conv2d_sssa8_ch+0x780>
 8008cee:	9e08      	ldr	r6, [sp, #32]
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	4566      	cmp	r6, ip
 8008cf4:	4463      	add	r3, ip
 8008cf6:	dd13      	ble.n	8008d20 <forward_lite_conv2d_sssa8_ch+0x78c>
 8008cf8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008cfa:	fb07 0003 	mla	r0, r7, r3, r0
 8008cfe:	f001 fc75 	bl	800a5ec <st_int8_to16_no_shift_interleaved>
 8008d02:	f10a 0a01 	add.w	sl, sl, #1
 8008d06:	fa0f fa8a 	sxth.w	sl, sl
 8008d0a:	45a2      	cmp	sl, r4
 8008d0c:	444d      	add	r5, r9
 8008d0e:	46d4      	mov	ip, sl
 8008d10:	f6bf aef4 	bge.w	8008afc <forward_lite_conv2d_sssa8_ch+0x568>
 8008d14:	f1ba 0f00 	cmp.w	sl, #0
 8008d18:	4629      	mov	r1, r5
 8008d1a:	463a      	mov	r2, r7
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	dae6      	bge.n	8008cee <forward_lite_conv2d_sssa8_ch+0x75a>
 8008d20:	f003 fd94 	bl	800c84c <arm_fill_q15>
 8008d24:	e7ed      	b.n	8008d02 <forward_lite_conv2d_sssa8_ch+0x76e>
 8008d26:	f10a 0a01 	add.w	sl, sl, #1
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	463a      	mov	r2, r7
 8008d2e:	4640      	mov	r0, r8
 8008d30:	fa0f fa8a 	sxth.w	sl, sl
 8008d34:	f003 fd8a 	bl	800c84c <arm_fill_q15>
 8008d38:	45a2      	cmp	sl, r4
 8008d3a:	444d      	add	r5, r9
 8008d3c:	dbf3      	blt.n	8008d26 <forward_lite_conv2d_sssa8_ch+0x792>
 8008d3e:	e6de      	b.n	8008afe <forward_lite_conv2d_sssa8_ch+0x56a>
 8008d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d44:	428b      	cmp	r3, r1
 8008d46:	f6bf aee2 	bge.w	8008b0e <forward_lite_conv2d_sssa8_ch+0x57a>
 8008d4a:	46b8      	mov	r8, r7
 8008d4c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8008d50:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008d54:	9f08      	ldr	r7, [sp, #32]
 8008d56:	4652      	mov	r2, sl
 8008d58:	461e      	mov	r6, r3
 8008d5a:	46aa      	mov	sl, r5
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	460d      	mov	r5, r1
 8008d60:	fb00 4007 	mla	r0, r0, r7, r4
 8008d64:	3601      	adds	r6, #1
 8008d66:	fb08 9000 	mla	r0, r8, r0, r9
 8008d6a:	4651      	mov	r1, sl
 8008d6c:	b236      	sxth	r6, r6
 8008d6e:	9206      	str	r2, [sp, #24]
 8008d70:	f001 fbdc 	bl	800a52c <st_int8_to16_no_shift>
 8008d74:	42ae      	cmp	r6, r5
 8008d76:	9a06      	ldr	r2, [sp, #24]
 8008d78:	44da      	add	sl, fp
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	dbf0      	blt.n	8008d60 <forward_lite_conv2d_sssa8_ch+0x7cc>
 8008d7e:	4655      	mov	r5, sl
 8008d80:	4647      	mov	r7, r8
 8008d82:	4692      	mov	sl, r2
 8008d84:	e6c3      	b.n	8008b0e <forward_lite_conv2d_sssa8_ch+0x57a>
 8008d86:	46da      	mov	sl, fp
 8008d88:	f10a 0a01 	add.w	sl, sl, #1
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	463a      	mov	r2, r7
 8008d90:	4640      	mov	r0, r8
 8008d92:	fa0f fa8a 	sxth.w	sl, sl
 8008d96:	f003 fd59 	bl	800c84c <arm_fill_q15>
 8008d9a:	45a2      	cmp	sl, r4
 8008d9c:	444d      	add	r5, r9
 8008d9e:	dbf3      	blt.n	8008d88 <forward_lite_conv2d_sssa8_ch+0x7f4>
 8008da0:	e6ad      	b.n	8008afe <forward_lite_conv2d_sssa8_ch+0x56a>
 8008da2:	b2a3      	uxth	r3, r4
 8008da4:	931a      	str	r3, [sp, #104]	; 0x68
 8008da6:	e6c2      	b.n	8008b2e <forward_lite_conv2d_sssa8_ch+0x59a>
 8008da8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008daa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dac:	9860      	ldr	r0, [sp, #384]	; 0x180
 8008dae:	ee1a 1a10 	vmov	r1, s20
 8008db2:	f001 fc5d 	bl	800a670 <st_int8_to16_dual>
 8008db6:	e623      	b.n	8008a00 <forward_lite_conv2d_sssa8_ch+0x46c>
 8008db8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dba:	429c      	cmp	r4, r3
 8008dbc:	d014      	beq.n	8008de8 <forward_lite_conv2d_sssa8_ch+0x854>
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dc2:	9305      	str	r3, [sp, #20]
 8008dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dc6:	9304      	str	r3, [sp, #16]
 8008dc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008dca:	9303      	str	r3, [sp, #12]
 8008dcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dce:	9302      	str	r3, [sp, #8]
 8008dd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dd2:	9301      	str	r3, [sp, #4]
 8008dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	ee1b 2a10 	vmov	r2, s22
 8008ddc:	ee19 3a90 	vmov	r3, s19
 8008de0:	ee1a 0a10 	vmov	r0, s20
 8008de4:	f003 f928 	bl	800c038 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8008de8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008dec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	4293      	cmp	r3, r2
 8008df4:	9325      	str	r3, [sp, #148]	; 0x94
 8008df6:	bf28      	it	cs
 8008df8:	4613      	movcs	r3, r2
 8008dfa:	4411      	add	r1, r2
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	911a      	str	r1, [sp, #104]	; 0x68
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80e0 	beq.w	8008fc6 <forward_lite_conv2d_sssa8_ch+0xa32>
 8008e06:	ee1b 4a10 	vmov	r4, s22
 8008e0a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8008e0e:	ee0b 4a10 	vmov	s22, r4
 8008e12:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8008e14:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8008e16:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008e18:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8008e1c:	9421      	str	r4, [sp, #132]	; 0x84
 8008e1e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8008e20:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8008e24:	9420      	str	r4, [sp, #128]	; 0x80
 8008e26:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8008e28:	fb01 0002 	mla	r0, r1, r2, r0
 8008e2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008e30:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e34:	9027      	str	r0, [sp, #156]	; 0x9c
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	f040 80c7 	bne.w	8008fca <forward_lite_conv2d_sssa8_ch+0xa36>
 8008e3c:	460a      	mov	r2, r1
 8008e3e:	ee1a 1a10 	vmov	r1, s20
 8008e42:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e44:	f001 fcfe 	bl	800a844 <st_int8_to16_dual_interleaved>
 8008e48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	9324      	str	r3, [sp, #144]	; 0x90
 8008e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e56:	429a      	cmp	r2, r3
 8008e58:	f47f acd5 	bne.w	8008806 <forward_lite_conv2d_sssa8_ch+0x272>
 8008e5c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008e5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e60:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008e62:	4413      	add	r3, r2
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3401      	adds	r4, #1
 8008e68:	932a      	str	r3, [sp, #168]	; 0xa8
 8008e6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e6c:	b224      	sxth	r4, r4
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	4625      	mov	r5, r4
 8008e72:	f73f ac8f 	bgt.w	8008794 <forward_lite_conv2d_sssa8_ch+0x200>
 8008e76:	b04f      	add	sp, #316	; 0x13c
 8008e78:	ecbd 8b08 	vpop	{d8-d11}
 8008e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e80:	f10a 0a01 	add.w	sl, sl, #1
 8008e84:	4621      	mov	r1, r4
 8008e86:	463a      	mov	r2, r7
 8008e88:	4640      	mov	r0, r8
 8008e8a:	fa0f fa8a 	sxth.w	sl, sl
 8008e8e:	f003 fcdd 	bl	800c84c <arm_fill_q15>
 8008e92:	45aa      	cmp	sl, r5
 8008e94:	444c      	add	r4, r9
 8008e96:	dbf3      	blt.n	8008e80 <forward_lite_conv2d_sssa8_ch+0x8ec>
 8008e98:	e522      	b.n	80088e0 <forward_lite_conv2d_sssa8_ch+0x34c>
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	933b      	str	r3, [sp, #236]	; 0xec
 8008e9e:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 8008ea2:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	f43f acc7 	beq.w	800883a <forward_lite_conv2d_sssa8_ch+0x2a6>
 8008eac:	b28b      	uxth	r3, r1
 8008eae:	930a      	str	r3, [sp, #40]	; 0x28
 8008eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb2:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d154      	bne.n	8008f64 <forward_lite_conv2d_sssa8_ch+0x9d0>
 8008eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	f77f ad14 	ble.w	80088ec <forward_lite_conv2d_sssa8_ch+0x358>
 8008ec4:	4616      	mov	r6, r2
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8008ecc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008ed0:	9f08      	ldr	r7, [sp, #32]
 8008ed2:	ee18 2a90 	vmov	r2, s17
 8008ed6:	ee19 8a10 	vmov	r8, s18
 8008eda:	46a2      	mov	sl, r4
 8008edc:	461c      	mov	r4, r3
 8008ede:	fb00 5007 	mla	r0, r0, r7, r5
 8008ee2:	3601      	adds	r6, #1
 8008ee4:	fb08 9000 	mla	r0, r8, r0, r9
 8008ee8:	4651      	mov	r1, sl
 8008eea:	b236      	sxth	r6, r6
 8008eec:	9206      	str	r2, [sp, #24]
 8008eee:	f001 fb7d 	bl	800a5ec <st_int8_to16_no_shift_interleaved>
 8008ef2:	42a6      	cmp	r6, r4
 8008ef4:	9a06      	ldr	r2, [sp, #24]
 8008ef6:	44da      	add	sl, fp
 8008ef8:	4630      	mov	r0, r6
 8008efa:	dbf0      	blt.n	8008ede <forward_lite_conv2d_sssa8_ch+0x94a>
 8008efc:	4654      	mov	r4, sl
 8008efe:	e4f5      	b.n	80088ec <forward_lite_conv2d_sssa8_ch+0x358>
 8008f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f02:	429a      	cmp	r2, r3
 8008f04:	46da      	mov	sl, fp
 8008f06:	dd20      	ble.n	8008f4a <forward_lite_conv2d_sssa8_ch+0x9b6>
 8008f08:	46dc      	mov	ip, fp
 8008f0a:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 8008f0e:	46b3      	mov	fp, r6
 8008f10:	e012      	b.n	8008f38 <forward_lite_conv2d_sssa8_ch+0x9a4>
 8008f12:	9e08      	ldr	r6, [sp, #32]
 8008f14:	9b06      	ldr	r3, [sp, #24]
 8008f16:	4566      	cmp	r6, ip
 8008f18:	4463      	add	r3, ip
 8008f1a:	dd13      	ble.n	8008f44 <forward_lite_conv2d_sssa8_ch+0x9b0>
 8008f1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008f1e:	fb07 0003 	mla	r0, r7, r3, r0
 8008f22:	f001 fb63 	bl	800a5ec <st_int8_to16_no_shift_interleaved>
 8008f26:	f10a 0a01 	add.w	sl, sl, #1
 8008f2a:	fa0f fa8a 	sxth.w	sl, sl
 8008f2e:	45aa      	cmp	sl, r5
 8008f30:	444c      	add	r4, r9
 8008f32:	46d4      	mov	ip, sl
 8008f34:	f6bf acd1 	bge.w	80088da <forward_lite_conv2d_sssa8_ch+0x346>
 8008f38:	f1ba 0f00 	cmp.w	sl, #0
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	463a      	mov	r2, r7
 8008f40:	4640      	mov	r0, r8
 8008f42:	dae6      	bge.n	8008f12 <forward_lite_conv2d_sssa8_ch+0x97e>
 8008f44:	f003 fc82 	bl	800c84c <arm_fill_q15>
 8008f48:	e7ed      	b.n	8008f26 <forward_lite_conv2d_sssa8_ch+0x992>
 8008f4a:	f10a 0a01 	add.w	sl, sl, #1
 8008f4e:	4621      	mov	r1, r4
 8008f50:	463a      	mov	r2, r7
 8008f52:	4640      	mov	r0, r8
 8008f54:	fa0f fa8a 	sxth.w	sl, sl
 8008f58:	f003 fc78 	bl	800c84c <arm_fill_q15>
 8008f5c:	4555      	cmp	r5, sl
 8008f5e:	444c      	add	r4, r9
 8008f60:	dcf3      	bgt.n	8008f4a <forward_lite_conv2d_sssa8_ch+0x9b6>
 8008f62:	e4bd      	b.n	80088e0 <forward_lite_conv2d_sssa8_ch+0x34c>
 8008f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	f77f acbf 	ble.w	80088ec <forward_lite_conv2d_sssa8_ch+0x358>
 8008f6e:	4616      	mov	r6, r2
 8008f70:	4610      	mov	r0, r2
 8008f72:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8008f76:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008f7a:	9f08      	ldr	r7, [sp, #32]
 8008f7c:	ee18 2a90 	vmov	r2, s17
 8008f80:	ee19 8a10 	vmov	r8, s18
 8008f84:	46a2      	mov	sl, r4
 8008f86:	461c      	mov	r4, r3
 8008f88:	fb00 5007 	mla	r0, r0, r7, r5
 8008f8c:	3601      	adds	r6, #1
 8008f8e:	fb08 9000 	mla	r0, r8, r0, r9
 8008f92:	4651      	mov	r1, sl
 8008f94:	b236      	sxth	r6, r6
 8008f96:	9206      	str	r2, [sp, #24]
 8008f98:	f001 fac8 	bl	800a52c <st_int8_to16_no_shift>
 8008f9c:	42a6      	cmp	r6, r4
 8008f9e:	9a06      	ldr	r2, [sp, #24]
 8008fa0:	44da      	add	sl, fp
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	dbf0      	blt.n	8008f88 <forward_lite_conv2d_sssa8_ch+0x9f4>
 8008fa6:	4654      	mov	r4, sl
 8008fa8:	e4a0      	b.n	80088ec <forward_lite_conv2d_sssa8_ch+0x358>
 8008faa:	46da      	mov	sl, fp
 8008fac:	f10a 0a01 	add.w	sl, sl, #1
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	463a      	mov	r2, r7
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	fa0f fa8a 	sxth.w	sl, sl
 8008fba:	f003 fc47 	bl	800c84c <arm_fill_q15>
 8008fbe:	45aa      	cmp	sl, r5
 8008fc0:	444c      	add	r4, r9
 8008fc2:	dbf3      	blt.n	8008fac <forward_lite_conv2d_sssa8_ch+0xa18>
 8008fc4:	e48c      	b.n	80088e0 <forward_lite_conv2d_sssa8_ch+0x34c>
 8008fc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fc8:	e73e      	b.n	8008e48 <forward_lite_conv2d_sssa8_ch+0x8b4>
 8008fca:	460a      	mov	r2, r1
 8008fcc:	ee1a 1a10 	vmov	r1, s20
 8008fd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fd2:	f001 fb4d 	bl	800a670 <st_int8_to16_dual>
 8008fd6:	e737      	b.n	8008e48 <forward_lite_conv2d_sssa8_ch+0x8b4>
 8008fd8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fdc:	9860      	ldr	r0, [sp, #384]	; 0x180
 8008fde:	ee1a 1a10 	vmov	r1, s20
 8008fe2:	f001 fb45 	bl	800a670 <st_int8_to16_dual>
 8008fe6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f47f abf0 	bne.w	80087ce <forward_lite_conv2d_sssa8_ch+0x23a>
 8008fee:	b2a3      	uxth	r3, r4
 8008ff0:	932c      	str	r3, [sp, #176]	; 0xb0
 8008ff2:	e733      	b.n	8008e5c <forward_lite_conv2d_sssa8_ch+0x8c8>
 8008ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ff6:	fb00 f302 	mul.w	r3, r0, r2
 8008ffa:	42a3      	cmp	r3, r4
 8008ffc:	f73f ab77 	bgt.w	80086ee <forward_lite_conv2d_sssa8_ch+0x15a>
 8009000:	f019 0f03 	tst.w	r9, #3
 8009004:	9628      	str	r6, [sp, #160]	; 0xa0
 8009006:	d10d      	bne.n	8009024 <forward_lite_conv2d_sssa8_ch+0xa90>
 8009008:	4603      	mov	r3, r0
 800900a:	ee1a 1a10 	vmov	r1, s20
 800900e:	9860      	ldr	r0, [sp, #384]	; 0x180
 8009010:	f001 fc18 	bl	800a844 <st_int8_to16_dual_interleaved>
 8009014:	f7ff bb6d 	b.w	80086f2 <forward_lite_conv2d_sssa8_ch+0x15e>
 8009018:	4613      	mov	r3, r2
 800901a:	3301      	adds	r3, #1
 800901c:	b29b      	uxth	r3, r3
 800901e:	9329      	str	r3, [sp, #164]	; 0xa4
 8009020:	f7ff bb92 	b.w	8008748 <forward_lite_conv2d_sssa8_ch+0x1b4>
 8009024:	ee19 3a90 	vmov	r3, s19
 8009028:	ee1a 1a10 	vmov	r1, s20
 800902c:	9860      	ldr	r0, [sp, #384]	; 0x180
 800902e:	f001 fb1f 	bl	800a670 <st_int8_to16_dual>
 8009032:	f7ff bb5e 	b.w	80086f2 <forward_lite_conv2d_sssa8_ch+0x15e>
 8009036:	bf00      	nop

08009038 <forward_lite_dw_3x3_sssa8_ch>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	b09f      	sub	sp, #124	; 0x7c
 800903e:	461e      	mov	r6, r3
 8009040:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 8009044:	9207      	str	r2, [sp, #28]
 8009046:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 800904a:	9206      	str	r2, [sp, #24]
 800904c:	f99d 20b0 	ldrsb.w	r2, [sp, #176]	; 0xb0
 8009050:	920f      	str	r2, [sp, #60]	; 0x3c
 8009052:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8009054:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 8009058:	9215      	str	r2, [sp, #84]	; 0x54
 800905a:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 800905e:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 8009062:	f99d 70b4 	ldrsb.w	r7, [sp, #180]	; 0xb4
 8009066:	f8dd b0b8 	ldr.w	fp, [sp, #184]	; 0xb8
 800906a:	901b      	str	r0, [sp, #108]	; 0x6c
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	9219      	str	r2, [sp, #100]	; 0x64
 8009070:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 8456 	beq.w	8009926 <forward_lite_dw_3x3_sssa8_ch+0x8ee>
 800907a:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800907e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8009080:	444b      	add	r3, r9
 8009082:	44b1      	add	r9, r6
 8009084:	9312      	str	r3, [sp, #72]	; 0x48
 8009086:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 800908a:	461a      	mov	r2, r3
 800908c:	9314      	str	r3, [sp, #80]	; 0x50
 800908e:	f06f 0315 	mvn.w	r3, #21
 8009092:	fb03 2306 	mla	r3, r3, r6, r2
 8009096:	9313      	str	r3, [sp, #76]	; 0x4c
 8009098:	b1de      	cbz	r6, 80090d2 <forward_lite_dw_3x3_sssa8_ch+0x9a>
 800909a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800909c:	1e9c      	subs	r4, r3, #2
 800909e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090a0:	2100      	movs	r1, #0
 80090a2:	1d18      	adds	r0, r3, #4
 80090a4:	f04f 0e01 	mov.w	lr, #1
 80090a8:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 80090ac:	1e5a      	subs	r2, r3, #1
 80090ae:	b292      	uxth	r2, r2
 80090b0:	fa0e f503 	lsl.w	r5, lr, r3
 80090b4:	2a14      	cmp	r2, #20
 80090b6:	fa07 f303 	lsl.w	r3, r7, r3
 80090ba:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 80090be:	f101 0101 	add.w	r1, r1, #1
 80090c2:	f200 8427 	bhi.w	8009914 <forward_lite_dw_3x3_sssa8_ch+0x8dc>
 80090c6:	428e      	cmp	r6, r1
 80090c8:	f840 3c04 	str.w	r3, [r0, #-4]
 80090cc:	f100 0004 	add.w	r0, r0, #4
 80090d0:	dcea      	bgt.n	80090a8 <forward_lite_dw_3x3_sssa8_ch+0x70>
 80090d2:	9b05      	ldr	r3, [sp, #20]
 80090d4:	9a06      	ldr	r2, [sp, #24]
 80090d6:	fb06 f303 	mul.w	r3, r6, r3
 80090da:	fb03 f202 	mul.w	r2, r3, r2
 80090de:	eba3 030c 	sub.w	r3, r3, ip
 80090e2:	9306      	str	r3, [sp, #24]
 80090e4:	9b07      	ldr	r3, [sp, #28]
 80090e6:	921a      	str	r2, [sp, #104]	; 0x68
 80090e8:	fb06 f303 	mul.w	r3, r6, r3
 80090ec:	9316      	str	r3, [sp, #88]	; 0x58
 80090ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090f0:	2e03      	cmp	r6, #3
 80090f2:	f1c3 0300 	rsb	r3, r3, #0
 80090f6:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 80090fa:	bf8c      	ite	hi
 80090fc:	1ef3      	subhi	r3, r6, #3
 80090fe:	2300      	movls	r3, #0
 8009100:	930d      	str	r3, [sp, #52]	; 0x34
 8009102:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 82c3 	beq.w	8009690 <forward_lite_dw_3x3_sssa8_ch+0x658>
 800910a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800910c:	f006 0303 	and.w	r3, r6, #3
 8009110:	9310      	str	r3, [sp, #64]	; 0x40
 8009112:	2a00      	cmp	r2, #0
 8009114:	f000 82bc 	beq.w	8009690 <forward_lite_dw_3x3_sssa8_ch+0x658>
 8009118:	3b01      	subs	r3, #1
 800911a:	b29b      	uxth	r3, r3
 800911c:	9317      	str	r3, [sp, #92]	; 0x5c
 800911e:	2300      	movs	r3, #0
 8009120:	9318      	str	r3, [sp, #96]	; 0x60
 8009122:	46a0      	mov	r8, r4
 8009124:	960b      	str	r6, [sp, #44]	; 0x2c
 8009126:	46d9      	mov	r9, fp
 8009128:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 800912c:	fb03 2301 	mla	r3, r3, r1, r2
 8009130:	930a      	str	r3, [sp, #40]	; 0x28
 8009132:	2300      	movs	r3, #0
 8009134:	9311      	str	r3, [sp, #68]	; 0x44
 8009136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 83ce 	beq.w	80098da <forward_lite_dw_3x3_sssa8_ch+0x8a2>
 800913e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8009142:	930e      	str	r3, [sp, #56]	; 0x38
 8009144:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009146:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009148:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800914a:	9403      	str	r4, [sp, #12]
 800914c:	f103 0010 	add.w	r0, r3, #16
 8009150:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009152:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009154:	f8cd 9014 	str.w	r9, [sp, #20]
 8009158:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009160:	9207      	str	r2, [sp, #28]
 8009162:	3348      	adds	r3, #72	; 0x48
 8009164:	9404      	str	r4, [sp, #16]
 8009166:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009168:	9308      	str	r3, [sp, #32]
 800916a:	5886      	ldr	r6, [r0, r2]
 800916c:	1887      	adds	r7, r0, r2
 800916e:	9802      	ldr	r0, [sp, #8]
 8009170:	f857 9001 	ldr.w	r9, [r7, r1]
 8009174:	f850 2c10 	ldr.w	r2, [r0, #-16]
 8009178:	eac6 4409 	pkhbt	r4, r6, r9, lsl #16
 800917c:	900c      	str	r0, [sp, #48]	; 0x30
 800917e:	eb07 0c41 	add.w	ip, r7, r1, lsl #1
 8009182:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8009186:	eac9 4926 	pkhtb	r9, r9, r6, asr #16
 800918a:	fa28 f584 	sxtab16	r5, r8, r4
 800918e:	fb20 2505 	smlad	r5, r0, r5, r2
 8009192:	fa28 f694 	sxtab16	r6, r8, r4, ror #8
 8009196:	9802      	ldr	r0, [sp, #8]
 8009198:	f853 2c44 	ldr.w	r2, [r3, #-68]
 800919c:	f850 4c0c 	ldr.w	r4, [r0, #-12]
 80091a0:	fb22 4406 	smlad	r4, r2, r6, r4
 80091a4:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80091a8:	f850 6c08 	ldr.w	r6, [r0, #-8]
 80091ac:	fa28 fe89 	sxtab16	lr, r8, r9
 80091b0:	fb22 6e0e 	smlad	lr, r2, lr, r6
 80091b4:	fa28 f999 	sxtab16	r9, r8, r9, ror #8
 80091b8:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80091bc:	f850 6c04 	ldr.w	r6, [r0, #-4]
 80091c0:	fb22 6609 	smlad	r6, r2, r9, r6
 80091c4:	f857 2011 	ldr.w	r2, [r7, r1, lsl #1]
 80091c8:	9f06      	ldr	r7, [sp, #24]
 80091ca:	eb0c 0907 	add.w	r9, ip, r7
 80091ce:	f85c c007 	ldr.w	ip, [ip, r7]
 80091d2:	f853 7c38 	ldr.w	r7, [r3, #-56]
 80091d6:	eac2 4a0c 	pkhbt	sl, r2, ip, lsl #16
 80091da:	eacc 4222 	pkhtb	r2, ip, r2, asr #16
 80091de:	fa28 fb8a 	sxtab16	fp, r8, sl
 80091e2:	eb09 0c01 	add.w	ip, r9, r1
 80091e6:	fb27 550b 	smlad	r5, r7, fp, r5
 80091ea:	fa28 fa9a 	sxtab16	sl, r8, sl, ror #8
 80091ee:	f853 0c34 	ldr.w	r0, [r3, #-52]
 80091f2:	fb20 440a 	smlad	r4, r0, sl, r4
 80091f6:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80091fa:	fa28 f782 	sxtab16	r7, r8, r2
 80091fe:	fb20 ee07 	smlad	lr, r0, r7, lr
 8009202:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 8009206:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 800920a:	fb20 6602 	smlad	r6, r0, r2, r6
 800920e:	9806      	ldr	r0, [sp, #24]
 8009210:	f859 a001 	ldr.w	sl, [r9, r1]
 8009214:	f853 7c28 	ldr.w	r7, [r3, #-40]
 8009218:	f859 9011 	ldr.w	r9, [r9, r1, lsl #1]
 800921c:	eaca 4209 	pkhbt	r2, sl, r9, lsl #16
 8009220:	448c      	add	ip, r1
 8009222:	eac9 492a 	pkhtb	r9, r9, sl, asr #16
 8009226:	fa28 fb82 	sxtab16	fp, r8, r2
 800922a:	eb0c 0a00 	add.w	sl, ip, r0
 800922e:	fb27 550b 	smlad	r5, r7, fp, r5
 8009232:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 8009236:	f853 7c24 	ldr.w	r7, [r3, #-36]
 800923a:	fb27 4402 	smlad	r4, r7, r2, r4
 800923e:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8009242:	fa28 f789 	sxtab16	r7, r8, r9
 8009246:	fb22 ee07 	smlad	lr, r2, r7, lr
 800924a:	fa28 f999 	sxtab16	r9, r8, r9, ror #8
 800924e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8009252:	fb22 6609 	smlad	r6, r2, r9, r6
 8009256:	f85c 9000 	ldr.w	r9, [ip, r0]
 800925a:	f853 7c18 	ldr.w	r7, [r3, #-24]
 800925e:	f85a c001 	ldr.w	ip, [sl, r1]
 8009262:	eac9 420c 	pkhbt	r2, r9, ip, lsl #16
 8009266:	eacc 4c29 	pkhtb	ip, ip, r9, asr #16
 800926a:	fa28 f982 	sxtab16	r9, r8, r2
 800926e:	fb27 5709 	smlad	r7, r7, r9, r5
 8009272:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 8009276:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800927a:	fb20 4402 	smlad	r4, r0, r2, r4
 800927e:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8009282:	fa28 f28c 	sxtab16	r2, r8, ip
 8009286:	fb20 ee02 	smlad	lr, r0, r2, lr
 800928a:	fa28 fc9c 	sxtab16	ip, r8, ip, ror #8
 800928e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8009292:	fb22 660c 	smlad	r6, r2, ip, r6
 8009296:	f85a c011 	ldr.w	ip, [sl, r1, lsl #1]
 800929a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800929c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80092a0:	f833 9c06 	ldrh.w	r9, [r3, #-6]
 80092a4:	f833 bc04 	ldrh.w	fp, [r3, #-4]
 80092a8:	fa4f f58c 	sxtb.w	r5, ip
 80092ac:	1a2d      	subs	r5, r5, r0
 80092ae:	fb12 7705 	smlabb	r7, r2, r5, r7
 80092b2:	f34c 2207 	sbfx	r2, ip, #8, #8
 80092b6:	1a12      	subs	r2, r2, r0
 80092b8:	f34c 4a07 	sbfx	sl, ip, #16, #8
 80092bc:	fb19 4402 	smlabb	r4, r9, r2, r4
 80092c0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80092c4:	ebaa 0a00 	sub.w	sl, sl, r0
 80092c8:	ebc0 6c2c 	rsb	ip, r0, ip, asr #24
 80092cc:	9801      	ldr	r0, [sp, #4]
 80092ce:	fb12 620c 	smlabb	r2, r2, ip, r6
 80092d2:	9209      	str	r2, [sp, #36]	; 0x24
 80092d4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80092d8:	2a15      	cmp	r2, #21
 80092da:	fb1b ea0a 	smlabb	sl, fp, sl, lr
 80092de:	f340 822b 	ble.w	8009738 <forward_lite_dw_3x3_sssa8_ch+0x700>
 80092e2:	e9dd c603 	ldrd	ip, r6, [sp, #12]
 80092e6:	f1a2 0e02 	sub.w	lr, r2, #2
 80092ea:	f856 9b04 	ldr.w	r9, [r6], #4
 80092ee:	3a01      	subs	r2, #1
 80092f0:	2501      	movs	r5, #1
 80092f2:	fa05 fe0e 	lsl.w	lr, r5, lr
 80092f6:	f85c 5b04 	ldr.w	r5, [ip], #4
 80092fa:	fb57 e705 	smmla	r7, r7, r5, lr
 80092fe:	4117      	asrs	r7, r2
 8009300:	44b9      	add	r9, r7
 8009302:	f100 0b02 	add.w	fp, r0, #2
 8009306:	f309 0907 	ssat	r9, #8, r9
 800930a:	9d05      	ldr	r5, [sp, #20]
 800930c:	f805 9b01 	strb.w	r9, [r5], #1
 8009310:	f9bb 7000 	ldrsh.w	r7, [fp]
 8009314:	2f15      	cmp	r7, #21
 8009316:	f340 81f6 	ble.w	8009706 <forward_lite_dw_3x3_sssa8_ch+0x6ce>
 800931a:	f8dc 2000 	ldr.w	r2, [ip]
 800931e:	6836      	ldr	r6, [r6, #0]
 8009320:	f1a7 0c02 	sub.w	ip, r7, #2
 8009324:	2001      	movs	r0, #1
 8009326:	fa00 fc0c 	lsl.w	ip, r0, ip
 800932a:	fb54 cc02 	smmla	ip, r4, r2, ip
 800932e:	9a03      	ldr	r2, [sp, #12]
 8009330:	f102 0908 	add.w	r9, r2, #8
 8009334:	9a01      	ldr	r2, [sp, #4]
 8009336:	3f01      	subs	r7, #1
 8009338:	f102 0e04 	add.w	lr, r2, #4
 800933c:	9a04      	ldr	r2, [sp, #16]
 800933e:	fa4c fc07 	asr.w	ip, ip, r7
 8009342:	4466      	add	r6, ip
 8009344:	f102 0b08 	add.w	fp, r2, #8
 8009348:	f306 0607 	ssat	r6, #8, r6
 800934c:	9a05      	ldr	r2, [sp, #20]
 800934e:	702e      	strb	r6, [r5, #0]
 8009350:	1c94      	adds	r4, r2, #2
 8009352:	f9be 5000 	ldrsh.w	r5, [lr]
 8009356:	2d15      	cmp	r5, #21
 8009358:	f340 819d 	ble.w	8009696 <forward_lite_dw_3x3_sssa8_ch+0x65e>
 800935c:	f1a5 0e02 	sub.w	lr, r5, #2
 8009360:	2001      	movs	r0, #1
 8009362:	f8d9 2000 	ldr.w	r2, [r9]
 8009366:	f8db 6000 	ldr.w	r6, [fp]
 800936a:	fa00 fe0e 	lsl.w	lr, r0, lr
 800936e:	fb5a ee02 	smmla	lr, sl, r2, lr
 8009372:	9a03      	ldr	r2, [sp, #12]
 8009374:	9804      	ldr	r0, [sp, #16]
 8009376:	3d01      	subs	r5, #1
 8009378:	f102 0c0c 	add.w	ip, r2, #12
 800937c:	9a01      	ldr	r2, [sp, #4]
 800937e:	fa4e fe05 	asr.w	lr, lr, r5
 8009382:	4476      	add	r6, lr
 8009384:	3206      	adds	r2, #6
 8009386:	f100 050c 	add.w	r5, r0, #12
 800938a:	f306 0607 	ssat	r6, #8, r6
 800938e:	9805      	ldr	r0, [sp, #20]
 8009390:	7026      	strb	r6, [r4, #0]
 8009392:	f100 0903 	add.w	r9, r0, #3
 8009396:	f9b2 2000 	ldrsh.w	r2, [r2]
 800939a:	2a15      	cmp	r2, #21
 800939c:	f340 819b 	ble.w	80096d6 <forward_lite_dw_3x3_sssa8_ch+0x69e>
 80093a0:	9801      	ldr	r0, [sp, #4]
 80093a2:	9f03      	ldr	r7, [sp, #12]
 80093a4:	f8dc 6000 	ldr.w	r6, [ip]
 80093a8:	682d      	ldr	r5, [r5, #0]
 80093aa:	9c04      	ldr	r4, [sp, #16]
 80093ac:	f100 0b08 	add.w	fp, r0, #8
 80093b0:	f1a2 0c02 	sub.w	ip, r2, #2
 80093b4:	2001      	movs	r0, #1
 80093b6:	3a01      	subs	r2, #1
 80093b8:	fa00 fc0c 	lsl.w	ip, r0, ip
 80093bc:	3710      	adds	r7, #16
 80093be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c0:	fb50 c606 	smmla	r6, r0, r6, ip
 80093c4:	fa46 f202 	asr.w	r2, r6, r2
 80093c8:	3410      	adds	r4, #16
 80093ca:	442a      	add	r2, r5
 80093cc:	46ba      	mov	sl, r7
 80093ce:	46de      	mov	lr, fp
 80093d0:	4625      	mov	r5, r4
 80093d2:	f302 0207 	ssat	r2, #8, r2
 80093d6:	9e07      	ldr	r6, [sp, #28]
 80093d8:	f889 2000 	strb.w	r2, [r9]
 80093dc:	9a05      	ldr	r2, [sp, #20]
 80093de:	f8cd b004 	str.w	fp, [sp, #4]
 80093e2:	3204      	adds	r2, #4
 80093e4:	3604      	adds	r6, #4
 80093e6:	b2b0      	uxth	r0, r6
 80093e8:	e9cd 4204 	strd	r4, r2, [sp, #16]
 80093ec:	9e02      	ldr	r6, [sp, #8]
 80093ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80093f0:	9007      	str	r0, [sp, #28]
 80093f2:	3610      	adds	r6, #16
 80093f4:	42a0      	cmp	r0, r4
 80093f6:	4691      	mov	r9, r2
 80093f8:	9602      	str	r6, [sp, #8]
 80093fa:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80093fe:	9703      	str	r7, [sp, #12]
 8009400:	4602      	mov	r2, r0
 8009402:	f4ff aeb0 	bcc.w	8009166 <forward_lite_dw_3x3_sssa8_ch+0x12e>
 8009406:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 812d 	beq.w	8009668 <forward_lite_dw_3x3_sssa8_ch+0x630>
 800940e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009410:	9b07      	ldr	r3, [sp, #28]
 8009412:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009414:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009416:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009418:	18d0      	adds	r0, r2, r3
 800941a:	56d3      	ldrsb	r3, [r2, r3]
 800941c:	1bda      	subs	r2, r3, r7
 800941e:	680b      	ldr	r3, [r1, #0]
 8009420:	9908      	ldr	r1, [sp, #32]
 8009422:	8809      	ldrh	r1, [r1, #0]
 8009424:	eb00 0644 	add.w	r6, r0, r4, lsl #1
 8009428:	fb11 3302 	smlabb	r3, r1, r2, r3
 800942c:	9906      	ldr	r1, [sp, #24]
 800942e:	5702      	ldrsb	r2, [r0, r4]
 8009430:	f910 4014 	ldrsb.w	r4, [r0, r4, lsl #1]
 8009434:	1870      	adds	r0, r6, r1
 8009436:	5671      	ldrsb	r1, [r6, r1]
 8009438:	9e08      	ldr	r6, [sp, #32]
 800943a:	8876      	ldrh	r6, [r6, #2]
 800943c:	1bd2      	subs	r2, r2, r7
 800943e:	fb12 3306 	smlabb	r3, r2, r6, r3
 8009442:	9e08      	ldr	r6, [sp, #32]
 8009444:	88b2      	ldrh	r2, [r6, #4]
 8009446:	1be4      	subs	r4, r4, r7
 8009448:	fb14 3402 	smlabb	r4, r4, r2, r3
 800944c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944e:	eb00 0643 	add.w	r6, r0, r3, lsl #1
 8009452:	9b08      	ldr	r3, [sp, #32]
 8009454:	88da      	ldrh	r2, [r3, #6]
 8009456:	1bc9      	subs	r1, r1, r7
 8009458:	fb11 4102 	smlabb	r1, r1, r2, r4
 800945c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800945e:	5702      	ldrsb	r2, [r0, r4]
 8009460:	f910 3014 	ldrsb.w	r3, [r0, r4, lsl #1]
 8009464:	9806      	ldr	r0, [sp, #24]
 8009466:	1834      	adds	r4, r6, r0
 8009468:	5630      	ldrsb	r0, [r6, r0]
 800946a:	1bdb      	subs	r3, r3, r7
 800946c:	1bc0      	subs	r0, r0, r7
 800946e:	1bd2      	subs	r2, r2, r7
 8009470:	9f08      	ldr	r7, [sp, #32]
 8009472:	893e      	ldrh	r6, [r7, #8]
 8009474:	fb12 1206 	smlabb	r2, r2, r6, r1
 8009478:	8979      	ldrh	r1, [r7, #10]
 800947a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800947c:	fb13 2201 	smlabb	r2, r3, r1, r2
 8009480:	89b9      	ldrh	r1, [r7, #12]
 8009482:	463b      	mov	r3, r7
 8009484:	fb10 2201 	smlabb	r2, r0, r1, r2
 8009488:	f914 7016 	ldrsb.w	r7, [r4, r6, lsl #1]
 800948c:	57a0      	ldrsb	r0, [r4, r6]
 800948e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009490:	1a44      	subs	r4, r0, r1
 8009492:	89d8      	ldrh	r0, [r3, #14]
 8009494:	8a1b      	ldrh	r3, [r3, #16]
 8009496:	1a7f      	subs	r7, r7, r1
 8009498:	fb14 2000 	smlabb	r0, r4, r0, r2
 800949c:	fb17 0003 	smlabb	r0, r7, r3, r0
 80094a0:	f9be 4000 	ldrsh.w	r4, [lr]
 80094a4:	9b07      	ldr	r3, [sp, #28]
 80094a6:	2c15      	cmp	r4, #21
 80094a8:	f103 0601 	add.w	r6, r3, #1
 80094ac:	b2b6      	uxth	r6, r6
 80094ae:	b209      	sxth	r1, r1
 80094b0:	f300 81bc 	bgt.w	800982c <forward_lite_dw_3x3_sssa8_ch+0x7f4>
 80094b4:	2c00      	cmp	r4, #0
 80094b6:	f340 81ed 	ble.w	8009894 <forward_lite_dw_3x3_sssa8_ch+0x85c>
 80094ba:	f8da 3000 	ldr.w	r3, [sl]
 80094be:	682a      	ldr	r2, [r5, #0]
 80094c0:	0040      	lsls	r0, r0, #1
 80094c2:	fb50 2003 	smmla	r0, r0, r3, r2
 80094c6:	4120      	asrs	r0, r4
 80094c8:	f300 0407 	ssat	r4, #8, r0
 80094cc:	46cc      	mov	ip, r9
 80094ce:	f80c 4b01 	strb.w	r4, [ip], #1
 80094d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 80c5 	beq.w	8009664 <forward_lite_dw_3x3_sssa8_ch+0x62c>
 80094da:	9b07      	ldr	r3, [sp, #28]
 80094dc:	9c08      	ldr	r4, [sp, #32]
 80094de:	3302      	adds	r3, #2
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e6:	8a64      	ldrh	r4, [r4, #18]
 80094e8:	1998      	adds	r0, r3, r6
 80094ea:	579b      	ldrsb	r3, [r3, r6]
 80094ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80094ee:	1a5a      	subs	r2, r3, r1
 80094f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 80094f8:	fb12 3304 	smlabb	r3, r2, r4, r3
 80094fc:	5782      	ldrsb	r2, [r0, r6]
 80094fe:	f910 6016 	ldrsb.w	r6, [r0, r6, lsl #1]
 8009502:	9806      	ldr	r0, [sp, #24]
 8009504:	183c      	adds	r4, r7, r0
 8009506:	5638      	ldrsb	r0, [r7, r0]
 8009508:	9f08      	ldr	r7, [sp, #32]
 800950a:	8abf      	ldrh	r7, [r7, #20]
 800950c:	1a52      	subs	r2, r2, r1
 800950e:	fb12 3307 	smlabb	r3, r2, r7, r3
 8009512:	9f08      	ldr	r7, [sp, #32]
 8009514:	8afa      	ldrh	r2, [r7, #22]
 8009516:	1a76      	subs	r6, r6, r1
 8009518:	fb16 3602 	smlabb	r6, r6, r2, r3
 800951c:	9b08      	ldr	r3, [sp, #32]
 800951e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009520:	8b1b      	ldrh	r3, [r3, #24]
 8009522:	1a40      	subs	r0, r0, r1
 8009524:	fb10 6003 	smlabb	r0, r0, r3, r6
 8009528:	4616      	mov	r6, r2
 800952a:	eb04 0742 	add.w	r7, r4, r2, lsl #1
 800952e:	f914 3016 	ldrsb.w	r3, [r4, r6, lsl #1]
 8009532:	56a2      	ldrsb	r2, [r4, r2]
 8009534:	9c06      	ldr	r4, [sp, #24]
 8009536:	193e      	adds	r6, r7, r4
 8009538:	573c      	ldrsb	r4, [r7, r4]
 800953a:	9f08      	ldr	r7, [sp, #32]
 800953c:	8b7f      	ldrh	r7, [r7, #26]
 800953e:	1a52      	subs	r2, r2, r1
 8009540:	fb12 0207 	smlabb	r2, r2, r7, r0
 8009544:	9f08      	ldr	r7, [sp, #32]
 8009546:	8bb8      	ldrh	r0, [r7, #28]
 8009548:	1a5b      	subs	r3, r3, r1
 800954a:	fb13 2200 	smlabb	r2, r3, r0, r2
 800954e:	8bfb      	ldrh	r3, [r7, #30]
 8009550:	1a64      	subs	r4, r4, r1
 8009552:	fb14 2203 	smlabb	r2, r4, r3, r2
 8009556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009558:	56f0      	ldrsb	r0, [r6, r3]
 800955a:	f916 3013 	ldrsb.w	r3, [r6, r3, lsl #1]
 800955e:	8c3c      	ldrh	r4, [r7, #32]
 8009560:	1a40      	subs	r0, r0, r1
 8009562:	fb10 2204 	smlabb	r2, r0, r4, r2
 8009566:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8009568:	1a5b      	subs	r3, r3, r1
 800956a:	fb13 2200 	smlabb	r2, r3, r0, r2
 800956e:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 8009572:	2815      	cmp	r0, #21
 8009574:	f300 816c 	bgt.w	8009850 <forward_lite_dw_3x3_sssa8_ch+0x818>
 8009578:	2800      	cmp	r0, #0
 800957a:	f340 819d 	ble.w	80098b8 <forward_lite_dw_3x3_sssa8_ch+0x880>
 800957e:	0054      	lsls	r4, r2, #1
 8009580:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009584:	686a      	ldr	r2, [r5, #4]
 8009586:	fb54 2203 	smmla	r2, r4, r3, r2
 800958a:	4102      	asrs	r2, r0
 800958c:	f302 0007 	ssat	r0, #8, r2
 8009590:	46e3      	mov	fp, ip
 8009592:	f80b 0b01 	strb.w	r0, [fp], #1
 8009596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009598:	2b02      	cmp	r3, #2
 800959a:	d063      	beq.n	8009664 <forward_lite_dw_3x3_sssa8_ch+0x62c>
 800959c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800959e:	9801      	ldr	r0, [sp, #4]
 80095a0:	689c      	ldr	r4, [r3, #8]
 80095a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095a6:	561f      	ldrsb	r7, [r3, r0]
 80095a8:	f9be e004 	ldrsh.w	lr, [lr, #4]
 80095ac:	181a      	adds	r2, r3, r0
 80095ae:	1a78      	subs	r0, r7, r1
 80095b0:	9f08      	ldr	r7, [sp, #32]
 80095b2:	f912 c006 	ldrsb.w	ip, [r2, r6]
 80095b6:	8cbf      	ldrh	r7, [r7, #36]	; 0x24
 80095b8:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 80095bc:	fb17 4700 	smlabb	r7, r7, r0, r4
 80095c0:	9806      	ldr	r0, [sp, #24]
 80095c2:	f912 6016 	ldrsb.w	r6, [r2, r6, lsl #1]
 80095c6:	561c      	ldrsb	r4, [r3, r0]
 80095c8:	181a      	adds	r2, r3, r0
 80095ca:	1a60      	subs	r0, r4, r1
 80095cc:	9c08      	ldr	r4, [sp, #32]
 80095ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80095d0:	ebac 0c01 	sub.w	ip, ip, r1
 80095d4:	fb13 730c 	smlabb	r3, r3, ip, r7
 80095d8:	4627      	mov	r7, r4
 80095da:	8d24      	ldrh	r4, [r4, #40]	; 0x28
 80095dc:	1a76      	subs	r6, r6, r1
 80095de:	fb14 3606 	smlabb	r6, r4, r6, r3
 80095e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e4:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80095e6:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 80095ea:	fb14 6400 	smlabb	r4, r4, r0, r6
 80095ee:	56d6      	ldrsb	r6, [r2, r3]
 80095f0:	f912 0013 	ldrsb.w	r0, [r2, r3, lsl #1]
 80095f4:	9a06      	ldr	r2, [sp, #24]
 80095f6:	eb0c 0702 	add.w	r7, ip, r2
 80095fa:	f91c 3002 	ldrsb.w	r3, [ip, r2]
 80095fe:	9a08      	ldr	r2, [sp, #32]
 8009600:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009602:	1a76      	subs	r6, r6, r1
 8009604:	fb12 4206 	smlabb	r2, r2, r6, r4
 8009608:	9c08      	ldr	r4, [sp, #32]
 800960a:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
 800960e:	1a40      	subs	r0, r0, r1
 8009610:	fb1c 2200 	smlabb	r2, ip, r0, r2
 8009614:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8009616:	1a5b      	subs	r3, r3, r1
 8009618:	fb10 2203 	smlabb	r2, r0, r3, r2
 800961c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800961e:	563b      	ldrsb	r3, [r7, r0]
 8009620:	f917 0010 	ldrsb.w	r0, [r7, r0, lsl #1]
 8009624:	1a5b      	subs	r3, r3, r1
 8009626:	1a41      	subs	r1, r0, r1
 8009628:	4620      	mov	r0, r4
 800962a:	8e64      	ldrh	r4, [r4, #50]	; 0x32
 800962c:	fb14 2303 	smlabb	r3, r4, r3, r2
 8009630:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 8009632:	f1be 0f15 	cmp.w	lr, #21
 8009636:	fb12 3301 	smlabb	r3, r2, r1, r3
 800963a:	f340 811b 	ble.w	8009874 <forward_lite_dw_3x3_sssa8_ch+0x83c>
 800963e:	68a8      	ldr	r0, [r5, #8]
 8009640:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009644:	f1ae 0102 	sub.w	r1, lr, #2
 8009648:	2401      	movs	r4, #1
 800964a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800964e:	fa04 f101 	lsl.w	r1, r4, r1
 8009652:	fb53 1102 	smmla	r1, r3, r2, r1
 8009656:	fa41 f10e 	asr.w	r1, r1, lr
 800965a:	4401      	add	r1, r0
 800965c:	f301 0107 	ssat	r1, #8, r1
 8009660:	f88b 1000 	strb.w	r1, [fp]
 8009664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009666:	4499      	add	r9, r3
 8009668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800966a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800966c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800966e:	440a      	add	r2, r1
 8009670:	3301      	adds	r3, #1
 8009672:	920a      	str	r2, [sp, #40]	; 0x28
 8009674:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009676:	b21b      	sxth	r3, r3
 8009678:	429a      	cmp	r2, r3
 800967a:	9311      	str	r3, [sp, #68]	; 0x44
 800967c:	f73f ad5b 	bgt.w	8009136 <forward_lite_dw_3x3_sssa8_ch+0xfe>
 8009680:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009682:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009684:	3301      	adds	r3, #1
 8009686:	b21b      	sxth	r3, r3
 8009688:	428b      	cmp	r3, r1
 800968a:	9318      	str	r3, [sp, #96]	; 0x60
 800968c:	f6ff ad4c 	blt.w	8009128 <forward_lite_dw_3x3_sssa8_ch+0xf0>
 8009690:	b01f      	add	sp, #124	; 0x7c
 8009692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009696:	2d00      	cmp	r5, #0
 8009698:	dd63      	ble.n	8009762 <forward_lite_dw_3x3_sssa8_ch+0x72a>
 800969a:	9a03      	ldr	r2, [sp, #12]
 800969c:	f8d9 6000 	ldr.w	r6, [r9]
 80096a0:	f8db 7000 	ldr.w	r7, [fp]
 80096a4:	f102 0c0c 	add.w	ip, r2, #12
 80096a8:	9a04      	ldr	r2, [sp, #16]
 80096aa:	ea4f 0e4a 	mov.w	lr, sl, lsl #1
 80096ae:	fb5e 7e06 	smmla	lr, lr, r6, r7
 80096b2:	fa4e fe05 	asr.w	lr, lr, r5
 80096b6:	f102 050c 	add.w	r5, r2, #12
 80096ba:	9a01      	ldr	r2, [sp, #4]
 80096bc:	3206      	adds	r2, #6
 80096be:	f30e 0e07 	ssat	lr, #8, lr
 80096c2:	f884 e000 	strb.w	lr, [r4]
 80096c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80096ca:	9805      	ldr	r0, [sp, #20]
 80096cc:	2a15      	cmp	r2, #21
 80096ce:	f100 0903 	add.w	r9, r0, #3
 80096d2:	f73f ae65 	bgt.w	80093a0 <forward_lite_dw_3x3_sssa8_ch+0x368>
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	f340 8092 	ble.w	8009800 <forward_lite_dw_3x3_sssa8_ch+0x7c8>
 80096dc:	9801      	ldr	r0, [sp, #4]
 80096de:	9f03      	ldr	r7, [sp, #12]
 80096e0:	9c04      	ldr	r4, [sp, #16]
 80096e2:	f8dc 6000 	ldr.w	r6, [ip]
 80096e6:	682d      	ldr	r5, [r5, #0]
 80096e8:	f100 0b08 	add.w	fp, r0, #8
 80096ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ee:	3710      	adds	r7, #16
 80096f0:	3410      	adds	r4, #16
 80096f2:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80096f6:	46ba      	mov	sl, r7
 80096f8:	fb5c 5606 	smmla	r6, ip, r6, r5
 80096fc:	46de      	mov	lr, fp
 80096fe:	fa46 f202 	asr.w	r2, r6, r2
 8009702:	4625      	mov	r5, r4
 8009704:	e665      	b.n	80093d2 <forward_lite_dw_3x3_sssa8_ch+0x39a>
 8009706:	2f00      	cmp	r7, #0
 8009708:	dd60      	ble.n	80097cc <forward_lite_dw_3x3_sssa8_ch+0x794>
 800970a:	f8dc 2000 	ldr.w	r2, [ip]
 800970e:	6836      	ldr	r6, [r6, #0]
 8009710:	0064      	lsls	r4, r4, #1
 8009712:	fb54 6402 	smmla	r4, r4, r2, r6
 8009716:	9a03      	ldr	r2, [sp, #12]
 8009718:	f102 0908 	add.w	r9, r2, #8
 800971c:	9a04      	ldr	r2, [sp, #16]
 800971e:	f102 0b08 	add.w	fp, r2, #8
 8009722:	9a01      	ldr	r2, [sp, #4]
 8009724:	fa44 f707 	asr.w	r7, r4, r7
 8009728:	f102 0e04 	add.w	lr, r2, #4
 800972c:	f307 0707 	ssat	r7, #8, r7
 8009730:	9a05      	ldr	r2, [sp, #20]
 8009732:	702f      	strb	r7, [r5, #0]
 8009734:	1c94      	adds	r4, r2, #2
 8009736:	e60c      	b.n	8009352 <forward_lite_dw_3x3_sssa8_ch+0x31a>
 8009738:	2a00      	cmp	r2, #0
 800973a:	dd2f      	ble.n	800979c <forward_lite_dw_3x3_sssa8_ch+0x764>
 800973c:	e9dd c603 	ldrd	ip, r6, [sp, #12]
 8009740:	007f      	lsls	r7, r7, #1
 8009742:	f85c 5b04 	ldr.w	r5, [ip], #4
 8009746:	f856 eb04 	ldr.w	lr, [r6], #4
 800974a:	fb57 e705 	smmla	r7, r7, r5, lr
 800974e:	f100 0b02 	add.w	fp, r0, #2
 8009752:	fa47 f202 	asr.w	r2, r7, r2
 8009756:	f302 0207 	ssat	r2, #8, r2
 800975a:	9d05      	ldr	r5, [sp, #20]
 800975c:	f805 2b01 	strb.w	r2, [r5], #1
 8009760:	e5d6      	b.n	8009310 <forward_lite_dw_3x3_sssa8_ch+0x2d8>
 8009762:	9a01      	ldr	r2, [sp, #4]
 8009764:	f1c5 0e01 	rsb	lr, r5, #1
 8009768:	fa0a fe0e 	lsl.w	lr, sl, lr
 800976c:	3206      	adds	r2, #6
 800976e:	f30e 0e1f 	ssat	lr, #32, lr
 8009772:	9803      	ldr	r0, [sp, #12]
 8009774:	f8d9 5000 	ldr.w	r5, [r9]
 8009778:	f100 0c0c 	add.w	ip, r0, #12
 800977c:	fb5e fe15 	smmulr	lr, lr, r5
 8009780:	f8db 5000 	ldr.w	r5, [fp]
 8009784:	9804      	ldr	r0, [sp, #16]
 8009786:	44ae      	add	lr, r5
 8009788:	f100 050c 	add.w	r5, r0, #12
 800978c:	f30e 0e07 	ssat	lr, #8, lr
 8009790:	9805      	ldr	r0, [sp, #20]
 8009792:	f884 e000 	strb.w	lr, [r4]
 8009796:	f100 0903 	add.w	r9, r0, #3
 800979a:	e5fc      	b.n	8009396 <forward_lite_dw_3x3_sssa8_ch+0x35e>
 800979c:	f1c2 0201 	rsb	r2, r2, #1
 80097a0:	4097      	lsls	r7, r2
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	f102 0b02 	add.w	fp, r2, #2
 80097a8:	f307 021f 	ssat	r2, #32, r7
 80097ac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80097b0:	f85c 7b04 	ldr.w	r7, [ip], #4
 80097b4:	fb52 f217 	smmulr	r2, r2, r7
 80097b8:	9e04      	ldr	r6, [sp, #16]
 80097ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80097be:	442a      	add	r2, r5
 80097c0:	f302 0207 	ssat	r2, #8, r2
 80097c4:	9d05      	ldr	r5, [sp, #20]
 80097c6:	f805 2b01 	strb.w	r2, [r5], #1
 80097ca:	e5a1      	b.n	8009310 <forward_lite_dw_3x3_sssa8_ch+0x2d8>
 80097cc:	9a01      	ldr	r2, [sp, #4]
 80097ce:	f1c7 0701 	rsb	r7, r7, #1
 80097d2:	40bc      	lsls	r4, r7
 80097d4:	f102 0e04 	add.w	lr, r2, #4
 80097d8:	f304 041f 	ssat	r4, #32, r4
 80097dc:	9803      	ldr	r0, [sp, #12]
 80097de:	f8dc 2000 	ldr.w	r2, [ip]
 80097e2:	f100 0908 	add.w	r9, r0, #8
 80097e6:	fb54 f412 	smmulr	r4, r4, r2
 80097ea:	6832      	ldr	r2, [r6, #0]
 80097ec:	9804      	ldr	r0, [sp, #16]
 80097ee:	4422      	add	r2, r4
 80097f0:	f100 0b08 	add.w	fp, r0, #8
 80097f4:	f302 0207 	ssat	r2, #8, r2
 80097f8:	702a      	strb	r2, [r5, #0]
 80097fa:	9a05      	ldr	r2, [sp, #20]
 80097fc:	1c94      	adds	r4, r2, #2
 80097fe:	e5a8      	b.n	8009352 <forward_lite_dw_3x3_sssa8_ch+0x31a>
 8009800:	9801      	ldr	r0, [sp, #4]
 8009802:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009804:	f100 0b08 	add.w	fp, r0, #8
 8009808:	f1c2 0201 	rsb	r2, r2, #1
 800980c:	4096      	lsls	r6, r2
 800980e:	46de      	mov	lr, fp
 8009810:	f306 021f 	ssat	r2, #32, r6
 8009814:	9f03      	ldr	r7, [sp, #12]
 8009816:	f8dc 4000 	ldr.w	r4, [ip]
 800981a:	3710      	adds	r7, #16
 800981c:	46ba      	mov	sl, r7
 800981e:	fb52 f214 	smmulr	r2, r2, r4
 8009822:	682c      	ldr	r4, [r5, #0]
 8009824:	4422      	add	r2, r4
 8009826:	9c04      	ldr	r4, [sp, #16]
 8009828:	3410      	adds	r4, #16
 800982a:	e5d1      	b.n	80093d0 <forward_lite_dw_3x3_sssa8_ch+0x398>
 800982c:	682f      	ldr	r7, [r5, #0]
 800982e:	1ea2      	subs	r2, r4, #2
 8009830:	2301      	movs	r3, #1
 8009832:	3c01      	subs	r4, #1
 8009834:	fa03 f202 	lsl.w	r2, r3, r2
 8009838:	f8da 3000 	ldr.w	r3, [sl]
 800983c:	fb50 2303 	smmla	r3, r0, r3, r2
 8009840:	4123      	asrs	r3, r4
 8009842:	443b      	add	r3, r7
 8009844:	f303 0307 	ssat	r3, #8, r3
 8009848:	46cc      	mov	ip, r9
 800984a:	f80c 3b01 	strb.w	r3, [ip], #1
 800984e:	e640      	b.n	80094d2 <forward_lite_dw_3x3_sssa8_ch+0x49a>
 8009850:	686e      	ldr	r6, [r5, #4]
 8009852:	1e84      	subs	r4, r0, #2
 8009854:	2301      	movs	r3, #1
 8009856:	3801      	subs	r0, #1
 8009858:	fa03 f404 	lsl.w	r4, r3, r4
 800985c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009860:	fb52 4303 	smmla	r3, r2, r3, r4
 8009864:	4103      	asrs	r3, r0
 8009866:	4433      	add	r3, r6
 8009868:	f303 0307 	ssat	r3, #8, r3
 800986c:	46e3      	mov	fp, ip
 800986e:	f80b 3b01 	strb.w	r3, [fp], #1
 8009872:	e690      	b.n	8009596 <forward_lite_dw_3x3_sssa8_ch+0x55e>
 8009874:	f1be 0f00 	cmp.w	lr, #0
 8009878:	dd3b      	ble.n	80098f2 <forward_lite_dw_3x3_sssa8_ch+0x8ba>
 800987a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800987e:	68ac      	ldr	r4, [r5, #8]
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	fb53 4300 	smmla	r3, r3, r0, r4
 8009886:	fa43 f30e 	asr.w	r3, r3, lr
 800988a:	f303 0307 	ssat	r3, #8, r3
 800988e:	f88b 3000 	strb.w	r3, [fp]
 8009892:	e6e7      	b.n	8009664 <forward_lite_dw_3x3_sssa8_ch+0x62c>
 8009894:	f1c4 0401 	rsb	r4, r4, #1
 8009898:	fa00 f204 	lsl.w	r2, r0, r4
 800989c:	f302 021f 	ssat	r2, #32, r2
 80098a0:	f8da 3000 	ldr.w	r3, [sl]
 80098a4:	fb52 f213 	smmulr	r2, r2, r3
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	4413      	add	r3, r2
 80098ac:	f303 0307 	ssat	r3, #8, r3
 80098b0:	46cc      	mov	ip, r9
 80098b2:	f80c 3b01 	strb.w	r3, [ip], #1
 80098b6:	e60c      	b.n	80094d2 <forward_lite_dw_3x3_sssa8_ch+0x49a>
 80098b8:	f1c0 0001 	rsb	r0, r0, #1
 80098bc:	4082      	lsls	r2, r0
 80098be:	f302 021f 	ssat	r2, #32, r2
 80098c2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80098c6:	fb52 f213 	smmulr	r2, r2, r3
 80098ca:	686b      	ldr	r3, [r5, #4]
 80098cc:	4413      	add	r3, r2
 80098ce:	f303 0307 	ssat	r3, #8, r3
 80098d2:	46e3      	mov	fp, ip
 80098d4:	f80b 3b01 	strb.w	r3, [fp], #1
 80098d8:	e65d      	b.n	8009596 <forward_lite_dw_3x3_sssa8_ch+0x55e>
 80098da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80098dc:	930c      	str	r3, [sp, #48]	; 0x30
 80098de:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
 80098e2:	9308      	str	r3, [sp, #32]
 80098e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098e6:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 80098ea:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
 80098ee:	9307      	str	r3, [sp, #28]
 80098f0:	e589      	b.n	8009406 <forward_lite_dw_3x3_sssa8_ch+0x3ce>
 80098f2:	f1ce 0e01 	rsb	lr, lr, #1
 80098f6:	fa03 f30e 	lsl.w	r3, r3, lr
 80098fa:	f303 031f 	ssat	r3, #32, r3
 80098fe:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009902:	fb53 f312 	smmulr	r3, r3, r2
 8009906:	68aa      	ldr	r2, [r5, #8]
 8009908:	4413      	add	r3, r2
 800990a:	f303 0307 	ssat	r3, #8, r3
 800990e:	f88b 3000 	strb.w	r3, [fp]
 8009912:	e6a7      	b.n	8009664 <forward_lite_dw_3x3_sssa8_ch+0x62c>
 8009914:	42b1      	cmp	r1, r6
 8009916:	f840 7c04 	str.w	r7, [r0, #-4]
 800991a:	f100 0004 	add.w	r0, r0, #4
 800991e:	f6ff abc3 	blt.w	80090a8 <forward_lite_dw_3x3_sssa8_ch+0x70>
 8009922:	f7ff bbd6 	b.w	80090d2 <forward_lite_dw_3x3_sssa8_ch+0x9a>
 8009926:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8009928:	ea5f 0e96 	movs.w	lr, r6, lsr #2
 800992c:	eb03 00c6 	add.w	r0, r3, r6, lsl #3
 8009930:	9012      	str	r0, [sp, #72]	; 0x48
 8009932:	f000 8142 	beq.w	8009bba <forward_lite_dw_3x3_sssa8_ch+0xb82>
 8009936:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800993a:	f108 0204 	add.w	r2, r8, #4
 800993e:	b29b      	uxth	r3, r3
 8009940:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009944:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8009948:	9204      	str	r2, [sp, #16]
 800994a:	00b2      	lsls	r2, r6, #2
 800994c:	9203      	str	r2, [sp, #12]
 800994e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	4641      	mov	r1, r8
 8009956:	eb08 0306 	add.w	r3, r8, r6
 800995a:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800995e:	9202      	str	r2, [sp, #8]
 8009960:	eba9 0a06 	sub.w	sl, r9, r6
 8009964:	901d      	str	r0, [sp, #116]	; 0x74
 8009966:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8009968:	680d      	ldr	r5, [r1, #0]
 800996a:	1d22      	adds	r2, r4, #4
 800996c:	921d      	str	r2, [sp, #116]	; 0x74
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	eac5 4002 	pkhbt	r0, r5, r2, lsl #16
 8009974:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
 8009978:	fa2f f580 	sxtb16	r5, r0
 800997c:	6025      	str	r5, [r4, #0]
 800997e:	fa2f f090 	sxtb16	r0, r0, ror #8
 8009982:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8009984:	6020      	str	r0, [r4, #0]
 8009986:	3404      	adds	r4, #4
 8009988:	941d      	str	r4, [sp, #116]	; 0x74
 800998a:	981d      	ldr	r0, [sp, #116]	; 0x74
 800998c:	fa2f f482 	sxtb16	r4, r2
 8009990:	3004      	adds	r0, #4
 8009992:	f840 4c04 	str.w	r4, [r0, #-4]
 8009996:	901d      	str	r0, [sp, #116]	; 0x74
 8009998:	fa2f f292 	sxtb16	r2, r2, ror #8
 800999c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800999e:	6002      	str	r2, [r0, #0]
 80099a0:	3004      	adds	r0, #4
 80099a2:	901d      	str	r0, [sp, #116]	; 0x74
 80099a4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80099a6:	f85c 5001 	ldr.w	r5, [ip, r1]
 80099aa:	1d22      	adds	r2, r4, #4
 80099ac:	921d      	str	r2, [sp, #116]	; 0x74
 80099ae:	f85c 2003 	ldr.w	r2, [ip, r3]
 80099b2:	eac5 4002 	pkhbt	r0, r5, r2, lsl #16
 80099b6:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
 80099ba:	fa2f f580 	sxtb16	r5, r0
 80099be:	6025      	str	r5, [r4, #0]
 80099c0:	fa2f f090 	sxtb16	r0, r0, ror #8
 80099c4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80099c6:	6020      	str	r0, [r4, #0]
 80099c8:	3404      	adds	r4, #4
 80099ca:	941d      	str	r4, [sp, #116]	; 0x74
 80099cc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80099ce:	fa2f f482 	sxtb16	r4, r2
 80099d2:	3004      	adds	r0, #4
 80099d4:	f840 4c04 	str.w	r4, [r0, #-4]
 80099d8:	901d      	str	r0, [sp, #116]	; 0x74
 80099da:	fa2f f292 	sxtb16	r2, r2, ror #8
 80099de:	981d      	ldr	r0, [sp, #116]	; 0x74
 80099e0:	6002      	str	r2, [r0, #0]
 80099e2:	3004      	adds	r0, #4
 80099e4:	901d      	str	r0, [sp, #116]	; 0x74
 80099e6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80099e8:	9a04      	ldr	r2, [sp, #16]
 80099ea:	589d      	ldr	r5, [r3, r2]
 80099ec:	1d22      	adds	r2, r4, #4
 80099ee:	921d      	str	r2, [sp, #116]	; 0x74
 80099f0:	9a03      	ldr	r2, [sp, #12]
 80099f2:	589a      	ldr	r2, [r3, r2]
 80099f4:	eac5 4002 	pkhbt	r0, r5, r2, lsl #16
 80099f8:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
 80099fc:	fa2f f580 	sxtb16	r5, r0
 8009a00:	6025      	str	r5, [r4, #0]
 8009a02:	fa2f f090 	sxtb16	r0, r0, ror #8
 8009a06:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8009a08:	6020      	str	r0, [r4, #0]
 8009a0a:	3404      	adds	r4, #4
 8009a0c:	941d      	str	r4, [sp, #116]	; 0x74
 8009a0e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a10:	fa2f f482 	sxtb16	r4, r2
 8009a14:	3004      	adds	r0, #4
 8009a16:	f840 4c04 	str.w	r4, [r0, #-4]
 8009a1a:	901d      	str	r0, [sp, #116]	; 0x74
 8009a1c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8009a20:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a22:	6002      	str	r2, [r0, #0]
 8009a24:	3004      	adds	r0, #4
 8009a26:	901d      	str	r0, [sp, #116]	; 0x74
 8009a28:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8009a2a:	9a02      	ldr	r2, [sp, #8]
 8009a2c:	589d      	ldr	r5, [r3, r2]
 8009a2e:	1d22      	adds	r2, r4, #4
 8009a30:	921d      	str	r2, [sp, #116]	; 0x74
 8009a32:	f851 200a 	ldr.w	r2, [r1, sl]
 8009a36:	eac5 4002 	pkhbt	r0, r5, r2, lsl #16
 8009a3a:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
 8009a3e:	fa2f f580 	sxtb16	r5, r0
 8009a42:	6025      	str	r5, [r4, #0]
 8009a44:	fa2f f090 	sxtb16	r0, r0, ror #8
 8009a48:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8009a4a:	6020      	str	r0, [r4, #0]
 8009a4c:	3404      	adds	r4, #4
 8009a4e:	941d      	str	r4, [sp, #116]	; 0x74
 8009a50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a52:	fa2f f482 	sxtb16	r4, r2
 8009a56:	3004      	adds	r0, #4
 8009a58:	f840 4c04 	str.w	r4, [r0, #-4]
 8009a5c:	901d      	str	r0, [sp, #116]	; 0x74
 8009a5e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8009a62:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a64:	6002      	str	r2, [r0, #0]
 8009a66:	3004      	adds	r0, #4
 8009a68:	901d      	str	r0, [sp, #116]	; 0x74
 8009a6a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a6c:	f853 200a 	ldr.w	r2, [r3, sl]
 8009a70:	eac2 2402 	pkhbt	r4, r2, r2, lsl #8
 8009a74:	fa2f f484 	sxtb16	r4, r4
 8009a78:	8004      	strh	r4, [r0, #0]
 8009a7a:	0c24      	lsrs	r4, r4, #16
 8009a7c:	8044      	strh	r4, [r0, #2]
 8009a7e:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 8009a82:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 8009a86:	8082      	strh	r2, [r0, #4]
 8009a88:	0c12      	lsrs	r2, r2, #16
 8009a8a:	80c2      	strh	r2, [r0, #6]
 8009a8c:	9a01      	ldr	r2, [sp, #4]
 8009a8e:	3104      	adds	r1, #4
 8009a90:	4291      	cmp	r1, r2
 8009a92:	f100 0008 	add.w	r0, r0, #8
 8009a96:	f103 0304 	add.w	r3, r3, #4
 8009a9a:	f47f af63 	bne.w	8009964 <forward_lite_dw_3x3_sssa8_ch+0x92c>
 8009a9e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	fa1f fe8e 	uxth.w	lr, lr
 8009aa8:	f016 0303 	ands.w	r3, r6, #3
 8009aac:	f43f aae7 	beq.w	800907e <forward_lite_dw_3x3_sssa8_ch+0x46>
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29c      	uxth	r4, r3
 8009ab4:	f918 300e 	ldrsb.w	r3, [r8, lr]
 8009ab8:	8013      	strh	r3, [r2, #0]
 8009aba:	eb08 030e 	add.w	r3, r8, lr
 8009abe:	1999      	adds	r1, r3, r6
 8009ac0:	5798      	ldrsb	r0, [r3, r6]
 8009ac2:	8050      	strh	r0, [r2, #2]
 8009ac4:	f913 0016 	ldrsb.w	r0, [r3, r6, lsl #1]
 8009ac8:	8090      	strh	r0, [r2, #4]
 8009aca:	f911 1016 	ldrsb.w	r1, [r1, r6, lsl #1]
 8009ace:	80d1      	strh	r1, [r2, #6]
 8009ad0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8009ad4:	1999      	adds	r1, r3, r6
 8009ad6:	f913 0016 	ldrsb.w	r0, [r3, r6, lsl #1]
 8009ada:	8110      	strh	r0, [r2, #8]
 8009adc:	f911 1016 	ldrsb.w	r1, [r1, r6, lsl #1]
 8009ae0:	8151      	strh	r1, [r2, #10]
 8009ae2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8009ae6:	1999      	adds	r1, r3, r6
 8009ae8:	f913 0016 	ldrsb.w	r0, [r3, r6, lsl #1]
 8009aec:	8190      	strh	r0, [r2, #12]
 8009aee:	f911 1016 	ldrsb.w	r1, [r1, r6, lsl #1]
 8009af2:	81d1      	strh	r1, [r2, #14]
 8009af4:	f913 3026 	ldrsb.w	r3, [r3, r6, lsl #2]
 8009af8:	8213      	strh	r3, [r2, #16]
 8009afa:	f10e 0301 	add.w	r3, lr, #1
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	2c00      	cmp	r4, #0
 8009b02:	d04d      	beq.n	8009ba0 <forward_lite_dw_3x3_sssa8_ch+0xb68>
 8009b04:	f918 1003 	ldrsb.w	r1, [r8, r3]
 8009b08:	8251      	strh	r1, [r2, #18]
 8009b0a:	4443      	add	r3, r8
 8009b0c:	1999      	adds	r1, r3, r6
 8009b0e:	5798      	ldrsb	r0, [r3, r6]
 8009b10:	8290      	strh	r0, [r2, #20]
 8009b12:	f913 0016 	ldrsb.w	r0, [r3, r6, lsl #1]
 8009b16:	82d0      	strh	r0, [r2, #22]
 8009b18:	f911 1016 	ldrsb.w	r1, [r1, r6, lsl #1]
 8009b1c:	8311      	strh	r1, [r2, #24]
 8009b1e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8009b22:	1999      	adds	r1, r3, r6
 8009b24:	f913 0016 	ldrsb.w	r0, [r3, r6, lsl #1]
 8009b28:	8350      	strh	r0, [r2, #26]
 8009b2a:	f911 1016 	ldrsb.w	r1, [r1, r6, lsl #1]
 8009b2e:	8391      	strh	r1, [r2, #28]
 8009b30:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8009b34:	1999      	adds	r1, r3, r6
 8009b36:	f913 0016 	ldrsb.w	r0, [r3, r6, lsl #1]
 8009b3a:	83d0      	strh	r0, [r2, #30]
 8009b3c:	f911 1016 	ldrsb.w	r1, [r1, r6, lsl #1]
 8009b40:	8411      	strh	r1, [r2, #32]
 8009b42:	f913 3026 	ldrsb.w	r3, [r3, r6, lsl #2]
 8009b46:	8453      	strh	r3, [r2, #34]	; 0x22
 8009b48:	f10e 0e02 	add.w	lr, lr, #2
 8009b4c:	2c01      	cmp	r4, #1
 8009b4e:	fa1f fe8e 	uxth.w	lr, lr
 8009b52:	d025      	beq.n	8009ba0 <forward_lite_dw_3x3_sssa8_ch+0xb68>
 8009b54:	f918 300e 	ldrsb.w	r3, [r8, lr]
 8009b58:	8493      	strh	r3, [r2, #36]	; 0x24
 8009b5a:	44f0      	add	r8, lr
 8009b5c:	f918 3006 	ldrsb.w	r3, [r8, r6]
 8009b60:	84d3      	strh	r3, [r2, #38]	; 0x26
 8009b62:	f918 3016 	ldrsb.w	r3, [r8, r6, lsl #1]
 8009b66:	8513      	strh	r3, [r2, #40]	; 0x28
 8009b68:	eb08 0306 	add.w	r3, r8, r6
 8009b6c:	eb08 0846 	add.w	r8, r8, r6, lsl #1
 8009b70:	f913 3016 	ldrsb.w	r3, [r3, r6, lsl #1]
 8009b74:	8553      	strh	r3, [r2, #42]	; 0x2a
 8009b76:	f918 3016 	ldrsb.w	r3, [r8, r6, lsl #1]
 8009b7a:	8593      	strh	r3, [r2, #44]	; 0x2c
 8009b7c:	eb08 0306 	add.w	r3, r8, r6
 8009b80:	eb08 0846 	add.w	r8, r8, r6, lsl #1
 8009b84:	f913 3016 	ldrsb.w	r3, [r3, r6, lsl #1]
 8009b88:	85d3      	strh	r3, [r2, #46]	; 0x2e
 8009b8a:	f918 3016 	ldrsb.w	r3, [r8, r6, lsl #1]
 8009b8e:	8613      	strh	r3, [r2, #48]	; 0x30
 8009b90:	eb08 0306 	add.w	r3, r8, r6
 8009b94:	f913 3016 	ldrsb.w	r3, [r3, r6, lsl #1]
 8009b98:	8653      	strh	r3, [r2, #50]	; 0x32
 8009b9a:	f918 3026 	ldrsb.w	r3, [r8, r6, lsl #2]
 8009b9e:	8693      	strh	r3, [r2, #52]	; 0x34
 8009ba0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ba2:	44b1      	add	r9, r6
 8009ba4:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8009ba8:	461a      	mov	r2, r3
 8009baa:	9314      	str	r3, [sp, #80]	; 0x50
 8009bac:	f06f 0315 	mvn.w	r3, #21
 8009bb0:	fb03 2306 	mla	r3, r3, r6, r2
 8009bb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009bb6:	f7ff ba70 	b.w	800909a <forward_lite_dw_3x3_sssa8_ch+0x62>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 8009bc0:	e772      	b.n	8009aa8 <forward_lite_dw_3x3_sssa8_ch+0xa70>
 8009bc2:	bf00      	nop

08009bc4 <align_factor>:
 8009bc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009bc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009bcc:	b508      	push	{r3, lr}
 8009bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd2:	f04f 0300 	mov.w	r3, #0
 8009bd6:	8003      	strh	r3, [r0, #0]
 8009bd8:	d425      	bmi.n	8009c26 <align_factor+0x62>
 8009bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009be2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009be6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8009bea:	e005      	b.n	8009bf8 <align_factor+0x34>
 8009bec:	8003      	strh	r3, [r0, #0]
 8009bee:	b293      	uxth	r3, r2
 8009bf0:	428b      	cmp	r3, r1
 8009bf2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009bf6:	d02d      	beq.n	8009c54 <align_factor+0x90>
 8009bf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c00:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009c04:	dcf2      	bgt.n	8009bec <align_factor+0x28>
 8009c06:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009c68 <align_factor+0xa4>
 8009c0a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009c0e:	ee17 0a90 	vmov	r0, s15
 8009c12:	f7f6 fff9 	bl	8000c08 <__aeabi_f2lz>
 8009c16:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8009c1a:	bf1c      	itt	ne
 8009c1c:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 8009c20:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8009c24:	bd08      	pop	{r3, pc}
 8009c26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2e:	ddd4      	ble.n	8009bda <align_factor+0x16>
 8009c30:	2301      	movs	r3, #1
 8009c32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009c36:	e005      	b.n	8009c44 <align_factor+0x80>
 8009c38:	8003      	strh	r3, [r0, #0]
 8009c3a:	b293      	uxth	r3, r2
 8009c3c:	2b21      	cmp	r3, #33	; 0x21
 8009c3e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c42:	d00d      	beq.n	8009c60 <align_factor+0x9c>
 8009c44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	f103 0201 	add.w	r2, r3, #1
 8009c50:	d4f2      	bmi.n	8009c38 <align_factor+0x74>
 8009c52:	e7d8      	b.n	8009c06 <align_factor+0x42>
 8009c54:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8009c58:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c5c:	8003      	strh	r3, [r0, #0]
 8009c5e:	e7d2      	b.n	8009c06 <align_factor+0x42>
 8009c60:	2300      	movs	r3, #0
 8009c62:	8003      	strh	r3, [r0, #0]
 8009c64:	4618      	mov	r0, r3
 8009c66:	bd08      	pop	{r3, pc}
 8009c68:	4f000000 	.word	0x4f000000

08009c6c <align_factor_ch>:
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	d05f      	beq.n	8009d30 <align_factor_ch+0xc4>
 8009c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	ed2d 8b04 	vpush	{d8-d9}
 8009c78:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	4691      	mov	r9, r2
 8009c80:	4698      	mov	r8, r3
 8009c82:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8009c86:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8009c8a:	2700      	movs	r7, #0
 8009c8c:	eddf 9a29 	vldr	s19, [pc, #164]	; 8009d34 <align_factor_ch+0xc8>
 8009c90:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009c94:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8009c98:	ecf4 7a01 	vldmia	r4!, {s15}
 8009c9c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8009ca0:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca8:	d529      	bpl.n	8009cfe <align_factor_ch+0x92>
 8009caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb2:	dd24      	ble.n	8009cfe <align_factor_ch+0x92>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	e003      	b.n	8009cc0 <align_factor_ch+0x54>
 8009cb8:	2a20      	cmp	r2, #32
 8009cba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009cbe:	d033      	beq.n	8009d28 <align_factor_ch+0xbc>
 8009cc0:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc8:	b213      	sxth	r3, r2
 8009cca:	f102 0201 	add.w	r2, r2, #1
 8009cce:	d4f3      	bmi.n	8009cb8 <align_factor_ch+0x4c>
 8009cd0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009cd4:	f8a8 3000 	strh.w	r3, [r8]
 8009cd8:	ee17 0a90 	vmov	r0, s15
 8009cdc:	f7f6 ff94 	bl	8000c08 <__aeabi_f2lz>
 8009ce0:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8009ce4:	bf18      	it	ne
 8009ce6:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 8009cea:	42a5      	cmp	r5, r4
 8009cec:	f849 0b04 	str.w	r0, [r9], #4
 8009cf0:	f108 0802 	add.w	r8, r8, #2
 8009cf4:	d1d0      	bne.n	8009c98 <align_factor_ch+0x2c>
 8009cf6:	ecbd 8b04 	vpop	{d8-d9}
 8009cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e005      	b.n	8009d0e <align_factor_ch+0xa2>
 8009d02:	b213      	sxth	r3, r2
 8009d04:	f113 0f1f 	cmn.w	r3, #31
 8009d08:	ee67 7a88 	vmul.f32	s15, s15, s16
 8009d0c:	d007      	beq.n	8009d1e <align_factor_ch+0xb2>
 8009d0e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d16:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009d1a:	dcf2      	bgt.n	8009d02 <align_factor_ch+0x96>
 8009d1c:	e7d8      	b.n	8009cd0 <align_factor_ch+0x64>
 8009d1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d22:	f06f 031d 	mvn.w	r3, #29
 8009d26:	e7d3      	b.n	8009cd0 <align_factor_ch+0x64>
 8009d28:	f8a8 7000 	strh.w	r7, [r8]
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e7dc      	b.n	8009cea <align_factor_ch+0x7e>
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	4f000000 	.word	0x4f000000

08009d38 <st_sssa8_ch_convolve_rank1upd>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8009d42:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 8009d46:	fb13 f304 	smulbb	r3, r3, r4
 8009d4a:	fb13 f500 	smulbb	r5, r3, r0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d52:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	d073      	beq.n	8009e40 <st_sssa8_ch_convolve_rank1upd+0x108>
 8009d58:	b2ad      	uxth	r5, r5
 8009d5a:	ea4f 0895 	mov.w	r8, r5, lsr #2
 8009d5e:	f1a3 0904 	sub.w	r9, r3, #4
 8009d62:	f1a8 0381 	sub.w	r3, r8, #129	; 0x81
 8009d66:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009d6a:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 8009d6e:	f1a8 0780 	sub.w	r7, r8, #128	; 0x80
 8009d72:	eb07 17c0 	add.w	r7, r7, r0, lsl #7
 8009d76:	0258      	lsls	r0, r3, #9
 8009d78:	3301      	adds	r3, #1
 8009d7a:	025b      	lsls	r3, r3, #9
 8009d7c:	f005 0503 	and.w	r5, r5, #3
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 8009d86:	9303      	str	r3, [sp, #12]
 8009d88:	1e6b      	subs	r3, r5, #1
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8009d92:	b2bf      	uxth	r7, r7
 8009d94:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 8009d98:	9302      	str	r3, [sp, #8]
 8009d9a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8009d9e:	d954      	bls.n	8009e4a <st_sssa8_ch_convolve_rank1upd+0x112>
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8009da6:	eb04 0c03 	add.w	ip, r4, r3
 8009daa:	2600      	movs	r6, #0
 8009dac:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 8009db0:	2200      	movs	r2, #0
 8009db2:	f851 3b04 	ldr.w	r3, [r1], #4
 8009db6:	fa2f fe83 	sxtb16	lr, r3
 8009dba:	4281      	cmp	r1, r0
 8009dbc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009dc0:	fa92 f21e 	qadd16	r2, r2, lr
 8009dc4:	fa2f f383 	sxtb16	r3, r3
 8009dc8:	fa92 f213 	qadd16	r2, r2, r3
 8009dcc:	d1f1      	bne.n	8009db2 <st_sssa8_ch_convolve_rank1upd+0x7a>
 8009dce:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8009dd2:	b213      	sxth	r3, r2
 8009dd4:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8009dd8:	4560      	cmp	r0, ip
 8009dda:	4416      	add	r6, r2
 8009ddc:	d1e6      	bne.n	8009dac <st_sssa8_ch_convolve_rank1upd+0x74>
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	18e1      	adds	r1, r4, r3
 8009de2:	463c      	mov	r4, r7
 8009de4:	b37c      	cbz	r4, 8009e46 <st_sssa8_ch_convolve_rank1upd+0x10e>
 8009de6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8009dea:	2200      	movs	r2, #0
 8009dec:	f851 3b04 	ldr.w	r3, [r1], #4
 8009df0:	fa2f f083 	sxtb16	r0, r3
 8009df4:	428c      	cmp	r4, r1
 8009df6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009dfa:	fa92 f210 	qadd16	r2, r2, r0
 8009dfe:	fa2f f383 	sxtb16	r3, r3
 8009e02:	fa92 f213 	qadd16	r2, r2, r3
 8009e06:	d1f1      	bne.n	8009dec <st_sssa8_ch_convolve_rank1upd+0xb4>
 8009e08:	b213      	sxth	r3, r2
 8009e0a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009e0e:	441e      	add	r6, r3
 8009e10:	b16d      	cbz	r5, 8009e2e <st_sssa8_ch_convolve_rank1upd+0xf6>
 8009e12:	f994 3000 	ldrsb.w	r3, [r4]
 8009e16:	441e      	add	r6, r3
 8009e18:	9b00      	ldr	r3, [sp, #0]
 8009e1a:	b13b      	cbz	r3, 8009e2c <st_sssa8_ch_convolve_rank1upd+0xf4>
 8009e1c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8009e20:	2d02      	cmp	r5, #2
 8009e22:	441e      	add	r6, r3
 8009e24:	bf1c      	itt	ne
 8009e26:	f994 3002 	ldrsbne.w	r3, [r4, #2]
 8009e2a:	18f6      	addne	r6, r6, r3
 8009e2c:	442c      	add	r4, r5
 8009e2e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8009e32:	fb0b 3616 	mls	r6, fp, r6, r3
 8009e36:	f84a 6b04 	str.w	r6, [sl], #4
 8009e3a:	9b02      	ldr	r3, [sp, #8]
 8009e3c:	459a      	cmp	sl, r3
 8009e3e:	d1ac      	bne.n	8009d9a <st_sssa8_ch_convolve_rank1upd+0x62>
 8009e40:	b005      	add	sp, #20
 8009e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e46:	460c      	mov	r4, r1
 8009e48:	e7e2      	b.n	8009e10 <st_sssa8_ch_convolve_rank1upd+0xd8>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	2600      	movs	r6, #0
 8009e4e:	4644      	mov	r4, r8
 8009e50:	e7c8      	b.n	8009de4 <st_sssa8_ch_convolve_rank1upd+0xac>
 8009e52:	bf00      	nop

08009e54 <st_sssa8_fully_connected>:
 8009e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	b097      	sub	sp, #92	; 0x5c
 8009e5a:	460d      	mov	r5, r1
 8009e5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e60:	9204      	str	r2, [sp, #16]
 8009e62:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009e66:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8009e68:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 8009e6c:	6824      	ldr	r4, [r4, #0]
 8009e6e:	9408      	str	r4, [sp, #32]
 8009e70:	1e4b      	subs	r3, r1, #1
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	2a14      	cmp	r2, #20
 8009e76:	930d      	str	r3, [sp, #52]	; 0x34
 8009e78:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 8009e7c:	9105      	str	r1, [sp, #20]
 8009e7e:	bf9f      	itttt	ls
 8009e80:	2201      	movls	r2, #1
 8009e82:	408b      	lslls	r3, r1
 8009e84:	408a      	lslls	r2, r1
 8009e86:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
 8009e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e8e:	4683      	mov	fp, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 81e4 	beq.w	800a25e <st_sssa8_fully_connected+0x40a>
 8009e96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e98:	9600      	str	r6, [sp, #0]
 8009e9a:	b2b3      	uxth	r3, r6
 8009e9c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009ea0:	9e04      	ldr	r6, [sp, #16]
 8009ea2:	0851      	lsrs	r1, r2, #1
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	9115      	str	r1, [sp, #84]	; 0x54
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009eac:	f001 fd70 	bl	800b990 <st_int8_reordered_no_shift_zero>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	2c00      	cmp	r4, #0
 8009eb4:	f000 8149 	beq.w	800a14a <st_sssa8_fully_connected+0x2f6>
 8009eb8:	4634      	mov	r4, r6
 8009eba:	f1a6 0310 	sub.w	r3, r6, #16
 8009ebe:	9e05      	ldr	r6, [sp, #20]
 8009ec0:	1e4a      	subs	r2, r1, #1
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	1eb1      	subs	r1, r6, #2
 8009ec6:	fa00 f101 	lsl.w	r1, r0, r1
 8009eca:	9112      	str	r1, [sp, #72]	; 0x48
 8009ecc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009ece:	b292      	uxth	r2, r2
 8009ed0:	3110      	adds	r1, #16
 8009ed2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009ed6:	920e      	str	r2, [sp, #56]	; 0x38
 8009ed8:	1ee2      	subs	r2, r4, #3
 8009eda:	920f      	str	r2, [sp, #60]	; 0x3c
 8009edc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ede:	3208      	adds	r2, #8
 8009ee0:	9206      	str	r2, [sp, #24]
 8009ee2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009ee4:	091b      	lsrs	r3, r3, #4
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	3202      	adds	r2, #2
 8009eea:	9207      	str	r2, [sp, #28]
 8009eec:	011a      	lsls	r2, r3, #4
 8009eee:	920a      	str	r2, [sp, #40]	; 0x28
 8009ef0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009ef2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009ef6:	9310      	str	r3, [sp, #64]	; 0x40
 8009ef8:	1f23      	subs	r3, r4, #4
 8009efa:	9311      	str	r3, [sp, #68]	; 0x44
 8009efc:	1b83      	subs	r3, r0, r6
 8009efe:	9314      	str	r3, [sp, #80]	; 0x50
 8009f00:	9a06      	ldr	r2, [sp, #24]
 8009f02:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 8009f06:	9a04      	ldr	r2, [sp, #16]
 8009f08:	18ac      	adds	r4, r5, r2
 8009f0a:	2a0f      	cmp	r2, #15
 8009f0c:	9403      	str	r4, [sp, #12]
 8009f0e:	f340 81a0 	ble.w	800a252 <st_sssa8_fully_connected+0x3fe>
 8009f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f14:	18ae      	adds	r6, r5, r2
 8009f16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009f18:	460f      	mov	r7, r1
 8009f1a:	f8d4 e000 	ldr.w	lr, [r4]
 8009f1e:	6828      	ldr	r0, [r5, #0]
 8009f20:	fa2f fc8e 	sxtb16	ip, lr
 8009f24:	ea4f 2130 	mov.w	r1, r0, ror #8
 8009f28:	ea4f 283e 	mov.w	r8, lr, ror #8
 8009f2c:	fa2f f080 	sxtb16	r0, r0
 8009f30:	f8d2 e000 	ldr.w	lr, [r2]
 8009f34:	fa2f f181 	sxtb16	r1, r1
 8009f38:	fa2f f888 	sxtb16	r8, r8
 8009f3c:	fb2e 3300 	smlad	r3, lr, r0, r3
 8009f40:	fb2e 7e0c 	smlad	lr, lr, ip, r7
 8009f44:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009f48:	fb2c 3301 	smlad	r3, ip, r1, r3
 8009f4c:	fb2c e808 	smlad	r8, ip, r8, lr
 8009f50:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8009f54:	686f      	ldr	r7, [r5, #4]
 8009f56:	fa2f f08c 	sxtb16	r0, ip
 8009f5a:	ea4f 2137 	mov.w	r1, r7, ror #8
 8009f5e:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8009f62:	fa2f f787 	sxtb16	r7, r7
 8009f66:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009f6a:	fa2f f181 	sxtb16	r1, r1
 8009f6e:	fa2f fe8e 	sxtb16	lr, lr
 8009f72:	fb2c 3707 	smlad	r7, ip, r7, r3
 8009f76:	fb2c 8c00 	smlad	ip, ip, r0, r8
 8009f7a:	68d0      	ldr	r0, [r2, #12]
 8009f7c:	fb20 7701 	smlad	r7, r0, r1, r7
 8009f80:	fb20 ce0e 	smlad	lr, r0, lr, ip
 8009f84:	68a0      	ldr	r0, [r4, #8]
 8009f86:	68a9      	ldr	r1, [r5, #8]
 8009f88:	fa2f fc80 	sxtb16	ip, r0
 8009f8c:	ea4f 2331 	mov.w	r3, r1, ror #8
 8009f90:	ea4f 2a30 	mov.w	sl, r0, ror #8
 8009f94:	fa2f f181 	sxtb16	r1, r1
 8009f98:	6910      	ldr	r0, [r2, #16]
 8009f9a:	fa2f f383 	sxtb16	r3, r3
 8009f9e:	fa2f fa8a 	sxtb16	sl, sl
 8009fa2:	fb20 7101 	smlad	r1, r0, r1, r7
 8009fa6:	fb20 e00c 	smlad	r0, r0, ip, lr
 8009faa:	6957      	ldr	r7, [r2, #20]
 8009fac:	fb27 1103 	smlad	r1, r7, r3, r1
 8009fb0:	fb27 0a0a 	smlad	sl, r7, sl, r0
 8009fb4:	68e7      	ldr	r7, [r4, #12]
 8009fb6:	68e8      	ldr	r0, [r5, #12]
 8009fb8:	fa2f fc87 	sxtb16	ip, r7
 8009fbc:	ea4f 2930 	mov.w	r9, r0, ror #8
 8009fc0:	ea4f 2837 	mov.w	r8, r7, ror #8
 8009fc4:	3510      	adds	r5, #16
 8009fc6:	6997      	ldr	r7, [r2, #24]
 8009fc8:	fa2f f380 	sxtb16	r3, r0
 8009fcc:	3410      	adds	r4, #16
 8009fce:	fa2f f989 	sxtb16	r9, r9
 8009fd2:	fa2f f888 	sxtb16	r8, r8
 8009fd6:	fb27 1303 	smlad	r3, r7, r3, r1
 8009fda:	fb27 a70c 	smlad	r7, r7, ip, sl
 8009fde:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8009fe2:	3220      	adds	r2, #32
 8009fe4:	fb2e 3309 	smlad	r3, lr, r9, r3
 8009fe8:	fb2e 7708 	smlad	r7, lr, r8, r7
 8009fec:	42b5      	cmp	r5, r6
 8009fee:	d194      	bne.n	8009f1a <st_sssa8_fully_connected+0xc6>
 8009ff0:	9a03      	ldr	r2, [sp, #12]
 8009ff2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ff4:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8009ff8:	4402      	add	r2, r0
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	9203      	str	r2, [sp, #12]
 8009ffe:	4681      	mov	r9, r0
 800a000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a002:	4591      	cmp	r9, r2
 800a004:	f280 8123 	bge.w	800a24e <st_sssa8_fully_connected+0x3fa>
 800a008:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a00a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a00e:	eba2 0a09 	sub.w	sl, r2, r9
 800a012:	ea4f 029a 	mov.w	r2, sl, lsr #2
 800a016:	f102 0a01 	add.w	sl, r2, #1
 800a01a:	920c      	str	r2, [sp, #48]	; 0x30
 800a01c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800a020:	920b      	str	r2, [sp, #44]	; 0x2c
 800a022:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 800a026:	465f      	mov	r7, fp
 800a028:	f858 2b04 	ldr.w	r2, [r8], #4
 800a02c:	f856 eb04 	ldr.w	lr, [r6], #4
 800a030:	fa2f f082 	sxtb16	r0, r2
 800a034:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800a038:	ea4f 2532 	mov.w	r5, r2, ror #8
 800a03c:	fa2f fe8e 	sxtb16	lr, lr
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	fa2f fc8c 	sxtb16	ip, ip
 800a046:	fa2f f585 	sxtb16	r5, r5
 800a04a:	fb22 330e 	smlad	r3, r2, lr, r3
 800a04e:	fb22 1200 	smlad	r2, r2, r0, r1
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	3708      	adds	r7, #8
 800a056:	fb21 330c 	smlad	r3, r1, ip, r3
 800a05a:	fb21 2105 	smlad	r1, r1, r5, r2
 800a05e:	42a6      	cmp	r6, r4
 800a060:	d1e2      	bne.n	800a028 <st_sssa8_fully_connected+0x1d4>
 800a062:	9a03      	ldr	r2, [sp, #12]
 800a064:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a066:	4402      	add	r2, r0
 800a068:	9203      	str	r2, [sp, #12]
 800a06a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a06c:	f109 0904 	add.w	r9, r9, #4
 800a070:	eb0b 0bca 	add.w	fp, fp, sl, lsl #3
 800a074:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800a078:	9d04      	ldr	r5, [sp, #16]
 800a07a:	454d      	cmp	r5, r9
 800a07c:	dd38      	ble.n	800a0f0 <st_sssa8_fully_connected+0x29c>
 800a07e:	f9bb 2000 	ldrsh.w	r2, [fp]
 800a082:	f994 0000 	ldrsb.w	r0, [r4]
 800a086:	9e03      	ldr	r6, [sp, #12]
 800a088:	fb12 3300 	smlabb	r3, r2, r0, r3
 800a08c:	f996 0000 	ldrsb.w	r0, [r6]
 800a090:	fb12 1100 	smlabb	r1, r2, r0, r1
 800a094:	f109 0201 	add.w	r2, r9, #1
 800a098:	42aa      	cmp	r2, r5
 800a09a:	da25      	bge.n	800a0e8 <st_sssa8_fully_connected+0x294>
 800a09c:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800a0a0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800a0a4:	fb12 3300 	smlabb	r3, r2, r0, r3
 800a0a8:	f996 0001 	ldrsb.w	r0, [r6, #1]
 800a0ac:	fb12 1100 	smlabb	r1, r2, r0, r1
 800a0b0:	f109 0202 	add.w	r2, r9, #2
 800a0b4:	42aa      	cmp	r2, r5
 800a0b6:	da17      	bge.n	800a0e8 <st_sssa8_fully_connected+0x294>
 800a0b8:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800a0bc:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800a0c0:	fb12 3300 	smlabb	r3, r2, r0, r3
 800a0c4:	f996 0002 	ldrsb.w	r0, [r6, #2]
 800a0c8:	fb12 1100 	smlabb	r1, r2, r0, r1
 800a0cc:	f109 0203 	add.w	r2, r9, #3
 800a0d0:	4295      	cmp	r5, r2
 800a0d2:	dd09      	ble.n	800a0e8 <st_sssa8_fully_connected+0x294>
 800a0d4:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 800a0d8:	f996 0003 	ldrsb.w	r0, [r6, #3]
 800a0dc:	fb12 1100 	smlabb	r1, r2, r0, r1
 800a0e0:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800a0e4:	fb12 3300 	smlabb	r3, r2, r0, r3
 800a0e8:	9a04      	ldr	r2, [sp, #16]
 800a0ea:	eba2 0909 	sub.w	r9, r2, r9
 800a0ee:	444c      	add	r4, r9
 800a0f0:	9a05      	ldr	r2, [sp, #20]
 800a0f2:	2a15      	cmp	r2, #21
 800a0f4:	dd7b      	ble.n	800a1ee <st_sssa8_fully_connected+0x39a>
 800a0f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a0f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0fa:	9a08      	ldr	r2, [sp, #32]
 800a0fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a0fe:	fb53 0302 	smmla	r3, r3, r2, r0
 800a102:	412b      	asrs	r3, r5
 800a104:	4433      	add	r3, r6
 800a106:	fb51 0102 	smmla	r1, r1, r2, r0
 800a10a:	f303 0307 	ssat	r3, #8, r3
 800a10e:	9a07      	ldr	r2, [sp, #28]
 800a110:	4129      	asrs	r1, r5
 800a112:	f802 3c02 	strb.w	r3, [r2, #-2]
 800a116:	198b      	adds	r3, r1, r6
 800a118:	f303 0307 	ssat	r3, #8, r3
 800a11c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a120:	9a04      	ldr	r2, [sp, #16]
 800a122:	9b06      	ldr	r3, [sp, #24]
 800a124:	18a5      	adds	r5, r4, r2
 800a126:	9a07      	ldr	r2, [sp, #28]
 800a128:	3202      	adds	r2, #2
 800a12a:	9207      	str	r2, [sp, #28]
 800a12c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a12e:	3308      	adds	r3, #8
 800a130:	4293      	cmp	r3, r2
 800a132:	9306      	str	r3, [sp, #24]
 800a134:	f47f aee4 	bne.w	8009f00 <st_sssa8_fully_connected+0xac>
 800a138:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a13a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a13c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800a140:	9225      	str	r2, [sp, #148]	; 0x94
 800a142:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a144:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a148:	9324      	str	r3, [sp, #144]	; 0x90
 800a14a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a14c:	07db      	lsls	r3, r3, #31
 800a14e:	d54a      	bpl.n	800a1e6 <st_sssa8_fully_connected+0x392>
 800a150:	9a04      	ldr	r2, [sp, #16]
 800a152:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a154:	0897      	lsrs	r7, r2, #2
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f000 8173 	beq.w	800a442 <st_sssa8_fully_connected+0x5ee>
 800a15c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800a15e:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800a162:	f855 2b04 	ldr.w	r2, [r5], #4
 800a166:	6804      	ldr	r4, [r0, #0]
 800a168:	ea4f 2132 	mov.w	r1, r2, ror #8
 800a16c:	fa2f f282 	sxtb16	r2, r2
 800a170:	fa2f f181 	sxtb16	r1, r1
 800a174:	fb24 3202 	smlad	r2, r4, r2, r3
 800a178:	6843      	ldr	r3, [r0, #4]
 800a17a:	3008      	adds	r0, #8
 800a17c:	fb23 2301 	smlad	r3, r3, r1, r2
 800a180:	42b5      	cmp	r5, r6
 800a182:	d1ee      	bne.n	800a162 <st_sssa8_fully_connected+0x30e>
 800a184:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a186:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800a18a:	9226      	str	r2, [sp, #152]	; 0x98
 800a18c:	9a04      	ldr	r2, [sp, #16]
 800a18e:	f012 0203 	ands.w	r2, r2, #3
 800a192:	d016      	beq.n	800a1c2 <st_sssa8_fully_connected+0x36e>
 800a194:	9826      	ldr	r0, [sp, #152]	; 0x98
 800a196:	f996 1000 	ldrsb.w	r1, [r6]
 800a19a:	8800      	ldrh	r0, [r0, #0]
 800a19c:	3a01      	subs	r2, #1
 800a19e:	b292      	uxth	r2, r2
 800a1a0:	fb10 3301 	smlabb	r3, r0, r1, r3
 800a1a4:	b16a      	cbz	r2, 800a1c2 <st_sssa8_fully_connected+0x36e>
 800a1a6:	9826      	ldr	r0, [sp, #152]	; 0x98
 800a1a8:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800a1ac:	8840      	ldrh	r0, [r0, #2]
 800a1ae:	2a01      	cmp	r2, #1
 800a1b0:	fb10 3301 	smlabb	r3, r0, r1, r3
 800a1b4:	d005      	beq.n	800a1c2 <st_sssa8_fully_connected+0x36e>
 800a1b6:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a1b8:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800a1bc:	8889      	ldrh	r1, [r1, #4]
 800a1be:	fb11 3302 	smlabb	r3, r1, r2, r3
 800a1c2:	9a05      	ldr	r2, [sp, #20]
 800a1c4:	2a15      	cmp	r2, #21
 800a1c6:	f340 811a 	ble.w	800a3fe <st_sssa8_fully_connected+0x5aa>
 800a1ca:	1e91      	subs	r1, r2, #2
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	408a      	lsls	r2, r1
 800a1d0:	9908      	ldr	r1, [sp, #32]
 800a1d2:	fb53 2301 	smmla	r3, r3, r1, r2
 800a1d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1d8:	4113      	asrs	r3, r2
 800a1da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1dc:	4413      	add	r3, r2
 800a1de:	f303 0307 	ssat	r3, #8, r3
 800a1e2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a1e4:	7013      	strb	r3, [r2, #0]
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	b017      	add	sp, #92	; 0x5c
 800a1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ee:	2a00      	cmp	r2, #0
 800a1f0:	dd13      	ble.n	800a21a <st_sssa8_fully_connected+0x3c6>
 800a1f2:	e9dd 0508 	ldrd	r0, r5, [sp, #32]
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	0049      	lsls	r1, r1, #1
 800a1fa:	fb53 5300 	smmla	r3, r3, r0, r5
 800a1fe:	fb51 5100 	smmla	r1, r1, r0, r5
 800a202:	4113      	asrs	r3, r2
 800a204:	f303 0307 	ssat	r3, #8, r3
 800a208:	9807      	ldr	r0, [sp, #28]
 800a20a:	4111      	asrs	r1, r2
 800a20c:	f800 3c02 	strb.w	r3, [r0, #-2]
 800a210:	f301 0107 	ssat	r1, #8, r1
 800a214:	f800 1c01 	strb.w	r1, [r0, #-1]
 800a218:	e782      	b.n	800a120 <st_sssa8_fully_connected+0x2cc>
 800a21a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a21c:	4093      	lsls	r3, r2
 800a21e:	f303 031f 	ssat	r3, #32, r3
 800a222:	9808      	ldr	r0, [sp, #32]
 800a224:	fb53 f310 	smmulr	r3, r3, r0
 800a228:	fa01 f202 	lsl.w	r2, r1, r2
 800a22c:	f302 021f 	ssat	r2, #32, r2
 800a230:	fb52 f210 	smmulr	r2, r2, r0
 800a234:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a236:	440b      	add	r3, r1
 800a238:	f303 0307 	ssat	r3, #8, r3
 800a23c:	9807      	ldr	r0, [sp, #28]
 800a23e:	440a      	add	r2, r1
 800a240:	f800 3c02 	strb.w	r3, [r0, #-2]
 800a244:	f302 0207 	ssat	r2, #8, r2
 800a248:	f800 2c01 	strb.w	r2, [r0, #-1]
 800a24c:	e768      	b.n	800a120 <st_sssa8_fully_connected+0x2cc>
 800a24e:	4634      	mov	r4, r6
 800a250:	e712      	b.n	800a078 <st_sssa8_fully_connected+0x224>
 800a252:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800a256:	462e      	mov	r6, r5
 800a258:	f04f 0900 	mov.w	r9, #0
 800a25c:	e6d0      	b.n	800a000 <st_sssa8_fully_connected+0x1ac>
 800a25e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a260:	4274      	negs	r4, r6
 800a262:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0bd      	beq.n	800a1e6 <st_sssa8_fully_connected+0x392>
 800a26a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a26c:	9904      	ldr	r1, [sp, #16]
 800a26e:	9805      	ldr	r0, [sp, #20]
 800a270:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 800a274:	f8cd b010 	str.w	fp, [sp, #16]
 800a278:	3301      	adds	r3, #1
 800a27a:	18d3      	adds	r3, r2, r3
 800a27c:	f1a1 0810 	sub.w	r8, r1, #16
 800a280:	9303      	str	r3, [sp, #12]
 800a282:	f102 0e01 	add.w	lr, r2, #1
 800a286:	f028 080f 	bic.w	r8, r8, #15
 800a28a:	2201      	movs	r2, #1
 800a28c:	1e83      	subs	r3, r0, #2
 800a28e:	fa02 f303 	lsl.w	r3, r2, r3
 800a292:	f108 0810 	add.w	r8, r8, #16
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	4689      	mov	r9, r1
 800a29a:	eb0b 0308 	add.w	r3, fp, r8
 800a29e:	9306      	str	r3, [sp, #24]
 800a2a0:	f1b9 0f0f 	cmp.w	r9, #15
 800a2a4:	eba2 0300 	sub.w	r3, r2, r0
 800a2a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a2aa:	b236      	sxth	r6, r6
 800a2ac:	f85a 3b04 	ldr.w	r3, [sl], #4
 800a2b0:	f340 8081 	ble.w	800a3b6 <st_sssa8_fully_connected+0x562>
 800a2b4:	9804      	ldr	r0, [sp, #16]
 800a2b6:	eb05 0c08 	add.w	ip, r5, r8
 800a2ba:	462a      	mov	r2, r5
 800a2bc:	f8d2 b000 	ldr.w	fp, [r2]
 800a2c0:	6801      	ldr	r1, [r0, #0]
 800a2c2:	ea4f 273b 	mov.w	r7, fp, ror #8
 800a2c6:	ea4f 2531 	mov.w	r5, r1, ror #8
 800a2ca:	fa2f fb8b 	sxtb16	fp, fp
 800a2ce:	fa2f f787 	sxtb16	r7, r7
 800a2d2:	fa24 f181 	sxtab16	r1, r4, r1
 800a2d6:	fa24 f585 	sxtab16	r5, r4, r5
 800a2da:	fb21 330b 	smlad	r3, r1, fp, r3
 800a2de:	fb25 3107 	smlad	r1, r5, r7, r3
 800a2e2:	f8d2 b004 	ldr.w	fp, [r2, #4]
 800a2e6:	6843      	ldr	r3, [r0, #4]
 800a2e8:	ea4f 273b 	mov.w	r7, fp, ror #8
 800a2ec:	ea4f 2533 	mov.w	r5, r3, ror #8
 800a2f0:	fa2f fb8b 	sxtb16	fp, fp
 800a2f4:	fa2f f787 	sxtb16	r7, r7
 800a2f8:	fa24 f383 	sxtab16	r3, r4, r3
 800a2fc:	fa24 f585 	sxtab16	r5, r4, r5
 800a300:	fb23 110b 	smlad	r1, r3, fp, r1
 800a304:	fb25 1307 	smlad	r3, r5, r7, r1
 800a308:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800a30c:	6885      	ldr	r5, [r0, #8]
 800a30e:	ea4f 273b 	mov.w	r7, fp, ror #8
 800a312:	ea4f 2135 	mov.w	r1, r5, ror #8
 800a316:	fa2f fb8b 	sxtb16	fp, fp
 800a31a:	fa2f f787 	sxtb16	r7, r7
 800a31e:	fa24 f585 	sxtab16	r5, r4, r5
 800a322:	fa24 f181 	sxtab16	r1, r4, r1
 800a326:	fb25 330b 	smlad	r3, r5, fp, r3
 800a32a:	fb21 3507 	smlad	r5, r1, r7, r3
 800a32e:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800a332:	68c3      	ldr	r3, [r0, #12]
 800a334:	ea4f 273b 	mov.w	r7, fp, ror #8
 800a338:	ea4f 2133 	mov.w	r1, r3, ror #8
 800a33c:	3210      	adds	r2, #16
 800a33e:	3010      	adds	r0, #16
 800a340:	fa2f fb8b 	sxtb16	fp, fp
 800a344:	fa2f f787 	sxtb16	r7, r7
 800a348:	fa24 f383 	sxtab16	r3, r4, r3
 800a34c:	fa24 f181 	sxtab16	r1, r4, r1
 800a350:	fb23 530b 	smlad	r3, r3, fp, r5
 800a354:	fb21 3307 	smlad	r3, r1, r7, r3
 800a358:	4594      	cmp	ip, r2
 800a35a:	d1af      	bne.n	800a2bc <st_sssa8_fully_connected+0x468>
 800a35c:	4645      	mov	r5, r8
 800a35e:	45a9      	cmp	r9, r5
 800a360:	9f06      	ldr	r7, [sp, #24]
 800a362:	dd2d      	ble.n	800a3c0 <st_sssa8_fully_connected+0x56c>
 800a364:	eba9 0505 	sub.w	r5, r9, r5
 800a368:	4415      	add	r5, r2
 800a36a:	4611      	mov	r1, r2
 800a36c:	f917 0b01 	ldrsb.w	r0, [r7], #1
 800a370:	7809      	ldrb	r1, [r1, #0]
 800a372:	3201      	adds	r2, #1
 800a374:	b249      	sxtb	r1, r1
 800a376:	1b80      	subs	r0, r0, r6
 800a378:	42aa      	cmp	r2, r5
 800a37a:	fb10 3301 	smlabb	r3, r0, r1, r3
 800a37e:	d1f4      	bne.n	800a36a <st_sssa8_fully_connected+0x516>
 800a380:	9a05      	ldr	r2, [sp, #20]
 800a382:	2a15      	cmp	r2, #21
 800a384:	dd20      	ble.n	800a3c8 <st_sssa8_fully_connected+0x574>
 800a386:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a38a:	fb53 1302 	smmla	r3, r3, r2, r1
 800a38e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a390:	4113      	asrs	r3, r2
 800a392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a394:	4413      	add	r3, r2
 800a396:	f303 0307 	ssat	r3, #8, r3
 800a39a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a39e:	9b03      	ldr	r3, [sp, #12]
 800a3a0:	f10e 0e01 	add.w	lr, lr, #1
 800a3a4:	459e      	cmp	lr, r3
 800a3a6:	f43f af1e 	beq.w	800a1e6 <st_sssa8_fully_connected+0x392>
 800a3aa:	f1b9 0f0f 	cmp.w	r9, #15
 800a3ae:	f85a 3b04 	ldr.w	r3, [sl], #4
 800a3b2:	f73f af7f 	bgt.w	800a2b4 <st_sssa8_fully_connected+0x460>
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	45a9      	cmp	r9, r5
 800a3bc:	9f04      	ldr	r7, [sp, #16]
 800a3be:	dcd1      	bgt.n	800a364 <st_sssa8_fully_connected+0x510>
 800a3c0:	4615      	mov	r5, r2
 800a3c2:	9a05      	ldr	r2, [sp, #20]
 800a3c4:	2a15      	cmp	r2, #21
 800a3c6:	dcde      	bgt.n	800a386 <st_sssa8_fully_connected+0x532>
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	dd0a      	ble.n	800a3e2 <st_sssa8_fully_connected+0x58e>
 800a3cc:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	fb53 0301 	smmla	r3, r3, r1, r0
 800a3d6:	4113      	asrs	r3, r2
 800a3d8:	f303 0307 	ssat	r3, #8, r3
 800a3dc:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a3e0:	e7dd      	b.n	800a39e <st_sssa8_fully_connected+0x54a>
 800a3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3e4:	4093      	lsls	r3, r2
 800a3e6:	f303 031f 	ssat	r3, #32, r3
 800a3ea:	9a08      	ldr	r2, [sp, #32]
 800a3ec:	fb53 f312 	smmulr	r3, r3, r2
 800a3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f303 0307 	ssat	r3, #8, r3
 800a3f8:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a3fc:	e7cf      	b.n	800a39e <st_sssa8_fully_connected+0x54a>
 800a3fe:	2a00      	cmp	r2, #0
 800a400:	dd0d      	ble.n	800a41e <st_sssa8_fully_connected+0x5ca>
 800a402:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	fb53 0301 	smmla	r3, r3, r1, r0
 800a40c:	4113      	asrs	r3, r2
 800a40e:	f303 0307 	ssat	r3, #8, r3
 800a412:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a414:	2000      	movs	r0, #0
 800a416:	7013      	strb	r3, [r2, #0]
 800a418:	b017      	add	sp, #92	; 0x5c
 800a41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41e:	f1c2 0201 	rsb	r2, r2, #1
 800a422:	4093      	lsls	r3, r2
 800a424:	f303 031f 	ssat	r3, #32, r3
 800a428:	9a08      	ldr	r2, [sp, #32]
 800a42a:	fb53 f312 	smmulr	r3, r3, r2
 800a42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a430:	441a      	add	r2, r3
 800a432:	f302 0307 	ssat	r3, #8, r2
 800a436:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a438:	2000      	movs	r0, #0
 800a43a:	7013      	strb	r3, [r2, #0]
 800a43c:	b017      	add	sp, #92	; 0x5c
 800a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a442:	462e      	mov	r6, r5
 800a444:	e6a2      	b.n	800a18c <st_sssa8_fully_connected+0x338>
 800a446:	bf00      	nop

0800a448 <ai_padding_opt_init>:
 800a448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a44c:	2700      	movs	r7, #0
 800a44e:	e9c0 7700 	strd	r7, r7, [r0]
 800a452:	6087      	str	r7, [r0, #8]
 800a454:	690d      	ldr	r5, [r1, #16]
 800a456:	9c07      	ldr	r4, [sp, #28]
 800a458:	f1c5 0c00 	rsb	ip, r5, #0
 800a45c:	689d      	ldr	r5, [r3, #8]
 800a45e:	42bd      	cmp	r5, r7
 800a460:	46b9      	mov	r9, r7
 800a462:	dd1b      	ble.n	800a49c <ai_padding_opt_init+0x54>
 800a464:	463e      	mov	r6, r7
 800a466:	46be      	mov	lr, r7
 800a468:	e012      	b.n	800a490 <ai_padding_opt_init+0x48>
 800a46a:	6895      	ldr	r5, [r2, #8]
 800a46c:	eba5 080c 	sub.w	r8, r5, ip
 800a470:	68a5      	ldr	r5, [r4, #8]
 800a472:	45a8      	cmp	r8, r5
 800a474:	bfb5      	itete	lt
 800a476:	f109 0901 	addlt.w	r9, r9, #1
 800a47a:	3701      	addge	r7, #1
 800a47c:	f8c0 9008 	strlt.w	r9, [r0, #8]
 800a480:	6047      	strge	r7, [r0, #4]
 800a482:	688d      	ldr	r5, [r1, #8]
 800a484:	44ac      	add	ip, r5
 800a486:	689d      	ldr	r5, [r3, #8]
 800a488:	f10e 0e01 	add.w	lr, lr, #1
 800a48c:	4575      	cmp	r5, lr
 800a48e:	dd06      	ble.n	800a49e <ai_padding_opt_init+0x56>
 800a490:	f1bc 0f00 	cmp.w	ip, #0
 800a494:	dae9      	bge.n	800a46a <ai_padding_opt_init+0x22>
 800a496:	3601      	adds	r6, #1
 800a498:	6006      	str	r6, [r0, #0]
 800a49a:	e7f2      	b.n	800a482 <ai_padding_opt_init+0x3a>
 800a49c:	463e      	mov	r6, r7
 800a49e:	2500      	movs	r5, #0
 800a4a0:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800a4a4:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800a4a8:	f8c0 9014 	str.w	r9, [r0, #20]
 800a4ac:	6205      	str	r5, [r0, #32]
 800a4ae:	694e      	ldr	r6, [r1, #20]
 800a4b0:	f1c6 0c00 	rsb	ip, r6, #0
 800a4b4:	685e      	ldr	r6, [r3, #4]
 800a4b6:	42ae      	cmp	r6, r5
 800a4b8:	dd1c      	ble.n	800a4f4 <ai_padding_opt_init+0xac>
 800a4ba:	46ae      	mov	lr, r5
 800a4bc:	e00f      	b.n	800a4de <ai_padding_opt_init+0x96>
 800a4be:	6855      	ldr	r5, [r2, #4]
 800a4c0:	6866      	ldr	r6, [r4, #4]
 800a4c2:	eba5 050c 	sub.w	r5, r5, ip
 800a4c6:	42b5      	cmp	r5, r6
 800a4c8:	da10      	bge.n	800a4ec <ai_padding_opt_init+0xa4>
 800a4ca:	6a05      	ldr	r5, [r0, #32]
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	6205      	str	r5, [r0, #32]
 800a4d0:	68cd      	ldr	r5, [r1, #12]
 800a4d2:	44ac      	add	ip, r5
 800a4d4:	685d      	ldr	r5, [r3, #4]
 800a4d6:	f10e 0e01 	add.w	lr, lr, #1
 800a4da:	4575      	cmp	r5, lr
 800a4dc:	dd0a      	ble.n	800a4f4 <ai_padding_opt_init+0xac>
 800a4de:	f1bc 0f00 	cmp.w	ip, #0
 800a4e2:	daec      	bge.n	800a4be <ai_padding_opt_init+0x76>
 800a4e4:	6985      	ldr	r5, [r0, #24]
 800a4e6:	3501      	adds	r5, #1
 800a4e8:	6185      	str	r5, [r0, #24]
 800a4ea:	e7f1      	b.n	800a4d0 <ai_padding_opt_init+0x88>
 800a4ec:	69c5      	ldr	r5, [r0, #28]
 800a4ee:	3501      	adds	r5, #1
 800a4f0:	61c5      	str	r5, [r0, #28]
 800a4f2:	e7ed      	b.n	800a4d0 <ai_padding_opt_init+0x88>
 800a4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a4f8 <ai_padding_opt_phase1>:
 800a4f8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800a4fc:	b923      	cbnz	r3, 800a508 <ai_padding_opt_phase1+0x10>
 800a4fe:	b17a      	cbz	r2, 800a520 <ai_padding_opt_phase1+0x28>
 800a500:	3a01      	subs	r2, #1
 800a502:	8483      	strh	r3, [r0, #36]	; 0x24
 800a504:	61c2      	str	r2, [r0, #28]
 800a506:	e004      	b.n	800a512 <ai_padding_opt_phase1+0x1a>
 800a508:	b152      	cbz	r2, 800a520 <ai_padding_opt_phase1+0x28>
 800a50a:	2201      	movs	r2, #1
 800a50c:	3b01      	subs	r3, #1
 800a50e:	8482      	strh	r2, [r0, #36]	; 0x24
 800a510:	6183      	str	r3, [r0, #24]
 800a512:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800a516:	68c1      	ldr	r1, [r0, #12]
 800a518:	6083      	str	r3, [r0, #8]
 800a51a:	e9c0 1200 	strd	r1, r2, [r0]
 800a51e:	4770      	bx	lr
 800a520:	6a03      	ldr	r3, [r0, #32]
 800a522:	2201      	movs	r2, #1
 800a524:	3b01      	subs	r3, #1
 800a526:	8482      	strh	r2, [r0, #36]	; 0x24
 800a528:	6203      	str	r3, [r0, #32]
 800a52a:	e7f2      	b.n	800a512 <ai_padding_opt_phase1+0x1a>

0800a52c <st_int8_to16_no_shift>:
 800a52c:	b570      	push	{r4, r5, r6, lr}
 800a52e:	f1b2 0410 	subs.w	r4, r2, #16
 800a532:	f04f 0e00 	mov.w	lr, #0
 800a536:	d437      	bmi.n	800a5a8 <st_int8_to16_no_shift+0x7c>
 800a538:	f8d0 c000 	ldr.w	ip, [r0]
 800a53c:	6843      	ldr	r3, [r0, #4]
 800a53e:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a542:	fa2f fc8c 	sxtb16	ip, ip
 800a546:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a54a:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a54e:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a552:	604e      	str	r6, [r1, #4]
 800a554:	f8c1 c000 	str.w	ip, [r1]
 800a558:	fa2f f383 	sxtb16	r3, r3
 800a55c:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a560:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a564:	60ce      	str	r6, [r1, #12]
 800a566:	608b      	str	r3, [r1, #8]
 800a568:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a56c:	68c3      	ldr	r3, [r0, #12]
 800a56e:	3010      	adds	r0, #16
 800a570:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a574:	fa2f fc8c 	sxtb16	ip, ip
 800a578:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a57c:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a580:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a584:	f8c1 c010 	str.w	ip, [r1, #16]
 800a588:	614e      	str	r6, [r1, #20]
 800a58a:	f10e 0e10 	add.w	lr, lr, #16
 800a58e:	3120      	adds	r1, #32
 800a590:	45a6      	cmp	lr, r4
 800a592:	fa2f f383 	sxtb16	r3, r3
 800a596:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800a59a:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a59e:	f841 cc04 	str.w	ip, [r1, #-4]
 800a5a2:	f841 3c08 	str.w	r3, [r1, #-8]
 800a5a6:	ddc7      	ble.n	800a538 <st_int8_to16_no_shift+0xc>
 800a5a8:	1f16      	subs	r6, r2, #4
 800a5aa:	4576      	cmp	r6, lr
 800a5ac:	db12      	blt.n	800a5d4 <st_int8_to16_no_shift+0xa8>
 800a5ae:	f850 3b04 	ldr.w	r3, [r0], #4
 800a5b2:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a5b6:	3108      	adds	r1, #8
 800a5b8:	f10e 0e04 	add.w	lr, lr, #4
 800a5bc:	45b6      	cmp	lr, r6
 800a5be:	fa2f f383 	sxtb16	r3, r3
 800a5c2:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800a5c6:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800a5ca:	f841 5c04 	str.w	r5, [r1, #-4]
 800a5ce:	f841 3c08 	str.w	r3, [r1, #-8]
 800a5d2:	ddec      	ble.n	800a5ae <st_int8_to16_no_shift+0x82>
 800a5d4:	4572      	cmp	r2, lr
 800a5d6:	dd08      	ble.n	800a5ea <st_int8_to16_no_shift+0xbe>
 800a5d8:	eba2 020e 	sub.w	r2, r2, lr
 800a5dc:	4402      	add	r2, r0
 800a5de:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a5e2:	f821 3b02 	strh.w	r3, [r1], #2
 800a5e6:	4290      	cmp	r0, r2
 800a5e8:	d1f9      	bne.n	800a5de <st_int8_to16_no_shift+0xb2>
 800a5ea:	bd70      	pop	{r4, r5, r6, pc}

0800a5ec <st_int8_to16_no_shift_interleaved>:
 800a5ec:	b570      	push	{r4, r5, r6, lr}
 800a5ee:	f1b2 0510 	subs.w	r5, r2, #16
 800a5f2:	f04f 0e00 	mov.w	lr, #0
 800a5f6:	d426      	bmi.n	800a646 <st_int8_to16_no_shift_interleaved+0x5a>
 800a5f8:	f8d0 c000 	ldr.w	ip, [r0]
 800a5fc:	6843      	ldr	r3, [r0, #4]
 800a5fe:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a602:	fa2f fc8c 	sxtb16	ip, ip
 800a606:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a60a:	600e      	str	r6, [r1, #0]
 800a60c:	f8c1 c004 	str.w	ip, [r1, #4]
 800a610:	608c      	str	r4, [r1, #8]
 800a612:	fa2f f383 	sxtb16	r3, r3
 800a616:	60cb      	str	r3, [r1, #12]
 800a618:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a61c:	68c3      	ldr	r3, [r0, #12]
 800a61e:	3010      	adds	r0, #16
 800a620:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a624:	fa2f fc8c 	sxtb16	ip, ip
 800a628:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a62c:	610e      	str	r6, [r1, #16]
 800a62e:	f8c1 c014 	str.w	ip, [r1, #20]
 800a632:	618c      	str	r4, [r1, #24]
 800a634:	f10e 0e10 	add.w	lr, lr, #16
 800a638:	3120      	adds	r1, #32
 800a63a:	45ae      	cmp	lr, r5
 800a63c:	fa2f f383 	sxtb16	r3, r3
 800a640:	f841 3c04 	str.w	r3, [r1, #-4]
 800a644:	ddd8      	ble.n	800a5f8 <st_int8_to16_no_shift_interleaved+0xc>
 800a646:	1f14      	subs	r4, r2, #4
 800a648:	4574      	cmp	r4, lr
 800a64a:	db10      	blt.n	800a66e <st_int8_to16_no_shift_interleaved+0x82>
 800a64c:	ebae 0e00 	sub.w	lr, lr, r0
 800a650:	f850 3b04 	ldr.w	r3, [r0], #4
 800a654:	fa2f fc93 	sxtb16	ip, r3, ror #8
 800a658:	f8c1 c000 	str.w	ip, [r1]
 800a65c:	eb00 020e 	add.w	r2, r0, lr
 800a660:	3108      	adds	r1, #8
 800a662:	4294      	cmp	r4, r2
 800a664:	fa2f f383 	sxtb16	r3, r3
 800a668:	f841 3c04 	str.w	r3, [r1, #-4]
 800a66c:	daf0      	bge.n	800a650 <st_int8_to16_no_shift_interleaved+0x64>
 800a66e:	bd70      	pop	{r4, r5, r6, pc}

0800a670 <st_int8_to16_dual>:
 800a670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a674:	4698      	mov	r8, r3
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	eb00 0c02 	add.w	ip, r0, r2
 800a67c:	f000 80ba 	beq.w	800a7f4 <st_int8_to16_dual+0x184>
 800a680:	f1a2 0710 	sub.w	r7, r2, #16
 800a684:	1f16      	subs	r6, r2, #4
 800a686:	2f00      	cmp	r7, #0
 800a688:	f04f 0500 	mov.w	r5, #0
 800a68c:	db73      	blt.n	800a776 <st_int8_to16_dual+0x106>
 800a68e:	f8d0 e000 	ldr.w	lr, [r0]
 800a692:	f8dc 4000 	ldr.w	r4, [ip]
 800a696:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a69a:	fa2f fe8e 	sxtb16	lr, lr
 800a69e:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a6a2:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a6a6:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a6aa:	f8c1 e000 	str.w	lr, [r1]
 800a6ae:	f8c1 a008 	str.w	sl, [r1, #8]
 800a6b2:	fa2f f484 	sxtb16	r4, r4
 800a6b6:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a6ba:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a6be:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a6c2:	604c      	str	r4, [r1, #4]
 800a6c4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800a6c8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a6cc:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a6d0:	fa2f fe8e 	sxtb16	lr, lr
 800a6d4:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a6d8:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a6dc:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a6e0:	f8c1 e010 	str.w	lr, [r1, #16]
 800a6e4:	f8c1 a018 	str.w	sl, [r1, #24]
 800a6e8:	fa2f f484 	sxtb16	r4, r4
 800a6ec:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a6f0:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a6f4:	f8c1 e01c 	str.w	lr, [r1, #28]
 800a6f8:	614c      	str	r4, [r1, #20]
 800a6fa:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a6fe:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a702:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a706:	fa2f fe8e 	sxtb16	lr, lr
 800a70a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a70e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a712:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a716:	3010      	adds	r0, #16
 800a718:	f8c1 e020 	str.w	lr, [r1, #32]
 800a71c:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 800a720:	fa2f f484 	sxtb16	r4, r4
 800a724:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a728:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a72c:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 800a730:	624c      	str	r4, [r1, #36]	; 0x24
 800a732:	f8dc 400c 	ldr.w	r4, [ip, #12]
 800a736:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800a73a:	f10c 0c10 	add.w	ip, ip, #16
 800a73e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a742:	fa2f fe8e 	sxtb16	lr, lr
 800a746:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a74a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a74e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a752:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 800a756:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
 800a75a:	3510      	adds	r5, #16
 800a75c:	3140      	adds	r1, #64	; 0x40
 800a75e:	42bd      	cmp	r5, r7
 800a760:	fa2f f484 	sxtb16	r4, r4
 800a764:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a768:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a76c:	f841 ec04 	str.w	lr, [r1, #-4]
 800a770:	f841 4c0c 	str.w	r4, [r1, #-12]
 800a774:	dd8b      	ble.n	800a68e <st_int8_to16_dual+0x1e>
 800a776:	42ae      	cmp	r6, r5
 800a778:	db1e      	blt.n	800a7b8 <st_int8_to16_dual+0x148>
 800a77a:	f850 4b04 	ldr.w	r4, [r0], #4
 800a77e:	f85c eb04 	ldr.w	lr, [ip], #4
 800a782:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a786:	fa2f f484 	sxtb16	r4, r4
 800a78a:	eac9 4a24 	pkhtb	sl, r9, r4, asr #16
 800a78e:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a792:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a796:	600c      	str	r4, [r1, #0]
 800a798:	f8c1 a008 	str.w	sl, [r1, #8]
 800a79c:	3504      	adds	r5, #4
 800a79e:	3110      	adds	r1, #16
 800a7a0:	42b5      	cmp	r5, r6
 800a7a2:	fa2f fe8e 	sxtb16	lr, lr
 800a7a6:	eac9 442e 	pkhtb	r4, r9, lr, asr #16
 800a7aa:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a7ae:	f841 4c04 	str.w	r4, [r1, #-4]
 800a7b2:	f841 ec0c 	str.w	lr, [r1, #-12]
 800a7b6:	dde0      	ble.n	800a77a <st_int8_to16_dual+0x10a>
 800a7b8:	42aa      	cmp	r2, r5
 800a7ba:	dd41      	ble.n	800a840 <st_int8_to16_dual+0x1d0>
 800a7bc:	1b55      	subs	r5, r2, r5
 800a7be:	1d0c      	adds	r4, r1, #4
 800a7c0:	eb00 0a05 	add.w	sl, r0, r5
 800a7c4:	46e6      	mov	lr, ip
 800a7c6:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a7ca:	f824 9c04 	strh.w	r9, [r4, #-4]
 800a7ce:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800a7d2:	f824 9c02 	strh.w	r9, [r4, #-2]
 800a7d6:	4550      	cmp	r0, sl
 800a7d8:	f104 0404 	add.w	r4, r4, #4
 800a7dc:	d1f3      	bne.n	800a7c6 <st_int8_to16_dual+0x156>
 800a7de:	44ac      	add	ip, r5
 800a7e0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	eb0a 0002 	add.w	r0, sl, r2
 800a7ec:	4494      	add	ip, r2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f47f af49 	bne.w	800a686 <st_int8_to16_dual+0x16>
 800a7f4:	f018 0f01 	tst.w	r8, #1
 800a7f8:	d020      	beq.n	800a83c <st_int8_to16_dual+0x1cc>
 800a7fa:	1f17      	subs	r7, r2, #4
 800a7fc:	f04f 0400 	mov.w	r4, #0
 800a800:	d411      	bmi.n	800a826 <st_int8_to16_dual+0x1b6>
 800a802:	f850 3b04 	ldr.w	r3, [r0], #4
 800a806:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a80a:	3108      	adds	r1, #8
 800a80c:	3404      	adds	r4, #4
 800a80e:	42a7      	cmp	r7, r4
 800a810:	fa2f f383 	sxtb16	r3, r3
 800a814:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a818:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a81c:	f841 6c04 	str.w	r6, [r1, #-4]
 800a820:	f841 3c08 	str.w	r3, [r1, #-8]
 800a824:	daed      	bge.n	800a802 <st_int8_to16_dual+0x192>
 800a826:	42a2      	cmp	r2, r4
 800a828:	dd08      	ble.n	800a83c <st_int8_to16_dual+0x1cc>
 800a82a:	1b13      	subs	r3, r2, r4
 800a82c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a830:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a834:	f821 2b02 	strh.w	r2, [r1], #2
 800a838:	428b      	cmp	r3, r1
 800a83a:	d1f9      	bne.n	800a830 <st_int8_to16_dual+0x1c0>
 800a83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a840:	4682      	mov	sl, r0
 800a842:	e7cf      	b.n	800a7e4 <st_int8_to16_dual+0x174>

0800a844 <st_int8_to16_dual_interleaved>:
 800a844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a848:	4698      	mov	r8, r3
 800a84a:	085b      	lsrs	r3, r3, #1
 800a84c:	eb00 0c02 	add.w	ip, r0, r2
 800a850:	f000 808d 	beq.w	800a96e <st_int8_to16_dual_interleaved+0x12a>
 800a854:	f1a2 0710 	sub.w	r7, r2, #16
 800a858:	1f16      	subs	r6, r2, #4
 800a85a:	2f00      	cmp	r7, #0
 800a85c:	f04f 0e00 	mov.w	lr, #0
 800a860:	db4c      	blt.n	800a8fc <st_int8_to16_dual_interleaved+0xb8>
 800a862:	6805      	ldr	r5, [r0, #0]
 800a864:	f8dc 4000 	ldr.w	r4, [ip]
 800a868:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a86c:	fa2f f585 	sxtb16	r5, r5
 800a870:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a874:	f8c1 a000 	str.w	sl, [r1]
 800a878:	f8c1 9004 	str.w	r9, [r1, #4]
 800a87c:	608d      	str	r5, [r1, #8]
 800a87e:	fa2f f484 	sxtb16	r4, r4
 800a882:	60cc      	str	r4, [r1, #12]
 800a884:	6845      	ldr	r5, [r0, #4]
 800a886:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a88a:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a88e:	fa2f f585 	sxtb16	r5, r5
 800a892:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a896:	f8c1 a010 	str.w	sl, [r1, #16]
 800a89a:	f8c1 9014 	str.w	r9, [r1, #20]
 800a89e:	618d      	str	r5, [r1, #24]
 800a8a0:	fa2f f484 	sxtb16	r4, r4
 800a8a4:	61cc      	str	r4, [r1, #28]
 800a8a6:	6885      	ldr	r5, [r0, #8]
 800a8a8:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a8ac:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a8b0:	fa2f f585 	sxtb16	r5, r5
 800a8b4:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a8b8:	f8c1 a020 	str.w	sl, [r1, #32]
 800a8bc:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
 800a8c0:	628d      	str	r5, [r1, #40]	; 0x28
 800a8c2:	fa2f f484 	sxtb16	r4, r4
 800a8c6:	62cc      	str	r4, [r1, #44]	; 0x2c
 800a8c8:	68c5      	ldr	r5, [r0, #12]
 800a8ca:	f8dc 400c 	ldr.w	r4, [ip, #12]
 800a8ce:	3010      	adds	r0, #16
 800a8d0:	f10c 0c10 	add.w	ip, ip, #16
 800a8d4:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a8d8:	fa2f f585 	sxtb16	r5, r5
 800a8dc:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a8e0:	f8c1 a030 	str.w	sl, [r1, #48]	; 0x30
 800a8e4:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
 800a8e8:	638d      	str	r5, [r1, #56]	; 0x38
 800a8ea:	f10e 0e10 	add.w	lr, lr, #16
 800a8ee:	3140      	adds	r1, #64	; 0x40
 800a8f0:	45be      	cmp	lr, r7
 800a8f2:	fa2f f484 	sxtb16	r4, r4
 800a8f6:	f841 4c04 	str.w	r4, [r1, #-4]
 800a8fa:	ddb2      	ble.n	800a862 <st_int8_to16_dual_interleaved+0x1e>
 800a8fc:	4576      	cmp	r6, lr
 800a8fe:	db17      	blt.n	800a930 <st_int8_to16_dual_interleaved+0xec>
 800a900:	f850 5b04 	ldr.w	r5, [r0], #4
 800a904:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a908:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a90c:	fa2f f585 	sxtb16	r5, r5
 800a910:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a914:	f8c1 a000 	str.w	sl, [r1]
 800a918:	f8c1 9004 	str.w	r9, [r1, #4]
 800a91c:	608d      	str	r5, [r1, #8]
 800a91e:	f10e 0e04 	add.w	lr, lr, #4
 800a922:	3110      	adds	r1, #16
 800a924:	45b6      	cmp	lr, r6
 800a926:	fa2f f484 	sxtb16	r4, r4
 800a92a:	f841 4c04 	str.w	r4, [r1, #-4]
 800a92e:	dde7      	ble.n	800a900 <st_int8_to16_dual_interleaved+0xbc>
 800a930:	4572      	cmp	r2, lr
 800a932:	dd3d      	ble.n	800a9b0 <st_int8_to16_dual_interleaved+0x16c>
 800a934:	eba2 0e0e 	sub.w	lr, r2, lr
 800a938:	1d0c      	adds	r4, r1, #4
 800a93a:	eb00 0a0e 	add.w	sl, r0, lr
 800a93e:	4665      	mov	r5, ip
 800a940:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a944:	f824 9c04 	strh.w	r9, [r4, #-4]
 800a948:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800a94c:	f824 9c02 	strh.w	r9, [r4, #-2]
 800a950:	4550      	cmp	r0, sl
 800a952:	f104 0404 	add.w	r4, r4, #4
 800a956:	d1f3      	bne.n	800a940 <st_int8_to16_dual_interleaved+0xfc>
 800a958:	44f4      	add	ip, lr
 800a95a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800a95e:	3b01      	subs	r3, #1
 800a960:	b29b      	uxth	r3, r3
 800a962:	eb0a 0002 	add.w	r0, sl, r2
 800a966:	4494      	add	ip, r2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f47f af76 	bne.w	800a85a <st_int8_to16_dual_interleaved+0x16>
 800a96e:	f018 0f01 	tst.w	r8, #1
 800a972:	d01b      	beq.n	800a9ac <st_int8_to16_dual_interleaved+0x168>
 800a974:	1f16      	subs	r6, r2, #4
 800a976:	f04f 0400 	mov.w	r4, #0
 800a97a:	d40c      	bmi.n	800a996 <st_int8_to16_dual_interleaved+0x152>
 800a97c:	f850 3b04 	ldr.w	r3, [r0], #4
 800a980:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a984:	600d      	str	r5, [r1, #0]
 800a986:	3404      	adds	r4, #4
 800a988:	3108      	adds	r1, #8
 800a98a:	42a6      	cmp	r6, r4
 800a98c:	fa2f f383 	sxtb16	r3, r3
 800a990:	f841 3c04 	str.w	r3, [r1, #-4]
 800a994:	daf2      	bge.n	800a97c <st_int8_to16_dual_interleaved+0x138>
 800a996:	42a2      	cmp	r2, r4
 800a998:	dd08      	ble.n	800a9ac <st_int8_to16_dual_interleaved+0x168>
 800a99a:	1b13      	subs	r3, r2, r4
 800a99c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a9a0:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a9a4:	f821 2b02 	strh.w	r2, [r1], #2
 800a9a8:	428b      	cmp	r3, r1
 800a9aa:	d1f9      	bne.n	800a9a0 <st_int8_to16_dual_interleaved+0x15c>
 800a9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	e7d4      	b.n	800a95e <st_int8_to16_dual_interleaved+0x11a>

0800a9b4 <weights_2channels_prefetch>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	b087      	sub	sp, #28
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800a9c0:	9302      	str	r3, [sp, #8]
 800a9c2:	f340 80d7 	ble.w	800ab74 <weights_2channels_prefetch+0x1c0>
 800a9c6:	f1a8 0310 	sub.w	r3, r8, #16
 800a9ca:	091b      	lsrs	r3, r3, #4
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	f1a8 0403 	sub.w	r4, r8, #3
 800a9d2:	9403      	str	r4, [sp, #12]
 800a9d4:	011c      	lsls	r4, r3, #4
 800a9d6:	019b      	lsls	r3, r3, #6
 800a9d8:	9304      	str	r3, [sp, #16]
 800a9da:	f1a8 0304 	sub.w	r3, r8, #4
 800a9de:	9400      	str	r4, [sp, #0]
 800a9e0:	f04f 0b00 	mov.w	fp, #0
 800a9e4:	9305      	str	r3, [sp, #20]
 800a9e6:	f1b8 0f0f 	cmp.w	r8, #15
 800a9ea:	f340 80c8 	ble.w	800ab7e <weights_2channels_prefetch+0x1ca>
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	18c6      	adds	r6, r0, r3
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	6807      	ldr	r7, [r0, #0]
 800a9f8:	6825      	ldr	r5, [r4, #0]
 800a9fa:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800a9fe:	fa2f f787 	sxtb16	r7, r7
 800aa02:	601f      	str	r7, [r3, #0]
 800aa04:	fa2f f78c 	sxtb16	r7, ip
 800aa08:	605f      	str	r7, [r3, #4]
 800aa0a:	ea4f 2735 	mov.w	r7, r5, ror #8
 800aa0e:	fa2f f585 	sxtb16	r5, r5
 800aa12:	609d      	str	r5, [r3, #8]
 800aa14:	fa2f f587 	sxtb16	r5, r7
 800aa18:	60dd      	str	r5, [r3, #12]
 800aa1a:	6847      	ldr	r7, [r0, #4]
 800aa1c:	6865      	ldr	r5, [r4, #4]
 800aa1e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800aa22:	fa2f f787 	sxtb16	r7, r7
 800aa26:	611f      	str	r7, [r3, #16]
 800aa28:	fa2f f78c 	sxtb16	r7, ip
 800aa2c:	615f      	str	r7, [r3, #20]
 800aa2e:	ea4f 2735 	mov.w	r7, r5, ror #8
 800aa32:	fa2f f585 	sxtb16	r5, r5
 800aa36:	619d      	str	r5, [r3, #24]
 800aa38:	fa2f f587 	sxtb16	r5, r7
 800aa3c:	61dd      	str	r5, [r3, #28]
 800aa3e:	6887      	ldr	r7, [r0, #8]
 800aa40:	68a5      	ldr	r5, [r4, #8]
 800aa42:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800aa46:	fa2f f787 	sxtb16	r7, r7
 800aa4a:	621f      	str	r7, [r3, #32]
 800aa4c:	fa2f f78c 	sxtb16	r7, ip
 800aa50:	625f      	str	r7, [r3, #36]	; 0x24
 800aa52:	ea4f 2735 	mov.w	r7, r5, ror #8
 800aa56:	fa2f f585 	sxtb16	r5, r5
 800aa5a:	629d      	str	r5, [r3, #40]	; 0x28
 800aa5c:	fa2f f587 	sxtb16	r5, r7
 800aa60:	62dd      	str	r5, [r3, #44]	; 0x2c
 800aa62:	68c7      	ldr	r7, [r0, #12]
 800aa64:	68e5      	ldr	r5, [r4, #12]
 800aa66:	3010      	adds	r0, #16
 800aa68:	42b0      	cmp	r0, r6
 800aa6a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800aa6e:	f104 0410 	add.w	r4, r4, #16
 800aa72:	fa2f f787 	sxtb16	r7, r7
 800aa76:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800aa7a:	f843 7c10 	str.w	r7, [r3, #-16]
 800aa7e:	fa2f f78c 	sxtb16	r7, ip
 800aa82:	f843 7c0c 	str.w	r7, [r3, #-12]
 800aa86:	ea4f 2735 	mov.w	r7, r5, ror #8
 800aa8a:	fa2f f585 	sxtb16	r5, r5
 800aa8e:	f843 5c08 	str.w	r5, [r3, #-8]
 800aa92:	fa2f f587 	sxtb16	r5, r7
 800aa96:	f843 5c04 	str.w	r5, [r3, #-4]
 800aa9a:	d1ac      	bne.n	800a9f6 <weights_2channels_prefetch+0x42>
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	441a      	add	r2, r3
 800aaa0:	9b00      	ldr	r3, [sp, #0]
 800aaa2:	4419      	add	r1, r3
 800aaa4:	469e      	mov	lr, r3
 800aaa6:	9b03      	ldr	r3, [sp, #12]
 800aaa8:	4573      	cmp	r3, lr
 800aaaa:	dd66      	ble.n	800ab7a <weights_2channels_prefetch+0x1c6>
 800aaac:	9b05      	ldr	r3, [sp, #20]
 800aaae:	eba3 090e 	sub.w	r9, r3, lr
 800aab2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800aab6:	f109 0a01 	add.w	sl, r9, #1
 800aaba:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800aabe:	9301      	str	r3, [sp, #4]
 800aac0:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 800aac4:	4613      	mov	r3, r2
 800aac6:	468c      	mov	ip, r1
 800aac8:	f856 5b04 	ldr.w	r5, [r6], #4
 800aacc:	f85c 4b04 	ldr.w	r4, [ip], #4
 800aad0:	4286      	cmp	r6, r0
 800aad2:	ea4f 2735 	mov.w	r7, r5, ror #8
 800aad6:	f103 0310 	add.w	r3, r3, #16
 800aada:	fa2f f585 	sxtb16	r5, r5
 800aade:	fa2f f787 	sxtb16	r7, r7
 800aae2:	f843 5c10 	str.w	r5, [r3, #-16]
 800aae6:	f843 7c0c 	str.w	r7, [r3, #-12]
 800aaea:	ea4f 2534 	mov.w	r5, r4, ror #8
 800aaee:	fa2f f484 	sxtb16	r4, r4
 800aaf2:	f843 4c08 	str.w	r4, [r3, #-8]
 800aaf6:	fa2f f485 	sxtb16	r4, r5
 800aafa:	f843 4c04 	str.w	r4, [r3, #-4]
 800aafe:	d1e3      	bne.n	800aac8 <weights_2channels_prefetch+0x114>
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	f10e 0e04 	add.w	lr, lr, #4
 800ab06:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 800ab0a:	4419      	add	r1, r3
 800ab0c:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800ab10:	45f0      	cmp	r8, lr
 800ab12:	dd29      	ble.n	800ab68 <weights_2channels_prefetch+0x1b4>
 800ab14:	f990 3000 	ldrsb.w	r3, [r0]
 800ab18:	8013      	strh	r3, [r2, #0]
 800ab1a:	f991 3000 	ldrsb.w	r3, [r1]
 800ab1e:	8053      	strh	r3, [r2, #2]
 800ab20:	f10e 0301 	add.w	r3, lr, #1
 800ab24:	4598      	cmp	r8, r3
 800ab26:	dd19      	ble.n	800ab5c <weights_2channels_prefetch+0x1a8>
 800ab28:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ab2c:	8093      	strh	r3, [r2, #4]
 800ab2e:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800ab32:	80d3      	strh	r3, [r2, #6]
 800ab34:	f10e 0302 	add.w	r3, lr, #2
 800ab38:	4598      	cmp	r8, r3
 800ab3a:	dd0f      	ble.n	800ab5c <weights_2channels_prefetch+0x1a8>
 800ab3c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800ab40:	8113      	strh	r3, [r2, #8]
 800ab42:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800ab46:	8153      	strh	r3, [r2, #10]
 800ab48:	f10e 0303 	add.w	r3, lr, #3
 800ab4c:	4598      	cmp	r8, r3
 800ab4e:	dd05      	ble.n	800ab5c <weights_2channels_prefetch+0x1a8>
 800ab50:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800ab54:	8193      	strh	r3, [r2, #12]
 800ab56:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800ab5a:	81d3      	strh	r3, [r2, #14]
 800ab5c:	eba8 0e0e 	sub.w	lr, r8, lr
 800ab60:	4470      	add	r0, lr
 800ab62:	4471      	add	r1, lr
 800ab64:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800ab68:	9b02      	ldr	r3, [sp, #8]
 800ab6a:	f10b 0b01 	add.w	fp, fp, #1
 800ab6e:	455b      	cmp	r3, fp
 800ab70:	f47f af39 	bne.w	800a9e6 <weights_2channels_prefetch+0x32>
 800ab74:	b007      	add	sp, #28
 800ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	e7c8      	b.n	800ab10 <weights_2channels_prefetch+0x15c>
 800ab7e:	4606      	mov	r6, r0
 800ab80:	f04f 0e00 	mov.w	lr, #0
 800ab84:	e78f      	b.n	800aaa6 <weights_2channels_prefetch+0xf2>
 800ab86:	bf00      	nop

0800ab88 <st_sssa8_ch_fullW_prefetch>:
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	b087      	sub	sp, #28
 800ab8e:	4680      	mov	r8, r0
 800ab90:	4618      	mov	r0, r3
 800ab92:	4613      	mov	r3, r2
 800ab94:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 800ab98:	104f      	asrs	r7, r1, #1
 800ab9a:	9103      	str	r1, [sp, #12]
 800ab9c:	eb08 0402 	add.w	r4, r8, r2
 800aba0:	9704      	str	r7, [sp, #16]
 800aba2:	d020      	beq.n	800abe6 <st_sssa8_ch_fullW_prefetch+0x5e>
 800aba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aba6:	f8cd 8014 	str.w	r8, [sp, #20]
 800abaa:	4646      	mov	r6, r8
 800abac:	4655      	mov	r5, sl
 800abae:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800abb2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800abb6:	4680      	mov	r8, r0
 800abb8:	469a      	mov	sl, r3
 800abba:	462a      	mov	r2, r5
 800abbc:	4621      	mov	r1, r4
 800abbe:	4630      	mov	r0, r6
 800abc0:	f8cd 8000 	str.w	r8, [sp]
 800abc4:	4653      	mov	r3, sl
 800abc6:	f7ff fef5 	bl	800a9b4 <weights_2channels_prefetch>
 800abca:	3f01      	subs	r7, #1
 800abcc:	445d      	add	r5, fp
 800abce:	444c      	add	r4, r9
 800abd0:	444e      	add	r6, r9
 800abd2:	d1f2      	bne.n	800abba <st_sssa8_ch_fullW_prefetch+0x32>
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800abda:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800abde:	fb03 8809 	mla	r8, r3, r9, r8
 800abe2:	fb03 aa0b 	mla	sl, r3, fp, sl
 800abe6:	9b03      	ldr	r3, [sp, #12]
 800abe8:	07db      	lsls	r3, r3, #31
 800abea:	d509      	bpl.n	800ac00 <st_sssa8_ch_fullW_prefetch+0x78>
 800abec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dd06      	ble.n	800ac00 <st_sssa8_ch_fullW_prefetch+0x78>
 800abf2:	4443      	add	r3, r8
 800abf4:	f918 2b01 	ldrsb.w	r2, [r8], #1
 800abf8:	f82a 2b02 	strh.w	r2, [sl], #2
 800abfc:	4543      	cmp	r3, r8
 800abfe:	d1f9      	bne.n	800abf4 <st_sssa8_ch_fullW_prefetch+0x6c>
 800ac00:	b007      	add	sp, #28
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac06:	bf00      	nop

0800ac08 <st_sssa8_ch_nn_mat_mult_nt_t>:
 800ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	b0b5      	sub	sp, #212	; 0xd4
 800ac0e:	9027      	str	r0, [sp, #156]	; 0x9c
 800ac10:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	bf18      	it	ne
 800ac18:	4620      	movne	r0, r4
 800ac1a:	9c41      	ldr	r4, [sp, #260]	; 0x104
 800ac1c:	912d      	str	r1, [sp, #180]	; 0xb4
 800ac1e:	2c01      	cmp	r4, #1
 800ac20:	9233      	str	r2, [sp, #204]	; 0xcc
 800ac22:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac24:	9045      	str	r0, [sp, #276]	; 0x114
 800ac26:	f340 8269 	ble.w	800b0fc <st_sssa8_ch_nn_mat_mult_nt_t+0x4f4>
 800ac2a:	4626      	mov	r6, r4
 800ac2c:	9c42      	ldr	r4, [sp, #264]	; 0x108
 800ac2e:	9f42      	ldr	r7, [sp, #264]	; 0x108
 800ac30:	461d      	mov	r5, r3
 800ac32:	f1a4 0310 	sub.w	r3, r4, #16
 800ac36:	9c41      	ldr	r4, [sp, #260]	; 0x104
 800ac38:	1ea0      	subs	r0, r4, #2
 800ac3a:	4694      	mov	ip, r2
 800ac3c:	f020 0201 	bic.w	r2, r0, #1
 800ac40:	442a      	add	r2, r5
 800ac42:	1cd4      	adds	r4, r2, #3
 800ac44:	468e      	mov	lr, r1
 800ac46:	f107 0214 	add.w	r2, r7, #20
 800ac4a:	0919      	lsrs	r1, r3, #4
 800ac4c:	f023 030f 	bic.w	r3, r3, #15
 800ac50:	18d3      	adds	r3, r2, r3
 800ac52:	9318      	str	r3, [sp, #96]	; 0x60
 800ac54:	f06f 0303 	mvn.w	r3, #3
 800ac58:	1bdb      	subs	r3, r3, r7
 800ac5a:	9319      	str	r3, [sp, #100]	; 0x64
 800ac5c:	f1a7 030f 	sub.w	r3, r7, #15
 800ac60:	9312      	str	r3, [sp, #72]	; 0x48
 800ac62:	f007 0303 	and.w	r3, r7, #3
 800ac66:	9330      	str	r3, [sp, #192]	; 0xc0
 800ac68:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800ac6a:	9032      	str	r0, [sp, #200]	; 0xc8
 800ac6c:	f003 0301 	and.w	r3, r3, #1
 800ac70:	9328      	str	r3, [sp, #160]	; 0xa0
 800ac72:	007b      	lsls	r3, r7, #1
 800ac74:	9326      	str	r3, [sp, #152]	; 0x98
 800ac76:	00bb      	lsls	r3, r7, #2
 800ac78:	4628      	mov	r0, r5
 800ac7a:	932c      	str	r3, [sp, #176]	; 0xb0
 800ac7c:	1f3b      	subs	r3, r7, #4
 800ac7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac84:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800ac86:	9429      	str	r4, [sp, #164]	; 0xa4
 800ac88:	3302      	adds	r3, #2
 800ac8a:	9321      	str	r3, [sp, #132]	; 0x84
 800ac8c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800ac8e:	9c42      	ldr	r4, [sp, #264]	; 0x108
 800ac90:	9d40      	ldr	r5, [sp, #256]	; 0x100
 800ac92:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 800ac96:	3304      	adds	r3, #4
 800ac98:	931f      	str	r3, [sp, #124]	; 0x7c
 800ac9a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	9320      	str	r3, [sp, #128]	; 0x80
 800aca0:	4663      	mov	r3, ip
 800aca2:	3101      	adds	r1, #1
 800aca4:	3304      	adds	r3, #4
 800aca6:	9322      	str	r3, [sp, #136]	; 0x88
 800aca8:	010b      	lsls	r3, r1, #4
 800acaa:	10a4      	asrs	r4, r4, #2
 800acac:	9316      	str	r3, [sp, #88]	; 0x58
 800acae:	018b      	lsls	r3, r1, #6
 800acb0:	106d      	asrs	r5, r5, #1
 800acb2:	0076      	lsls	r6, r6, #1
 800acb4:	9325      	str	r3, [sp, #148]	; 0x94
 800acb6:	0123      	lsls	r3, r4, #4
 800acb8:	9331      	str	r3, [sp, #196]	; 0xc4
 800acba:	fb06 f305 	mul.w	r3, r6, r5
 800acbe:	942f      	str	r4, [sp, #188]	; 0xbc
 800acc0:	952a      	str	r5, [sp, #168]	; 0xa8
 800acc2:	9613      	str	r6, [sp, #76]	; 0x4c
 800acc4:	932b      	str	r3, [sp, #172]	; 0xac
 800acc6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acc8:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 800accc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800acd0:	920a      	str	r2, [sp, #40]	; 0x28
 800acd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800acd4:	931a      	str	r3, [sp, #104]	; 0x68
 800acd6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800acda:	6812      	ldr	r2, [r2, #0]
 800acdc:	920e      	str	r2, [sp, #56]	; 0x38
 800acde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ace0:	910d      	str	r1, [sp, #52]	; 0x34
 800ace2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800ace6:	6812      	ldr	r2, [r2, #0]
 800ace8:	9210      	str	r2, [sp, #64]	; 0x40
 800acea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800acec:	910f      	str	r1, [sp, #60]	; 0x3c
 800acee:	3a01      	subs	r2, #1
 800acf0:	2b15      	cmp	r3, #21
 800acf2:	9201      	str	r2, [sp, #4]
 800acf4:	f300 83e9 	bgt.w	800b4ca <st_sssa8_ch_nn_mat_mult_nt_t+0x8c2>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	bfcc      	ite	gt
 800acfc:	2300      	movgt	r3, #0
 800acfe:	2301      	movle	r3, #1
 800ad00:	425b      	negs	r3, r3
 800ad02:	9308      	str	r3, [sp, #32]
 800ad04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad06:	2b15      	cmp	r3, #21
 800ad08:	f300 82c3 	bgt.w	800b292 <st_sssa8_ch_nn_mat_mult_nt_t+0x68a>
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	bfcc      	ite	gt
 800ad10:	2300      	movgt	r3, #0
 800ad12:	2301      	movle	r3, #1
 800ad14:	425b      	negs	r3, r3
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 82bf 	beq.w	800b29e <st_sssa8_ch_nn_mat_mult_nt_t+0x696>
 800ad20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f040 8387 	bne.w	800b436 <st_sssa8_ch_nn_mat_mult_nt_t+0x82e>
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ad2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ad32:	18cb      	adds	r3, r1, r3
 800ad34:	930c      	str	r3, [sp, #48]	; 0x30
 800ad36:	6803      	ldr	r3, [r0, #0]
 800ad38:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ad3a:	18d3      	adds	r3, r2, r3
 800ad3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad3e:	2900      	cmp	r1, #0
 800ad40:	f000 84f2 	beq.w	800b728 <st_sssa8_ch_nn_mat_mult_nt_t+0xb20>
 800ad44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad46:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ad48:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800ad4c:	9104      	str	r1, [sp, #16]
 800ad4e:	2001      	movs	r0, #1
 800ad50:	1e93      	subs	r3, r2, #2
 800ad52:	fa00 f303 	lsl.w	r3, r0, r3
 800ad56:	931c      	str	r3, [sp, #112]	; 0x70
 800ad58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad5a:	3b02      	subs	r3, #2
 800ad5c:	fa00 f303 	lsl.w	r3, r0, r3
 800ad60:	931d      	str	r3, [sp, #116]	; 0x74
 800ad62:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800ad64:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ad66:	3b03      	subs	r3, #3
 800ad68:	9311      	str	r3, [sp, #68]	; 0x44
 800ad6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad6c:	9303      	str	r3, [sp, #12]
 800ad6e:	4418      	add	r0, r3
 800ad70:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800ad72:	9002      	str	r0, [sp, #8]
 800ad74:	3304      	adds	r3, #4
 800ad76:	9845      	ldr	r0, [sp, #276]	; 0x114
 800ad78:	9315      	str	r3, [sp, #84]	; 0x54
 800ad7a:	1e53      	subs	r3, r2, #1
 800ad7c:	4420      	add	r0, r4
 800ad7e:	931e      	str	r3, [sp, #120]	; 0x78
 800ad80:	f1c2 0301 	rsb	r3, r2, #1
 800ad84:	9014      	str	r0, [sp, #80]	; 0x50
 800ad86:	9324      	str	r3, [sp, #144]	; 0x90
 800ad88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f340 8278 	ble.w	800b280 <st_sssa8_ch_nn_mat_mult_nt_t+0x678>
 800ad90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad92:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad94:	f8cd b014 	str.w	fp, [sp, #20]
 800ad98:	eb0b 0703 	add.w	r7, fp, r3
 800ad9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ad9e:	9e45      	ldr	r6, [sp, #276]	; 0x114
 800ada0:	445b      	add	r3, fp
 800ada2:	9301      	str	r3, [sp, #4]
 800ada4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada6:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800adaa:	4619      	mov	r1, r3
 800adac:	4604      	mov	r4, r0
 800adae:	f85b c007 	ldr.w	ip, [fp, r7]
 800adb2:	6832      	ldr	r2, [r6, #0]
 800adb4:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800adb8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800adbc:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800adc0:	fa2f f58c 	sxtb16	r5, ip
 800adc4:	eb0b 0e07 	add.w	lr, fp, r7
 800adc8:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800adcc:	fb25 0002 	smlad	r0, r5, r2, r0
 800add0:	fb2c 0009 	smlad	r0, ip, r9, r0
 800add4:	fb25 350a 	smlad	r5, r5, sl, r3
 800add8:	fb2c 5508 	smlad	r5, ip, r8, r5
 800addc:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800ade0:	fa2f fc83 	sxtb16	ip, r3
 800ade4:	fa2f f393 	sxtb16	r3, r3, ror #8
 800ade8:	fb2c 4202 	smlad	r2, ip, r2, r4
 800adec:	fb2c 110a 	smlad	r1, ip, sl, r1
 800adf0:	fb23 2209 	smlad	r2, r3, r9, r2
 800adf4:	f8d6 9010 	ldr.w	r9, [r6, #16]
 800adf8:	6974      	ldr	r4, [r6, #20]
 800adfa:	fb23 1808 	smlad	r8, r3, r8, r1
 800adfe:	f8de 1004 	ldr.w	r1, [lr, #4]
 800ae02:	69b3      	ldr	r3, [r6, #24]
 800ae04:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 800ae08:	fa2f fc81 	sxtb16	ip, r1
 800ae0c:	fa2f f191 	sxtb16	r1, r1, ror #8
 800ae10:	fb2c 0009 	smlad	r0, ip, r9, r0
 800ae14:	fb21 0004 	smlad	r0, r1, r4, r0
 800ae18:	fb2c 5c03 	smlad	ip, ip, r3, r5
 800ae1c:	fb21 cc0a 	smlad	ip, r1, sl, ip
 800ae20:	683d      	ldr	r5, [r7, #0]
 800ae22:	fa2f f185 	sxtb16	r1, r5
 800ae26:	fa2f f595 	sxtb16	r5, r5, ror #8
 800ae2a:	fb21 2909 	smlad	r9, r1, r9, r2
 800ae2e:	fb21 8803 	smlad	r8, r1, r3, r8
 800ae32:	fb25 9904 	smlad	r9, r5, r4, r9
 800ae36:	6a34      	ldr	r4, [r6, #32]
 800ae38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae3a:	fb25 8a0a 	smlad	sl, r5, sl, r8
 800ae3e:	f8de 2008 	ldr.w	r2, [lr, #8]
 800ae42:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 800ae46:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800ae48:	fa2f f182 	sxtb16	r1, r2
 800ae4c:	fa2f f292 	sxtb16	r2, r2, ror #8
 800ae50:	fb21 0004 	smlad	r0, r1, r4, r0
 800ae54:	fb22 0003 	smlad	r0, r2, r3, r0
 800ae58:	fb21 c108 	smlad	r1, r1, r8, ip
 800ae5c:	fb22 1205 	smlad	r2, r2, r5, r1
 800ae60:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800ae64:	fa2f f18c 	sxtb16	r1, ip
 800ae68:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800ae6c:	fb21 9404 	smlad	r4, r1, r4, r9
 800ae70:	fb21 aa08 	smlad	sl, r1, r8, sl
 800ae74:	fb2c 4903 	smlad	r9, ip, r3, r4
 800ae78:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 800ae7c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800ae7e:	fb2c a505 	smlad	r5, ip, r5, sl
 800ae82:	f8de 300c 	ldr.w	r3, [lr, #12]
 800ae86:	f8d6 a038 	ldr.w	sl, [r6, #56]	; 0x38
 800ae8a:	f8d6 e03c 	ldr.w	lr, [r6, #60]	; 0x3c
 800ae8e:	fa2f f183 	sxtb16	r1, r3
 800ae92:	3640      	adds	r6, #64	; 0x40
 800ae94:	fa2f f393 	sxtb16	r3, r3, ror #8
 800ae98:	fb21 0008 	smlad	r0, r1, r8, r0
 800ae9c:	fb23 0004 	smlad	r0, r3, r4, r0
 800aea0:	fb21 220a 	smlad	r2, r1, sl, r2
 800aea4:	fb23 230e 	smlad	r3, r3, lr, r2
 800aea8:	68b9      	ldr	r1, [r7, #8]
 800aeaa:	fa2f f281 	sxtb16	r2, r1
 800aeae:	fa2f f191 	sxtb16	r1, r1, ror #8
 800aeb2:	fb22 9908 	smlad	r9, r2, r8, r9
 800aeb6:	fb22 550a 	smlad	r5, r2, sl, r5
 800aeba:	fb21 9404 	smlad	r4, r1, r4, r9
 800aebe:	fb21 510e 	smlad	r1, r1, lr, r5
 800aec2:	9a01      	ldr	r2, [sp, #4]
 800aec4:	3710      	adds	r7, #16
 800aec6:	4297      	cmp	r7, r2
 800aec8:	f47f af71 	bne.w	800adae <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 800aecc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aece:	f8dd b014 	ldr.w	fp, [sp, #20]
 800aed2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800aed4:	9501      	str	r5, [sp, #4]
 800aed6:	4493      	add	fp, r2
 800aed8:	4692      	mov	sl, r2
 800aeda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aedc:	4592      	cmp	sl, r2
 800aede:	f280 81cd 	bge.w	800b27c <st_sssa8_ch_nn_mat_mult_nt_t+0x674>
 800aee2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800aee4:	f8cd a01c 	str.w	sl, [sp, #28]
 800aee8:	eba5 020a 	sub.w	r2, r5, sl
 800aeec:	0892      	lsrs	r2, r2, #2
 800aeee:	9206      	str	r2, [sp, #24]
 800aef0:	3201      	adds	r2, #1
 800aef2:	9205      	str	r2, [sp, #20]
 800aef4:	eb0b 0982 	add.w	r9, fp, r2, lsl #2
 800aef8:	9a01      	ldr	r2, [sp, #4]
 800aefa:	46aa      	mov	sl, r5
 800aefc:	f8d2 8000 	ldr.w	r8, [r2]
 800af00:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800af04:	f85b 5b04 	ldr.w	r5, [fp], #4
 800af08:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800af0c:	68d7      	ldr	r7, [r2, #12]
 800af0e:	fa2f f685 	sxtb16	r6, r5
 800af12:	3210      	adds	r2, #16
 800af14:	fa2f f595 	sxtb16	r5, r5, ror #8
 800af18:	fb26 0008 	smlad	r0, r6, r8, r0
 800af1c:	fb25 000c 	smlad	r0, r5, ip, r0
 800af20:	fb26 330e 	smlad	r3, r6, lr, r3
 800af24:	fb25 3307 	smlad	r3, r5, r7, r3
 800af28:	f85b 500a 	ldr.w	r5, [fp, sl]
 800af2c:	fa2f f685 	sxtb16	r6, r5
 800af30:	fa2f f595 	sxtb16	r5, r5, ror #8
 800af34:	fb26 4408 	smlad	r4, r6, r8, r4
 800af38:	fb26 110e 	smlad	r1, r6, lr, r1
 800af3c:	fb25 440c 	smlad	r4, r5, ip, r4
 800af40:	fb25 1107 	smlad	r1, r5, r7, r1
 800af44:	45cb      	cmp	fp, r9
 800af46:	d1d9      	bne.n	800aefc <st_sssa8_ch_nn_mat_mult_nt_t+0x2f4>
 800af48:	9a01      	ldr	r2, [sp, #4]
 800af4a:	9d05      	ldr	r5, [sp, #20]
 800af4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800af50:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800af54:	9d06      	ldr	r5, [sp, #24]
 800af56:	9201      	str	r2, [sp, #4]
 800af58:	f10a 0204 	add.w	r2, sl, #4
 800af5c:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800af60:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800af62:	4552      	cmp	r2, sl
 800af64:	dd58      	ble.n	800b018 <st_sssa8_ch_nn_mat_mult_nt_t+0x410>
 800af66:	9f01      	ldr	r7, [sp, #4]
 800af68:	f999 2000 	ldrsb.w	r2, [r9]
 800af6c:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 800af70:	f9b7 6000 	ldrsh.w	r6, [r7]
 800af74:	fb15 3302 	smlabb	r3, r5, r2, r3
 800af78:	fb16 0002 	smlabb	r0, r6, r2, r0
 800af7c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800af7e:	f919 2002 	ldrsb.w	r2, [r9, r2]
 800af82:	fb15 1102 	smlabb	r1, r5, r2, r1
 800af86:	9d42      	ldr	r5, [sp, #264]	; 0x108
 800af88:	fb16 4402 	smlabb	r4, r6, r2, r4
 800af8c:	f10a 0201 	add.w	r2, sl, #1
 800af90:	4295      	cmp	r5, r2
 800af92:	dd3d      	ble.n	800b010 <st_sssa8_ch_nn_mat_mult_nt_t+0x408>
 800af94:	eb09 0205 	add.w	r2, r9, r5
 800af98:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 800af9c:	f992 2001 	ldrsb.w	r2, [r2, #1]
 800afa0:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 800afa4:	fb16 4402 	smlabb	r4, r6, r2, r4
 800afa8:	fb15 1102 	smlabb	r1, r5, r2, r1
 800afac:	f999 2001 	ldrsb.w	r2, [r9, #1]
 800afb0:	fb16 0002 	smlabb	r0, r6, r2, r0
 800afb4:	9e42      	ldr	r6, [sp, #264]	; 0x108
 800afb6:	fb15 3302 	smlabb	r3, r5, r2, r3
 800afba:	f10a 0202 	add.w	r2, sl, #2
 800afbe:	4296      	cmp	r6, r2
 800afc0:	f109 0502 	add.w	r5, r9, #2
 800afc4:	dd24      	ble.n	800b010 <st_sssa8_ch_nn_mat_mult_nt_t+0x408>
 800afc6:	57aa      	ldrsb	r2, [r5, r6]
 800afc8:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 800afcc:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 800afd0:	fb16 4402 	smlabb	r4, r6, r2, r4
 800afd4:	fb15 1102 	smlabb	r1, r5, r2, r1
 800afd8:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800afdc:	fb16 0002 	smlabb	r0, r6, r2, r0
 800afe0:	9e42      	ldr	r6, [sp, #264]	; 0x108
 800afe2:	fb15 3302 	smlabb	r3, r5, r2, r3
 800afe6:	f10a 0203 	add.w	r2, sl, #3
 800afea:	4296      	cmp	r6, r2
 800afec:	f109 0503 	add.w	r5, r9, #3
 800aff0:	dd0e      	ble.n	800b010 <st_sssa8_ch_nn_mat_mult_nt_t+0x408>
 800aff2:	57ad      	ldrsb	r5, [r5, r6]
 800aff4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800aff8:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800affc:	fb12 4405 	smlabb	r4, r2, r5, r4
 800b000:	fb16 1105 	smlabb	r1, r6, r5, r1
 800b004:	f999 5003 	ldrsb.w	r5, [r9, #3]
 800b008:	fb12 0005 	smlabb	r0, r2, r5, r0
 800b00c:	fb16 3305 	smlabb	r3, r6, r5, r3
 800b010:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800b012:	eba2 020a 	sub.w	r2, r2, sl
 800b016:	4491      	add	r9, r2
 800b018:	9a08      	ldr	r2, [sp, #32]
 800b01a:	2a00      	cmp	r2, #0
 800b01c:	f040 80de 	bne.w	800b1dc <st_sssa8_ch_nn_mat_mult_nt_t+0x5d4>
 800b020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b024:	0040      	lsls	r0, r0, #1
 800b026:	0064      	lsls	r4, r4, #1
 800b028:	fb50 5002 	smmla	r0, r0, r2, r5
 800b02c:	fb54 5402 	smmla	r4, r4, r2, r5
 800b030:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b032:	4110      	asrs	r0, r2
 800b034:	f300 0007 	ssat	r0, #8, r0
 800b038:	9d03      	ldr	r5, [sp, #12]
 800b03a:	4114      	asrs	r4, r2
 800b03c:	f805 0c01 	strb.w	r0, [r5, #-1]
 800b040:	f304 0407 	ssat	r4, #8, r4
 800b044:	9a02      	ldr	r2, [sp, #8]
 800b046:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b04a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	f040 80ad 	bne.w	800b1ac <st_sssa8_ch_nn_mat_mult_nt_t+0x5a4>
 800b052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b054:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	0049      	lsls	r1, r1, #1
 800b05a:	fb53 0302 	smmla	r3, r3, r2, r0
 800b05e:	fb51 0102 	smmla	r1, r1, r2, r0
 800b062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b064:	4113      	asrs	r3, r2
 800b066:	f303 0307 	ssat	r3, #8, r3
 800b06a:	9803      	ldr	r0, [sp, #12]
 800b06c:	4111      	asrs	r1, r2
 800b06e:	7003      	strb	r3, [r0, #0]
 800b070:	f301 0107 	ssat	r1, #8, r1
 800b074:	9b02      	ldr	r3, [sp, #8]
 800b076:	7019      	strb	r1, [r3, #0]
 800b078:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800b07a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b07c:	eb09 0b03 	add.w	fp, r9, r3
 800b080:	9b03      	ldr	r3, [sp, #12]
 800b082:	4413      	add	r3, r2
 800b084:	9303      	str	r3, [sp, #12]
 800b086:	9b02      	ldr	r3, [sp, #8]
 800b088:	4413      	add	r3, r2
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	3b01      	subs	r3, #1
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	f47f ae79 	bne.w	800ad88 <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 800b096:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b098:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b09a:	3b01      	subs	r3, #1
 800b09c:	4413      	add	r3, r2
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f040 8214 	bne.w	800b4d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c8>
 800b0a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b0ac:	4413      	add	r3, r2
 800b0ae:	9323      	str	r3, [sp, #140]	; 0x8c
 800b0b0:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800b0b2:	b11b      	cbz	r3, 800b0bc <st_sssa8_ch_nn_mat_mult_nt_t+0x4b4>
 800b0b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b0b6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b0b8:	4413      	add	r3, r2
 800b0ba:	9345      	str	r3, [sp, #276]	; 0x114
 800b0bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0c0:	3204      	adds	r2, #4
 800b0c2:	9221      	str	r2, [sp, #132]	; 0x84
 800b0c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b0c6:	3208      	adds	r2, #8
 800b0c8:	921f      	str	r2, [sp, #124]	; 0x7c
 800b0ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b0cc:	3208      	adds	r2, #8
 800b0ce:	9220      	str	r2, [sp, #128]	; 0x80
 800b0d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b0d2:	3208      	adds	r2, #8
 800b0d4:	9222      	str	r2, [sp, #136]	; 0x88
 800b0d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b0d8:	3302      	adds	r3, #2
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0de:	f47f adf2 	bne.w	800acc6 <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 800b0e2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800b0e4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800b0e6:	085a      	lsrs	r2, r3, #1
 800b0e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0ea:	fb02 3303 	mla	r3, r2, r3, r3
 800b0ee:	4419      	add	r1, r3
 800b0f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b0f2:	912d      	str	r1, [sp, #180]	; 0xb4
 800b0f4:	3201      	adds	r2, #1
 800b0f6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800b0fa:	932e      	str	r3, [sp, #184]	; 0xb8
 800b0fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0fe:	07db      	lsls	r3, r3, #31
 800b100:	d550      	bpl.n	800b1a4 <st_sssa8_ch_nn_mat_mult_nt_t+0x59c>
 800b102:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd4d      	ble.n	800b1a4 <st_sssa8_ch_nn_mat_mult_nt_t+0x59c>
 800b108:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b10a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 800b10e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800b110:	3c01      	subs	r4, #1
 800b112:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 800b116:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800b118:	f8cd e004 	str.w	lr, [sp, #4]
 800b11c:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 800b120:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800b122:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b126:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b128:	f103 4800 	add.w	r8, r3, #2147483648	; 0x80000000
 800b12c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800b12e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b132:	e9dd e142 	ldrd	lr, r1, [sp, #264]	; 0x108
 800b136:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 800b13a:	2200      	movs	r2, #0
 800b13c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b13e:	4610      	mov	r0, r2
 800b140:	f04f 0901 	mov.w	r9, #1
 800b144:	9e01      	ldr	r6, [sp, #4]
 800b146:	f1be 0f00 	cmp.w	lr, #0
 800b14a:	6837      	ldr	r7, [r6, #0]
 800b14c:	dd0d      	ble.n	800b16a <st_sssa8_ch_nn_mat_mult_nt_t+0x562>
 800b14e:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800b150:	eb03 0b0e 	add.w	fp, r3, lr
 800b154:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800b158:	f913 6b01 	ldrsb.w	r6, [r3], #1
 800b15c:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 800b160:	1a76      	subs	r6, r6, r1
 800b162:	455b      	cmp	r3, fp
 800b164:	fb0a 7706 	mla	r7, sl, r6, r7
 800b168:	d1f6      	bne.n	800b158 <st_sssa8_ch_nn_mat_mult_nt_t+0x550>
 800b16a:	f9b8 c000 	ldrsh.w	ip, [r8]
 800b16e:	f1bc 0f15 	cmp.w	ip, #21
 800b172:	f340 82dc 	ble.w	800b72e <st_sssa8_ch_nn_mat_mult_nt_t+0xb26>
 800b176:	f1ac 0a02 	sub.w	sl, ip, #2
 800b17a:	fa09 fa0a 	lsl.w	sl, r9, sl
 800b17e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b182:	682e      	ldr	r6, [r5, #0]
 800b184:	fb57 a606 	smmla	r6, r7, r6, sl
 800b188:	6827      	ldr	r7, [r4, #0]
 800b18a:	fa46 f60c 	asr.w	r6, r6, ip
 800b18e:	443e      	add	r6, r7
 800b190:	f306 0607 	ssat	r6, #8, r6
 800b194:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800b196:	54be      	strb	r6, [r7, r2]
 800b198:	9e41      	ldr	r6, [sp, #260]	; 0x104
 800b19a:	4432      	add	r2, r6
 800b19c:	9e40      	ldr	r6, [sp, #256]	; 0x100
 800b19e:	3001      	adds	r0, #1
 800b1a0:	4286      	cmp	r6, r0
 800b1a2:	d1cf      	bne.n	800b144 <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	b035      	add	sp, #212	; 0xd4
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	3201      	adds	r2, #1
 800b1ae:	d02e      	beq.n	800b20e <st_sssa8_ch_nn_mat_mult_nt_t+0x606>
 800b1b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1b2:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b1b4:	fb53 0302 	smmla	r3, r3, r2, r0
 800b1b8:	fb51 0102 	smmla	r1, r1, r2, r0
 800b1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1be:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b1c0:	3a01      	subs	r2, #1
 800b1c2:	4113      	asrs	r3, r2
 800b1c4:	4403      	add	r3, r0
 800b1c6:	f303 0307 	ssat	r3, #8, r3
 800b1ca:	4111      	asrs	r1, r2
 800b1cc:	9a03      	ldr	r2, [sp, #12]
 800b1ce:	4401      	add	r1, r0
 800b1d0:	7013      	strb	r3, [r2, #0]
 800b1d2:	f301 0207 	ssat	r2, #8, r1
 800b1d6:	9b02      	ldr	r3, [sp, #8]
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	e74d      	b.n	800b078 <st_sssa8_ch_nn_mat_mult_nt_t+0x470>
 800b1dc:	3201      	adds	r2, #1
 800b1de:	d031      	beq.n	800b244 <st_sssa8_ch_nn_mat_mult_nt_t+0x63c>
 800b1e0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b1e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1e4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800b1e6:	fb50 5002 	smmla	r0, r0, r2, r5
 800b1ea:	fb54 5402 	smmla	r4, r4, r2, r5
 800b1ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1f0:	4130      	asrs	r0, r6
 800b1f2:	4410      	add	r0, r2
 800b1f4:	f300 0007 	ssat	r0, #8, r0
 800b1f8:	9d03      	ldr	r5, [sp, #12]
 800b1fa:	4134      	asrs	r4, r6
 800b1fc:	f805 0c01 	strb.w	r0, [r5, #-1]
 800b200:	18a2      	adds	r2, r4, r2
 800b202:	f302 0207 	ssat	r2, #8, r2
 800b206:	9802      	ldr	r0, [sp, #8]
 800b208:	f800 2c01 	strb.w	r2, [r0, #-1]
 800b20c:	e71d      	b.n	800b04a <st_sssa8_ch_nn_mat_mult_nt_t+0x442>
 800b20e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b210:	f1c2 0201 	rsb	r2, r2, #1
 800b214:	4093      	lsls	r3, r2
 800b216:	f303 031f 	ssat	r3, #32, r3
 800b21a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b21c:	fb53 f310 	smmulr	r3, r3, r0
 800b220:	fa01 f202 	lsl.w	r2, r1, r2
 800b224:	f302 021f 	ssat	r2, #32, r2
 800b228:	fb52 f210 	smmulr	r2, r2, r0
 800b22c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b22e:	440b      	add	r3, r1
 800b230:	f303 0307 	ssat	r3, #8, r3
 800b234:	9803      	ldr	r0, [sp, #12]
 800b236:	440a      	add	r2, r1
 800b238:	7003      	strb	r3, [r0, #0]
 800b23a:	f302 0207 	ssat	r2, #8, r2
 800b23e:	9b02      	ldr	r3, [sp, #8]
 800b240:	701a      	strb	r2, [r3, #0]
 800b242:	e719      	b.n	800b078 <st_sssa8_ch_nn_mat_mult_nt_t+0x470>
 800b244:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b246:	fa00 f205 	lsl.w	r2, r0, r5
 800b24a:	f302 021f 	ssat	r2, #32, r2
 800b24e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800b250:	fb52 f216 	smmulr	r2, r2, r6
 800b254:	fa04 f005 	lsl.w	r0, r4, r5
 800b258:	f300 001f 	ssat	r0, #32, r0
 800b25c:	fb50 f016 	smmulr	r0, r0, r6
 800b260:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b262:	4422      	add	r2, r4
 800b264:	f302 0207 	ssat	r2, #8, r2
 800b268:	9d03      	ldr	r5, [sp, #12]
 800b26a:	4420      	add	r0, r4
 800b26c:	f805 2c01 	strb.w	r2, [r5, #-1]
 800b270:	f300 0007 	ssat	r0, #8, r0
 800b274:	9a02      	ldr	r2, [sp, #8]
 800b276:	f802 0c01 	strb.w	r0, [r2, #-1]
 800b27a:	e6e6      	b.n	800b04a <st_sssa8_ch_nn_mat_mult_nt_t+0x442>
 800b27c:	46d9      	mov	r9, fp
 800b27e:	e66f      	b.n	800af60 <st_sssa8_ch_nn_mat_mult_nt_t+0x358>
 800b280:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b282:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b288:	4604      	mov	r4, r0
 800b28a:	4619      	mov	r1, r3
 800b28c:	f04f 0a00 	mov.w	sl, #0
 800b290:	e623      	b.n	800aeda <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 800b292:	2301      	movs	r3, #1
 800b294:	9309      	str	r3, [sp, #36]	; 0x24
 800b296:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f47f ad41 	bne.w	800ad20 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800b29e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2a0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800b2a2:	eb03 0902 	add.w	r9, r3, r2
 800b2a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f340 8292 	ble.w	800b7d2 <st_sssa8_ch_nn_mat_mult_nt_t+0xbca>
 800b2ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b2b0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b2b2:	18d5      	adds	r5, r2, r3
 800b2b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	6814      	ldr	r4, [r2, #0]
 800b2ba:	6808      	ldr	r0, [r1, #0]
 800b2bc:	ea4f 2634 	mov.w	r6, r4, ror #8
 800b2c0:	fa2f f484 	sxtb16	r4, r4
 800b2c4:	601c      	str	r4, [r3, #0]
 800b2c6:	fa2f f486 	sxtb16	r4, r6
 800b2ca:	605c      	str	r4, [r3, #4]
 800b2cc:	ea4f 2430 	mov.w	r4, r0, ror #8
 800b2d0:	fa2f f080 	sxtb16	r0, r0
 800b2d4:	6098      	str	r0, [r3, #8]
 800b2d6:	fa2f f084 	sxtb16	r0, r4
 800b2da:	60d8      	str	r0, [r3, #12]
 800b2dc:	6854      	ldr	r4, [r2, #4]
 800b2de:	6848      	ldr	r0, [r1, #4]
 800b2e0:	ea4f 2634 	mov.w	r6, r4, ror #8
 800b2e4:	fa2f f484 	sxtb16	r4, r4
 800b2e8:	611c      	str	r4, [r3, #16]
 800b2ea:	fa2f f486 	sxtb16	r4, r6
 800b2ee:	615c      	str	r4, [r3, #20]
 800b2f0:	ea4f 2430 	mov.w	r4, r0, ror #8
 800b2f4:	fa2f f080 	sxtb16	r0, r0
 800b2f8:	6198      	str	r0, [r3, #24]
 800b2fa:	fa2f f084 	sxtb16	r0, r4
 800b2fe:	61d8      	str	r0, [r3, #28]
 800b300:	6894      	ldr	r4, [r2, #8]
 800b302:	6888      	ldr	r0, [r1, #8]
 800b304:	ea4f 2634 	mov.w	r6, r4, ror #8
 800b308:	fa2f f484 	sxtb16	r4, r4
 800b30c:	621c      	str	r4, [r3, #32]
 800b30e:	fa2f f486 	sxtb16	r4, r6
 800b312:	625c      	str	r4, [r3, #36]	; 0x24
 800b314:	ea4f 2430 	mov.w	r4, r0, ror #8
 800b318:	fa2f f080 	sxtb16	r0, r0
 800b31c:	6298      	str	r0, [r3, #40]	; 0x28
 800b31e:	fa2f f084 	sxtb16	r0, r4
 800b322:	62d8      	str	r0, [r3, #44]	; 0x2c
 800b324:	68d4      	ldr	r4, [r2, #12]
 800b326:	68c8      	ldr	r0, [r1, #12]
 800b328:	3210      	adds	r2, #16
 800b32a:	42aa      	cmp	r2, r5
 800b32c:	ea4f 2634 	mov.w	r6, r4, ror #8
 800b330:	f101 0110 	add.w	r1, r1, #16
 800b334:	fa2f f484 	sxtb16	r4, r4
 800b338:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800b33c:	f843 4c10 	str.w	r4, [r3, #-16]
 800b340:	fa2f f486 	sxtb16	r4, r6
 800b344:	f843 4c0c 	str.w	r4, [r3, #-12]
 800b348:	ea4f 2430 	mov.w	r4, r0, ror #8
 800b34c:	fa2f f080 	sxtb16	r0, r0
 800b350:	f843 0c08 	str.w	r0, [r3, #-8]
 800b354:	fa2f f084 	sxtb16	r0, r4
 800b358:	f843 0c04 	str.w	r0, [r3, #-4]
 800b35c:	d1ac      	bne.n	800b2b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x6b0>
 800b35e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b360:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b362:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b364:	4499      	add	r9, r3
 800b366:	1857      	adds	r7, r2, r1
 800b368:	469c      	mov	ip, r3
 800b36a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800b36c:	3b03      	subs	r3, #3
 800b36e:	4563      	cmp	r3, ip
 800b370:	bfd8      	it	le
 800b372:	462e      	movle	r6, r5
 800b374:	dd2f      	ble.n	800b3d6 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ce>
 800b376:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b378:	eba3 030c 	sub.w	r3, r3, ip
 800b37c:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800b380:	f108 0e01 	add.w	lr, r8, #1
 800b384:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 800b388:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 800b38c:	463b      	mov	r3, r7
 800b38e:	464c      	mov	r4, r9
 800b390:	f855 1b04 	ldr.w	r1, [r5], #4
 800b394:	f854 2b04 	ldr.w	r2, [r4], #4
 800b398:	42b5      	cmp	r5, r6
 800b39a:	ea4f 2031 	mov.w	r0, r1, ror #8
 800b39e:	f103 0310 	add.w	r3, r3, #16
 800b3a2:	fa2f f181 	sxtb16	r1, r1
 800b3a6:	f843 1c10 	str.w	r1, [r3, #-16]
 800b3aa:	fa2f f180 	sxtb16	r1, r0
 800b3ae:	f843 1c0c 	str.w	r1, [r3, #-12]
 800b3b2:	ea4f 2132 	mov.w	r1, r2, ror #8
 800b3b6:	fa2f f282 	sxtb16	r2, r2
 800b3ba:	f843 2c08 	str.w	r2, [r3, #-8]
 800b3be:	fa2f f281 	sxtb16	r2, r1
 800b3c2:	f843 2c04 	str.w	r2, [r3, #-4]
 800b3c6:	d1e3      	bne.n	800b390 <st_sssa8_ch_nn_mat_mult_nt_t+0x788>
 800b3c8:	f10c 0304 	add.w	r3, ip, #4
 800b3cc:	44d1      	add	r9, sl
 800b3ce:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800b3d2:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 800b3d6:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800b3d8:	4563      	cmp	r3, ip
 800b3da:	f77f aca1 	ble.w	800ad20 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f996 3000 	ldrsb.w	r3, [r6]
 800b3e4:	803b      	strh	r3, [r7, #0]
 800b3e6:	f999 3000 	ldrsb.w	r3, [r9]
 800b3ea:	807b      	strh	r3, [r7, #2]
 800b3ec:	f10c 0301 	add.w	r3, ip, #1
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	f77f ac95 	ble.w	800ad20 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800b3f6:	f996 3001 	ldrsb.w	r3, [r6, #1]
 800b3fa:	80bb      	strh	r3, [r7, #4]
 800b3fc:	f999 3001 	ldrsb.w	r3, [r9, #1]
 800b400:	80fb      	strh	r3, [r7, #6]
 800b402:	f10c 0302 	add.w	r3, ip, #2
 800b406:	429a      	cmp	r2, r3
 800b408:	f77f ac8a 	ble.w	800ad20 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800b40c:	f996 3002 	ldrsb.w	r3, [r6, #2]
 800b410:	813b      	strh	r3, [r7, #8]
 800b412:	f10c 0c03 	add.w	ip, ip, #3
 800b416:	f999 3002 	ldrsb.w	r3, [r9, #2]
 800b41a:	817b      	strh	r3, [r7, #10]
 800b41c:	4594      	cmp	ip, r2
 800b41e:	f6bf ac7f 	bge.w	800ad20 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800b422:	f996 3003 	ldrsb.w	r3, [r6, #3]
 800b426:	81bb      	strh	r3, [r7, #12]
 800b428:	f999 3003 	ldrsb.w	r3, [r9, #3]
 800b42c:	81fb      	strh	r3, [r7, #14]
 800b42e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b430:	2b00      	cmp	r3, #0
 800b432:	f43f ac79 	beq.w	800ad28 <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 800b436:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800b438:	2800      	cmp	r0, #0
 800b43a:	f000 81be 	beq.w	800b7ba <st_sssa8_ch_nn_mat_mult_nt_t+0xbb2>
 800b43e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b440:	2300      	movs	r3, #0
 800b442:	f102 0110 	add.w	r1, r2, #16
 800b446:	461a      	mov	r2, r3
 800b448:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 800b44c:	1b1b      	subs	r3, r3, r4
 800b44e:	f931 4c08 	ldrsh.w	r4, [r1, #-8]
 800b452:	1b12      	subs	r2, r2, r4
 800b454:	f931 4c0e 	ldrsh.w	r4, [r1, #-14]
 800b458:	1b1b      	subs	r3, r3, r4
 800b45a:	f931 4c06 	ldrsh.w	r4, [r1, #-6]
 800b45e:	1b12      	subs	r2, r2, r4
 800b460:	f931 4c0c 	ldrsh.w	r4, [r1, #-12]
 800b464:	1b1b      	subs	r3, r3, r4
 800b466:	f931 4c04 	ldrsh.w	r4, [r1, #-4]
 800b46a:	1b12      	subs	r2, r2, r4
 800b46c:	f931 4c0a 	ldrsh.w	r4, [r1, #-10]
 800b470:	1b1b      	subs	r3, r3, r4
 800b472:	f931 4c02 	ldrsh.w	r4, [r1, #-2]
 800b476:	3801      	subs	r0, #1
 800b478:	eba2 0204 	sub.w	r2, r2, r4
 800b47c:	f101 0110 	add.w	r1, r1, #16
 800b480:	d1e2      	bne.n	800b448 <st_sssa8_ch_nn_mat_mult_nt_t+0x840>
 800b482:	9945      	ldr	r1, [sp, #276]	; 0x114
 800b484:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800b486:	4401      	add	r1, r0
 800b488:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 800b48a:	b1bc      	cbz	r4, 800b4bc <st_sssa8_ch_nn_mat_mult_nt_t+0x8b4>
 800b48c:	f9b1 0000 	ldrsh.w	r0, [r1]
 800b490:	1a1b      	subs	r3, r3, r0
 800b492:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 800b496:	2c01      	cmp	r4, #1
 800b498:	eba2 0200 	sub.w	r2, r2, r0
 800b49c:	d00e      	beq.n	800b4bc <st_sssa8_ch_nn_mat_mult_nt_t+0x8b4>
 800b49e:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 800b4a2:	1a1b      	subs	r3, r3, r0
 800b4a4:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 800b4a8:	2c02      	cmp	r4, #2
 800b4aa:	eba2 0200 	sub.w	r2, r2, r0
 800b4ae:	d005      	beq.n	800b4bc <st_sssa8_ch_nn_mat_mult_nt_t+0x8b4>
 800b4b0:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 800b4b4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800b4b8:	1a1b      	subs	r3, r3, r0
 800b4ba:	1a52      	subs	r2, r2, r1
 800b4bc:	9943      	ldr	r1, [sp, #268]	; 0x10c
 800b4be:	fb03 f101 	mul.w	r1, r3, r1
 800b4c2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b4c4:	fb03 f202 	mul.w	r2, r3, r2
 800b4c8:	e430      	b.n	800ad2c <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	9308      	str	r3, [sp, #32]
 800b4ce:	e419      	b.n	800ad04 <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 800b4d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f340 8177 	ble.w	800b7c6 <st_sssa8_ch_nn_mat_mult_nt_t+0xbbe>
 800b4d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4da:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 800b4de:	eb0b 0003 	add.w	r0, fp, r3
 800b4e2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b4e4:	f8db 1000 	ldr.w	r1, [fp]
 800b4e8:	fa2f f481 	sxtb16	r4, r1
 800b4ec:	fa2f f191 	sxtb16	r1, r1, ror #8
 800b4f0:	681e      	ldr	r6, [r3, #0]
 800b4f2:	fb24 5506 	smlad	r5, r4, r6, r5
 800b4f6:	685e      	ldr	r6, [r3, #4]
 800b4f8:	fb21 5606 	smlad	r6, r1, r6, r5
 800b4fc:	689d      	ldr	r5, [r3, #8]
 800b4fe:	fb24 2205 	smlad	r2, r4, r5, r2
 800b502:	68dc      	ldr	r4, [r3, #12]
 800b504:	fb21 2104 	smlad	r1, r1, r4, r2
 800b508:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b50c:	fa2f f482 	sxtb16	r4, r2
 800b510:	fa2f f292 	sxtb16	r2, r2, ror #8
 800b514:	691d      	ldr	r5, [r3, #16]
 800b516:	fb24 6505 	smlad	r5, r4, r5, r6
 800b51a:	695e      	ldr	r6, [r3, #20]
 800b51c:	fb22 5606 	smlad	r6, r2, r6, r5
 800b520:	699d      	ldr	r5, [r3, #24]
 800b522:	fb24 1105 	smlad	r1, r4, r5, r1
 800b526:	69dc      	ldr	r4, [r3, #28]
 800b528:	fb22 1104 	smlad	r1, r2, r4, r1
 800b52c:	f8db 2008 	ldr.w	r2, [fp, #8]
 800b530:	fa2f f482 	sxtb16	r4, r2
 800b534:	fa2f f292 	sxtb16	r2, r2, ror #8
 800b538:	6a1d      	ldr	r5, [r3, #32]
 800b53a:	fb24 6505 	smlad	r5, r4, r5, r6
 800b53e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800b540:	fb22 5606 	smlad	r6, r2, r6, r5
 800b544:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800b546:	fb24 1105 	smlad	r1, r4, r5, r1
 800b54a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b54c:	fb22 1104 	smlad	r1, r2, r4, r1
 800b550:	f8db 200c 	ldr.w	r2, [fp, #12]
 800b554:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800b556:	f8d3 e034 	ldr.w	lr, [r3, #52]	; 0x34
 800b55a:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 800b55e:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800b560:	fa2f f482 	sxtb16	r4, r2
 800b564:	f10b 0b10 	add.w	fp, fp, #16
 800b568:	3340      	adds	r3, #64	; 0x40
 800b56a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800b56e:	fb24 6505 	smlad	r5, r4, r5, r6
 800b572:	fb22 550e 	smlad	r5, r2, lr, r5
 800b576:	fb24 110c 	smlad	r1, r4, ip, r1
 800b57a:	fb22 1207 	smlad	r2, r2, r7, r1
 800b57e:	4583      	cmp	fp, r0
 800b580:	d1b0      	bne.n	800b4e4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8dc>
 800b582:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 800b586:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b588:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b58a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b58e:	eb03 0e02 	add.w	lr, r3, r2
 800b592:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800b594:	3b03      	subs	r3, #3
 800b596:	4543      	cmp	r3, r8
 800b598:	f340 8113 	ble.w	800b7c2 <st_sssa8_ch_nn_mat_mult_nt_t+0xbba>
 800b59c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b59e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b5a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b5a2:	f8cd e008 	str.w	lr, [sp, #8]
 800b5a6:	eba3 0a08 	sub.w	sl, r3, r8
 800b5aa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800b5ae:	f10a 0901 	add.w	r9, sl, #1
 800b5b2:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 800b5b6:	4673      	mov	r3, lr
 800b5b8:	681c      	ldr	r4, [r3, #0]
 800b5ba:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800b5be:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800b5c2:	68df      	ldr	r7, [r3, #12]
 800b5c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5c8:	fa2f f182 	sxtb16	r1, r2
 800b5cc:	3310      	adds	r3, #16
 800b5ce:	fa2f f292 	sxtb16	r2, r2, ror #8
 800b5d2:	fb21 6604 	smlad	r6, r1, r4, r6
 800b5d6:	fb22 660b 	smlad	r6, r2, fp, r6
 800b5da:	fb21 550e 	smlad	r5, r1, lr, r5
 800b5de:	fb22 5507 	smlad	r5, r2, r7, r5
 800b5e2:	4560      	cmp	r0, ip
 800b5e4:	d1e8      	bne.n	800b5b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x9b0>
 800b5e6:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b5ea:	950b      	str	r5, [sp, #44]	; 0x2c
 800b5ec:	f108 0804 	add.w	r8, r8, #4
 800b5f0:	960c      	str	r6, [sp, #48]	; 0x30
 800b5f2:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 800b5f6:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 800b5fa:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800b5fc:	4543      	cmp	r3, r8
 800b5fe:	dd40      	ble.n	800b682 <st_sssa8_ch_nn_mat_mult_nt_t+0xa7a>
 800b600:	f99c 3000 	ldrsb.w	r3, [ip]
 800b604:	f8be 2000 	ldrh.w	r2, [lr]
 800b608:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b60a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b60c:	fb12 1103 	smlabb	r1, r2, r3, r1
 800b610:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b614:	910c      	str	r1, [sp, #48]	; 0x30
 800b616:	fb12 0003 	smlabb	r0, r2, r3, r0
 800b61a:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800b61c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b61e:	f108 0301 	add.w	r3, r8, #1
 800b622:	429a      	cmp	r2, r3
 800b624:	dd2d      	ble.n	800b682 <st_sssa8_ch_nn_mat_mult_nt_t+0xa7a>
 800b626:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 800b62a:	f8be 2004 	ldrh.w	r2, [lr, #4]
 800b62e:	fb12 1103 	smlabb	r1, r2, r3, r1
 800b632:	f8be 2006 	ldrh.w	r2, [lr, #6]
 800b636:	910c      	str	r1, [sp, #48]	; 0x30
 800b638:	fb12 0003 	smlabb	r0, r2, r3, r0
 800b63c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800b63e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b640:	f108 0302 	add.w	r3, r8, #2
 800b644:	429a      	cmp	r2, r3
 800b646:	dd1c      	ble.n	800b682 <st_sssa8_ch_nn_mat_mult_nt_t+0xa7a>
 800b648:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800b64c:	f8be 2008 	ldrh.w	r2, [lr, #8]
 800b650:	fb12 1103 	smlabb	r1, r2, r3, r1
 800b654:	f8be 200a 	ldrh.w	r2, [lr, #10]
 800b658:	910c      	str	r1, [sp, #48]	; 0x30
 800b65a:	fb12 0003 	smlabb	r0, r2, r3, r0
 800b65e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800b660:	900b      	str	r0, [sp, #44]	; 0x2c
 800b662:	f108 0803 	add.w	r8, r8, #3
 800b666:	4543      	cmp	r3, r8
 800b668:	dd0b      	ble.n	800b682 <st_sssa8_ch_nn_mat_mult_nt_t+0xa7a>
 800b66a:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 800b66e:	f8be 200c 	ldrh.w	r2, [lr, #12]
 800b672:	fb12 1203 	smlabb	r2, r2, r3, r1
 800b676:	920c      	str	r2, [sp, #48]	; 0x30
 800b678:	f8be 200e 	ldrh.w	r2, [lr, #14]
 800b67c:	fb12 0303 	smlabb	r3, r2, r3, r0
 800b680:	930b      	str	r3, [sp, #44]	; 0x2c
 800b682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b684:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 800b688:	2915      	cmp	r1, #21
 800b68a:	dd3b      	ble.n	800b704 <st_sssa8_ch_nn_mat_mult_nt_t+0xafc>
 800b68c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b68e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b690:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b694:	1e8a      	subs	r2, r1, #2
 800b696:	2301      	movs	r3, #1
 800b698:	fa03 f202 	lsl.w	r2, r3, r2
 800b69c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b69e:	3901      	subs	r1, #1
 800b6a0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b6a4:	fb54 2303 	smmla	r3, r4, r3, r2
 800b6a8:	410b      	asrs	r3, r1
 800b6aa:	4403      	add	r3, r0
 800b6ac:	f303 0307 	ssat	r3, #8, r3
 800b6b0:	9a01      	ldr	r2, [sp, #4]
 800b6b2:	7013      	strb	r3, [r2, #0]
 800b6b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6b6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b6ba:	2915      	cmp	r1, #21
 800b6bc:	dd12      	ble.n	800b6e4 <st_sssa8_ch_nn_mat_mult_nt_t+0xadc>
 800b6be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b6c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	1e8a      	subs	r2, r1, #2
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	fa03 f202 	lsl.w	r2, r3, r2
 800b6cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6ce:	3901      	subs	r1, #1
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	fb54 2303 	smmla	r3, r4, r3, r2
 800b6d6:	410b      	asrs	r3, r1
 800b6d8:	4403      	add	r3, r0
 800b6da:	f303 0307 	ssat	r3, #8, r3
 800b6de:	9a01      	ldr	r2, [sp, #4]
 800b6e0:	7053      	strb	r3, [r2, #1]
 800b6e2:	e4e1      	b.n	800b0a8 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a0>
 800b6e4:	2900      	cmp	r1, #0
 800b6e6:	dd56      	ble.n	800b796 <st_sssa8_ch_nn_mat_mult_nt_t+0xb8e>
 800b6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b6ec:	0058      	lsls	r0, r3, #1
 800b6ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6f0:	6812      	ldr	r2, [r2, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	fb50 2303 	smmla	r3, r0, r3, r2
 800b6f8:	410b      	asrs	r3, r1
 800b6fa:	f303 0307 	ssat	r3, #8, r3
 800b6fe:	9a01      	ldr	r2, [sp, #4]
 800b700:	7053      	strb	r3, [r2, #1]
 800b702:	e4d1      	b.n	800b0a8 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a0>
 800b704:	2900      	cmp	r1, #0
 800b706:	dd32      	ble.n	800b76e <st_sssa8_ch_nn_mat_mult_nt_t+0xb66>
 800b708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b70a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b70c:	0058      	lsls	r0, r3, #1
 800b70e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b710:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800b714:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b718:	fb50 2303 	smmla	r3, r0, r3, r2
 800b71c:	410b      	asrs	r3, r1
 800b71e:	f303 0307 	ssat	r3, #8, r3
 800b722:	9a01      	ldr	r2, [sp, #4]
 800b724:	7013      	strb	r3, [r2, #0]
 800b726:	e7c5      	b.n	800b6b4 <st_sssa8_ch_nn_mat_mult_nt_t+0xaac>
 800b728:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800b72c:	e4b8      	b.n	800b0a0 <st_sssa8_ch_nn_mat_mult_nt_t+0x498>
 800b72e:	f1bc 0f00 	cmp.w	ip, #0
 800b732:	dd0c      	ble.n	800b74e <st_sssa8_ch_nn_mat_mult_nt_t+0xb46>
 800b734:	682e      	ldr	r6, [r5, #0]
 800b736:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800b73a:	6827      	ldr	r7, [r4, #0]
 800b73c:	fb5a 7706 	smmla	r7, sl, r6, r7
 800b740:	fa47 f60c 	asr.w	r6, r7, ip
 800b744:	f306 0607 	ssat	r6, #8, r6
 800b748:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800b74a:	54be      	strb	r6, [r7, r2]
 800b74c:	e524      	b.n	800b198 <st_sssa8_ch_nn_mat_mult_nt_t+0x590>
 800b74e:	f1cc 0c01 	rsb	ip, ip, #1
 800b752:	fa07 f70c 	lsl.w	r7, r7, ip
 800b756:	f307 071f 	ssat	r7, #32, r7
 800b75a:	682e      	ldr	r6, [r5, #0]
 800b75c:	fb57 f716 	smmulr	r7, r7, r6
 800b760:	6826      	ldr	r6, [r4, #0]
 800b762:	443e      	add	r6, r7
 800b764:	f306 0607 	ssat	r6, #8, r6
 800b768:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800b76a:	54be      	strb	r6, [r7, r2]
 800b76c:	e514      	b.n	800b198 <st_sssa8_ch_nn_mat_mult_nt_t+0x590>
 800b76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b770:	f1c1 0101 	rsb	r1, r1, #1
 800b774:	408a      	lsls	r2, r1
 800b776:	f302 021f 	ssat	r2, #32, r2
 800b77a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b77c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b780:	fb52 f213 	smmulr	r2, r2, r3
 800b784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b786:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b78a:	4413      	add	r3, r2
 800b78c:	f303 0307 	ssat	r3, #8, r3
 800b790:	9a01      	ldr	r2, [sp, #4]
 800b792:	7013      	strb	r3, [r2, #0]
 800b794:	e78e      	b.n	800b6b4 <st_sssa8_ch_nn_mat_mult_nt_t+0xaac>
 800b796:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b798:	f1c1 0101 	rsb	r1, r1, #1
 800b79c:	408a      	lsls	r2, r1
 800b79e:	f302 021f 	ssat	r2, #32, r2
 800b7a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	fb52 f213 	smmulr	r2, r2, r3
 800b7aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f303 0307 	ssat	r3, #8, r3
 800b7b4:	9a01      	ldr	r2, [sp, #4]
 800b7b6:	7053      	strb	r3, [r2, #1]
 800b7b8:	e476      	b.n	800b0a8 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a0>
 800b7ba:	9945      	ldr	r1, [sp, #276]	; 0x114
 800b7bc:	4602      	mov	r2, r0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	e662      	b.n	800b488 <st_sssa8_ch_nn_mat_mult_nt_t+0x880>
 800b7c2:	4684      	mov	ip, r0
 800b7c4:	e719      	b.n	800b5fa <st_sssa8_ch_nn_mat_mult_nt_t+0x9f2>
 800b7c6:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 800b7ca:	4658      	mov	r0, fp
 800b7cc:	f04f 0800 	mov.w	r8, #0
 800b7d0:	e6df      	b.n	800b592 <st_sssa8_ch_nn_mat_mult_nt_t+0x98a>
 800b7d2:	9f45      	ldr	r7, [sp, #276]	; 0x114
 800b7d4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800b7d6:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 800b7da:	e5c6      	b.n	800b36a <st_sssa8_ch_nn_mat_mult_nt_t+0x762>

0800b7dc <st_int8_fill>:
 800b7dc:	078b      	lsls	r3, r1, #30
 800b7de:	468c      	mov	ip, r1
 800b7e0:	d00a      	beq.n	800b7f8 <st_int8_fill+0x1c>
 800b7e2:	b912      	cbnz	r2, 800b7ea <st_int8_fill+0xe>
 800b7e4:	e042      	b.n	800b86c <st_int8_fill+0x90>
 800b7e6:	2a00      	cmp	r2, #0
 800b7e8:	d041      	beq.n	800b86e <st_int8_fill+0x92>
 800b7ea:	f80c 0b01 	strb.w	r0, [ip], #1
 800b7ee:	f01c 0f03 	tst.w	ip, #3
 800b7f2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b7f6:	d1f6      	bne.n	800b7e6 <st_int8_fill+0xa>
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	b2c3      	uxtb	r3, r0
 800b7fc:	0204      	lsls	r4, r0, #8
 800b7fe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800b802:	b2a4      	uxth	r4, r4
 800b804:	431c      	orrs	r4, r3
 800b806:	0403      	lsls	r3, r0, #16
 800b808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b80c:	0911      	lsrs	r1, r2, #4
 800b80e:	ea44 0403 	orr.w	r4, r4, r3
 800b812:	d040      	beq.n	800b896 <st_int8_fill+0xba>
 800b814:	1e4b      	subs	r3, r1, #1
 800b816:	2b04      	cmp	r3, #4
 800b818:	d92a      	bls.n	800b870 <st_int8_fill+0x94>
 800b81a:	f01c 0f07 	tst.w	ip, #7
 800b81e:	d127      	bne.n	800b870 <st_int8_fill+0x94>
 800b820:	f10c 0310 	add.w	r3, ip, #16
 800b824:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800b828:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800b82c:	e943 4404 	strd	r4, r4, [r3, #-16]
 800b830:	e943 4402 	strd	r4, r4, [r3, #-8]
 800b834:	3310      	adds	r3, #16
 800b836:	428b      	cmp	r3, r1
 800b838:	d1f8      	bne.n	800b82c <st_int8_fill+0x50>
 800b83a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800b83e:	44f4      	add	ip, lr
 800b840:	f002 0203 	and.w	r2, r2, #3
 800b844:	b15b      	cbz	r3, 800b85e <st_int8_fill+0x82>
 800b846:	1e59      	subs	r1, r3, #1
 800b848:	f8cc 4000 	str.w	r4, [ip]
 800b84c:	d005      	beq.n	800b85a <st_int8_fill+0x7e>
 800b84e:	2901      	cmp	r1, #1
 800b850:	f8cc 4004 	str.w	r4, [ip, #4]
 800b854:	bf18      	it	ne
 800b856:	f8cc 4008 	strne.w	r4, [ip, #8]
 800b85a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800b85e:	b1ca      	cbz	r2, 800b894 <st_int8_fill+0xb8>
 800b860:	4601      	mov	r1, r0
 800b862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b866:	4660      	mov	r0, ip
 800b868:	f001 bd7a 	b.w	800d360 <memset>
 800b86c:	4770      	bx	lr
 800b86e:	4770      	bx	lr
 800b870:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800b874:	4663      	mov	r3, ip
 800b876:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 800b87a:	601c      	str	r4, [r3, #0]
 800b87c:	605c      	str	r4, [r3, #4]
 800b87e:	609c      	str	r4, [r3, #8]
 800b880:	60dc      	str	r4, [r3, #12]
 800b882:	3310      	adds	r3, #16
 800b884:	4299      	cmp	r1, r3
 800b886:	d1f8      	bne.n	800b87a <st_int8_fill+0x9e>
 800b888:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800b88c:	44f4      	add	ip, lr
 800b88e:	f002 0203 	and.w	r2, r2, #3
 800b892:	e7d7      	b.n	800b844 <st_int8_fill+0x68>
 800b894:	bd10      	pop	{r4, pc}
 800b896:	0893      	lsrs	r3, r2, #2
 800b898:	f002 0203 	and.w	r2, r2, #3
 800b89c:	e7d2      	b.n	800b844 <st_int8_fill+0x68>
 800b89e:	bf00      	nop

0800b8a0 <st_int8_copy>:
 800b8a0:	078b      	lsls	r3, r1, #30
 800b8a2:	d00b      	beq.n	800b8bc <st_int8_copy+0x1c>
 800b8a4:	b912      	cbnz	r2, 800b8ac <st_int8_copy+0xc>
 800b8a6:	e050      	b.n	800b94a <st_int8_copy+0xaa>
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	d04f      	beq.n	800b94c <st_int8_copy+0xac>
 800b8ac:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800b8b0:	f801 3b01 	strb.w	r3, [r1], #1
 800b8b4:	078b      	lsls	r3, r1, #30
 800b8b6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b8ba:	d1f5      	bne.n	800b8a8 <st_int8_copy+0x8>
 800b8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c0:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800b8c4:	d060      	beq.n	800b988 <st_int8_copy+0xe8>
 800b8c6:	ea41 0300 	orr.w	r3, r1, r0
 800b8ca:	075b      	lsls	r3, r3, #29
 800b8cc:	d13f      	bne.n	800b94e <st_int8_copy+0xae>
 800b8ce:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d93b      	bls.n	800b94e <st_int8_copy+0xae>
 800b8d6:	f100 0310 	add.w	r3, r0, #16
 800b8da:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800b8de:	f101 0c10 	add.w	ip, r1, #16
 800b8e2:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800b8e6:	ed13 6b04 	vldr	d6, [r3, #-16]
 800b8ea:	ed13 7b02 	vldr	d7, [r3, #-8]
 800b8ee:	3310      	adds	r3, #16
 800b8f0:	4573      	cmp	r3, lr
 800b8f2:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800b8f6:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800b8fa:	f10c 0c10 	add.w	ip, ip, #16
 800b8fe:	d1f2      	bne.n	800b8e6 <st_int8_copy+0x46>
 800b900:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800b904:	4420      	add	r0, r4
 800b906:	4421      	add	r1, r4
 800b908:	f002 0203 	and.w	r2, r2, #3
 800b90c:	b16b      	cbz	r3, 800b92a <st_int8_copy+0x8a>
 800b90e:	6804      	ldr	r4, [r0, #0]
 800b910:	600c      	str	r4, [r1, #0]
 800b912:	1e5c      	subs	r4, r3, #1
 800b914:	d005      	beq.n	800b922 <st_int8_copy+0x82>
 800b916:	6845      	ldr	r5, [r0, #4]
 800b918:	604d      	str	r5, [r1, #4]
 800b91a:	2c01      	cmp	r4, #1
 800b91c:	bf1c      	itt	ne
 800b91e:	6884      	ldrne	r4, [r0, #8]
 800b920:	608c      	strne	r4, [r1, #8]
 800b922:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b926:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800b92a:	b162      	cbz	r2, 800b946 <st_int8_copy+0xa6>
 800b92c:	f990 3000 	ldrsb.w	r3, [r0]
 800b930:	700b      	strb	r3, [r1, #0]
 800b932:	3a01      	subs	r2, #1
 800b934:	d007      	beq.n	800b946 <st_int8_copy+0xa6>
 800b936:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b93a:	704b      	strb	r3, [r1, #1]
 800b93c:	2a01      	cmp	r2, #1
 800b93e:	bf1c      	itt	ne
 800b940:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800b944:	708b      	strbne	r3, [r1, #2]
 800b946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94a:	4770      	bx	lr
 800b94c:	4770      	bx	lr
 800b94e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800b952:	4684      	mov	ip, r0
 800b954:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800b958:	460b      	mov	r3, r1
 800b95a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800b95e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800b962:	f8dc 500c 	ldr.w	r5, [ip, #12]
 800b966:	f85c 8b10 	ldr.w	r8, [ip], #16
 800b96a:	f8c3 8000 	str.w	r8, [r3]
 800b96e:	605f      	str	r7, [r3, #4]
 800b970:	609e      	str	r6, [r3, #8]
 800b972:	60dd      	str	r5, [r3, #12]
 800b974:	3310      	adds	r3, #16
 800b976:	459e      	cmp	lr, r3
 800b978:	d1ef      	bne.n	800b95a <st_int8_copy+0xba>
 800b97a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800b97e:	4420      	add	r0, r4
 800b980:	4421      	add	r1, r4
 800b982:	f002 0203 	and.w	r2, r2, #3
 800b986:	e7c1      	b.n	800b90c <st_int8_copy+0x6c>
 800b988:	0893      	lsrs	r3, r2, #2
 800b98a:	f002 0203 	and.w	r2, r2, #3
 800b98e:	e7bd      	b.n	800b90c <st_int8_copy+0x6c>

0800b990 <st_int8_reordered_no_shift_zero>:
 800b990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b992:	0897      	lsrs	r7, r2, #2
 800b994:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800b998:	d02e      	beq.n	800b9f8 <st_int8_reordered_no_shift_zero+0x68>
 800b99a:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800b99e:	460c      	mov	r4, r1
 800b9a0:	f850 cb04 	ldr.w	ip, [r0], #4
 800b9a4:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800b9a8:	fa2f fe8e 	sxtb16	lr, lr
 800b9ac:	fade fe03 	ssub16	lr, lr, r3
 800b9b0:	fa2f fc8c 	sxtb16	ip, ip
 800b9b4:	fadc fc03 	ssub16	ip, ip, r3
 800b9b8:	42a8      	cmp	r0, r5
 800b9ba:	f8c4 c000 	str.w	ip, [r4]
 800b9be:	f8c4 e004 	str.w	lr, [r4, #4]
 800b9c2:	f104 0408 	add.w	r4, r4, #8
 800b9c6:	d1eb      	bne.n	800b9a0 <st_int8_reordered_no_shift_zero+0x10>
 800b9c8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b9cc:	f012 0203 	ands.w	r2, r2, #3
 800b9d0:	d011      	beq.n	800b9f6 <st_int8_reordered_no_shift_zero+0x66>
 800b9d2:	f995 3000 	ldrsb.w	r3, [r5]
 800b9d6:	b276      	sxtb	r6, r6
 800b9d8:	1b9b      	subs	r3, r3, r6
 800b9da:	3a01      	subs	r2, #1
 800b9dc:	800b      	strh	r3, [r1, #0]
 800b9de:	d00a      	beq.n	800b9f6 <st_int8_reordered_no_shift_zero+0x66>
 800b9e0:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800b9e4:	2a01      	cmp	r2, #1
 800b9e6:	eba3 0306 	sub.w	r3, r3, r6
 800b9ea:	804b      	strh	r3, [r1, #2]
 800b9ec:	d003      	beq.n	800b9f6 <st_int8_reordered_no_shift_zero+0x66>
 800b9ee:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800b9f2:	1b9e      	subs	r6, r3, r6
 800b9f4:	808e      	strh	r6, [r1, #4]
 800b9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	e7e7      	b.n	800b9cc <st_int8_reordered_no_shift_zero+0x3c>

0800b9fc <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba00:	b09d      	sub	sp, #116	; 0x74
 800ba02:	4683      	mov	fp, r0
 800ba04:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 800ba08:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800ba0a:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 800ba0e:	910c      	str	r1, [sp, #48]	; 0x30
 800ba10:	e9cd 4317 	strd	r4, r3, [sp, #92]	; 0x5c
 800ba14:	441d      	add	r5, r3
 800ba16:	0864      	lsrs	r4, r4, #1
 800ba18:	9216      	str	r2, [sp, #88]	; 0x58
 800ba1a:	9007      	str	r0, [sp, #28]
 800ba1c:	9515      	str	r5, [sp, #84]	; 0x54
 800ba1e:	9419      	str	r4, [sp, #100]	; 0x64
 800ba20:	f000 81cc 	beq.w	800bdbc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c0>
 800ba24:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 800ba28:	4617      	mov	r7, r2
 800ba2a:	1e62      	subs	r2, r4, #1
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800ba30:	960f      	str	r6, [sp, #60]	; 0x3c
 800ba32:	b292      	uxth	r2, r2
 800ba34:	3108      	adds	r1, #8
 800ba36:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba3a:	f1a0 0310 	sub.w	r3, r0, #16
 800ba3e:	910e      	str	r1, [sp, #56]	; 0x38
 800ba40:	4601      	mov	r1, r0
 800ba42:	3803      	subs	r0, #3
 800ba44:	900d      	str	r0, [sp, #52]	; 0x34
 800ba46:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800ba48:	9708      	str	r7, [sp, #32]
 800ba4a:	3004      	adds	r0, #4
 800ba4c:	9002      	str	r0, [sp, #8]
 800ba4e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800ba50:	3004      	adds	r0, #4
 800ba52:	9005      	str	r0, [sp, #20]
 800ba54:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800ba56:	3004      	adds	r0, #4
 800ba58:	9003      	str	r0, [sp, #12]
 800ba5a:	982b      	ldr	r0, [sp, #172]	; 0xac
 800ba5c:	091b      	lsrs	r3, r3, #4
 800ba5e:	3001      	adds	r0, #1
 800ba60:	3301      	adds	r3, #1
 800ba62:	9004      	str	r0, [sp, #16]
 800ba64:	1c68      	adds	r0, r5, #1
 800ba66:	9006      	str	r0, [sp, #24]
 800ba68:	eb04 1043 	add.w	r0, r4, r3, lsl #5
 800ba6c:	9013      	str	r0, [sp, #76]	; 0x4c
 800ba6e:	0198      	lsls	r0, r3, #6
 800ba70:	9010      	str	r0, [sp, #64]	; 0x40
 800ba72:	0118      	lsls	r0, r3, #4
 800ba74:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 800ba78:	9311      	str	r3, [sp, #68]	; 0x44
 800ba7a:	1f0b      	subs	r3, r1, #4
 800ba7c:	9012      	str	r0, [sp, #72]	; 0x48
 800ba7e:	9314      	str	r3, [sp, #80]	; 0x50
 800ba80:	46d9      	mov	r9, fp
 800ba82:	9908      	ldr	r1, [sp, #32]
 800ba84:	9c07      	ldr	r4, [sp, #28]
 800ba86:	680b      	ldr	r3, [r1, #0]
 800ba88:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ba8e:	684a      	ldr	r2, [r1, #4]
 800ba90:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba92:	3108      	adds	r1, #8
 800ba94:	2c0f      	cmp	r4, #15
 800ba96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ba98:	9108      	str	r1, [sp, #32]
 800ba9a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ba9c:	f340 8282 	ble.w	800bfa4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5a8>
 800baa0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800baa2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800baa4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800baa6:	464d      	mov	r5, r9
 800baa8:	f8d4 e000 	ldr.w	lr, [r4]
 800baac:	f8d7 a000 	ldr.w	sl, [r7]
 800bab0:	f8d5 c000 	ldr.w	ip, [r5]
 800bab4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800bab8:	fb2c 330e 	smlad	r3, ip, lr, r3
 800babc:	fb2c 000a 	smlad	r0, ip, sl, r0
 800bac0:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800bac4:	fb28 110a 	smlad	r1, r8, sl, r1
 800bac8:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800bacc:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800bad0:	68aa      	ldr	r2, [r5, #8]
 800bad2:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 800bad6:	fb22 330c 	smlad	r3, r2, ip, r3
 800bada:	fb22 0008 	smlad	r0, r2, r8, r0
 800bade:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800bae2:	fb2b 1808 	smlad	r8, fp, r8, r1
 800bae6:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800baea:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800baee:	692a      	ldr	r2, [r5, #16]
 800baf0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800baf4:	fb22 330c 	smlad	r3, r2, ip, r3
 800baf8:	fb22 000b 	smlad	r0, r2, fp, r0
 800bafc:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800bb00:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800bb04:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800bb08:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800bb0c:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800bb10:	69e9      	ldr	r1, [r5, #28]
 800bb12:	fb28 330c 	smlad	r3, r8, ip, r3
 800bb16:	fb28 000a 	smlad	r0, r8, sl, r0
 800bb1a:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800bb1e:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800bb22:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800bb26:	6939      	ldr	r1, [r7, #16]
 800bb28:	f8d5 8020 	ldr.w	r8, [r5, #32]
 800bb2c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800bb2e:	fb28 330e 	smlad	r3, r8, lr, r3
 800bb32:	fb28 0001 	smlad	r0, r8, r1, r0
 800bb36:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800bb3a:	fb22 a101 	smlad	r1, r2, r1, sl
 800bb3e:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800bb42:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800bb46:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 800bb4a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800bb4c:	fb28 330e 	smlad	r3, r8, lr, r3
 800bb50:	fb28 000a 	smlad	r0, r8, sl, r0
 800bb54:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800bb58:	fb22 120a 	smlad	r2, r2, sl, r1
 800bb5c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800bb60:	f8d7 b018 	ldr.w	fp, [r7, #24]
 800bb64:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800bb68:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800bb6a:	fb28 330e 	smlad	r3, r8, lr, r3
 800bb6e:	fb28 080b 	smlad	r8, r8, fp, r0
 800bb72:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800bb76:	fb21 210b 	smlad	r1, r1, fp, r2
 800bb7a:	69e2      	ldr	r2, [r4, #28]
 800bb7c:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800bb80:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800bb82:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 800bb86:	3420      	adds	r4, #32
 800bb88:	3720      	adds	r7, #32
 800bb8a:	3540      	adds	r5, #64	; 0x40
 800bb8c:	fb20 3302 	smlad	r3, r0, r2, r3
 800bb90:	fb20 800b 	smlad	r0, r0, fp, r8
 800bb94:	fb2c e202 	smlad	r2, ip, r2, lr
 800bb98:	fb2c 110b 	smlad	r1, ip, fp, r1
 800bb9c:	42a6      	cmp	r6, r4
 800bb9e:	d183      	bne.n	800baa8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xac>
 800bba0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bba2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800bba6:	44a9      	add	r9, r5
 800bba8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bbaa:	9501      	str	r5, [sp, #4]
 800bbac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bbae:	45ab      	cmp	fp, r5
 800bbb0:	f280 8201 	bge.w	800bfb6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5ba>
 800bbb4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800bbb6:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bbba:	eba5 050b 	sub.w	r5, r5, fp
 800bbbe:	08ad      	lsrs	r5, r5, #2
 800bbc0:	950b      	str	r5, [sp, #44]	; 0x2c
 800bbc2:	3501      	adds	r5, #1
 800bbc4:	00ee      	lsls	r6, r5, #3
 800bbc6:	950a      	str	r5, [sp, #40]	; 0x28
 800bbc8:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 800bbcc:	9609      	str	r6, [sp, #36]	; 0x24
 800bbce:	464d      	mov	r5, r9
 800bbd0:	f8d4 e000 	ldr.w	lr, [r4]
 800bbd4:	f8dc 7000 	ldr.w	r7, [ip]
 800bbd8:	f8d5 a000 	ldr.w	sl, [r5]
 800bbdc:	686e      	ldr	r6, [r5, #4]
 800bbde:	fb2a 330e 	smlad	r3, sl, lr, r3
 800bbe2:	fb2a 0007 	smlad	r0, sl, r7, r0
 800bbe6:	fb26 220e 	smlad	r2, r6, lr, r2
 800bbea:	fb26 1107 	smlad	r1, r6, r7, r1
 800bbee:	6867      	ldr	r7, [r4, #4]
 800bbf0:	f8dc a004 	ldr.w	sl, [ip, #4]
 800bbf4:	68ae      	ldr	r6, [r5, #8]
 800bbf6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800bbfa:	3408      	adds	r4, #8
 800bbfc:	f10c 0c08 	add.w	ip, ip, #8
 800bc00:	3510      	adds	r5, #16
 800bc02:	fb26 3307 	smlad	r3, r6, r7, r3
 800bc06:	fb26 000a 	smlad	r0, r6, sl, r0
 800bc0a:	fb2e 2207 	smlad	r2, lr, r7, r2
 800bc0e:	fb2e 110a 	smlad	r1, lr, sl, r1
 800bc12:	4544      	cmp	r4, r8
 800bc14:	d1dc      	bne.n	800bbd0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d4>
 800bc16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bc1a:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800bc1e:	9c01      	ldr	r4, [sp, #4]
 800bc20:	442c      	add	r4, r5
 800bc22:	9401      	str	r4, [sp, #4]
 800bc24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bc26:	f10b 0b04 	add.w	fp, fp, #4
 800bc2a:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800bc2e:	9f07      	ldr	r7, [sp, #28]
 800bc30:	455f      	cmp	r7, fp
 800bc32:	dd54      	ble.n	800bcde <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e2>
 800bc34:	f9b8 5000 	ldrsh.w	r5, [r8]
 800bc38:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 800bc3c:	f9b9 6000 	ldrsh.w	r6, [r9]
 800bc40:	fb05 2204 	mla	r2, r5, r4, r2
 800bc44:	fb06 3305 	mla	r3, r6, r5, r3
 800bc48:	9d01      	ldr	r5, [sp, #4]
 800bc4a:	f9b5 5000 	ldrsh.w	r5, [r5]
 800bc4e:	fb05 1104 	mla	r1, r5, r4, r1
 800bc52:	f10b 0401 	add.w	r4, fp, #1
 800bc56:	42a7      	cmp	r7, r4
 800bc58:	fb06 0005 	mla	r0, r6, r5, r0
 800bc5c:	dd3a      	ble.n	800bcd4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 800bc5e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800bc62:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800bc66:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800bc6a:	fb05 2204 	mla	r2, r5, r4, r2
 800bc6e:	fb06 3305 	mla	r3, r6, r5, r3
 800bc72:	9d01      	ldr	r5, [sp, #4]
 800bc74:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 800bc78:	fb05 1104 	mla	r1, r5, r4, r1
 800bc7c:	f10b 0402 	add.w	r4, fp, #2
 800bc80:	42a7      	cmp	r7, r4
 800bc82:	fb06 0005 	mla	r0, r6, r5, r0
 800bc86:	dd25      	ble.n	800bcd4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 800bc88:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800bc8c:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800bc90:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800bc94:	fb05 2204 	mla	r2, r5, r4, r2
 800bc98:	fb06 3305 	mla	r3, r6, r5, r3
 800bc9c:	9d01      	ldr	r5, [sp, #4]
 800bc9e:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 800bca2:	fb05 1104 	mla	r1, r5, r4, r1
 800bca6:	f10b 0403 	add.w	r4, fp, #3
 800bcaa:	42a7      	cmp	r7, r4
 800bcac:	fb06 0005 	mla	r0, r6, r5, r0
 800bcb0:	dd10      	ble.n	800bcd4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 800bcb2:	9c01      	ldr	r4, [sp, #4]
 800bcb4:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 800bcb8:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 800bcbc:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800bcc0:	fb04 3305 	mla	r3, r4, r5, r3
 800bcc4:	fb04 0006 	mla	r0, r4, r6, r0
 800bcc8:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800bccc:	fb05 2204 	mla	r2, r5, r4, r2
 800bcd0:	fb06 1104 	mla	r1, r6, r4, r1
 800bcd4:	9c07      	ldr	r4, [sp, #28]
 800bcd6:	eba4 0b0b 	sub.w	fp, r4, fp
 800bcda:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800bcde:	9c02      	ldr	r4, [sp, #8]
 800bce0:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800bce4:	2c15      	cmp	r4, #21
 800bce6:	f340 80e4 	ble.w	800beb2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b6>
 800bcea:	9d03      	ldr	r5, [sp, #12]
 800bcec:	1ea6      	subs	r6, r4, #2
 800bcee:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800bcf2:	2501      	movs	r5, #1
 800bcf4:	fa05 f606 	lsl.w	r6, r5, r6
 800bcf8:	9d05      	ldr	r5, [sp, #20]
 800bcfa:	3c01      	subs	r4, #1
 800bcfc:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800bd00:	fb53 6305 	smmla	r3, r3, r5, r6
 800bd04:	4123      	asrs	r3, r4
 800bd06:	fb50 6005 	smmla	r0, r0, r5, r6
 800bd0a:	443b      	add	r3, r7
 800bd0c:	f303 0307 	ssat	r3, #8, r3
 800bd10:	4120      	asrs	r0, r4
 800bd12:	9c04      	ldr	r4, [sp, #16]
 800bd14:	4438      	add	r0, r7
 800bd16:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bd1a:	f300 0007 	ssat	r0, #8, r0
 800bd1e:	9b06      	ldr	r3, [sp, #24]
 800bd20:	f803 0c01 	strb.w	r0, [r3, #-1]
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800bd2a:	2b15      	cmp	r3, #21
 800bd2c:	f340 80e2 	ble.w	800bef4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4f8>
 800bd30:	9803      	ldr	r0, [sp, #12]
 800bd32:	1e9c      	subs	r4, r3, #2
 800bd34:	6805      	ldr	r5, [r0, #0]
 800bd36:	2001      	movs	r0, #1
 800bd38:	fa00 f404 	lsl.w	r4, r0, r4
 800bd3c:	9805      	ldr	r0, [sp, #20]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	6800      	ldr	r0, [r0, #0]
 800bd42:	fb52 4200 	smmla	r2, r2, r0, r4
 800bd46:	411a      	asrs	r2, r3
 800bd48:	fb51 4100 	smmla	r1, r1, r0, r4
 800bd4c:	442a      	add	r2, r5
 800bd4e:	f302 0207 	ssat	r2, #8, r2
 800bd52:	4119      	asrs	r1, r3
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	4429      	add	r1, r5
 800bd58:	701a      	strb	r2, [r3, #0]
 800bd5a:	f301 0107 	ssat	r1, #8, r1
 800bd5e:	9b06      	ldr	r3, [sp, #24]
 800bd60:	7019      	strb	r1, [r3, #0]
 800bd62:	9a05      	ldr	r2, [sp, #20]
 800bd64:	9b02      	ldr	r3, [sp, #8]
 800bd66:	3208      	adds	r2, #8
 800bd68:	9205      	str	r2, [sp, #20]
 800bd6a:	9a03      	ldr	r2, [sp, #12]
 800bd6c:	3208      	adds	r2, #8
 800bd6e:	9203      	str	r2, [sp, #12]
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	3202      	adds	r2, #2
 800bd74:	9204      	str	r2, [sp, #16]
 800bd76:	9a06      	ldr	r2, [sp, #24]
 800bd78:	3202      	adds	r2, #2
 800bd7a:	9206      	str	r2, [sp, #24]
 800bd7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4293      	cmp	r3, r2
 800bd82:	9302      	str	r3, [sp, #8]
 800bd84:	f47f ae7d 	bne.w	800ba82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 800bd88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd8a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800bd8c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bd90:	9229      	str	r2, [sp, #164]	; 0xa4
 800bd92:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bd94:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bd98:	922a      	str	r2, [sp, #168]	; 0xa8
 800bd9a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800bd9c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800bda0:	922b      	str	r2, [sp, #172]	; 0xac
 800bda2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bda4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800bda8:	9215      	str	r2, [sp, #84]	; 0x54
 800bdaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bdac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bdb0:	9216      	str	r2, [sp, #88]	; 0x58
 800bdb2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800bdb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdb8:	46cb      	mov	fp, r9
 800bdba:	9328      	str	r3, [sp, #160]	; 0xa0
 800bdbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdbe:	07db      	lsls	r3, r3, #31
 800bdc0:	d56e      	bpl.n	800bea0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 800bdc2:	9a07      	ldr	r2, [sp, #28]
 800bdc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bdc6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	0896      	lsrs	r6, r2, #2
 800bdcc:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 800bdd0:	f000 812f 	beq.w	800c032 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x636>
 800bdd4:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 800bdd8:	463c      	mov	r4, r7
 800bdda:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 800bdde:	461a      	mov	r2, r3
 800bde0:	f8db 5000 	ldr.w	r5, [fp]
 800bde4:	f8db 1004 	ldr.w	r1, [fp, #4]
 800bde8:	f8d0 e000 	ldr.w	lr, [r0]
 800bdec:	f10b 0b08 	add.w	fp, fp, #8
 800bdf0:	fb25 330e 	smlad	r3, r5, lr, r3
 800bdf4:	f8d4 e000 	ldr.w	lr, [r4]
 800bdf8:	fb25 220e 	smlad	r2, r5, lr, r2
 800bdfc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800be00:	6865      	ldr	r5, [r4, #4]
 800be02:	3008      	adds	r0, #8
 800be04:	3408      	adds	r4, #8
 800be06:	fb21 330e 	smlad	r3, r1, lr, r3
 800be0a:	fb21 2205 	smlad	r2, r1, r5, r2
 800be0e:	45b3      	cmp	fp, r6
 800be10:	d1e6      	bne.n	800bde0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e4>
 800be12:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be14:	4461      	add	r1, ip
 800be16:	4467      	add	r7, ip
 800be18:	910c      	str	r1, [sp, #48]	; 0x30
 800be1a:	9907      	ldr	r1, [sp, #28]
 800be1c:	f011 0103 	ands.w	r1, r1, #3
 800be20:	d01d      	beq.n	800be5e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 800be22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be24:	f9b6 0000 	ldrsh.w	r0, [r6]
 800be28:	882c      	ldrh	r4, [r5, #0]
 800be2a:	3901      	subs	r1, #1
 800be2c:	fb14 3300 	smlabb	r3, r4, r0, r3
 800be30:	883c      	ldrh	r4, [r7, #0]
 800be32:	b289      	uxth	r1, r1
 800be34:	fb14 2200 	smlabb	r2, r4, r0, r2
 800be38:	b189      	cbz	r1, 800be5e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 800be3a:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 800be3e:	886c      	ldrh	r4, [r5, #2]
 800be40:	fb14 3300 	smlabb	r3, r4, r0, r3
 800be44:	887c      	ldrh	r4, [r7, #2]
 800be46:	2901      	cmp	r1, #1
 800be48:	fb14 2200 	smlabb	r2, r4, r0, r2
 800be4c:	d007      	beq.n	800be5e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 800be4e:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800be52:	88a8      	ldrh	r0, [r5, #4]
 800be54:	fb11 3300 	smlabb	r3, r1, r0, r3
 800be58:	88b8      	ldrh	r0, [r7, #4]
 800be5a:	fb11 2200 	smlabb	r2, r1, r0, r2
 800be5e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800be60:	f9b1 1000 	ldrsh.w	r1, [r1]
 800be64:	2915      	cmp	r1, #21
 800be66:	f340 80a8 	ble.w	800bfba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5be>
 800be6a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800be6c:	6804      	ldr	r4, [r0, #0]
 800be6e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800be70:	1e8d      	subs	r5, r1, #2
 800be72:	2601      	movs	r6, #1
 800be74:	3901      	subs	r1, #1
 800be76:	6800      	ldr	r0, [r0, #0]
 800be78:	40ae      	lsls	r6, r5
 800be7a:	fb53 6500 	smmla	r5, r3, r0, r6
 800be7e:	fb52 6300 	smmla	r3, r2, r0, r6
 800be82:	fa45 f201 	asr.w	r2, r5, r1
 800be86:	4422      	add	r2, r4
 800be88:	f302 0207 	ssat	r2, #8, r2
 800be8c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800be8e:	410b      	asrs	r3, r1
 800be90:	4423      	add	r3, r4
 800be92:	f800 2b01 	strb.w	r2, [r0], #1
 800be96:	f303 0307 	ssat	r3, #8, r3
 800be9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800be9c:	902b      	str	r0, [sp, #172]	; 0xac
 800be9e:	7013      	strb	r3, [r2, #0]
 800bea0:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 800bea4:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 800bea8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800beaa:	4418      	add	r0, r3
 800beac:	b01d      	add	sp, #116	; 0x74
 800beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb2:	2c00      	cmp	r4, #0
 800beb4:	dd36      	ble.n	800bf24 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x528>
 800beb6:	9d05      	ldr	r5, [sp, #20]
 800beb8:	9e03      	ldr	r6, [sp, #12]
 800beba:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800bebe:	f856 6c04 	ldr.w	r6, [r6, #-4]
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	0040      	lsls	r0, r0, #1
 800bec6:	fb53 6305 	smmla	r3, r3, r5, r6
 800beca:	fb50 6005 	smmla	r0, r0, r5, r6
 800bece:	4123      	asrs	r3, r4
 800bed0:	f303 0307 	ssat	r3, #8, r3
 800bed4:	9d04      	ldr	r5, [sp, #16]
 800bed6:	fa40 f404 	asr.w	r4, r0, r4
 800beda:	f805 3c01 	strb.w	r3, [r5, #-1]
 800bede:	f304 0407 	ssat	r4, #8, r4
 800bee2:	9b06      	ldr	r3, [sp, #24]
 800bee4:	f803 4c01 	strb.w	r4, [r3, #-1]
 800bee8:	9b02      	ldr	r3, [sp, #8]
 800beea:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800beee:	2b15      	cmp	r3, #21
 800bef0:	f73f af1e 	bgt.w	800bd30 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x334>
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	dd37      	ble.n	800bf68 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56c>
 800bef8:	9805      	ldr	r0, [sp, #20]
 800befa:	9c03      	ldr	r4, [sp, #12]
 800befc:	6800      	ldr	r0, [r0, #0]
 800befe:	6824      	ldr	r4, [r4, #0]
 800bf00:	0052      	lsls	r2, r2, #1
 800bf02:	0049      	lsls	r1, r1, #1
 800bf04:	fb52 4200 	smmla	r2, r2, r0, r4
 800bf08:	fb51 4100 	smmla	r1, r1, r0, r4
 800bf0c:	411a      	asrs	r2, r3
 800bf0e:	f302 0207 	ssat	r2, #8, r2
 800bf12:	9804      	ldr	r0, [sp, #16]
 800bf14:	fa41 f303 	asr.w	r3, r1, r3
 800bf18:	7002      	strb	r2, [r0, #0]
 800bf1a:	f303 0307 	ssat	r3, #8, r3
 800bf1e:	9a06      	ldr	r2, [sp, #24]
 800bf20:	7013      	strb	r3, [r2, #0]
 800bf22:	e71e      	b.n	800bd62 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 800bf24:	f1c4 0401 	rsb	r4, r4, #1
 800bf28:	fa03 f504 	lsl.w	r5, r3, r4
 800bf2c:	f305 051f 	ssat	r5, #32, r5
 800bf30:	9b05      	ldr	r3, [sp, #20]
 800bf32:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800bf36:	fb55 f516 	smmulr	r5, r5, r6
 800bf3a:	40a0      	lsls	r0, r4
 800bf3c:	f300 001f 	ssat	r0, #32, r0
 800bf40:	fb50 f016 	smmulr	r0, r0, r6
 800bf44:	9c03      	ldr	r4, [sp, #12]
 800bf46:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bf4a:	442b      	add	r3, r5
 800bf4c:	f303 0307 	ssat	r3, #8, r3
 800bf50:	9d04      	ldr	r5, [sp, #16]
 800bf52:	f805 3c01 	strb.w	r3, [r5, #-1]
 800bf56:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bf5a:	4403      	add	r3, r0
 800bf5c:	f303 0307 	ssat	r3, #8, r3
 800bf60:	9806      	ldr	r0, [sp, #24]
 800bf62:	f800 3c01 	strb.w	r3, [r0, #-1]
 800bf66:	e6dd      	b.n	800bd24 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x328>
 800bf68:	f1c3 0301 	rsb	r3, r3, #1
 800bf6c:	fa02 f003 	lsl.w	r0, r2, r3
 800bf70:	f300 001f 	ssat	r0, #32, r0
 800bf74:	9a05      	ldr	r2, [sp, #20]
 800bf76:	6814      	ldr	r4, [r2, #0]
 800bf78:	fb50 f014 	smmulr	r0, r0, r4
 800bf7c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf80:	f303 021f 	ssat	r2, #32, r3
 800bf84:	fb52 f214 	smmulr	r2, r2, r4
 800bf88:	9903      	ldr	r1, [sp, #12]
 800bf8a:	680b      	ldr	r3, [r1, #0]
 800bf8c:	4403      	add	r3, r0
 800bf8e:	f303 0307 	ssat	r3, #8, r3
 800bf92:	9804      	ldr	r0, [sp, #16]
 800bf94:	7003      	strb	r3, [r0, #0]
 800bf96:	680b      	ldr	r3, [r1, #0]
 800bf98:	4413      	add	r3, r2
 800bf9a:	f303 0307 	ssat	r3, #8, r3
 800bf9e:	9a06      	ldr	r2, [sp, #24]
 800bfa0:	7013      	strb	r3, [r2, #0]
 800bfa2:	e6de      	b.n	800bd62 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 800bfa4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bfa6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800bfa8:	9401      	str	r4, [sp, #4]
 800bfaa:	f04f 0b00 	mov.w	fp, #0
 800bfae:	45ab      	cmp	fp, r5
 800bfb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bfb2:	f6ff adff 	blt.w	800bbb4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1b8>
 800bfb6:	46a0      	mov	r8, r4
 800bfb8:	e639      	b.n	800bc2e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x232>
 800bfba:	2900      	cmp	r1, #0
 800bfbc:	dd1a      	ble.n	800bff4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f8>
 800bfbe:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800bfc0:	6804      	ldr	r4, [r0, #0]
 800bfc2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	6805      	ldr	r5, [r0, #0]
 800bfc8:	fb53 5004 	smmla	r0, r3, r4, r5
 800bfcc:	0052      	lsls	r2, r2, #1
 800bfce:	fb52 5304 	smmla	r3, r2, r4, r5
 800bfd2:	fa40 f201 	asr.w	r2, r0, r1
 800bfd6:	f302 0207 	ssat	r2, #8, r2
 800bfda:	982b      	ldr	r0, [sp, #172]	; 0xac
 800bfdc:	f800 2b01 	strb.w	r2, [r0], #1
 800bfe0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800bfe2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800bfe6:	4113      	asrs	r3, r2
 800bfe8:	f303 0307 	ssat	r3, #8, r3
 800bfec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfee:	902b      	str	r0, [sp, #172]	; 0xac
 800bff0:	7013      	strb	r3, [r2, #0]
 800bff2:	e755      	b.n	800bea0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 800bff4:	f1c1 0101 	rsb	r1, r1, #1
 800bff8:	408b      	lsls	r3, r1
 800bffa:	f303 031f 	ssat	r3, #32, r3
 800bffe:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800c000:	6800      	ldr	r0, [r0, #0]
 800c002:	fb53 f310 	smmulr	r3, r3, r0
 800c006:	408a      	lsls	r2, r1
 800c008:	f302 021f 	ssat	r2, #32, r2
 800c00c:	fb52 f210 	smmulr	r2, r2, r0
 800c010:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c012:	6809      	ldr	r1, [r1, #0]
 800c014:	440b      	add	r3, r1
 800c016:	f303 0307 	ssat	r3, #8, r3
 800c01a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c01c:	f801 3b01 	strb.w	r3, [r1], #1
 800c020:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4413      	add	r3, r2
 800c026:	f303 0307 	ssat	r3, #8, r3
 800c02a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c02c:	912b      	str	r1, [sp, #172]	; 0xac
 800c02e:	7013      	strb	r3, [r2, #0]
 800c030:	e736      	b.n	800bea0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 800c032:	465e      	mov	r6, fp
 800c034:	461a      	mov	r2, r3
 800c036:	e6f0      	b.n	800be1a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x41e>

0800c038 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	b093      	sub	sp, #76	; 0x4c
 800c03e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800c042:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 800c046:	930e      	str	r3, [sp, #56]	; 0x38
 800c048:	085d      	lsrs	r5, r3, #1
 800c04a:	9405      	str	r4, [sp, #20]
 800c04c:	9107      	str	r1, [sp, #28]
 800c04e:	920d      	str	r2, [sp, #52]	; 0x34
 800c050:	950f      	str	r5, [sp, #60]	; 0x3c
 800c052:	f000 81fa 	beq.w	800c44a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x412>
 800c056:	4616      	mov	r6, r2
 800c058:	1e6a      	subs	r2, r5, #1
 800c05a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800c05c:	460f      	mov	r7, r1
 800c05e:	b292      	uxth	r2, r2
 800c060:	1d29      	adds	r1, r5, #4
 800c062:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 800c066:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c068:	9509      	str	r5, [sp, #36]	; 0x24
 800c06a:	f102 0b02 	add.w	fp, r2, #2
 800c06e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c070:	3204      	adds	r2, #4
 800c072:	9203      	str	r2, [sp, #12]
 800c074:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c076:	3208      	adds	r2, #8
 800c078:	9202      	str	r2, [sp, #8]
 800c07a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c07c:	3208      	adds	r2, #8
 800c07e:	f1a4 0310 	sub.w	r3, r4, #16
 800c082:	9201      	str	r2, [sp, #4]
 800c084:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c086:	091b      	lsrs	r3, r3, #4
 800c088:	3301      	adds	r3, #1
 800c08a:	3202      	adds	r2, #2
 800c08c:	9204      	str	r2, [sp, #16]
 800c08e:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 800c092:	019a      	lsls	r2, r3, #6
 800c094:	011b      	lsls	r3, r3, #4
 800c096:	1ee5      	subs	r5, r4, #3
 800c098:	930b      	str	r3, [sp, #44]	; 0x2c
 800c09a:	1f23      	subs	r3, r4, #4
 800c09c:	9508      	str	r5, [sp, #32]
 800c09e:	f106 0a08 	add.w	sl, r6, #8
 800c0a2:	920a      	str	r2, [sp, #40]	; 0x28
 800c0a4:	930c      	str	r3, [sp, #48]	; 0x30
 800c0a6:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 800c0aa:	9905      	ldr	r1, [sp, #20]
 800c0ac:	9311      	str	r3, [sp, #68]	; 0x44
 800c0ae:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 800c0b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0b4:	9211      	str	r2, [sp, #68]	; 0x44
 800c0b6:	290f      	cmp	r1, #15
 800c0b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c0ba:	9c07      	ldr	r4, [sp, #28]
 800c0bc:	f340 819a 	ble.w	800c3f4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3bc>
 800c0c0:	4601      	mov	r1, r0
 800c0c2:	f8d4 c000 	ldr.w	ip, [r4]
 800c0c6:	680e      	ldr	r6, [r1, #0]
 800c0c8:	fb26 330c 	smlad	r3, r6, ip, r3
 800c0cc:	684d      	ldr	r5, [r1, #4]
 800c0ce:	fb25 220c 	smlad	r2, r5, ip, r2
 800c0d2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800c0d6:	688e      	ldr	r6, [r1, #8]
 800c0d8:	fb26 360c 	smlad	r6, r6, ip, r3
 800c0dc:	68cd      	ldr	r5, [r1, #12]
 800c0de:	fb25 250c 	smlad	r5, r5, ip, r2
 800c0e2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800c0e6:	690b      	ldr	r3, [r1, #16]
 800c0e8:	fb23 660c 	smlad	r6, r3, ip, r6
 800c0ec:	694a      	ldr	r2, [r1, #20]
 800c0ee:	fb22 550c 	smlad	r5, r2, ip, r5
 800c0f2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c0f6:	698b      	ldr	r3, [r1, #24]
 800c0f8:	fb23 630c 	smlad	r3, r3, ip, r6
 800c0fc:	69ca      	ldr	r2, [r1, #28]
 800c0fe:	fb22 520c 	smlad	r2, r2, ip, r5
 800c102:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800c106:	6a0e      	ldr	r6, [r1, #32]
 800c108:	fb26 330c 	smlad	r3, r6, ip, r3
 800c10c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800c10e:	fb25 220c 	smlad	r2, r5, ip, r2
 800c112:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800c116:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800c118:	fb26 360c 	smlad	r6, r6, ip, r3
 800c11c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800c11e:	fb25 250c 	smlad	r5, r5, ip, r2
 800c122:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800c126:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c128:	fb23 660c 	smlad	r6, r3, ip, r6
 800c12c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800c12e:	fb22 550c 	smlad	r5, r2, ip, r5
 800c132:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c136:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800c138:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800c13a:	3420      	adds	r4, #32
 800c13c:	3140      	adds	r1, #64	; 0x40
 800c13e:	fb23 630c 	smlad	r3, r3, ip, r6
 800c142:	fb22 520c 	smlad	r2, r2, ip, r5
 800c146:	42bc      	cmp	r4, r7
 800c148:	d1bb      	bne.n	800c0c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 800c14a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c14c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800c150:	4408      	add	r0, r1
 800c152:	463c      	mov	r4, r7
 800c154:	9908      	ldr	r1, [sp, #32]
 800c156:	458e      	cmp	lr, r1
 800c158:	da24      	bge.n	800c1a4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16c>
 800c15a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c15c:	eba1 090e 	sub.w	r9, r1, lr
 800c160:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800c164:	f109 0101 	add.w	r1, r9, #1
 800c168:	9106      	str	r1, [sp, #24]
 800c16a:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 800c16e:	4601      	mov	r1, r0
 800c170:	6825      	ldr	r5, [r4, #0]
 800c172:	680e      	ldr	r6, [r1, #0]
 800c174:	fb26 3305 	smlad	r3, r6, r5, r3
 800c178:	684e      	ldr	r6, [r1, #4]
 800c17a:	fb26 2505 	smlad	r5, r6, r5, r2
 800c17e:	6866      	ldr	r6, [r4, #4]
 800c180:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c184:	68ca      	ldr	r2, [r1, #12]
 800c186:	3408      	adds	r4, #8
 800c188:	3110      	adds	r1, #16
 800c18a:	fb2c 3306 	smlad	r3, ip, r6, r3
 800c18e:	fb22 5206 	smlad	r2, r2, r6, r5
 800c192:	45a0      	cmp	r8, r4
 800c194:	d1ec      	bne.n	800c170 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x138>
 800c196:	9906      	ldr	r1, [sp, #24]
 800c198:	f10e 0e04 	add.w	lr, lr, #4
 800c19c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800c1a0:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800c1a4:	9e05      	ldr	r6, [sp, #20]
 800c1a6:	4576      	cmp	r6, lr
 800c1a8:	dd30      	ble.n	800c20c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d4>
 800c1aa:	f9b4 1000 	ldrsh.w	r1, [r4]
 800c1ae:	8805      	ldrh	r5, [r0, #0]
 800c1b0:	fb15 3301 	smlabb	r3, r5, r1, r3
 800c1b4:	8845      	ldrh	r5, [r0, #2]
 800c1b6:	fb11 2205 	smlabb	r2, r1, r5, r2
 800c1ba:	f10e 0101 	add.w	r1, lr, #1
 800c1be:	428e      	cmp	r6, r1
 800c1c0:	dd1f      	ble.n	800c202 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ca>
 800c1c2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c1c6:	8885      	ldrh	r5, [r0, #4]
 800c1c8:	fb15 3301 	smlabb	r3, r5, r1, r3
 800c1cc:	88c5      	ldrh	r5, [r0, #6]
 800c1ce:	fb11 2205 	smlabb	r2, r1, r5, r2
 800c1d2:	f10e 0102 	add.w	r1, lr, #2
 800c1d6:	428e      	cmp	r6, r1
 800c1d8:	dd13      	ble.n	800c202 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ca>
 800c1da:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800c1de:	8905      	ldrh	r5, [r0, #8]
 800c1e0:	fb15 3301 	smlabb	r3, r5, r1, r3
 800c1e4:	8945      	ldrh	r5, [r0, #10]
 800c1e6:	fb11 2205 	smlabb	r2, r1, r5, r2
 800c1ea:	f10e 0103 	add.w	r1, lr, #3
 800c1ee:	428e      	cmp	r6, r1
 800c1f0:	dd07      	ble.n	800c202 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ca>
 800c1f2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800c1f6:	8984      	ldrh	r4, [r0, #12]
 800c1f8:	fb14 3301 	smlabb	r3, r4, r1, r3
 800c1fc:	89c4      	ldrh	r4, [r0, #14]
 800c1fe:	fb11 2204 	smlabb	r2, r1, r4, r2
 800c202:	9905      	ldr	r1, [sp, #20]
 800c204:	eba1 0e0e 	sub.w	lr, r1, lr
 800c208:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800c20c:	9903      	ldr	r1, [sp, #12]
 800c20e:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 800c212:	2d15      	cmp	r5, #21
 800c214:	f340 80b1 	ble.w	800c37a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x342>
 800c218:	9901      	ldr	r1, [sp, #4]
 800c21a:	f851 6c08 	ldr.w	r6, [r1, #-8]
 800c21e:	9902      	ldr	r1, [sp, #8]
 800c220:	1eac      	subs	r4, r5, #2
 800c222:	f04f 0c01 	mov.w	ip, #1
 800c226:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800c22a:	fa0c f404 	lsl.w	r4, ip, r4
 800c22e:	3d01      	subs	r5, #1
 800c230:	fb53 4301 	smmla	r3, r3, r1, r4
 800c234:	9c02      	ldr	r4, [sp, #8]
 800c236:	9901      	ldr	r1, [sp, #4]
 800c238:	412b      	asrs	r3, r5
 800c23a:	4433      	add	r3, r6
 800c23c:	f1a4 0e04 	sub.w	lr, r4, #4
 800c240:	1f0e      	subs	r6, r1, #4
 800c242:	f303 0307 	ssat	r3, #8, r3
 800c246:	f80b 3c02 	strb.w	r3, [fp, #-2]
 800c24a:	9b04      	ldr	r3, [sp, #16]
 800c24c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c250:	2b15      	cmp	r3, #21
 800c252:	f340 8084 	ble.w	800c35e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x326>
 800c256:	6834      	ldr	r4, [r6, #0]
 800c258:	f8de 1000 	ldr.w	r1, [lr]
 800c25c:	1e9d      	subs	r5, r3, #2
 800c25e:	2601      	movs	r6, #1
 800c260:	3b01      	subs	r3, #1
 800c262:	fa06 f505 	lsl.w	r5, r6, r5
 800c266:	fb52 5501 	smmla	r5, r2, r1, r5
 800c26a:	411d      	asrs	r5, r3
 800c26c:	4425      	add	r5, r4
 800c26e:	f305 0507 	ssat	r5, #8, r5
 800c272:	f80b 5c01 	strb.w	r5, [fp, #-1]
 800c276:	9b03      	ldr	r3, [sp, #12]
 800c278:	3304      	adds	r3, #4
 800c27a:	9303      	str	r3, [sp, #12]
 800c27c:	9b02      	ldr	r3, [sp, #8]
 800c27e:	3308      	adds	r3, #8
 800c280:	9302      	str	r3, [sp, #8]
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	3308      	adds	r3, #8
 800c286:	9301      	str	r3, [sp, #4]
 800c288:	9b04      	ldr	r3, [sp, #16]
 800c28a:	3304      	adds	r3, #4
 800c28c:	9304      	str	r3, [sp, #16]
 800c28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c290:	f10b 0b02 	add.w	fp, fp, #2
 800c294:	459b      	cmp	fp, r3
 800c296:	f10a 0a08 	add.w	sl, sl, #8
 800c29a:	f47f af04 	bne.w	800c0a6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 800c29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c2a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c2a6:	921e      	str	r2, [sp, #120]	; 0x78
 800c2a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c2aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c2ae:	921f      	str	r2, [sp, #124]	; 0x7c
 800c2b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c2b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c2b6:	9220      	str	r2, [sp, #128]	; 0x80
 800c2b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c2be:	920d      	str	r2, [sp, #52]	; 0x34
 800c2c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2c2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800c2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2c8:	07db      	lsls	r3, r3, #31
 800c2ca:	d544      	bpl.n	800c356 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800c2cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	9b05      	ldr	r3, [sp, #20]
 800c2d2:	089e      	lsrs	r6, r3, #2
 800c2d4:	d013      	beq.n	800c2fe <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c6>
 800c2d6:	9b07      	ldr	r3, [sp, #28]
 800c2d8:	00f7      	lsls	r7, r6, #3
 800c2da:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800c2de:	6805      	ldr	r5, [r0, #0]
 800c2e0:	6844      	ldr	r4, [r0, #4]
 800c2e2:	f8d3 c000 	ldr.w	ip, [r3]
 800c2e6:	3008      	adds	r0, #8
 800c2e8:	fb25 220c 	smlad	r2, r5, ip, r2
 800c2ec:	685d      	ldr	r5, [r3, #4]
 800c2ee:	3308      	adds	r3, #8
 800c2f0:	fb24 2205 	smlad	r2, r4, r5, r2
 800c2f4:	4286      	cmp	r6, r0
 800c2f6:	d1f2      	bne.n	800c2de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a6>
 800c2f8:	9b07      	ldr	r3, [sp, #28]
 800c2fa:	443b      	add	r3, r7
 800c2fc:	9307      	str	r3, [sp, #28]
 800c2fe:	9b05      	ldr	r3, [sp, #20]
 800c300:	f013 0303 	ands.w	r3, r3, #3
 800c304:	d011      	beq.n	800c32a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 800c306:	9e07      	ldr	r6, [sp, #28]
 800c308:	8804      	ldrh	r4, [r0, #0]
 800c30a:	8835      	ldrh	r5, [r6, #0]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	b29b      	uxth	r3, r3
 800c310:	fb15 2204 	smlabb	r2, r5, r4, r2
 800c314:	b14b      	cbz	r3, 800c32a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 800c316:	8845      	ldrh	r5, [r0, #2]
 800c318:	8874      	ldrh	r4, [r6, #2]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	fb15 2204 	smlabb	r2, r5, r4, r2
 800c320:	d003      	beq.n	800c32a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 800c322:	8880      	ldrh	r0, [r0, #4]
 800c324:	88b3      	ldrh	r3, [r6, #4]
 800c326:	fb10 2203 	smlabb	r2, r0, r3, r2
 800c32a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c32c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c330:	2b15      	cmp	r3, #21
 800c332:	dd62      	ble.n	800c3fa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c2>
 800c334:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c336:	6805      	ldr	r5, [r0, #0]
 800c338:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c33a:	1e9e      	subs	r6, r3, #2
 800c33c:	2401      	movs	r4, #1
 800c33e:	3b01      	subs	r3, #1
 800c340:	6800      	ldr	r0, [r0, #0]
 800c342:	40b4      	lsls	r4, r6
 800c344:	fb52 4200 	smmla	r2, r2, r0, r4
 800c348:	fa42 f303 	asr.w	r3, r2, r3
 800c34c:	442b      	add	r3, r5
 800c34e:	f303 0307 	ssat	r3, #8, r3
 800c352:	f801 3b01 	strb.w	r3, [r1], #1
 800c356:	4608      	mov	r0, r1
 800c358:	b013      	add	sp, #76	; 0x4c
 800c35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35e:	2b00      	cmp	r3, #0
 800c360:	dd21      	ble.n	800c3a6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x36e>
 800c362:	f8de 1000 	ldr.w	r1, [lr]
 800c366:	6834      	ldr	r4, [r6, #0]
 800c368:	0052      	lsls	r2, r2, #1
 800c36a:	fb52 4201 	smmla	r2, r2, r1, r4
 800c36e:	411a      	asrs	r2, r3
 800c370:	f302 0207 	ssat	r2, #8, r2
 800c374:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800c378:	e77d      	b.n	800c276 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x23e>
 800c37a:	2d00      	cmp	r5, #0
 800c37c:	dd24      	ble.n	800c3c8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x390>
 800c37e:	9e02      	ldr	r6, [sp, #8]
 800c380:	9c01      	ldr	r4, [sp, #4]
 800c382:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800c386:	f854 4c08 	ldr.w	r4, [r4, #-8]
 800c38a:	005b      	lsls	r3, r3, #1
 800c38c:	fb53 4301 	smmla	r3, r3, r1, r4
 800c390:	9c01      	ldr	r4, [sp, #4]
 800c392:	f1a6 0e04 	sub.w	lr, r6, #4
 800c396:	fa43 f505 	asr.w	r5, r3, r5
 800c39a:	1f26      	subs	r6, r4, #4
 800c39c:	f305 0507 	ssat	r5, #8, r5
 800c3a0:	f80b 5c02 	strb.w	r5, [fp, #-2]
 800c3a4:	e751      	b.n	800c24a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>
 800c3a6:	f1c3 0301 	rsb	r3, r3, #1
 800c3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ae:	f303 031f 	ssat	r3, #32, r3
 800c3b2:	f8de 2000 	ldr.w	r2, [lr]
 800c3b6:	fb53 f312 	smmulr	r3, r3, r2
 800c3ba:	6832      	ldr	r2, [r6, #0]
 800c3bc:	441a      	add	r2, r3
 800c3be:	f302 0207 	ssat	r2, #8, r2
 800c3c2:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800c3c6:	e756      	b.n	800c276 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x23e>
 800c3c8:	f1c5 0501 	rsb	r5, r5, #1
 800c3cc:	40ab      	lsls	r3, r5
 800c3ce:	f303 031f 	ssat	r3, #32, r3
 800c3d2:	9902      	ldr	r1, [sp, #8]
 800c3d4:	f1a1 0e04 	sub.w	lr, r1, #4
 800c3d8:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800c3dc:	fb53 f111 	smmulr	r1, r3, r1
 800c3e0:	9c01      	ldr	r4, [sp, #4]
 800c3e2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800c3e6:	1f26      	subs	r6, r4, #4
 800c3e8:	440b      	add	r3, r1
 800c3ea:	f303 0307 	ssat	r3, #8, r3
 800c3ee:	f80b 3c02 	strb.w	r3, [fp, #-2]
 800c3f2:	e72a      	b.n	800c24a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>
 800c3f4:	f04f 0e00 	mov.w	lr, #0
 800c3f8:	e6ac      	b.n	800c154 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x11c>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	dd10      	ble.n	800c420 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3e8>
 800c3fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c400:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800c402:	6800      	ldr	r0, [r0, #0]
 800c404:	6824      	ldr	r4, [r4, #0]
 800c406:	0052      	lsls	r2, r2, #1
 800c408:	fb52 4200 	smmla	r2, r2, r0, r4
 800c40c:	fa42 f303 	asr.w	r3, r2, r3
 800c410:	f303 0307 	ssat	r3, #8, r3
 800c414:	f801 3b01 	strb.w	r3, [r1], #1
 800c418:	4608      	mov	r0, r1
 800c41a:	b013      	add	sp, #76	; 0x4c
 800c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c420:	f1c3 0301 	rsb	r3, r3, #1
 800c424:	fa02 f303 	lsl.w	r3, r2, r3
 800c428:	f303 031f 	ssat	r3, #32, r3
 800c42c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c42e:	6812      	ldr	r2, [r2, #0]
 800c430:	fb53 f312 	smmulr	r3, r3, r2
 800c434:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c436:	6812      	ldr	r2, [r2, #0]
 800c438:	4413      	add	r3, r2
 800c43a:	f303 0307 	ssat	r3, #8, r3
 800c43e:	f801 3b01 	strb.w	r3, [r1], #1
 800c442:	4608      	mov	r0, r1
 800c444:	b013      	add	sp, #76	; 0x4c
 800c446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c44c:	e73b      	b.n	800c2c6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x28e>
 800c44e:	bf00      	nop

0800c450 <st_int8_avepool>:
 800c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c454:	b097      	sub	sp, #92	; 0x5c
 800c456:	4699      	mov	r9, r3
 800c458:	9100      	str	r1, [sp, #0]
 800c45a:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 800c45e:	9111      	str	r1, [sp, #68]	; 0x44
 800c460:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800c464:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 800c468:	9112      	str	r1, [sp, #72]	; 0x48
 800c46a:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 800c46e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c470:	4692      	mov	sl, r2
 800c472:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800c476:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 800c47a:	9105      	str	r1, [sp, #20]
 800c47c:	f99d 10a4 	ldrsb.w	r1, [sp, #164]	; 0xa4
 800c480:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 800c484:	930b      	str	r3, [sp, #44]	; 0x2c
 800c486:	9103      	str	r1, [sp, #12]
 800c488:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800c48c:	f99d 10a8 	ldrsb.w	r1, [sp, #168]	; 0xa8
 800c490:	9310      	str	r3, [sp, #64]	; 0x40
 800c492:	eec0 6a20 	vdiv.f32	s13, s0, s1
 800c496:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800c49a:	9404      	str	r4, [sp, #16]
 800c49c:	9213      	str	r2, [sp, #76]	; 0x4c
 800c49e:	9102      	str	r1, [sp, #8]
 800c4a0:	2a00      	cmp	r2, #0
 800c4a2:	f000 80aa 	beq.w	800c5fa <st_int8_avepool+0x1aa>
 800c4a6:	2c01      	cmp	r4, #1
 800c4a8:	4683      	mov	fp, r0
 800c4aa:	f040 80dd 	bne.w	800c668 <st_int8_avepool+0x218>
 800c4ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4b0:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 800c660 <st_int8_avepool+0x210>
 800c4b4:	eddf 3a6b 	vldr	s7, [pc, #428]	; 800c664 <st_int8_avepool+0x214>
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 800c4c2:	1ad2      	subs	r2, r2, r3
 800c4c4:	425b      	negs	r3, r3
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	920d      	str	r2, [sp, #52]	; 0x34
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	930c      	str	r3, [sp, #48]	; 0x30
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	9905      	ldr	r1, [sp, #20]
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	f000 80c0 	beq.w	800c658 <st_int8_avepool+0x208>
 800c4d8:	b292      	uxth	r2, r2
 800c4da:	9207      	str	r2, [sp, #28]
 800c4dc:	9a05      	ldr	r2, [sp, #20]
 800c4de:	eddd 7a03 	vldr	s15, [sp, #12]
 800c4e2:	fb03 f302 	mul.w	r3, r3, r2
 800c4e6:	9308      	str	r3, [sp, #32]
 800c4e8:	9a01      	ldr	r2, [sp, #4]
 800c4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	b21b      	sxth	r3, r3
 800c4f0:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800c4f4:	eddd 7a02 	vldr	s15, [sp, #8]
 800c4f8:	930a      	str	r3, [sp, #40]	; 0x28
 800c4fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	2100      	movs	r1, #0
 800c500:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800c504:	9306      	str	r3, [sp, #24]
 800c506:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800c50a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c50e:	b216      	sxth	r6, r2
 800c510:	4688      	mov	r8, r1
 800c512:	b28b      	uxth	r3, r1
 800c514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c516:	9309      	str	r3, [sp, #36]	; 0x24
 800c518:	9b08      	ldr	r3, [sp, #32]
 800c51a:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 800c51e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 800c522:	42b2      	cmp	r2, r6
 800c524:	4498      	add	r8, r3
 800c526:	f280 8083 	bge.w	800c630 <st_int8_avepool+0x1e0>
 800c52a:	2700      	movs	r7, #0
 800c52c:	46bc      	mov	ip, r7
 800c52e:	ea01 70e1 	and.w	r0, r1, r1, asr #31
 800c532:	428c      	cmp	r4, r1
 800c534:	da13      	bge.n	800c55e <st_int8_avepool+0x10e>
 800c536:	2a00      	cmp	r2, #0
 800c538:	fb0a f502 	mul.w	r5, sl, r2
 800c53c:	db0f      	blt.n	800c55e <st_int8_avepool+0x10e>
 800c53e:	454a      	cmp	r2, r9
 800c540:	da0d      	bge.n	800c55e <st_int8_avepool+0x10e>
 800c542:	2c00      	cmp	r4, #0
 800c544:	4623      	mov	r3, r4
 800c546:	db5b      	blt.n	800c600 <st_int8_avepool+0x1b0>
 800c548:	445d      	add	r5, fp
 800c54a:	459a      	cmp	sl, r3
 800c54c:	dd03      	ble.n	800c556 <st_int8_avepool+0x106>
 800c54e:	f915 e003 	ldrsb.w	lr, [r5, r3]
 800c552:	3701      	adds	r7, #1
 800c554:	44f4      	add	ip, lr
 800c556:	3301      	adds	r3, #1
 800c558:	b21b      	sxth	r3, r3
 800c55a:	428b      	cmp	r3, r1
 800c55c:	dbf5      	blt.n	800c54a <st_int8_avepool+0xfa>
 800c55e:	3201      	adds	r2, #1
 800c560:	b212      	sxth	r2, r2
 800c562:	42b2      	cmp	r2, r6
 800c564:	dbe5      	blt.n	800c532 <st_int8_avepool+0xe2>
 800c566:	eeb4 0a60 	vcmp.f32	s0, s1
 800c56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c56e:	d103      	bne.n	800c578 <st_int8_avepool+0x128>
 800c570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c574:	4293      	cmp	r3, r2
 800c576:	d04e      	beq.n	800c616 <st_int8_avepool+0x1c6>
 800c578:	ee07 ca90 	vmov	s15, ip
 800c57c:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 800c580:	ee07 7a90 	vmov	s15, r7
 800c584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c588:	ee84 7a27 	vdiv.f32	s14, s8, s15
 800c58c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c590:	eef0 7a45 	vmov.f32	s15, s10
 800c594:	eee7 7a26 	vfma.f32	s15, s14, s13
 800c598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a0:	bfb4      	ite	lt
 800c5a2:	eeb0 7a46 	vmovlt.f32	s14, s12
 800c5a6:	eeb0 7a65 	vmovge.f32	s14, s11
 800c5aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5b2:	ee17 3a90 	vmov	r3, s15
 800c5b6:	f303 0307 	ssat	r3, #8, r3
 800c5ba:	9a00      	ldr	r2, [sp, #0]
 800c5bc:	f802 3008 	strb.w	r3, [r2, r8]
 800c5c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c5c2:	9b06      	ldr	r3, [sp, #24]
 800c5c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5c6:	9a04      	ldr	r2, [sp, #16]
 800c5c8:	4403      	add	r3, r0
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	3101      	adds	r1, #1
 800c5ce:	9306      	str	r3, [sp, #24]
 800c5d0:	9b05      	ldr	r3, [sp, #20]
 800c5d2:	b209      	sxth	r1, r1
 800c5d4:	4402      	add	r2, r0
 800c5d6:	b292      	uxth	r2, r2
 800c5d8:	4299      	cmp	r1, r3
 800c5da:	9204      	str	r2, [sp, #16]
 800c5dc:	4688      	mov	r8, r1
 800c5de:	db98      	blt.n	800c512 <st_int8_avepool+0xc2>
 800c5e0:	9b01      	ldr	r3, [sp, #4]
 800c5e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c5e4:	9a07      	ldr	r2, [sp, #28]
 800c5e6:	440b      	add	r3, r1
 800c5e8:	3201      	adds	r2, #1
 800c5ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c5ec:	b212      	sxth	r2, r2
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	4291      	cmp	r1, r2
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	f73f af6b 	bgt.w	800c4d0 <st_int8_avepool+0x80>
 800c5fa:	b017      	add	sp, #92	; 0x5c
 800c5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c600:	3301      	adds	r3, #1
 800c602:	b21b      	sxth	r3, r3
 800c604:	4298      	cmp	r0, r3
 800c606:	dcfb      	bgt.n	800c600 <st_int8_avepool+0x1b0>
 800c608:	4299      	cmp	r1, r3
 800c60a:	dc9d      	bgt.n	800c548 <st_int8_avepool+0xf8>
 800c60c:	3201      	adds	r2, #1
 800c60e:	b212      	sxth	r2, r2
 800c610:	42b2      	cmp	r2, r6
 800c612:	db8e      	blt.n	800c532 <st_int8_avepool+0xe2>
 800c614:	e7a7      	b.n	800c566 <st_int8_avepool+0x116>
 800c616:	f1bc 0f00 	cmp.w	ip, #0
 800c61a:	db16      	blt.n	800c64a <st_int8_avepool+0x1fa>
 800c61c:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 800c620:	fbbc fcf7 	udiv	ip, ip, r7
 800c624:	f30c 0c07 	ssat	ip, #8, ip
 800c628:	9b00      	ldr	r3, [sp, #0]
 800c62a:	f803 c008 	strb.w	ip, [r3, r8]
 800c62e:	e7c7      	b.n	800c5c0 <st_int8_avepool+0x170>
 800c630:	eeb4 0a60 	vcmp.f32	s0, s1
 800c634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c638:	d104      	bne.n	800c644 <st_int8_avepool+0x1f4>
 800c63a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c63e:	4293      	cmp	r3, r2
 800c640:	f000 8103 	beq.w	800c84a <st_int8_avepool+0x3fa>
 800c644:	eeb0 7a63 	vmov.f32	s14, s7
 800c648:	e7a0      	b.n	800c58c <st_int8_avepool+0x13c>
 800c64a:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 800c64e:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 800c652:	fb93 fcf7 	sdiv	ip, r3, r7
 800c656:	e7e5      	b.n	800c624 <st_int8_avepool+0x1d4>
 800c658:	b293      	uxth	r3, r2
 800c65a:	9307      	str	r3, [sp, #28]
 800c65c:	e7c0      	b.n	800c5e0 <st_int8_avepool+0x190>
 800c65e:	bf00      	nop
 800c660:	befffffc 	.word	0xbefffffc
 800c664:	7fc00000 	.word	0x7fc00000
 800c668:	425b      	negs	r3, r3
 800c66a:	9905      	ldr	r1, [sp, #20]
 800c66c:	ed1f 5a04 	vldr	s10, [pc, #-16]	; 800c660 <st_int8_avepool+0x210>
 800c670:	ed5f 5a04 	vldr	s11, [pc, #-16]	; 800c664 <st_int8_avepool+0x214>
 800c674:	9014      	str	r0, [sp, #80]	; 0x50
 800c676:	b29b      	uxth	r3, r3
 800c678:	2200      	movs	r2, #0
 800c67a:	930a      	str	r3, [sp, #40]	; 0x28
 800c67c:	46d3      	mov	fp, sl
 800c67e:	4613      	mov	r3, r2
 800c680:	46ca      	mov	sl, r9
 800c682:	2900      	cmp	r1, #0
 800c684:	f000 80b9 	beq.w	800c7fa <st_int8_avepool+0x3aa>
 800c688:	b292      	uxth	r2, r2
 800c68a:	920e      	str	r2, [sp, #56]	; 0x38
 800c68c:	9a05      	ldr	r2, [sp, #20]
 800c68e:	eddd 7a03 	vldr	s15, [sp, #12]
 800c692:	fb03 f302 	mul.w	r3, r3, r2
 800c696:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c698:	9315      	str	r3, [sp, #84]	; 0x54
 800c69a:	4253      	negs	r3, r2
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	9308      	str	r3, [sp, #32]
 800c6a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6a2:	1a9b      	subs	r3, r3, r2
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6ac:	4413      	add	r3, r2
 800c6ae:	fa0f f983 	sxth.w	r9, r3
 800c6b2:	f04f 0800 	mov.w	r8, #0
 800c6b6:	b213      	sxth	r3, r2
 800c6b8:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800c6bc:	930c      	str	r3, [sp, #48]	; 0x30
 800c6be:	4643      	mov	r3, r8
 800c6c0:	9a04      	ldr	r2, [sp, #16]
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	f000 80bd 	beq.w	800c842 <st_int8_avepool+0x3f2>
 800c6c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c6ca:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800c6ce:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	fa1f f288 	uxth.w	r2, r8
 800c6d8:	920d      	str	r2, [sp, #52]	; 0x34
 800c6da:	9a04      	ldr	r2, [sp, #16]
 800c6dc:	f04f 0e00 	mov.w	lr, #0
 800c6e0:	fb02 f303 	mul.w	r3, r2, r3
 800c6e4:	9307      	str	r3, [sp, #28]
 800c6e6:	46f0      	mov	r8, lr
 800c6e8:	ea01 70e1 	and.w	r0, r1, r1, asr #31
 800c6ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6ee:	454a      	cmp	r2, r9
 800c6f0:	f280 8094 	bge.w	800c81c <st_int8_avepool+0x3cc>
 800c6f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6f6:	2500      	movs	r5, #0
 800c6f8:	4443      	add	r3, r8
 800c6fa:	462e      	mov	r6, r5
 800c6fc:	9306      	str	r3, [sp, #24]
 800c6fe:	428c      	cmp	r4, r1
 800c700:	da1a      	bge.n	800c738 <st_int8_avepool+0x2e8>
 800c702:	2a00      	cmp	r2, #0
 800c704:	fb02 f70b 	mul.w	r7, r2, fp
 800c708:	db16      	blt.n	800c738 <st_int8_avepool+0x2e8>
 800c70a:	4552      	cmp	r2, sl
 800c70c:	da14      	bge.n	800c738 <st_int8_avepool+0x2e8>
 800c70e:	2c00      	cmp	r4, #0
 800c710:	4623      	mov	r3, r4
 800c712:	db75      	blt.n	800c800 <st_int8_avepool+0x3b0>
 800c714:	9701      	str	r7, [sp, #4]
 800c716:	459b      	cmp	fp, r3
 800c718:	dd0a      	ble.n	800c730 <st_int8_avepool+0x2e0>
 800c71a:	9f01      	ldr	r7, [sp, #4]
 800c71c:	eb07 0c03 	add.w	ip, r7, r3
 800c720:	9f04      	ldr	r7, [sp, #16]
 800c722:	fb07 fc0c 	mul.w	ip, r7, ip
 800c726:	9f06      	ldr	r7, [sp, #24]
 800c728:	f917 c00c 	ldrsb.w	ip, [r7, ip]
 800c72c:	3501      	adds	r5, #1
 800c72e:	4466      	add	r6, ip
 800c730:	3301      	adds	r3, #1
 800c732:	b21b      	sxth	r3, r3
 800c734:	428b      	cmp	r3, r1
 800c736:	dbee      	blt.n	800c716 <st_int8_avepool+0x2c6>
 800c738:	3201      	adds	r2, #1
 800c73a:	b212      	sxth	r2, r2
 800c73c:	454a      	cmp	r2, r9
 800c73e:	dbde      	blt.n	800c6fe <st_int8_avepool+0x2ae>
 800c740:	eeb4 0a60 	vcmp.f32	s0, s1
 800c744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c748:	d103      	bne.n	800c752 <st_int8_avepool+0x302>
 800c74a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c74e:	4293      	cmp	r3, r2
 800c750:	d05d      	beq.n	800c80e <st_int8_avepool+0x3be>
 800c752:	ee07 6a90 	vmov	s15, r6
 800c756:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800c75a:	ee07 5a90 	vmov	s15, r5
 800c75e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c762:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800c766:	ed9d 7a02 	vldr	s14, [sp, #8]
 800c76a:	ee37 6ae4 	vsub.f32	s12, s15, s9
 800c76e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c772:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c776:	eea6 7a26 	vfma.f32	s14, s12, s13
 800c77a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800c77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c782:	bfb8      	it	lt
 800c784:	eef0 7a45 	vmovlt.f32	s15, s10
 800c788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c78c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c790:	ee17 3a90 	vmov	r3, s15
 800c794:	f303 0307 	ssat	r3, #8, r3
 800c798:	9a00      	ldr	r2, [sp, #0]
 800c79a:	9d07      	ldr	r5, [sp, #28]
 800c79c:	442a      	add	r2, r5
 800c79e:	f10e 0e01 	add.w	lr, lr, #1
 800c7a2:	f802 3008 	strb.w	r3, [r2, r8]
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	fa0f fe8e 	sxth.w	lr, lr
 800c7ac:	459e      	cmp	lr, r3
 800c7ae:	46f0      	mov	r8, lr
 800c7b0:	db9c      	blt.n	800c6ec <st_int8_avepool+0x29c>
 800c7b2:	9a08      	ldr	r2, [sp, #32]
 800c7b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c7b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7b8:	440a      	add	r2, r1
 800c7ba:	f103 0801 	add.w	r8, r3, #1
 800c7be:	b292      	uxth	r2, r2
 800c7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c2:	9208      	str	r2, [sp, #32]
 800c7c4:	9a05      	ldr	r2, [sp, #20]
 800c7c6:	fa0f f888 	sxth.w	r8, r8
 800c7ca:	440b      	add	r3, r1
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	4590      	cmp	r8, r2
 800c7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d2:	4643      	mov	r3, r8
 800c7d4:	f6ff af74 	blt.w	800c6c0 <st_int8_avepool+0x270>
 800c7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7da:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c7dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7de:	440b      	add	r3, r1
 800c7e0:	3201      	adds	r2, #1
 800c7e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c7e4:	b212      	sxth	r2, r2
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	4291      	cmp	r1, r2
 800c7ea:	930a      	str	r3, [sp, #40]	; 0x28
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	f77f af04 	ble.w	800c5fa <st_int8_avepool+0x1aa>
 800c7f2:	9905      	ldr	r1, [sp, #20]
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	f47f af47 	bne.w	800c688 <st_int8_avepool+0x238>
 800c7fa:	b293      	uxth	r3, r2
 800c7fc:	930e      	str	r3, [sp, #56]	; 0x38
 800c7fe:	e7eb      	b.n	800c7d8 <st_int8_avepool+0x388>
 800c800:	3301      	adds	r3, #1
 800c802:	b21b      	sxth	r3, r3
 800c804:	4298      	cmp	r0, r3
 800c806:	dcfb      	bgt.n	800c800 <st_int8_avepool+0x3b0>
 800c808:	428b      	cmp	r3, r1
 800c80a:	db83      	blt.n	800c714 <st_int8_avepool+0x2c4>
 800c80c:	e794      	b.n	800c738 <st_int8_avepool+0x2e8>
 800c80e:	2e00      	cmp	r6, #0
 800c810:	db10      	blt.n	800c834 <st_int8_avepool+0x3e4>
 800c812:	eb06 0665 	add.w	r6, r6, r5, asr #1
 800c816:	fbb6 f3f5 	udiv	r3, r6, r5
 800c81a:	e7bb      	b.n	800c794 <st_int8_avepool+0x344>
 800c81c:	eeb4 0a60 	vcmp.f32	s0, s1
 800c820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c824:	d103      	bne.n	800c82e <st_int8_avepool+0x3de>
 800c826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d00d      	beq.n	800c84a <st_int8_avepool+0x3fa>
 800c82e:	eef0 7a65 	vmov.f32	s15, s11
 800c832:	e798      	b.n	800c766 <st_int8_avepool+0x316>
 800c834:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 800c838:	eba6 0363 	sub.w	r3, r6, r3, asr #1
 800c83c:	fb93 f3f5 	sdiv	r3, r3, r5
 800c840:	e7a8      	b.n	800c794 <st_int8_avepool+0x344>
 800c842:	fa1f f388 	uxth.w	r3, r8
 800c846:	930d      	str	r3, [sp, #52]	; 0x34
 800c848:	e7b3      	b.n	800c7b2 <st_int8_avepool+0x362>
 800c84a:	deff      	udf	#255	; 0xff

0800c84c <arm_fill_q15>:
 800c84c:	b510      	push	{r4, lr}
 800c84e:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800c852:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800c856:	d013      	beq.n	800c880 <arm_fill_q15+0x34>
 800c858:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800c85c:	2b09      	cmp	r3, #9
 800c85e:	460b      	mov	r3, r1
 800c860:	d919      	bls.n	800c896 <arm_fill_q15+0x4a>
 800c862:	f011 0f07 	tst.w	r1, #7
 800c866:	d116      	bne.n	800c896 <arm_fill_q15+0x4a>
 800c868:	f04f 0c00 	mov.w	ip, #0
 800c86c:	f10c 0c01 	add.w	ip, ip, #1
 800c870:	45e6      	cmp	lr, ip
 800c872:	e9c3 4400 	strd	r4, r4, [r3]
 800c876:	f103 0308 	add.w	r3, r3, #8
 800c87a:	d1f7      	bne.n	800c86c <arm_fill_q15+0x20>
 800c87c:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800c880:	f012 0203 	ands.w	r2, r2, #3
 800c884:	d006      	beq.n	800c894 <arm_fill_q15+0x48>
 800c886:	3a01      	subs	r2, #1
 800c888:	8008      	strh	r0, [r1, #0]
 800c88a:	d003      	beq.n	800c894 <arm_fill_q15+0x48>
 800c88c:	2a01      	cmp	r2, #1
 800c88e:	8048      	strh	r0, [r1, #2]
 800c890:	bf18      	it	ne
 800c892:	8088      	strhne	r0, [r1, #4]
 800c894:	bd10      	pop	{r4, pc}
 800c896:	46f4      	mov	ip, lr
 800c898:	f1bc 0c01 	subs.w	ip, ip, #1
 800c89c:	601c      	str	r4, [r3, #0]
 800c89e:	605c      	str	r4, [r3, #4]
 800c8a0:	f103 0308 	add.w	r3, r3, #8
 800c8a4:	d1f8      	bne.n	800c898 <arm_fill_q15+0x4c>
 800c8a6:	e7e9      	b.n	800c87c <arm_fill_q15+0x30>

0800c8a8 <arm_float_to_q15>:
 800c8a8:	b530      	push	{r4, r5, lr}
 800c8aa:	0895      	lsrs	r5, r2, #2
 800c8ac:	d072      	beq.n	800c994 <arm_float_to_q15+0xec>
 800c8ae:	eddf 5a60 	vldr	s11, [pc, #384]	; 800ca30 <arm_float_to_q15+0x188>
 800c8b2:	f100 0c10 	add.w	ip, r0, #16
 800c8b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c8ba:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800c8be:	f101 0e08 	add.w	lr, r1, #8
 800c8c2:	462c      	mov	r4, r5
 800c8c4:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800c8c8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800c8cc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d4:	bfd4      	ite	le
 800c8d6:	eef0 7a45 	vmovle.f32	s15, s10
 800c8da:	eef0 7a47 	vmovgt.f32	s15, s14
 800c8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8e6:	ee17 3a90 	vmov	r3, s15
 800c8ea:	f303 030f 	ssat	r3, #16, r3
 800c8ee:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800c8f2:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800c8f6:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800c8fa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c902:	bfd4      	ite	le
 800c904:	eef0 7a45 	vmovle.f32	s15, s10
 800c908:	eef0 7a47 	vmovgt.f32	s15, s14
 800c90c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c914:	ee17 3a90 	vmov	r3, s15
 800c918:	f303 030f 	ssat	r3, #16, r3
 800c91c:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800c920:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800c924:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800c928:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	bfd4      	ite	le
 800c932:	eef0 7a45 	vmovle.f32	s15, s10
 800c936:	eef0 7a47 	vmovgt.f32	s15, s14
 800c93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c93e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c942:	ee17 3a90 	vmov	r3, s15
 800c946:	f303 030f 	ssat	r3, #16, r3
 800c94a:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800c94e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800c952:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c956:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c95a:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800c95e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c962:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 800c966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c96e:	bfcc      	ite	gt
 800c970:	ee16 3a90 	vmovgt	r3, s13
 800c974:	ee16 3a10 	vmovle	r3, s12
 800c978:	f303 030f 	ssat	r3, #16, r3
 800c97c:	3c01      	subs	r4, #1
 800c97e:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800c982:	f10c 0c10 	add.w	ip, ip, #16
 800c986:	f10e 0e08 	add.w	lr, lr, #8
 800c98a:	d19b      	bne.n	800c8c4 <arm_float_to_q15+0x1c>
 800c98c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c990:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800c994:	f012 0203 	ands.w	r2, r2, #3
 800c998:	d049      	beq.n	800ca2e <arm_float_to_q15+0x186>
 800c99a:	edd0 7a00 	vldr	s15, [r0]
 800c99e:	eddf 5a24 	vldr	s11, [pc, #144]	; 800ca30 <arm_float_to_q15+0x188>
 800c9a2:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800c9a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c9aa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c9ae:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800c9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b6:	bfd4      	ite	le
 800c9b8:	eef0 7a46 	vmovle.f32	s15, s12
 800c9bc:	eef0 7a47 	vmovgt.f32	s15, s14
 800c9c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9c8:	ee17 3a90 	vmov	r3, s15
 800c9cc:	f303 030f 	ssat	r3, #16, r3
 800c9d0:	3a01      	subs	r2, #1
 800c9d2:	800b      	strh	r3, [r1, #0]
 800c9d4:	d02b      	beq.n	800ca2e <arm_float_to_q15+0x186>
 800c9d6:	edd0 7a01 	vldr	s15, [r0, #4]
 800c9da:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c9de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e6:	bfd4      	ite	le
 800c9e8:	eef0 6a46 	vmovle.f32	s13, s12
 800c9ec:	eef0 6a47 	vmovgt.f32	s13, s14
 800c9f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9f8:	ee17 3a90 	vmov	r3, s15
 800c9fc:	f303 030f 	ssat	r3, #16, r3
 800ca00:	2a01      	cmp	r2, #1
 800ca02:	804b      	strh	r3, [r1, #2]
 800ca04:	d013      	beq.n	800ca2e <arm_float_to_q15+0x186>
 800ca06:	edd0 7a02 	vldr	s15, [r0, #8]
 800ca0a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ca0e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800ca12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca16:	bfd8      	it	le
 800ca18:	eeb0 7a46 	vmovle.f32	s14, s12
 800ca1c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ca20:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ca24:	ee17 3a10 	vmov	r3, s14
 800ca28:	f303 030f 	ssat	r3, #16, r3
 800ca2c:	808b      	strh	r3, [r1, #4]
 800ca2e:	bd30      	pop	{r4, r5, pc}
 800ca30:	47000000 	.word	0x47000000

0800ca34 <arm_float_to_q7>:
 800ca34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca36:	0895      	lsrs	r5, r2, #2
 800ca38:	d078      	beq.n	800cb2c <arm_float_to_q7+0xf8>
 800ca3a:	f101 0c04 	add.w	ip, r1, #4
 800ca3e:	eddf 5a6b 	vldr	s11, [pc, #428]	; 800cbec <arm_float_to_q7+0x1b8>
 800ca42:	f100 0e10 	add.w	lr, r0, #16
 800ca46:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ca4a:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800ca4e:	00ae      	lsls	r6, r5, #2
 800ca50:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800ca54:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800ca58:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800ca5c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ca60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca64:	bfd4      	ite	le
 800ca66:	eef0 7a45 	vmovle.f32	s15, s10
 800ca6a:	eef0 7a46 	vmovgt.f32	s15, s12
 800ca6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca76:	ee17 3a90 	vmov	r3, s15
 800ca7a:	b21b      	sxth	r3, r3
 800ca7c:	f303 0307 	ssat	r3, #8, r3
 800ca80:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800ca84:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800ca88:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800ca8c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ca90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca94:	bfd4      	ite	le
 800ca96:	eef0 7a45 	vmovle.f32	s15, s10
 800ca9a:	eef0 7a46 	vmovgt.f32	s15, s12
 800ca9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800caa6:	ee17 3a90 	vmov	r3, s15
 800caaa:	b21b      	sxth	r3, r3
 800caac:	f303 0307 	ssat	r3, #8, r3
 800cab0:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800cab4:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800cab8:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800cabc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800cac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac4:	bfd4      	ite	le
 800cac6:	eef0 7a45 	vmovle.f32	s15, s10
 800caca:	eef0 7a46 	vmovgt.f32	s15, s12
 800cace:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cad6:	ee17 3a90 	vmov	r3, s15
 800cada:	b21b      	sxth	r3, r3
 800cadc:	f303 0307 	ssat	r3, #8, r3
 800cae0:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800cae4:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800cae8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800caec:	ee76 7a86 	vadd.f32	s15, s13, s12
 800caf0:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800caf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800caf8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800cafc:	ee17 3a90 	vmov	r3, s15
 800cb00:	ee17 7a10 	vmov	r7, s14
 800cb04:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800cb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0c:	b21b      	sxth	r3, r3
 800cb0e:	b23f      	sxth	r7, r7
 800cb10:	dd5f      	ble.n	800cbd2 <arm_float_to_q7+0x19e>
 800cb12:	f303 0307 	ssat	r3, #8, r3
 800cb16:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800cb1a:	f10c 0c04 	add.w	ip, ip, #4
 800cb1e:	4564      	cmp	r4, ip
 800cb20:	f10e 0e10 	add.w	lr, lr, #16
 800cb24:	d196      	bne.n	800ca54 <arm_float_to_q7+0x20>
 800cb26:	4431      	add	r1, r6
 800cb28:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800cb2c:	f012 0203 	ands.w	r2, r2, #3
 800cb30:	d04e      	beq.n	800cbd0 <arm_float_to_q7+0x19c>
 800cb32:	edd0 7a00 	vldr	s15, [r0]
 800cb36:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 800cbec <arm_float_to_q7+0x1b8>
 800cb3a:	ee67 6a85 	vmul.f32	s13, s15, s10
 800cb3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cb42:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800cb46:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800cb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4e:	bfd4      	ite	le
 800cb50:	eef0 7a65 	vmovle.f32	s15, s11
 800cb54:	eef0 7a47 	vmovgt.f32	s15, s14
 800cb58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb60:	ee17 3a90 	vmov	r3, s15
 800cb64:	b21b      	sxth	r3, r3
 800cb66:	f303 0307 	ssat	r3, #8, r3
 800cb6a:	3a01      	subs	r2, #1
 800cb6c:	700b      	strb	r3, [r1, #0]
 800cb6e:	d02f      	beq.n	800cbd0 <arm_float_to_q7+0x19c>
 800cb70:	edd0 6a01 	vldr	s13, [r0, #4]
 800cb74:	ee26 6a85 	vmul.f32	s12, s13, s10
 800cb78:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800cb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb80:	bfd4      	ite	le
 800cb82:	eef0 6a65 	vmovle.f32	s13, s11
 800cb86:	eef0 6a47 	vmovgt.f32	s13, s14
 800cb8a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cb8e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800cb92:	ee16 3a90 	vmov	r3, s13
 800cb96:	b21b      	sxth	r3, r3
 800cb98:	f303 0307 	ssat	r3, #8, r3
 800cb9c:	2a01      	cmp	r2, #1
 800cb9e:	704b      	strb	r3, [r1, #1]
 800cba0:	d016      	beq.n	800cbd0 <arm_float_to_q7+0x19c>
 800cba2:	edd0 7a02 	vldr	s15, [r0, #8]
 800cba6:	ee27 5a85 	vmul.f32	s10, s15, s10
 800cbaa:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800cbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb2:	bfd4      	ite	le
 800cbb4:	eef0 7a65 	vmovle.f32	s15, s11
 800cbb8:	eef0 7a47 	vmovgt.f32	s15, s14
 800cbbc:	ee77 7a85 	vadd.f32	s15, s15, s10
 800cbc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cbc4:	ee17 3a90 	vmov	r3, s15
 800cbc8:	b21b      	sxth	r3, r3
 800cbca:	f303 0307 	ssat	r3, #8, r3
 800cbce:	708b      	strb	r3, [r1, #2]
 800cbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd2:	f307 0707 	ssat	r7, #8, r7
 800cbd6:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800cbda:	f10c 0c04 	add.w	ip, ip, #4
 800cbde:	45a4      	cmp	ip, r4
 800cbe0:	f10e 0e10 	add.w	lr, lr, #16
 800cbe4:	f47f af36 	bne.w	800ca54 <arm_float_to_q7+0x20>
 800cbe8:	e79d      	b.n	800cb26 <arm_float_to_q7+0xf2>
 800cbea:	bf00      	nop
 800cbec:	43000000 	.word	0x43000000

0800cbf0 <arm_q15_to_float>:
 800cbf0:	b530      	push	{r4, r5, lr}
 800cbf2:	0894      	lsrs	r4, r2, #2
 800cbf4:	d038      	beq.n	800cc68 <arm_q15_to_float+0x78>
 800cbf6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ccb8 <arm_q15_to_float+0xc8>
 800cbfa:	f100 0c08 	add.w	ip, r0, #8
 800cbfe:	f101 0310 	add.w	r3, r1, #16
 800cc02:	46a6      	mov	lr, r4
 800cc04:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800cc08:	ee07 5a90 	vmov	s15, r5
 800cc0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc10:	3310      	adds	r3, #16
 800cc12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc16:	f10c 0c08 	add.w	ip, ip, #8
 800cc1a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800cc1e:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800cc22:	ee07 5a90 	vmov	s15, r5
 800cc26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc2a:	f1be 0e01 	subs.w	lr, lr, #1
 800cc2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc32:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800cc36:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800cc3a:	ee07 5a90 	vmov	s15, r5
 800cc3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc46:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800cc4a:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800cc4e:	ee07 5a90 	vmov	s15, r5
 800cc52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc5a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800cc5e:	d1d1      	bne.n	800cc04 <arm_q15_to_float+0x14>
 800cc60:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800cc64:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800cc68:	f012 0203 	ands.w	r2, r2, #3
 800cc6c:	d023      	beq.n	800ccb6 <arm_q15_to_float+0xc6>
 800cc6e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cc72:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ccb8 <arm_q15_to_float+0xc8>
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc7e:	3a01      	subs	r2, #1
 800cc80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc84:	edc1 7a00 	vstr	s15, [r1]
 800cc88:	d015      	beq.n	800ccb6 <arm_q15_to_float+0xc6>
 800cc8a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800cc8e:	ee07 3a90 	vmov	s15, r3
 800cc92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc96:	2a01      	cmp	r2, #1
 800cc98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc9c:	edc1 7a01 	vstr	s15, [r1, #4]
 800cca0:	d009      	beq.n	800ccb6 <arm_q15_to_float+0xc6>
 800cca2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cca6:	ee07 3a90 	vmov	s15, r3
 800ccaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccb2:	edc1 7a02 	vstr	s15, [r1, #8]
 800ccb6:	bd30      	pop	{r4, r5, pc}
 800ccb8:	38000000 	.word	0x38000000

0800ccbc <arm_q7_to_float>:
 800ccbc:	b530      	push	{r4, r5, lr}
 800ccbe:	0894      	lsrs	r4, r2, #2
 800ccc0:	d037      	beq.n	800cd32 <arm_q7_to_float+0x76>
 800ccc2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800cd84 <arm_q7_to_float+0xc8>
 800ccc6:	1d03      	adds	r3, r0, #4
 800ccc8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800cccc:	f101 0010 	add.w	r0, r1, #16
 800ccd0:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800ccd4:	ee07 ea90 	vmov	s15, lr
 800ccd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccdc:	469e      	mov	lr, r3
 800ccde:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cce2:	3304      	adds	r3, #4
 800cce4:	ed40 7a04 	vstr	s15, [r0, #-16]
 800cce8:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800ccec:	ee07 5a90 	vmov	s15, r5
 800ccf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccf4:	45e6      	cmp	lr, ip
 800ccf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccfa:	f100 0010 	add.w	r0, r0, #16
 800ccfe:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 800cd02:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800cd06:	ee07 5a90 	vmov	s15, r5
 800cd0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd12:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 800cd16:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800cd1a:	ee07 5a90 	vmov	s15, r5
 800cd1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd26:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 800cd2a:	d1d1      	bne.n	800ccd0 <arm_q7_to_float+0x14>
 800cd2c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800cd30:	4660      	mov	r0, ip
 800cd32:	f012 0203 	ands.w	r2, r2, #3
 800cd36:	d023      	beq.n	800cd80 <arm_q7_to_float+0xc4>
 800cd38:	f990 3000 	ldrsb.w	r3, [r0]
 800cd3c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800cd84 <arm_q7_to_float+0xc8>
 800cd40:	ee07 3a90 	vmov	s15, r3
 800cd44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd48:	3a01      	subs	r2, #1
 800cd4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd4e:	edc1 7a00 	vstr	s15, [r1]
 800cd52:	d015      	beq.n	800cd80 <arm_q7_to_float+0xc4>
 800cd54:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cd58:	ee07 3a90 	vmov	s15, r3
 800cd5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd60:	2a01      	cmp	r2, #1
 800cd62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd66:	edc1 7a01 	vstr	s15, [r1, #4]
 800cd6a:	d009      	beq.n	800cd80 <arm_q7_to_float+0xc4>
 800cd6c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800cd70:	ee07 3a90 	vmov	s15, r3
 800cd74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd7c:	edc1 7a02 	vstr	s15, [r1, #8]
 800cd80:	bd30      	pop	{r4, r5, pc}
 800cd82:	bf00      	nop
 800cd84:	3c000000 	.word	0x3c000000

0800cd88 <ai_version_get>:
 800cd88:	0212      	lsls	r2, r2, #8
 800cd8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cd8e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800cd92:	4770      	bx	lr

0800cd94 <ai_platform_version_get>:
 800cd94:	0e02      	lsrs	r2, r0, #24
 800cd96:	2300      	movs	r3, #0
 800cd98:	f362 0307 	bfi	r3, r2, #0, #8
 800cd9c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800cda0:	f362 230f 	bfi	r3, r2, #8, #8
 800cda4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800cda8:	f360 4317 	bfi	r3, r0, #16, #8
 800cdac:	b082      	sub	sp, #8
 800cdae:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800cdb2:	b002      	add	sp, #8
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop

0800cdb8 <get_tensor_byte_size>:
 800cdb8:	b410      	push	{r4}
 800cdba:	6983      	ldr	r3, [r0, #24]
 800cdbc:	68c4      	ldr	r4, [r0, #12]
 800cdbe:	6941      	ldr	r1, [r0, #20]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68e0      	ldr	r0, [r4, #12]
 800cdc4:	4a07      	ldr	r2, [pc, #28]	; (800cde4 <get_tensor_byte_size+0x2c>)
 800cdc6:	68c9      	ldr	r1, [r1, #12]
 800cdc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800cdd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cdd4:	fb01 f000 	mul.w	r0, r1, r0
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	bf04      	itt	eq
 800cddc:	3007      	addeq	r0, #7
 800cdde:	08c0      	lsreq	r0, r0, #3
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	000400c0 	.word	0x000400c0

0800cde8 <ai_array_to_buffer_fmt>:
 800cde8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d050      	beq.n	800ce92 <ai_array_to_buffer_fmt+0xaa>
 800cdf0:	4b2a      	ldr	r3, [pc, #168]	; (800ce9c <ai_array_to_buffer_fmt+0xb4>)
 800cdf2:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d00b      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800cdfa:	dc1c      	bgt.n	800ce36 <ai_array_to_buffer_fmt+0x4e>
 800cdfc:	4b28      	ldr	r3, [pc, #160]	; (800cea0 <ai_array_to_buffer_fmt+0xb8>)
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d007      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce02:	dd0b      	ble.n	800ce1c <ai_array_to_buffer_fmt+0x34>
 800ce04:	4b27      	ldr	r3, [pc, #156]	; (800cea4 <ai_array_to_buffer_fmt+0xbc>)
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d003      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce0a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d131      	bne.n	800ce76 <ai_array_to_buffer_fmt+0x8e>
 800ce12:	4613      	mov	r3, r2
 800ce14:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ce18:	4318      	orrs	r0, r3
 800ce1a:	4770      	bx	lr
 800ce1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d0f6      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce24:	dd2c      	ble.n	800ce80 <ai_array_to_buffer_fmt+0x98>
 800ce26:	4b20      	ldr	r3, [pc, #128]	; (800cea8 <ai_array_to_buffer_fmt+0xc0>)
 800ce28:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	bf18      	it	ne
 800ce30:	2340      	movne	r3, #64	; 0x40
 800ce32:	4318      	orrs	r0, r3
 800ce34:	4770      	bx	lr
 800ce36:	4b1d      	ldr	r3, [pc, #116]	; (800ceac <ai_array_to_buffer_fmt+0xc4>)
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d0ea      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce3c:	dd0e      	ble.n	800ce5c <ai_array_to_buffer_fmt+0x74>
 800ce3e:	4b1c      	ldr	r3, [pc, #112]	; (800ceb0 <ai_array_to_buffer_fmt+0xc8>)
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d0e6      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce44:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d0e2      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce4c:	4b19      	ldr	r3, [pc, #100]	; (800ceb4 <ai_array_to_buffer_fmt+0xcc>)
 800ce4e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ce52:	429a      	cmp	r2, r3
 800ce54:	bf18      	it	ne
 800ce56:	2340      	movne	r3, #64	; 0x40
 800ce58:	4318      	orrs	r0, r3
 800ce5a:	4770      	bx	lr
 800ce5c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d0d6      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce64:	3307      	adds	r3, #7
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d0d3      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce6a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	bf18      	it	ne
 800ce72:	2340      	movne	r3, #64	; 0x40
 800ce74:	e7ce      	b.n	800ce14 <ai_array_to_buffer_fmt+0x2c>
 800ce76:	4b10      	ldr	r3, [pc, #64]	; (800ceb8 <ai_array_to_buffer_fmt+0xd0>)
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	bf18      	it	ne
 800ce7c:	2340      	movne	r3, #64	; 0x40
 800ce7e:	e7c9      	b.n	800ce14 <ai_array_to_buffer_fmt+0x2c>
 800ce80:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d0c4      	beq.n	800ce12 <ai_array_to_buffer_fmt+0x2a>
 800ce88:	3380      	adds	r3, #128	; 0x80
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	bf18      	it	ne
 800ce8e:	2340      	movne	r3, #64	; 0x40
 800ce90:	e7c0      	b.n	800ce14 <ai_array_to_buffer_fmt+0x2c>
 800ce92:	4b0a      	ldr	r3, [pc, #40]	; (800cebc <ai_array_to_buffer_fmt+0xd4>)
 800ce94:	4003      	ands	r3, r0
 800ce96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce9a:	e7bb      	b.n	800ce14 <ai_array_to_buffer_fmt+0x2c>
 800ce9c:	00840040 	.word	0x00840040
 800cea0:	00040840 	.word	0x00040840
 800cea4:	00041040 	.word	0x00041040
 800cea8:	00040447 	.word	0x00040447
 800ceac:	00840840 	.word	0x00840840
 800ceb0:	00841040 	.word	0x00841040
 800ceb4:	0084084f 	.word	0x0084084f
 800ceb8:	0004084f 	.word	0x0004084f
 800cebc:	00803fff 	.word	0x00803fff

0800cec0 <ai_array_get_byte_size>:
 800cec0:	b319      	cbz	r1, 800cf0a <ai_array_get_byte_size+0x4a>
 800cec2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800cec6:	fb03 f101 	mul.w	r1, r3, r1
 800ceca:	3107      	adds	r1, #7
 800cecc:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800ced0:	f021 0307 	bic.w	r3, r1, #7
 800ced4:	2a04      	cmp	r2, #4
 800ced6:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800ceda:	fa23 f101 	lsr.w	r1, r3, r1
 800cede:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800cee2:	d00b      	beq.n	800cefc <ai_array_get_byte_size+0x3c>
 800cee4:	2a08      	cmp	r2, #8
 800cee6:	d002      	beq.n	800ceee <ai_array_get_byte_size+0x2e>
 800cee8:	3107      	adds	r1, #7
 800ceea:	08c8      	lsrs	r0, r1, #3
 800ceec:	4770      	bx	lr
 800ceee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cef2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800cef6:	3107      	adds	r1, #7
 800cef8:	08c8      	lsrs	r0, r1, #3
 800cefa:	4770      	bx	lr
 800cefc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cf00:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800cf04:	3107      	adds	r1, #7
 800cf06:	08c8      	lsrs	r0, r1, #3
 800cf08:	4770      	bx	lr
 800cf0a:	4608      	mov	r0, r1
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop

0800cf10 <ai_array_get_data_byte_size>:
 800cf10:	b169      	cbz	r1, 800cf2e <ai_array_get_data_byte_size+0x1e>
 800cf12:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800cf16:	fb02 f101 	mul.w	r1, r2, r1
 800cf1a:	1dcb      	adds	r3, r1, #7
 800cf1c:	f023 0307 	bic.w	r3, r3, #7
 800cf20:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800cf24:	fa23 f000 	lsr.w	r0, r3, r0
 800cf28:	3007      	adds	r0, #7
 800cf2a:	08c0      	lsrs	r0, r0, #3
 800cf2c:	4770      	bx	lr
 800cf2e:	4608      	mov	r0, r1
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop

0800cf34 <__errno>:
 800cf34:	4b01      	ldr	r3, [pc, #4]	; (800cf3c <__errno+0x8>)
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	20001864 	.word	0x20001864

0800cf40 <__sflush_r>:
 800cf40:	898a      	ldrh	r2, [r1, #12]
 800cf42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	4605      	mov	r5, r0
 800cf48:	0710      	lsls	r0, r2, #28
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	d458      	bmi.n	800d000 <__sflush_r+0xc0>
 800cf4e:	684b      	ldr	r3, [r1, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	dc05      	bgt.n	800cf60 <__sflush_r+0x20>
 800cf54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	dc02      	bgt.n	800cf60 <__sflush_r+0x20>
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf62:	2e00      	cmp	r6, #0
 800cf64:	d0f9      	beq.n	800cf5a <__sflush_r+0x1a>
 800cf66:	2300      	movs	r3, #0
 800cf68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf6c:	682f      	ldr	r7, [r5, #0]
 800cf6e:	602b      	str	r3, [r5, #0]
 800cf70:	d032      	beq.n	800cfd8 <__sflush_r+0x98>
 800cf72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	075a      	lsls	r2, r3, #29
 800cf78:	d505      	bpl.n	800cf86 <__sflush_r+0x46>
 800cf7a:	6863      	ldr	r3, [r4, #4]
 800cf7c:	1ac0      	subs	r0, r0, r3
 800cf7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf80:	b10b      	cbz	r3, 800cf86 <__sflush_r+0x46>
 800cf82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf84:	1ac0      	subs	r0, r0, r3
 800cf86:	2300      	movs	r3, #0
 800cf88:	4602      	mov	r2, r0
 800cf8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf8c:	6a21      	ldr	r1, [r4, #32]
 800cf8e:	4628      	mov	r0, r5
 800cf90:	47b0      	blx	r6
 800cf92:	1c43      	adds	r3, r0, #1
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	d106      	bne.n	800cfa6 <__sflush_r+0x66>
 800cf98:	6829      	ldr	r1, [r5, #0]
 800cf9a:	291d      	cmp	r1, #29
 800cf9c:	d82c      	bhi.n	800cff8 <__sflush_r+0xb8>
 800cf9e:	4a2a      	ldr	r2, [pc, #168]	; (800d048 <__sflush_r+0x108>)
 800cfa0:	40ca      	lsrs	r2, r1
 800cfa2:	07d6      	lsls	r6, r2, #31
 800cfa4:	d528      	bpl.n	800cff8 <__sflush_r+0xb8>
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	6062      	str	r2, [r4, #4]
 800cfaa:	04d9      	lsls	r1, r3, #19
 800cfac:	6922      	ldr	r2, [r4, #16]
 800cfae:	6022      	str	r2, [r4, #0]
 800cfb0:	d504      	bpl.n	800cfbc <__sflush_r+0x7c>
 800cfb2:	1c42      	adds	r2, r0, #1
 800cfb4:	d101      	bne.n	800cfba <__sflush_r+0x7a>
 800cfb6:	682b      	ldr	r3, [r5, #0]
 800cfb8:	b903      	cbnz	r3, 800cfbc <__sflush_r+0x7c>
 800cfba:	6560      	str	r0, [r4, #84]	; 0x54
 800cfbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfbe:	602f      	str	r7, [r5, #0]
 800cfc0:	2900      	cmp	r1, #0
 800cfc2:	d0ca      	beq.n	800cf5a <__sflush_r+0x1a>
 800cfc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfc8:	4299      	cmp	r1, r3
 800cfca:	d002      	beq.n	800cfd2 <__sflush_r+0x92>
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f000 f9cf 	bl	800d370 <_free_r>
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	6360      	str	r0, [r4, #52]	; 0x34
 800cfd6:	e7c1      	b.n	800cf5c <__sflush_r+0x1c>
 800cfd8:	6a21      	ldr	r1, [r4, #32]
 800cfda:	2301      	movs	r3, #1
 800cfdc:	4628      	mov	r0, r5
 800cfde:	47b0      	blx	r6
 800cfe0:	1c41      	adds	r1, r0, #1
 800cfe2:	d1c7      	bne.n	800cf74 <__sflush_r+0x34>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d0c4      	beq.n	800cf74 <__sflush_r+0x34>
 800cfea:	2b1d      	cmp	r3, #29
 800cfec:	d001      	beq.n	800cff2 <__sflush_r+0xb2>
 800cfee:	2b16      	cmp	r3, #22
 800cff0:	d101      	bne.n	800cff6 <__sflush_r+0xb6>
 800cff2:	602f      	str	r7, [r5, #0]
 800cff4:	e7b1      	b.n	800cf5a <__sflush_r+0x1a>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cffc:	81a3      	strh	r3, [r4, #12]
 800cffe:	e7ad      	b.n	800cf5c <__sflush_r+0x1c>
 800d000:	690f      	ldr	r7, [r1, #16]
 800d002:	2f00      	cmp	r7, #0
 800d004:	d0a9      	beq.n	800cf5a <__sflush_r+0x1a>
 800d006:	0793      	lsls	r3, r2, #30
 800d008:	680e      	ldr	r6, [r1, #0]
 800d00a:	bf08      	it	eq
 800d00c:	694b      	ldreq	r3, [r1, #20]
 800d00e:	600f      	str	r7, [r1, #0]
 800d010:	bf18      	it	ne
 800d012:	2300      	movne	r3, #0
 800d014:	eba6 0807 	sub.w	r8, r6, r7
 800d018:	608b      	str	r3, [r1, #8]
 800d01a:	f1b8 0f00 	cmp.w	r8, #0
 800d01e:	dd9c      	ble.n	800cf5a <__sflush_r+0x1a>
 800d020:	6a21      	ldr	r1, [r4, #32]
 800d022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d024:	4643      	mov	r3, r8
 800d026:	463a      	mov	r2, r7
 800d028:	4628      	mov	r0, r5
 800d02a:	47b0      	blx	r6
 800d02c:	2800      	cmp	r0, #0
 800d02e:	dc06      	bgt.n	800d03e <__sflush_r+0xfe>
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d036:	81a3      	strh	r3, [r4, #12]
 800d038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d03c:	e78e      	b.n	800cf5c <__sflush_r+0x1c>
 800d03e:	4407      	add	r7, r0
 800d040:	eba8 0800 	sub.w	r8, r8, r0
 800d044:	e7e9      	b.n	800d01a <__sflush_r+0xda>
 800d046:	bf00      	nop
 800d048:	20400001 	.word	0x20400001

0800d04c <_fflush_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	690b      	ldr	r3, [r1, #16]
 800d050:	4605      	mov	r5, r0
 800d052:	460c      	mov	r4, r1
 800d054:	b913      	cbnz	r3, 800d05c <_fflush_r+0x10>
 800d056:	2500      	movs	r5, #0
 800d058:	4628      	mov	r0, r5
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	b118      	cbz	r0, 800d066 <_fflush_r+0x1a>
 800d05e:	6983      	ldr	r3, [r0, #24]
 800d060:	b90b      	cbnz	r3, 800d066 <_fflush_r+0x1a>
 800d062:	f000 f899 	bl	800d198 <__sinit>
 800d066:	4b14      	ldr	r3, [pc, #80]	; (800d0b8 <_fflush_r+0x6c>)
 800d068:	429c      	cmp	r4, r3
 800d06a:	d11b      	bne.n	800d0a4 <_fflush_r+0x58>
 800d06c:	686c      	ldr	r4, [r5, #4]
 800d06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0ef      	beq.n	800d056 <_fflush_r+0xa>
 800d076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d078:	07d0      	lsls	r0, r2, #31
 800d07a:	d404      	bmi.n	800d086 <_fflush_r+0x3a>
 800d07c:	0599      	lsls	r1, r3, #22
 800d07e:	d402      	bmi.n	800d086 <_fflush_r+0x3a>
 800d080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d082:	f000 f94c 	bl	800d31e <__retarget_lock_acquire_recursive>
 800d086:	4628      	mov	r0, r5
 800d088:	4621      	mov	r1, r4
 800d08a:	f7ff ff59 	bl	800cf40 <__sflush_r>
 800d08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d090:	07da      	lsls	r2, r3, #31
 800d092:	4605      	mov	r5, r0
 800d094:	d4e0      	bmi.n	800d058 <_fflush_r+0xc>
 800d096:	89a3      	ldrh	r3, [r4, #12]
 800d098:	059b      	lsls	r3, r3, #22
 800d09a:	d4dd      	bmi.n	800d058 <_fflush_r+0xc>
 800d09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d09e:	f000 f93f 	bl	800d320 <__retarget_lock_release_recursive>
 800d0a2:	e7d9      	b.n	800d058 <_fflush_r+0xc>
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <_fflush_r+0x70>)
 800d0a6:	429c      	cmp	r4, r3
 800d0a8:	d101      	bne.n	800d0ae <_fflush_r+0x62>
 800d0aa:	68ac      	ldr	r4, [r5, #8]
 800d0ac:	e7df      	b.n	800d06e <_fflush_r+0x22>
 800d0ae:	4b04      	ldr	r3, [pc, #16]	; (800d0c0 <_fflush_r+0x74>)
 800d0b0:	429c      	cmp	r4, r3
 800d0b2:	bf08      	it	eq
 800d0b4:	68ec      	ldreq	r4, [r5, #12]
 800d0b6:	e7da      	b.n	800d06e <_fflush_r+0x22>
 800d0b8:	08018494 	.word	0x08018494
 800d0bc:	080184b4 	.word	0x080184b4
 800d0c0:	08018474 	.word	0x08018474

0800d0c4 <fflush>:
 800d0c4:	4601      	mov	r1, r0
 800d0c6:	b920      	cbnz	r0, 800d0d2 <fflush+0xe>
 800d0c8:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <fflush+0x18>)
 800d0ca:	4905      	ldr	r1, [pc, #20]	; (800d0e0 <fflush+0x1c>)
 800d0cc:	6818      	ldr	r0, [r3, #0]
 800d0ce:	f000 b8e1 	b.w	800d294 <_fwalk_reent>
 800d0d2:	4b04      	ldr	r3, [pc, #16]	; (800d0e4 <fflush+0x20>)
 800d0d4:	6818      	ldr	r0, [r3, #0]
 800d0d6:	f7ff bfb9 	b.w	800d04c <_fflush_r>
 800d0da:	bf00      	nop
 800d0dc:	080184d4 	.word	0x080184d4
 800d0e0:	0800d04d 	.word	0x0800d04d
 800d0e4:	20001864 	.word	0x20001864

0800d0e8 <std>:
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d0f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0f6:	6083      	str	r3, [r0, #8]
 800d0f8:	8181      	strh	r1, [r0, #12]
 800d0fa:	6643      	str	r3, [r0, #100]	; 0x64
 800d0fc:	81c2      	strh	r2, [r0, #14]
 800d0fe:	6183      	str	r3, [r0, #24]
 800d100:	4619      	mov	r1, r3
 800d102:	2208      	movs	r2, #8
 800d104:	305c      	adds	r0, #92	; 0x5c
 800d106:	f000 f92b 	bl	800d360 <memset>
 800d10a:	4b05      	ldr	r3, [pc, #20]	; (800d120 <std+0x38>)
 800d10c:	6263      	str	r3, [r4, #36]	; 0x24
 800d10e:	4b05      	ldr	r3, [pc, #20]	; (800d124 <std+0x3c>)
 800d110:	62a3      	str	r3, [r4, #40]	; 0x28
 800d112:	4b05      	ldr	r3, [pc, #20]	; (800d128 <std+0x40>)
 800d114:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d116:	4b05      	ldr	r3, [pc, #20]	; (800d12c <std+0x44>)
 800d118:	6224      	str	r4, [r4, #32]
 800d11a:	6323      	str	r3, [r4, #48]	; 0x30
 800d11c:	bd10      	pop	{r4, pc}
 800d11e:	bf00      	nop
 800d120:	0800defd 	.word	0x0800defd
 800d124:	0800df1f 	.word	0x0800df1f
 800d128:	0800df57 	.word	0x0800df57
 800d12c:	0800df7b 	.word	0x0800df7b

0800d130 <_cleanup_r>:
 800d130:	4901      	ldr	r1, [pc, #4]	; (800d138 <_cleanup_r+0x8>)
 800d132:	f000 b8af 	b.w	800d294 <_fwalk_reent>
 800d136:	bf00      	nop
 800d138:	0800d04d 	.word	0x0800d04d

0800d13c <__sfmoreglue>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	2268      	movs	r2, #104	; 0x68
 800d140:	1e4d      	subs	r5, r1, #1
 800d142:	4355      	muls	r5, r2
 800d144:	460e      	mov	r6, r1
 800d146:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d14a:	f000 f97d 	bl	800d448 <_malloc_r>
 800d14e:	4604      	mov	r4, r0
 800d150:	b140      	cbz	r0, 800d164 <__sfmoreglue+0x28>
 800d152:	2100      	movs	r1, #0
 800d154:	e9c0 1600 	strd	r1, r6, [r0]
 800d158:	300c      	adds	r0, #12
 800d15a:	60a0      	str	r0, [r4, #8]
 800d15c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d160:	f000 f8fe 	bl	800d360 <memset>
 800d164:	4620      	mov	r0, r4
 800d166:	bd70      	pop	{r4, r5, r6, pc}

0800d168 <__sfp_lock_acquire>:
 800d168:	4801      	ldr	r0, [pc, #4]	; (800d170 <__sfp_lock_acquire+0x8>)
 800d16a:	f000 b8d8 	b.w	800d31e <__retarget_lock_acquire_recursive>
 800d16e:	bf00      	nop
 800d170:	2000698d 	.word	0x2000698d

0800d174 <__sfp_lock_release>:
 800d174:	4801      	ldr	r0, [pc, #4]	; (800d17c <__sfp_lock_release+0x8>)
 800d176:	f000 b8d3 	b.w	800d320 <__retarget_lock_release_recursive>
 800d17a:	bf00      	nop
 800d17c:	2000698d 	.word	0x2000698d

0800d180 <__sinit_lock_acquire>:
 800d180:	4801      	ldr	r0, [pc, #4]	; (800d188 <__sinit_lock_acquire+0x8>)
 800d182:	f000 b8cc 	b.w	800d31e <__retarget_lock_acquire_recursive>
 800d186:	bf00      	nop
 800d188:	2000698e 	.word	0x2000698e

0800d18c <__sinit_lock_release>:
 800d18c:	4801      	ldr	r0, [pc, #4]	; (800d194 <__sinit_lock_release+0x8>)
 800d18e:	f000 b8c7 	b.w	800d320 <__retarget_lock_release_recursive>
 800d192:	bf00      	nop
 800d194:	2000698e 	.word	0x2000698e

0800d198 <__sinit>:
 800d198:	b510      	push	{r4, lr}
 800d19a:	4604      	mov	r4, r0
 800d19c:	f7ff fff0 	bl	800d180 <__sinit_lock_acquire>
 800d1a0:	69a3      	ldr	r3, [r4, #24]
 800d1a2:	b11b      	cbz	r3, 800d1ac <__sinit+0x14>
 800d1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a8:	f7ff bff0 	b.w	800d18c <__sinit_lock_release>
 800d1ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1b0:	6523      	str	r3, [r4, #80]	; 0x50
 800d1b2:	4b13      	ldr	r3, [pc, #76]	; (800d200 <__sinit+0x68>)
 800d1b4:	4a13      	ldr	r2, [pc, #76]	; (800d204 <__sinit+0x6c>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d1ba:	42a3      	cmp	r3, r4
 800d1bc:	bf04      	itt	eq
 800d1be:	2301      	moveq	r3, #1
 800d1c0:	61a3      	streq	r3, [r4, #24]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f000 f820 	bl	800d208 <__sfp>
 800d1c8:	6060      	str	r0, [r4, #4]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 f81c 	bl	800d208 <__sfp>
 800d1d0:	60a0      	str	r0, [r4, #8]
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 f818 	bl	800d208 <__sfp>
 800d1d8:	2200      	movs	r2, #0
 800d1da:	60e0      	str	r0, [r4, #12]
 800d1dc:	2104      	movs	r1, #4
 800d1de:	6860      	ldr	r0, [r4, #4]
 800d1e0:	f7ff ff82 	bl	800d0e8 <std>
 800d1e4:	68a0      	ldr	r0, [r4, #8]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	2109      	movs	r1, #9
 800d1ea:	f7ff ff7d 	bl	800d0e8 <std>
 800d1ee:	68e0      	ldr	r0, [r4, #12]
 800d1f0:	2202      	movs	r2, #2
 800d1f2:	2112      	movs	r1, #18
 800d1f4:	f7ff ff78 	bl	800d0e8 <std>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	61a3      	str	r3, [r4, #24]
 800d1fc:	e7d2      	b.n	800d1a4 <__sinit+0xc>
 800d1fe:	bf00      	nop
 800d200:	080184d4 	.word	0x080184d4
 800d204:	0800d131 	.word	0x0800d131

0800d208 <__sfp>:
 800d208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20a:	4607      	mov	r7, r0
 800d20c:	f7ff ffac 	bl	800d168 <__sfp_lock_acquire>
 800d210:	4b1e      	ldr	r3, [pc, #120]	; (800d28c <__sfp+0x84>)
 800d212:	681e      	ldr	r6, [r3, #0]
 800d214:	69b3      	ldr	r3, [r6, #24]
 800d216:	b913      	cbnz	r3, 800d21e <__sfp+0x16>
 800d218:	4630      	mov	r0, r6
 800d21a:	f7ff ffbd 	bl	800d198 <__sinit>
 800d21e:	3648      	adds	r6, #72	; 0x48
 800d220:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d224:	3b01      	subs	r3, #1
 800d226:	d503      	bpl.n	800d230 <__sfp+0x28>
 800d228:	6833      	ldr	r3, [r6, #0]
 800d22a:	b30b      	cbz	r3, 800d270 <__sfp+0x68>
 800d22c:	6836      	ldr	r6, [r6, #0]
 800d22e:	e7f7      	b.n	800d220 <__sfp+0x18>
 800d230:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d234:	b9d5      	cbnz	r5, 800d26c <__sfp+0x64>
 800d236:	4b16      	ldr	r3, [pc, #88]	; (800d290 <__sfp+0x88>)
 800d238:	60e3      	str	r3, [r4, #12]
 800d23a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d23e:	6665      	str	r5, [r4, #100]	; 0x64
 800d240:	f000 f86c 	bl	800d31c <__retarget_lock_init_recursive>
 800d244:	f7ff ff96 	bl	800d174 <__sfp_lock_release>
 800d248:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d24c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d250:	6025      	str	r5, [r4, #0]
 800d252:	61a5      	str	r5, [r4, #24]
 800d254:	2208      	movs	r2, #8
 800d256:	4629      	mov	r1, r5
 800d258:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d25c:	f000 f880 	bl	800d360 <memset>
 800d260:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d264:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d268:	4620      	mov	r0, r4
 800d26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d26c:	3468      	adds	r4, #104	; 0x68
 800d26e:	e7d9      	b.n	800d224 <__sfp+0x1c>
 800d270:	2104      	movs	r1, #4
 800d272:	4638      	mov	r0, r7
 800d274:	f7ff ff62 	bl	800d13c <__sfmoreglue>
 800d278:	4604      	mov	r4, r0
 800d27a:	6030      	str	r0, [r6, #0]
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d1d5      	bne.n	800d22c <__sfp+0x24>
 800d280:	f7ff ff78 	bl	800d174 <__sfp_lock_release>
 800d284:	230c      	movs	r3, #12
 800d286:	603b      	str	r3, [r7, #0]
 800d288:	e7ee      	b.n	800d268 <__sfp+0x60>
 800d28a:	bf00      	nop
 800d28c:	080184d4 	.word	0x080184d4
 800d290:	ffff0001 	.word	0xffff0001

0800d294 <_fwalk_reent>:
 800d294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d298:	4606      	mov	r6, r0
 800d29a:	4688      	mov	r8, r1
 800d29c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d2a0:	2700      	movs	r7, #0
 800d2a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2a6:	f1b9 0901 	subs.w	r9, r9, #1
 800d2aa:	d505      	bpl.n	800d2b8 <_fwalk_reent+0x24>
 800d2ac:	6824      	ldr	r4, [r4, #0]
 800d2ae:	2c00      	cmp	r4, #0
 800d2b0:	d1f7      	bne.n	800d2a2 <_fwalk_reent+0xe>
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2b8:	89ab      	ldrh	r3, [r5, #12]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d907      	bls.n	800d2ce <_fwalk_reent+0x3a>
 800d2be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	d003      	beq.n	800d2ce <_fwalk_reent+0x3a>
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	47c0      	blx	r8
 800d2cc:	4307      	orrs	r7, r0
 800d2ce:	3568      	adds	r5, #104	; 0x68
 800d2d0:	e7e9      	b.n	800d2a6 <_fwalk_reent+0x12>
	...

0800d2d4 <__libc_init_array>:
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	4d0d      	ldr	r5, [pc, #52]	; (800d30c <__libc_init_array+0x38>)
 800d2d8:	4c0d      	ldr	r4, [pc, #52]	; (800d310 <__libc_init_array+0x3c>)
 800d2da:	1b64      	subs	r4, r4, r5
 800d2dc:	10a4      	asrs	r4, r4, #2
 800d2de:	2600      	movs	r6, #0
 800d2e0:	42a6      	cmp	r6, r4
 800d2e2:	d109      	bne.n	800d2f8 <__libc_init_array+0x24>
 800d2e4:	4d0b      	ldr	r5, [pc, #44]	; (800d314 <__libc_init_array+0x40>)
 800d2e6:	4c0c      	ldr	r4, [pc, #48]	; (800d318 <__libc_init_array+0x44>)
 800d2e8:	f003 f8e0 	bl	80104ac <_init>
 800d2ec:	1b64      	subs	r4, r4, r5
 800d2ee:	10a4      	asrs	r4, r4, #2
 800d2f0:	2600      	movs	r6, #0
 800d2f2:	42a6      	cmp	r6, r4
 800d2f4:	d105      	bne.n	800d302 <__libc_init_array+0x2e>
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}
 800d2f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2fc:	4798      	blx	r3
 800d2fe:	3601      	adds	r6, #1
 800d300:	e7ee      	b.n	800d2e0 <__libc_init_array+0xc>
 800d302:	f855 3b04 	ldr.w	r3, [r5], #4
 800d306:	4798      	blx	r3
 800d308:	3601      	adds	r6, #1
 800d30a:	e7f2      	b.n	800d2f2 <__libc_init_array+0x1e>
 800d30c:	080188e0 	.word	0x080188e0
 800d310:	080188e0 	.word	0x080188e0
 800d314:	080188e0 	.word	0x080188e0
 800d318:	080188e4 	.word	0x080188e4

0800d31c <__retarget_lock_init_recursive>:
 800d31c:	4770      	bx	lr

0800d31e <__retarget_lock_acquire_recursive>:
 800d31e:	4770      	bx	lr

0800d320 <__retarget_lock_release_recursive>:
 800d320:	4770      	bx	lr
	...

0800d324 <malloc>:
 800d324:	4b02      	ldr	r3, [pc, #8]	; (800d330 <malloc+0xc>)
 800d326:	4601      	mov	r1, r0
 800d328:	6818      	ldr	r0, [r3, #0]
 800d32a:	f000 b88d 	b.w	800d448 <_malloc_r>
 800d32e:	bf00      	nop
 800d330:	20001864 	.word	0x20001864

0800d334 <free>:
 800d334:	4b02      	ldr	r3, [pc, #8]	; (800d340 <free+0xc>)
 800d336:	4601      	mov	r1, r0
 800d338:	6818      	ldr	r0, [r3, #0]
 800d33a:	f000 b819 	b.w	800d370 <_free_r>
 800d33e:	bf00      	nop
 800d340:	20001864 	.word	0x20001864

0800d344 <memcpy>:
 800d344:	440a      	add	r2, r1
 800d346:	4291      	cmp	r1, r2
 800d348:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d34c:	d100      	bne.n	800d350 <memcpy+0xc>
 800d34e:	4770      	bx	lr
 800d350:	b510      	push	{r4, lr}
 800d352:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d35a:	4291      	cmp	r1, r2
 800d35c:	d1f9      	bne.n	800d352 <memcpy+0xe>
 800d35e:	bd10      	pop	{r4, pc}

0800d360 <memset>:
 800d360:	4402      	add	r2, r0
 800d362:	4603      	mov	r3, r0
 800d364:	4293      	cmp	r3, r2
 800d366:	d100      	bne.n	800d36a <memset+0xa>
 800d368:	4770      	bx	lr
 800d36a:	f803 1b01 	strb.w	r1, [r3], #1
 800d36e:	e7f9      	b.n	800d364 <memset+0x4>

0800d370 <_free_r>:
 800d370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d372:	2900      	cmp	r1, #0
 800d374:	d044      	beq.n	800d400 <_free_r+0x90>
 800d376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d37a:	9001      	str	r0, [sp, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f1a1 0404 	sub.w	r4, r1, #4
 800d382:	bfb8      	it	lt
 800d384:	18e4      	addlt	r4, r4, r3
 800d386:	f001 fcf5 	bl	800ed74 <__malloc_lock>
 800d38a:	4a1e      	ldr	r2, [pc, #120]	; (800d404 <_free_r+0x94>)
 800d38c:	9801      	ldr	r0, [sp, #4]
 800d38e:	6813      	ldr	r3, [r2, #0]
 800d390:	b933      	cbnz	r3, 800d3a0 <_free_r+0x30>
 800d392:	6063      	str	r3, [r4, #4]
 800d394:	6014      	str	r4, [r2, #0]
 800d396:	b003      	add	sp, #12
 800d398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d39c:	f001 bcf0 	b.w	800ed80 <__malloc_unlock>
 800d3a0:	42a3      	cmp	r3, r4
 800d3a2:	d908      	bls.n	800d3b6 <_free_r+0x46>
 800d3a4:	6825      	ldr	r5, [r4, #0]
 800d3a6:	1961      	adds	r1, r4, r5
 800d3a8:	428b      	cmp	r3, r1
 800d3aa:	bf01      	itttt	eq
 800d3ac:	6819      	ldreq	r1, [r3, #0]
 800d3ae:	685b      	ldreq	r3, [r3, #4]
 800d3b0:	1949      	addeq	r1, r1, r5
 800d3b2:	6021      	streq	r1, [r4, #0]
 800d3b4:	e7ed      	b.n	800d392 <_free_r+0x22>
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	b10b      	cbz	r3, 800d3c0 <_free_r+0x50>
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	d9fa      	bls.n	800d3b6 <_free_r+0x46>
 800d3c0:	6811      	ldr	r1, [r2, #0]
 800d3c2:	1855      	adds	r5, r2, r1
 800d3c4:	42a5      	cmp	r5, r4
 800d3c6:	d10b      	bne.n	800d3e0 <_free_r+0x70>
 800d3c8:	6824      	ldr	r4, [r4, #0]
 800d3ca:	4421      	add	r1, r4
 800d3cc:	1854      	adds	r4, r2, r1
 800d3ce:	42a3      	cmp	r3, r4
 800d3d0:	6011      	str	r1, [r2, #0]
 800d3d2:	d1e0      	bne.n	800d396 <_free_r+0x26>
 800d3d4:	681c      	ldr	r4, [r3, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	6053      	str	r3, [r2, #4]
 800d3da:	4421      	add	r1, r4
 800d3dc:	6011      	str	r1, [r2, #0]
 800d3de:	e7da      	b.n	800d396 <_free_r+0x26>
 800d3e0:	d902      	bls.n	800d3e8 <_free_r+0x78>
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	6003      	str	r3, [r0, #0]
 800d3e6:	e7d6      	b.n	800d396 <_free_r+0x26>
 800d3e8:	6825      	ldr	r5, [r4, #0]
 800d3ea:	1961      	adds	r1, r4, r5
 800d3ec:	428b      	cmp	r3, r1
 800d3ee:	bf04      	itt	eq
 800d3f0:	6819      	ldreq	r1, [r3, #0]
 800d3f2:	685b      	ldreq	r3, [r3, #4]
 800d3f4:	6063      	str	r3, [r4, #4]
 800d3f6:	bf04      	itt	eq
 800d3f8:	1949      	addeq	r1, r1, r5
 800d3fa:	6021      	streq	r1, [r4, #0]
 800d3fc:	6054      	str	r4, [r2, #4]
 800d3fe:	e7ca      	b.n	800d396 <_free_r+0x26>
 800d400:	b003      	add	sp, #12
 800d402:	bd30      	pop	{r4, r5, pc}
 800d404:	20006990 	.word	0x20006990

0800d408 <sbrk_aligned>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	4e0e      	ldr	r6, [pc, #56]	; (800d444 <sbrk_aligned+0x3c>)
 800d40c:	460c      	mov	r4, r1
 800d40e:	6831      	ldr	r1, [r6, #0]
 800d410:	4605      	mov	r5, r0
 800d412:	b911      	cbnz	r1, 800d41a <sbrk_aligned+0x12>
 800d414:	f000 fd62 	bl	800dedc <_sbrk_r>
 800d418:	6030      	str	r0, [r6, #0]
 800d41a:	4621      	mov	r1, r4
 800d41c:	4628      	mov	r0, r5
 800d41e:	f000 fd5d 	bl	800dedc <_sbrk_r>
 800d422:	1c43      	adds	r3, r0, #1
 800d424:	d00a      	beq.n	800d43c <sbrk_aligned+0x34>
 800d426:	1cc4      	adds	r4, r0, #3
 800d428:	f024 0403 	bic.w	r4, r4, #3
 800d42c:	42a0      	cmp	r0, r4
 800d42e:	d007      	beq.n	800d440 <sbrk_aligned+0x38>
 800d430:	1a21      	subs	r1, r4, r0
 800d432:	4628      	mov	r0, r5
 800d434:	f000 fd52 	bl	800dedc <_sbrk_r>
 800d438:	3001      	adds	r0, #1
 800d43a:	d101      	bne.n	800d440 <sbrk_aligned+0x38>
 800d43c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d440:	4620      	mov	r0, r4
 800d442:	bd70      	pop	{r4, r5, r6, pc}
 800d444:	20006994 	.word	0x20006994

0800d448 <_malloc_r>:
 800d448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d44c:	1ccd      	adds	r5, r1, #3
 800d44e:	f025 0503 	bic.w	r5, r5, #3
 800d452:	3508      	adds	r5, #8
 800d454:	2d0c      	cmp	r5, #12
 800d456:	bf38      	it	cc
 800d458:	250c      	movcc	r5, #12
 800d45a:	2d00      	cmp	r5, #0
 800d45c:	4607      	mov	r7, r0
 800d45e:	db01      	blt.n	800d464 <_malloc_r+0x1c>
 800d460:	42a9      	cmp	r1, r5
 800d462:	d905      	bls.n	800d470 <_malloc_r+0x28>
 800d464:	230c      	movs	r3, #12
 800d466:	603b      	str	r3, [r7, #0]
 800d468:	2600      	movs	r6, #0
 800d46a:	4630      	mov	r0, r6
 800d46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d470:	4e2e      	ldr	r6, [pc, #184]	; (800d52c <_malloc_r+0xe4>)
 800d472:	f001 fc7f 	bl	800ed74 <__malloc_lock>
 800d476:	6833      	ldr	r3, [r6, #0]
 800d478:	461c      	mov	r4, r3
 800d47a:	bb34      	cbnz	r4, 800d4ca <_malloc_r+0x82>
 800d47c:	4629      	mov	r1, r5
 800d47e:	4638      	mov	r0, r7
 800d480:	f7ff ffc2 	bl	800d408 <sbrk_aligned>
 800d484:	1c43      	adds	r3, r0, #1
 800d486:	4604      	mov	r4, r0
 800d488:	d14d      	bne.n	800d526 <_malloc_r+0xde>
 800d48a:	6834      	ldr	r4, [r6, #0]
 800d48c:	4626      	mov	r6, r4
 800d48e:	2e00      	cmp	r6, #0
 800d490:	d140      	bne.n	800d514 <_malloc_r+0xcc>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	4631      	mov	r1, r6
 800d496:	4638      	mov	r0, r7
 800d498:	eb04 0803 	add.w	r8, r4, r3
 800d49c:	f000 fd1e 	bl	800dedc <_sbrk_r>
 800d4a0:	4580      	cmp	r8, r0
 800d4a2:	d13a      	bne.n	800d51a <_malloc_r+0xd2>
 800d4a4:	6821      	ldr	r1, [r4, #0]
 800d4a6:	3503      	adds	r5, #3
 800d4a8:	1a6d      	subs	r5, r5, r1
 800d4aa:	f025 0503 	bic.w	r5, r5, #3
 800d4ae:	3508      	adds	r5, #8
 800d4b0:	2d0c      	cmp	r5, #12
 800d4b2:	bf38      	it	cc
 800d4b4:	250c      	movcc	r5, #12
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	f7ff ffa5 	bl	800d408 <sbrk_aligned>
 800d4be:	3001      	adds	r0, #1
 800d4c0:	d02b      	beq.n	800d51a <_malloc_r+0xd2>
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	442b      	add	r3, r5
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	e00e      	b.n	800d4e8 <_malloc_r+0xa0>
 800d4ca:	6822      	ldr	r2, [r4, #0]
 800d4cc:	1b52      	subs	r2, r2, r5
 800d4ce:	d41e      	bmi.n	800d50e <_malloc_r+0xc6>
 800d4d0:	2a0b      	cmp	r2, #11
 800d4d2:	d916      	bls.n	800d502 <_malloc_r+0xba>
 800d4d4:	1961      	adds	r1, r4, r5
 800d4d6:	42a3      	cmp	r3, r4
 800d4d8:	6025      	str	r5, [r4, #0]
 800d4da:	bf18      	it	ne
 800d4dc:	6059      	strne	r1, [r3, #4]
 800d4de:	6863      	ldr	r3, [r4, #4]
 800d4e0:	bf08      	it	eq
 800d4e2:	6031      	streq	r1, [r6, #0]
 800d4e4:	5162      	str	r2, [r4, r5]
 800d4e6:	604b      	str	r3, [r1, #4]
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	f104 060b 	add.w	r6, r4, #11
 800d4ee:	f001 fc47 	bl	800ed80 <__malloc_unlock>
 800d4f2:	f026 0607 	bic.w	r6, r6, #7
 800d4f6:	1d23      	adds	r3, r4, #4
 800d4f8:	1af2      	subs	r2, r6, r3
 800d4fa:	d0b6      	beq.n	800d46a <_malloc_r+0x22>
 800d4fc:	1b9b      	subs	r3, r3, r6
 800d4fe:	50a3      	str	r3, [r4, r2]
 800d500:	e7b3      	b.n	800d46a <_malloc_r+0x22>
 800d502:	6862      	ldr	r2, [r4, #4]
 800d504:	42a3      	cmp	r3, r4
 800d506:	bf0c      	ite	eq
 800d508:	6032      	streq	r2, [r6, #0]
 800d50a:	605a      	strne	r2, [r3, #4]
 800d50c:	e7ec      	b.n	800d4e8 <_malloc_r+0xa0>
 800d50e:	4623      	mov	r3, r4
 800d510:	6864      	ldr	r4, [r4, #4]
 800d512:	e7b2      	b.n	800d47a <_malloc_r+0x32>
 800d514:	4634      	mov	r4, r6
 800d516:	6876      	ldr	r6, [r6, #4]
 800d518:	e7b9      	b.n	800d48e <_malloc_r+0x46>
 800d51a:	230c      	movs	r3, #12
 800d51c:	603b      	str	r3, [r7, #0]
 800d51e:	4638      	mov	r0, r7
 800d520:	f001 fc2e 	bl	800ed80 <__malloc_unlock>
 800d524:	e7a1      	b.n	800d46a <_malloc_r+0x22>
 800d526:	6025      	str	r5, [r4, #0]
 800d528:	e7de      	b.n	800d4e8 <_malloc_r+0xa0>
 800d52a:	bf00      	nop
 800d52c:	20006990 	.word	0x20006990

0800d530 <__cvt>:
 800d530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d534:	ec55 4b10 	vmov	r4, r5, d0
 800d538:	2d00      	cmp	r5, #0
 800d53a:	460e      	mov	r6, r1
 800d53c:	4619      	mov	r1, r3
 800d53e:	462b      	mov	r3, r5
 800d540:	bfbb      	ittet	lt
 800d542:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d546:	461d      	movlt	r5, r3
 800d548:	2300      	movge	r3, #0
 800d54a:	232d      	movlt	r3, #45	; 0x2d
 800d54c:	700b      	strb	r3, [r1, #0]
 800d54e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d554:	4691      	mov	r9, r2
 800d556:	f023 0820 	bic.w	r8, r3, #32
 800d55a:	bfbc      	itt	lt
 800d55c:	4622      	movlt	r2, r4
 800d55e:	4614      	movlt	r4, r2
 800d560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d564:	d005      	beq.n	800d572 <__cvt+0x42>
 800d566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d56a:	d100      	bne.n	800d56e <__cvt+0x3e>
 800d56c:	3601      	adds	r6, #1
 800d56e:	2102      	movs	r1, #2
 800d570:	e000      	b.n	800d574 <__cvt+0x44>
 800d572:	2103      	movs	r1, #3
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	ab02      	add	r3, sp, #8
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	ec45 4b10 	vmov	d0, r4, r5
 800d580:	4653      	mov	r3, sl
 800d582:	4632      	mov	r2, r6
 800d584:	f000 fde0 	bl	800e148 <_dtoa_r>
 800d588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d58c:	4607      	mov	r7, r0
 800d58e:	d102      	bne.n	800d596 <__cvt+0x66>
 800d590:	f019 0f01 	tst.w	r9, #1
 800d594:	d022      	beq.n	800d5dc <__cvt+0xac>
 800d596:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d59a:	eb07 0906 	add.w	r9, r7, r6
 800d59e:	d110      	bne.n	800d5c2 <__cvt+0x92>
 800d5a0:	783b      	ldrb	r3, [r7, #0]
 800d5a2:	2b30      	cmp	r3, #48	; 0x30
 800d5a4:	d10a      	bne.n	800d5bc <__cvt+0x8c>
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	f7f3 faa3 	bl	8000af8 <__aeabi_dcmpeq>
 800d5b2:	b918      	cbnz	r0, 800d5bc <__cvt+0x8c>
 800d5b4:	f1c6 0601 	rsb	r6, r6, #1
 800d5b8:	f8ca 6000 	str.w	r6, [sl]
 800d5bc:	f8da 3000 	ldr.w	r3, [sl]
 800d5c0:	4499      	add	r9, r3
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	4629      	mov	r1, r5
 800d5ca:	f7f3 fa95 	bl	8000af8 <__aeabi_dcmpeq>
 800d5ce:	b108      	cbz	r0, 800d5d4 <__cvt+0xa4>
 800d5d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d5d4:	2230      	movs	r2, #48	; 0x30
 800d5d6:	9b03      	ldr	r3, [sp, #12]
 800d5d8:	454b      	cmp	r3, r9
 800d5da:	d307      	bcc.n	800d5ec <__cvt+0xbc>
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5e0:	1bdb      	subs	r3, r3, r7
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	6013      	str	r3, [r2, #0]
 800d5e6:	b004      	add	sp, #16
 800d5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ec:	1c59      	adds	r1, r3, #1
 800d5ee:	9103      	str	r1, [sp, #12]
 800d5f0:	701a      	strb	r2, [r3, #0]
 800d5f2:	e7f0      	b.n	800d5d6 <__cvt+0xa6>

0800d5f4 <__exponent>:
 800d5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2900      	cmp	r1, #0
 800d5fa:	bfb8      	it	lt
 800d5fc:	4249      	neglt	r1, r1
 800d5fe:	f803 2b02 	strb.w	r2, [r3], #2
 800d602:	bfb4      	ite	lt
 800d604:	222d      	movlt	r2, #45	; 0x2d
 800d606:	222b      	movge	r2, #43	; 0x2b
 800d608:	2909      	cmp	r1, #9
 800d60a:	7042      	strb	r2, [r0, #1]
 800d60c:	dd2a      	ble.n	800d664 <__exponent+0x70>
 800d60e:	f10d 0407 	add.w	r4, sp, #7
 800d612:	46a4      	mov	ip, r4
 800d614:	270a      	movs	r7, #10
 800d616:	46a6      	mov	lr, r4
 800d618:	460a      	mov	r2, r1
 800d61a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d61e:	fb07 1516 	mls	r5, r7, r6, r1
 800d622:	3530      	adds	r5, #48	; 0x30
 800d624:	2a63      	cmp	r2, #99	; 0x63
 800d626:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d62a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d62e:	4631      	mov	r1, r6
 800d630:	dcf1      	bgt.n	800d616 <__exponent+0x22>
 800d632:	3130      	adds	r1, #48	; 0x30
 800d634:	f1ae 0502 	sub.w	r5, lr, #2
 800d638:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d63c:	1c44      	adds	r4, r0, #1
 800d63e:	4629      	mov	r1, r5
 800d640:	4561      	cmp	r1, ip
 800d642:	d30a      	bcc.n	800d65a <__exponent+0x66>
 800d644:	f10d 0209 	add.w	r2, sp, #9
 800d648:	eba2 020e 	sub.w	r2, r2, lr
 800d64c:	4565      	cmp	r5, ip
 800d64e:	bf88      	it	hi
 800d650:	2200      	movhi	r2, #0
 800d652:	4413      	add	r3, r2
 800d654:	1a18      	subs	r0, r3, r0
 800d656:	b003      	add	sp, #12
 800d658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d65e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d662:	e7ed      	b.n	800d640 <__exponent+0x4c>
 800d664:	2330      	movs	r3, #48	; 0x30
 800d666:	3130      	adds	r1, #48	; 0x30
 800d668:	7083      	strb	r3, [r0, #2]
 800d66a:	70c1      	strb	r1, [r0, #3]
 800d66c:	1d03      	adds	r3, r0, #4
 800d66e:	e7f1      	b.n	800d654 <__exponent+0x60>

0800d670 <_printf_float>:
 800d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	ed2d 8b02 	vpush	{d8}
 800d678:	b08d      	sub	sp, #52	; 0x34
 800d67a:	460c      	mov	r4, r1
 800d67c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d680:	4616      	mov	r6, r2
 800d682:	461f      	mov	r7, r3
 800d684:	4605      	mov	r5, r0
 800d686:	f001 fb5f 	bl	800ed48 <_localeconv_r>
 800d68a:	f8d0 a000 	ldr.w	sl, [r0]
 800d68e:	4650      	mov	r0, sl
 800d690:	f7f2 fdb6 	bl	8000200 <strlen>
 800d694:	2300      	movs	r3, #0
 800d696:	930a      	str	r3, [sp, #40]	; 0x28
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	f8d8 3000 	ldr.w	r3, [r8]
 800d6a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d6a4:	3307      	adds	r3, #7
 800d6a6:	f023 0307 	bic.w	r3, r3, #7
 800d6aa:	f103 0208 	add.w	r2, r3, #8
 800d6ae:	f8c8 2000 	str.w	r2, [r8]
 800d6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d6ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d6be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d6c2:	9307      	str	r3, [sp, #28]
 800d6c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d6c8:	ee08 0a10 	vmov	s16, r0
 800d6cc:	4b9f      	ldr	r3, [pc, #636]	; (800d94c <_printf_float+0x2dc>)
 800d6ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6d6:	f7f3 fa41 	bl	8000b5c <__aeabi_dcmpun>
 800d6da:	bb88      	cbnz	r0, 800d740 <_printf_float+0xd0>
 800d6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6e0:	4b9a      	ldr	r3, [pc, #616]	; (800d94c <_printf_float+0x2dc>)
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6e6:	f7f3 fa1b 	bl	8000b20 <__aeabi_dcmple>
 800d6ea:	bb48      	cbnz	r0, 800d740 <_printf_float+0xd0>
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	4649      	mov	r1, r9
 800d6f4:	f7f3 fa0a 	bl	8000b0c <__aeabi_dcmplt>
 800d6f8:	b110      	cbz	r0, 800d700 <_printf_float+0x90>
 800d6fa:	232d      	movs	r3, #45	; 0x2d
 800d6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d700:	4b93      	ldr	r3, [pc, #588]	; (800d950 <_printf_float+0x2e0>)
 800d702:	4894      	ldr	r0, [pc, #592]	; (800d954 <_printf_float+0x2e4>)
 800d704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d708:	bf94      	ite	ls
 800d70a:	4698      	movls	r8, r3
 800d70c:	4680      	movhi	r8, r0
 800d70e:	2303      	movs	r3, #3
 800d710:	6123      	str	r3, [r4, #16]
 800d712:	9b05      	ldr	r3, [sp, #20]
 800d714:	f023 0204 	bic.w	r2, r3, #4
 800d718:	6022      	str	r2, [r4, #0]
 800d71a:	f04f 0900 	mov.w	r9, #0
 800d71e:	9700      	str	r7, [sp, #0]
 800d720:	4633      	mov	r3, r6
 800d722:	aa0b      	add	r2, sp, #44	; 0x2c
 800d724:	4621      	mov	r1, r4
 800d726:	4628      	mov	r0, r5
 800d728:	f000 f9d8 	bl	800dadc <_printf_common>
 800d72c:	3001      	adds	r0, #1
 800d72e:	f040 8090 	bne.w	800d852 <_printf_float+0x1e2>
 800d732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d736:	b00d      	add	sp, #52	; 0x34
 800d738:	ecbd 8b02 	vpop	{d8}
 800d73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d740:	4642      	mov	r2, r8
 800d742:	464b      	mov	r3, r9
 800d744:	4640      	mov	r0, r8
 800d746:	4649      	mov	r1, r9
 800d748:	f7f3 fa08 	bl	8000b5c <__aeabi_dcmpun>
 800d74c:	b140      	cbz	r0, 800d760 <_printf_float+0xf0>
 800d74e:	464b      	mov	r3, r9
 800d750:	2b00      	cmp	r3, #0
 800d752:	bfbc      	itt	lt
 800d754:	232d      	movlt	r3, #45	; 0x2d
 800d756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d75a:	487f      	ldr	r0, [pc, #508]	; (800d958 <_printf_float+0x2e8>)
 800d75c:	4b7f      	ldr	r3, [pc, #508]	; (800d95c <_printf_float+0x2ec>)
 800d75e:	e7d1      	b.n	800d704 <_printf_float+0x94>
 800d760:	6863      	ldr	r3, [r4, #4]
 800d762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d766:	9206      	str	r2, [sp, #24]
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	d13f      	bne.n	800d7ec <_printf_float+0x17c>
 800d76c:	2306      	movs	r3, #6
 800d76e:	6063      	str	r3, [r4, #4]
 800d770:	9b05      	ldr	r3, [sp, #20]
 800d772:	6861      	ldr	r1, [r4, #4]
 800d774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d778:	2300      	movs	r3, #0
 800d77a:	9303      	str	r3, [sp, #12]
 800d77c:	ab0a      	add	r3, sp, #40	; 0x28
 800d77e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d782:	ab09      	add	r3, sp, #36	; 0x24
 800d784:	ec49 8b10 	vmov	d0, r8, r9
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	6022      	str	r2, [r4, #0]
 800d78c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d790:	4628      	mov	r0, r5
 800d792:	f7ff fecd 	bl	800d530 <__cvt>
 800d796:	9b06      	ldr	r3, [sp, #24]
 800d798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d79a:	2b47      	cmp	r3, #71	; 0x47
 800d79c:	4680      	mov	r8, r0
 800d79e:	d108      	bne.n	800d7b2 <_printf_float+0x142>
 800d7a0:	1cc8      	adds	r0, r1, #3
 800d7a2:	db02      	blt.n	800d7aa <_printf_float+0x13a>
 800d7a4:	6863      	ldr	r3, [r4, #4]
 800d7a6:	4299      	cmp	r1, r3
 800d7a8:	dd41      	ble.n	800d82e <_printf_float+0x1be>
 800d7aa:	f1ab 0b02 	sub.w	fp, fp, #2
 800d7ae:	fa5f fb8b 	uxtb.w	fp, fp
 800d7b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d7b6:	d820      	bhi.n	800d7fa <_printf_float+0x18a>
 800d7b8:	3901      	subs	r1, #1
 800d7ba:	465a      	mov	r2, fp
 800d7bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d7c0:	9109      	str	r1, [sp, #36]	; 0x24
 800d7c2:	f7ff ff17 	bl	800d5f4 <__exponent>
 800d7c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7c8:	1813      	adds	r3, r2, r0
 800d7ca:	2a01      	cmp	r2, #1
 800d7cc:	4681      	mov	r9, r0
 800d7ce:	6123      	str	r3, [r4, #16]
 800d7d0:	dc02      	bgt.n	800d7d8 <_printf_float+0x168>
 800d7d2:	6822      	ldr	r2, [r4, #0]
 800d7d4:	07d2      	lsls	r2, r2, #31
 800d7d6:	d501      	bpl.n	800d7dc <_printf_float+0x16c>
 800d7d8:	3301      	adds	r3, #1
 800d7da:	6123      	str	r3, [r4, #16]
 800d7dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d09c      	beq.n	800d71e <_printf_float+0xae>
 800d7e4:	232d      	movs	r3, #45	; 0x2d
 800d7e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7ea:	e798      	b.n	800d71e <_printf_float+0xae>
 800d7ec:	9a06      	ldr	r2, [sp, #24]
 800d7ee:	2a47      	cmp	r2, #71	; 0x47
 800d7f0:	d1be      	bne.n	800d770 <_printf_float+0x100>
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1bc      	bne.n	800d770 <_printf_float+0x100>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e7b9      	b.n	800d76e <_printf_float+0xfe>
 800d7fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d7fe:	d118      	bne.n	800d832 <_printf_float+0x1c2>
 800d800:	2900      	cmp	r1, #0
 800d802:	6863      	ldr	r3, [r4, #4]
 800d804:	dd0b      	ble.n	800d81e <_printf_float+0x1ae>
 800d806:	6121      	str	r1, [r4, #16]
 800d808:	b913      	cbnz	r3, 800d810 <_printf_float+0x1a0>
 800d80a:	6822      	ldr	r2, [r4, #0]
 800d80c:	07d0      	lsls	r0, r2, #31
 800d80e:	d502      	bpl.n	800d816 <_printf_float+0x1a6>
 800d810:	3301      	adds	r3, #1
 800d812:	440b      	add	r3, r1
 800d814:	6123      	str	r3, [r4, #16]
 800d816:	65a1      	str	r1, [r4, #88]	; 0x58
 800d818:	f04f 0900 	mov.w	r9, #0
 800d81c:	e7de      	b.n	800d7dc <_printf_float+0x16c>
 800d81e:	b913      	cbnz	r3, 800d826 <_printf_float+0x1b6>
 800d820:	6822      	ldr	r2, [r4, #0]
 800d822:	07d2      	lsls	r2, r2, #31
 800d824:	d501      	bpl.n	800d82a <_printf_float+0x1ba>
 800d826:	3302      	adds	r3, #2
 800d828:	e7f4      	b.n	800d814 <_printf_float+0x1a4>
 800d82a:	2301      	movs	r3, #1
 800d82c:	e7f2      	b.n	800d814 <_printf_float+0x1a4>
 800d82e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d834:	4299      	cmp	r1, r3
 800d836:	db05      	blt.n	800d844 <_printf_float+0x1d4>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	6121      	str	r1, [r4, #16]
 800d83c:	07d8      	lsls	r0, r3, #31
 800d83e:	d5ea      	bpl.n	800d816 <_printf_float+0x1a6>
 800d840:	1c4b      	adds	r3, r1, #1
 800d842:	e7e7      	b.n	800d814 <_printf_float+0x1a4>
 800d844:	2900      	cmp	r1, #0
 800d846:	bfd4      	ite	le
 800d848:	f1c1 0202 	rsble	r2, r1, #2
 800d84c:	2201      	movgt	r2, #1
 800d84e:	4413      	add	r3, r2
 800d850:	e7e0      	b.n	800d814 <_printf_float+0x1a4>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	055a      	lsls	r2, r3, #21
 800d856:	d407      	bmi.n	800d868 <_printf_float+0x1f8>
 800d858:	6923      	ldr	r3, [r4, #16]
 800d85a:	4642      	mov	r2, r8
 800d85c:	4631      	mov	r1, r6
 800d85e:	4628      	mov	r0, r5
 800d860:	47b8      	blx	r7
 800d862:	3001      	adds	r0, #1
 800d864:	d12c      	bne.n	800d8c0 <_printf_float+0x250>
 800d866:	e764      	b.n	800d732 <_printf_float+0xc2>
 800d868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d86c:	f240 80e0 	bls.w	800da30 <_printf_float+0x3c0>
 800d870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d874:	2200      	movs	r2, #0
 800d876:	2300      	movs	r3, #0
 800d878:	f7f3 f93e 	bl	8000af8 <__aeabi_dcmpeq>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d034      	beq.n	800d8ea <_printf_float+0x27a>
 800d880:	4a37      	ldr	r2, [pc, #220]	; (800d960 <_printf_float+0x2f0>)
 800d882:	2301      	movs	r3, #1
 800d884:	4631      	mov	r1, r6
 800d886:	4628      	mov	r0, r5
 800d888:	47b8      	blx	r7
 800d88a:	3001      	adds	r0, #1
 800d88c:	f43f af51 	beq.w	800d732 <_printf_float+0xc2>
 800d890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d894:	429a      	cmp	r2, r3
 800d896:	db02      	blt.n	800d89e <_printf_float+0x22e>
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	07d8      	lsls	r0, r3, #31
 800d89c:	d510      	bpl.n	800d8c0 <_printf_float+0x250>
 800d89e:	ee18 3a10 	vmov	r3, s16
 800d8a2:	4652      	mov	r2, sl
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	47b8      	blx	r7
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	f43f af41 	beq.w	800d732 <_printf_float+0xc2>
 800d8b0:	f04f 0800 	mov.w	r8, #0
 800d8b4:	f104 091a 	add.w	r9, r4, #26
 800d8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	4543      	cmp	r3, r8
 800d8be:	dc09      	bgt.n	800d8d4 <_printf_float+0x264>
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	079b      	lsls	r3, r3, #30
 800d8c4:	f100 8105 	bmi.w	800dad2 <_printf_float+0x462>
 800d8c8:	68e0      	ldr	r0, [r4, #12]
 800d8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8cc:	4298      	cmp	r0, r3
 800d8ce:	bfb8      	it	lt
 800d8d0:	4618      	movlt	r0, r3
 800d8d2:	e730      	b.n	800d736 <_printf_float+0xc6>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	464a      	mov	r2, r9
 800d8d8:	4631      	mov	r1, r6
 800d8da:	4628      	mov	r0, r5
 800d8dc:	47b8      	blx	r7
 800d8de:	3001      	adds	r0, #1
 800d8e0:	f43f af27 	beq.w	800d732 <_printf_float+0xc2>
 800d8e4:	f108 0801 	add.w	r8, r8, #1
 800d8e8:	e7e6      	b.n	800d8b8 <_printf_float+0x248>
 800d8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	dc39      	bgt.n	800d964 <_printf_float+0x2f4>
 800d8f0:	4a1b      	ldr	r2, [pc, #108]	; (800d960 <_printf_float+0x2f0>)
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	4631      	mov	r1, r6
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	47b8      	blx	r7
 800d8fa:	3001      	adds	r0, #1
 800d8fc:	f43f af19 	beq.w	800d732 <_printf_float+0xc2>
 800d900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d904:	4313      	orrs	r3, r2
 800d906:	d102      	bne.n	800d90e <_printf_float+0x29e>
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	07d9      	lsls	r1, r3, #31
 800d90c:	d5d8      	bpl.n	800d8c0 <_printf_float+0x250>
 800d90e:	ee18 3a10 	vmov	r3, s16
 800d912:	4652      	mov	r2, sl
 800d914:	4631      	mov	r1, r6
 800d916:	4628      	mov	r0, r5
 800d918:	47b8      	blx	r7
 800d91a:	3001      	adds	r0, #1
 800d91c:	f43f af09 	beq.w	800d732 <_printf_float+0xc2>
 800d920:	f04f 0900 	mov.w	r9, #0
 800d924:	f104 0a1a 	add.w	sl, r4, #26
 800d928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d92a:	425b      	negs	r3, r3
 800d92c:	454b      	cmp	r3, r9
 800d92e:	dc01      	bgt.n	800d934 <_printf_float+0x2c4>
 800d930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d932:	e792      	b.n	800d85a <_printf_float+0x1ea>
 800d934:	2301      	movs	r3, #1
 800d936:	4652      	mov	r2, sl
 800d938:	4631      	mov	r1, r6
 800d93a:	4628      	mov	r0, r5
 800d93c:	47b8      	blx	r7
 800d93e:	3001      	adds	r0, #1
 800d940:	f43f aef7 	beq.w	800d732 <_printf_float+0xc2>
 800d944:	f109 0901 	add.w	r9, r9, #1
 800d948:	e7ee      	b.n	800d928 <_printf_float+0x2b8>
 800d94a:	bf00      	nop
 800d94c:	7fefffff 	.word	0x7fefffff
 800d950:	080184d8 	.word	0x080184d8
 800d954:	080184dc 	.word	0x080184dc
 800d958:	080184e4 	.word	0x080184e4
 800d95c:	080184e0 	.word	0x080184e0
 800d960:	080184e8 	.word	0x080184e8
 800d964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d968:	429a      	cmp	r2, r3
 800d96a:	bfa8      	it	ge
 800d96c:	461a      	movge	r2, r3
 800d96e:	2a00      	cmp	r2, #0
 800d970:	4691      	mov	r9, r2
 800d972:	dc37      	bgt.n	800d9e4 <_printf_float+0x374>
 800d974:	f04f 0b00 	mov.w	fp, #0
 800d978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d97c:	f104 021a 	add.w	r2, r4, #26
 800d980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	eba3 0309 	sub.w	r3, r3, r9
 800d988:	455b      	cmp	r3, fp
 800d98a:	dc33      	bgt.n	800d9f4 <_printf_float+0x384>
 800d98c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d990:	429a      	cmp	r2, r3
 800d992:	db3b      	blt.n	800da0c <_printf_float+0x39c>
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	07da      	lsls	r2, r3, #31
 800d998:	d438      	bmi.n	800da0c <_printf_float+0x39c>
 800d99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d99c:	9a05      	ldr	r2, [sp, #20]
 800d99e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9a0:	1a9a      	subs	r2, r3, r2
 800d9a2:	eba3 0901 	sub.w	r9, r3, r1
 800d9a6:	4591      	cmp	r9, r2
 800d9a8:	bfa8      	it	ge
 800d9aa:	4691      	movge	r9, r2
 800d9ac:	f1b9 0f00 	cmp.w	r9, #0
 800d9b0:	dc35      	bgt.n	800da1e <_printf_float+0x3ae>
 800d9b2:	f04f 0800 	mov.w	r8, #0
 800d9b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9ba:	f104 0a1a 	add.w	sl, r4, #26
 800d9be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9c2:	1a9b      	subs	r3, r3, r2
 800d9c4:	eba3 0309 	sub.w	r3, r3, r9
 800d9c8:	4543      	cmp	r3, r8
 800d9ca:	f77f af79 	ble.w	800d8c0 <_printf_float+0x250>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	4652      	mov	r2, sl
 800d9d2:	4631      	mov	r1, r6
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	47b8      	blx	r7
 800d9d8:	3001      	adds	r0, #1
 800d9da:	f43f aeaa 	beq.w	800d732 <_printf_float+0xc2>
 800d9de:	f108 0801 	add.w	r8, r8, #1
 800d9e2:	e7ec      	b.n	800d9be <_printf_float+0x34e>
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4642      	mov	r2, r8
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	47b8      	blx	r7
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	d1c0      	bne.n	800d974 <_printf_float+0x304>
 800d9f2:	e69e      	b.n	800d732 <_printf_float+0xc2>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	9205      	str	r2, [sp, #20]
 800d9fc:	47b8      	blx	r7
 800d9fe:	3001      	adds	r0, #1
 800da00:	f43f ae97 	beq.w	800d732 <_printf_float+0xc2>
 800da04:	9a05      	ldr	r2, [sp, #20]
 800da06:	f10b 0b01 	add.w	fp, fp, #1
 800da0a:	e7b9      	b.n	800d980 <_printf_float+0x310>
 800da0c:	ee18 3a10 	vmov	r3, s16
 800da10:	4652      	mov	r2, sl
 800da12:	4631      	mov	r1, r6
 800da14:	4628      	mov	r0, r5
 800da16:	47b8      	blx	r7
 800da18:	3001      	adds	r0, #1
 800da1a:	d1be      	bne.n	800d99a <_printf_float+0x32a>
 800da1c:	e689      	b.n	800d732 <_printf_float+0xc2>
 800da1e:	9a05      	ldr	r2, [sp, #20]
 800da20:	464b      	mov	r3, r9
 800da22:	4442      	add	r2, r8
 800da24:	4631      	mov	r1, r6
 800da26:	4628      	mov	r0, r5
 800da28:	47b8      	blx	r7
 800da2a:	3001      	adds	r0, #1
 800da2c:	d1c1      	bne.n	800d9b2 <_printf_float+0x342>
 800da2e:	e680      	b.n	800d732 <_printf_float+0xc2>
 800da30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da32:	2a01      	cmp	r2, #1
 800da34:	dc01      	bgt.n	800da3a <_printf_float+0x3ca>
 800da36:	07db      	lsls	r3, r3, #31
 800da38:	d538      	bpl.n	800daac <_printf_float+0x43c>
 800da3a:	2301      	movs	r3, #1
 800da3c:	4642      	mov	r2, r8
 800da3e:	4631      	mov	r1, r6
 800da40:	4628      	mov	r0, r5
 800da42:	47b8      	blx	r7
 800da44:	3001      	adds	r0, #1
 800da46:	f43f ae74 	beq.w	800d732 <_printf_float+0xc2>
 800da4a:	ee18 3a10 	vmov	r3, s16
 800da4e:	4652      	mov	r2, sl
 800da50:	4631      	mov	r1, r6
 800da52:	4628      	mov	r0, r5
 800da54:	47b8      	blx	r7
 800da56:	3001      	adds	r0, #1
 800da58:	f43f ae6b 	beq.w	800d732 <_printf_float+0xc2>
 800da5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da60:	2200      	movs	r2, #0
 800da62:	2300      	movs	r3, #0
 800da64:	f7f3 f848 	bl	8000af8 <__aeabi_dcmpeq>
 800da68:	b9d8      	cbnz	r0, 800daa2 <_printf_float+0x432>
 800da6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da6c:	f108 0201 	add.w	r2, r8, #1
 800da70:	3b01      	subs	r3, #1
 800da72:	4631      	mov	r1, r6
 800da74:	4628      	mov	r0, r5
 800da76:	47b8      	blx	r7
 800da78:	3001      	adds	r0, #1
 800da7a:	d10e      	bne.n	800da9a <_printf_float+0x42a>
 800da7c:	e659      	b.n	800d732 <_printf_float+0xc2>
 800da7e:	2301      	movs	r3, #1
 800da80:	4652      	mov	r2, sl
 800da82:	4631      	mov	r1, r6
 800da84:	4628      	mov	r0, r5
 800da86:	47b8      	blx	r7
 800da88:	3001      	adds	r0, #1
 800da8a:	f43f ae52 	beq.w	800d732 <_printf_float+0xc2>
 800da8e:	f108 0801 	add.w	r8, r8, #1
 800da92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da94:	3b01      	subs	r3, #1
 800da96:	4543      	cmp	r3, r8
 800da98:	dcf1      	bgt.n	800da7e <_printf_float+0x40e>
 800da9a:	464b      	mov	r3, r9
 800da9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800daa0:	e6dc      	b.n	800d85c <_printf_float+0x1ec>
 800daa2:	f04f 0800 	mov.w	r8, #0
 800daa6:	f104 0a1a 	add.w	sl, r4, #26
 800daaa:	e7f2      	b.n	800da92 <_printf_float+0x422>
 800daac:	2301      	movs	r3, #1
 800daae:	4642      	mov	r2, r8
 800dab0:	e7df      	b.n	800da72 <_printf_float+0x402>
 800dab2:	2301      	movs	r3, #1
 800dab4:	464a      	mov	r2, r9
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	47b8      	blx	r7
 800dabc:	3001      	adds	r0, #1
 800dabe:	f43f ae38 	beq.w	800d732 <_printf_float+0xc2>
 800dac2:	f108 0801 	add.w	r8, r8, #1
 800dac6:	68e3      	ldr	r3, [r4, #12]
 800dac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800daca:	1a5b      	subs	r3, r3, r1
 800dacc:	4543      	cmp	r3, r8
 800dace:	dcf0      	bgt.n	800dab2 <_printf_float+0x442>
 800dad0:	e6fa      	b.n	800d8c8 <_printf_float+0x258>
 800dad2:	f04f 0800 	mov.w	r8, #0
 800dad6:	f104 0919 	add.w	r9, r4, #25
 800dada:	e7f4      	b.n	800dac6 <_printf_float+0x456>

0800dadc <_printf_common>:
 800dadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae0:	4616      	mov	r6, r2
 800dae2:	4699      	mov	r9, r3
 800dae4:	688a      	ldr	r2, [r1, #8]
 800dae6:	690b      	ldr	r3, [r1, #16]
 800dae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800daec:	4293      	cmp	r3, r2
 800daee:	bfb8      	it	lt
 800daf0:	4613      	movlt	r3, r2
 800daf2:	6033      	str	r3, [r6, #0]
 800daf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800daf8:	4607      	mov	r7, r0
 800dafa:	460c      	mov	r4, r1
 800dafc:	b10a      	cbz	r2, 800db02 <_printf_common+0x26>
 800dafe:	3301      	adds	r3, #1
 800db00:	6033      	str	r3, [r6, #0]
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	0699      	lsls	r1, r3, #26
 800db06:	bf42      	ittt	mi
 800db08:	6833      	ldrmi	r3, [r6, #0]
 800db0a:	3302      	addmi	r3, #2
 800db0c:	6033      	strmi	r3, [r6, #0]
 800db0e:	6825      	ldr	r5, [r4, #0]
 800db10:	f015 0506 	ands.w	r5, r5, #6
 800db14:	d106      	bne.n	800db24 <_printf_common+0x48>
 800db16:	f104 0a19 	add.w	sl, r4, #25
 800db1a:	68e3      	ldr	r3, [r4, #12]
 800db1c:	6832      	ldr	r2, [r6, #0]
 800db1e:	1a9b      	subs	r3, r3, r2
 800db20:	42ab      	cmp	r3, r5
 800db22:	dc26      	bgt.n	800db72 <_printf_common+0x96>
 800db24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db28:	1e13      	subs	r3, r2, #0
 800db2a:	6822      	ldr	r2, [r4, #0]
 800db2c:	bf18      	it	ne
 800db2e:	2301      	movne	r3, #1
 800db30:	0692      	lsls	r2, r2, #26
 800db32:	d42b      	bmi.n	800db8c <_printf_common+0xb0>
 800db34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db38:	4649      	mov	r1, r9
 800db3a:	4638      	mov	r0, r7
 800db3c:	47c0      	blx	r8
 800db3e:	3001      	adds	r0, #1
 800db40:	d01e      	beq.n	800db80 <_printf_common+0xa4>
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	68e5      	ldr	r5, [r4, #12]
 800db46:	6832      	ldr	r2, [r6, #0]
 800db48:	f003 0306 	and.w	r3, r3, #6
 800db4c:	2b04      	cmp	r3, #4
 800db4e:	bf08      	it	eq
 800db50:	1aad      	subeq	r5, r5, r2
 800db52:	68a3      	ldr	r3, [r4, #8]
 800db54:	6922      	ldr	r2, [r4, #16]
 800db56:	bf0c      	ite	eq
 800db58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db5c:	2500      	movne	r5, #0
 800db5e:	4293      	cmp	r3, r2
 800db60:	bfc4      	itt	gt
 800db62:	1a9b      	subgt	r3, r3, r2
 800db64:	18ed      	addgt	r5, r5, r3
 800db66:	2600      	movs	r6, #0
 800db68:	341a      	adds	r4, #26
 800db6a:	42b5      	cmp	r5, r6
 800db6c:	d11a      	bne.n	800dba4 <_printf_common+0xc8>
 800db6e:	2000      	movs	r0, #0
 800db70:	e008      	b.n	800db84 <_printf_common+0xa8>
 800db72:	2301      	movs	r3, #1
 800db74:	4652      	mov	r2, sl
 800db76:	4649      	mov	r1, r9
 800db78:	4638      	mov	r0, r7
 800db7a:	47c0      	blx	r8
 800db7c:	3001      	adds	r0, #1
 800db7e:	d103      	bne.n	800db88 <_printf_common+0xac>
 800db80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db88:	3501      	adds	r5, #1
 800db8a:	e7c6      	b.n	800db1a <_printf_common+0x3e>
 800db8c:	18e1      	adds	r1, r4, r3
 800db8e:	1c5a      	adds	r2, r3, #1
 800db90:	2030      	movs	r0, #48	; 0x30
 800db92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db96:	4422      	add	r2, r4
 800db98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dba0:	3302      	adds	r3, #2
 800dba2:	e7c7      	b.n	800db34 <_printf_common+0x58>
 800dba4:	2301      	movs	r3, #1
 800dba6:	4622      	mov	r2, r4
 800dba8:	4649      	mov	r1, r9
 800dbaa:	4638      	mov	r0, r7
 800dbac:	47c0      	blx	r8
 800dbae:	3001      	adds	r0, #1
 800dbb0:	d0e6      	beq.n	800db80 <_printf_common+0xa4>
 800dbb2:	3601      	adds	r6, #1
 800dbb4:	e7d9      	b.n	800db6a <_printf_common+0x8e>
	...

0800dbb8 <_printf_i>:
 800dbb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbbc:	7e0f      	ldrb	r7, [r1, #24]
 800dbbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dbc0:	2f78      	cmp	r7, #120	; 0x78
 800dbc2:	4691      	mov	r9, r2
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	469a      	mov	sl, r3
 800dbca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dbce:	d807      	bhi.n	800dbe0 <_printf_i+0x28>
 800dbd0:	2f62      	cmp	r7, #98	; 0x62
 800dbd2:	d80a      	bhi.n	800dbea <_printf_i+0x32>
 800dbd4:	2f00      	cmp	r7, #0
 800dbd6:	f000 80d8 	beq.w	800dd8a <_printf_i+0x1d2>
 800dbda:	2f58      	cmp	r7, #88	; 0x58
 800dbdc:	f000 80a3 	beq.w	800dd26 <_printf_i+0x16e>
 800dbe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dbe8:	e03a      	b.n	800dc60 <_printf_i+0xa8>
 800dbea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dbee:	2b15      	cmp	r3, #21
 800dbf0:	d8f6      	bhi.n	800dbe0 <_printf_i+0x28>
 800dbf2:	a101      	add	r1, pc, #4	; (adr r1, 800dbf8 <_printf_i+0x40>)
 800dbf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbf8:	0800dc51 	.word	0x0800dc51
 800dbfc:	0800dc65 	.word	0x0800dc65
 800dc00:	0800dbe1 	.word	0x0800dbe1
 800dc04:	0800dbe1 	.word	0x0800dbe1
 800dc08:	0800dbe1 	.word	0x0800dbe1
 800dc0c:	0800dbe1 	.word	0x0800dbe1
 800dc10:	0800dc65 	.word	0x0800dc65
 800dc14:	0800dbe1 	.word	0x0800dbe1
 800dc18:	0800dbe1 	.word	0x0800dbe1
 800dc1c:	0800dbe1 	.word	0x0800dbe1
 800dc20:	0800dbe1 	.word	0x0800dbe1
 800dc24:	0800dd71 	.word	0x0800dd71
 800dc28:	0800dc95 	.word	0x0800dc95
 800dc2c:	0800dd53 	.word	0x0800dd53
 800dc30:	0800dbe1 	.word	0x0800dbe1
 800dc34:	0800dbe1 	.word	0x0800dbe1
 800dc38:	0800dd93 	.word	0x0800dd93
 800dc3c:	0800dbe1 	.word	0x0800dbe1
 800dc40:	0800dc95 	.word	0x0800dc95
 800dc44:	0800dbe1 	.word	0x0800dbe1
 800dc48:	0800dbe1 	.word	0x0800dbe1
 800dc4c:	0800dd5b 	.word	0x0800dd5b
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	1d1a      	adds	r2, r3, #4
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	602a      	str	r2, [r5, #0]
 800dc58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc60:	2301      	movs	r3, #1
 800dc62:	e0a3      	b.n	800ddac <_printf_i+0x1f4>
 800dc64:	6820      	ldr	r0, [r4, #0]
 800dc66:	6829      	ldr	r1, [r5, #0]
 800dc68:	0606      	lsls	r6, r0, #24
 800dc6a:	f101 0304 	add.w	r3, r1, #4
 800dc6e:	d50a      	bpl.n	800dc86 <_printf_i+0xce>
 800dc70:	680e      	ldr	r6, [r1, #0]
 800dc72:	602b      	str	r3, [r5, #0]
 800dc74:	2e00      	cmp	r6, #0
 800dc76:	da03      	bge.n	800dc80 <_printf_i+0xc8>
 800dc78:	232d      	movs	r3, #45	; 0x2d
 800dc7a:	4276      	negs	r6, r6
 800dc7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc80:	485e      	ldr	r0, [pc, #376]	; (800ddfc <_printf_i+0x244>)
 800dc82:	230a      	movs	r3, #10
 800dc84:	e019      	b.n	800dcba <_printf_i+0x102>
 800dc86:	680e      	ldr	r6, [r1, #0]
 800dc88:	602b      	str	r3, [r5, #0]
 800dc8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc8e:	bf18      	it	ne
 800dc90:	b236      	sxthne	r6, r6
 800dc92:	e7ef      	b.n	800dc74 <_printf_i+0xbc>
 800dc94:	682b      	ldr	r3, [r5, #0]
 800dc96:	6820      	ldr	r0, [r4, #0]
 800dc98:	1d19      	adds	r1, r3, #4
 800dc9a:	6029      	str	r1, [r5, #0]
 800dc9c:	0601      	lsls	r1, r0, #24
 800dc9e:	d501      	bpl.n	800dca4 <_printf_i+0xec>
 800dca0:	681e      	ldr	r6, [r3, #0]
 800dca2:	e002      	b.n	800dcaa <_printf_i+0xf2>
 800dca4:	0646      	lsls	r6, r0, #25
 800dca6:	d5fb      	bpl.n	800dca0 <_printf_i+0xe8>
 800dca8:	881e      	ldrh	r6, [r3, #0]
 800dcaa:	4854      	ldr	r0, [pc, #336]	; (800ddfc <_printf_i+0x244>)
 800dcac:	2f6f      	cmp	r7, #111	; 0x6f
 800dcae:	bf0c      	ite	eq
 800dcb0:	2308      	moveq	r3, #8
 800dcb2:	230a      	movne	r3, #10
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dcba:	6865      	ldr	r5, [r4, #4]
 800dcbc:	60a5      	str	r5, [r4, #8]
 800dcbe:	2d00      	cmp	r5, #0
 800dcc0:	bfa2      	ittt	ge
 800dcc2:	6821      	ldrge	r1, [r4, #0]
 800dcc4:	f021 0104 	bicge.w	r1, r1, #4
 800dcc8:	6021      	strge	r1, [r4, #0]
 800dcca:	b90e      	cbnz	r6, 800dcd0 <_printf_i+0x118>
 800dccc:	2d00      	cmp	r5, #0
 800dcce:	d04d      	beq.n	800dd6c <_printf_i+0x1b4>
 800dcd0:	4615      	mov	r5, r2
 800dcd2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dcd6:	fb03 6711 	mls	r7, r3, r1, r6
 800dcda:	5dc7      	ldrb	r7, [r0, r7]
 800dcdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dce0:	4637      	mov	r7, r6
 800dce2:	42bb      	cmp	r3, r7
 800dce4:	460e      	mov	r6, r1
 800dce6:	d9f4      	bls.n	800dcd2 <_printf_i+0x11a>
 800dce8:	2b08      	cmp	r3, #8
 800dcea:	d10b      	bne.n	800dd04 <_printf_i+0x14c>
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	07de      	lsls	r6, r3, #31
 800dcf0:	d508      	bpl.n	800dd04 <_printf_i+0x14c>
 800dcf2:	6923      	ldr	r3, [r4, #16]
 800dcf4:	6861      	ldr	r1, [r4, #4]
 800dcf6:	4299      	cmp	r1, r3
 800dcf8:	bfde      	ittt	le
 800dcfa:	2330      	movle	r3, #48	; 0x30
 800dcfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dd04:	1b52      	subs	r2, r2, r5
 800dd06:	6122      	str	r2, [r4, #16]
 800dd08:	f8cd a000 	str.w	sl, [sp]
 800dd0c:	464b      	mov	r3, r9
 800dd0e:	aa03      	add	r2, sp, #12
 800dd10:	4621      	mov	r1, r4
 800dd12:	4640      	mov	r0, r8
 800dd14:	f7ff fee2 	bl	800dadc <_printf_common>
 800dd18:	3001      	adds	r0, #1
 800dd1a:	d14c      	bne.n	800ddb6 <_printf_i+0x1fe>
 800dd1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd20:	b004      	add	sp, #16
 800dd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd26:	4835      	ldr	r0, [pc, #212]	; (800ddfc <_printf_i+0x244>)
 800dd28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd2c:	6829      	ldr	r1, [r5, #0]
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd34:	6029      	str	r1, [r5, #0]
 800dd36:	061d      	lsls	r5, r3, #24
 800dd38:	d514      	bpl.n	800dd64 <_printf_i+0x1ac>
 800dd3a:	07df      	lsls	r7, r3, #31
 800dd3c:	bf44      	itt	mi
 800dd3e:	f043 0320 	orrmi.w	r3, r3, #32
 800dd42:	6023      	strmi	r3, [r4, #0]
 800dd44:	b91e      	cbnz	r6, 800dd4e <_printf_i+0x196>
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	f023 0320 	bic.w	r3, r3, #32
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	2310      	movs	r3, #16
 800dd50:	e7b0      	b.n	800dcb4 <_printf_i+0xfc>
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	f043 0320 	orr.w	r3, r3, #32
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	2378      	movs	r3, #120	; 0x78
 800dd5c:	4828      	ldr	r0, [pc, #160]	; (800de00 <_printf_i+0x248>)
 800dd5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd62:	e7e3      	b.n	800dd2c <_printf_i+0x174>
 800dd64:	0659      	lsls	r1, r3, #25
 800dd66:	bf48      	it	mi
 800dd68:	b2b6      	uxthmi	r6, r6
 800dd6a:	e7e6      	b.n	800dd3a <_printf_i+0x182>
 800dd6c:	4615      	mov	r5, r2
 800dd6e:	e7bb      	b.n	800dce8 <_printf_i+0x130>
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	6826      	ldr	r6, [r4, #0]
 800dd74:	6961      	ldr	r1, [r4, #20]
 800dd76:	1d18      	adds	r0, r3, #4
 800dd78:	6028      	str	r0, [r5, #0]
 800dd7a:	0635      	lsls	r5, r6, #24
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	d501      	bpl.n	800dd84 <_printf_i+0x1cc>
 800dd80:	6019      	str	r1, [r3, #0]
 800dd82:	e002      	b.n	800dd8a <_printf_i+0x1d2>
 800dd84:	0670      	lsls	r0, r6, #25
 800dd86:	d5fb      	bpl.n	800dd80 <_printf_i+0x1c8>
 800dd88:	8019      	strh	r1, [r3, #0]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	6123      	str	r3, [r4, #16]
 800dd8e:	4615      	mov	r5, r2
 800dd90:	e7ba      	b.n	800dd08 <_printf_i+0x150>
 800dd92:	682b      	ldr	r3, [r5, #0]
 800dd94:	1d1a      	adds	r2, r3, #4
 800dd96:	602a      	str	r2, [r5, #0]
 800dd98:	681d      	ldr	r5, [r3, #0]
 800dd9a:	6862      	ldr	r2, [r4, #4]
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f7f2 fa36 	bl	8000210 <memchr>
 800dda4:	b108      	cbz	r0, 800ddaa <_printf_i+0x1f2>
 800dda6:	1b40      	subs	r0, r0, r5
 800dda8:	6060      	str	r0, [r4, #4]
 800ddaa:	6863      	ldr	r3, [r4, #4]
 800ddac:	6123      	str	r3, [r4, #16]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddb4:	e7a8      	b.n	800dd08 <_printf_i+0x150>
 800ddb6:	6923      	ldr	r3, [r4, #16]
 800ddb8:	462a      	mov	r2, r5
 800ddba:	4649      	mov	r1, r9
 800ddbc:	4640      	mov	r0, r8
 800ddbe:	47d0      	blx	sl
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d0ab      	beq.n	800dd1c <_printf_i+0x164>
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	079b      	lsls	r3, r3, #30
 800ddc8:	d413      	bmi.n	800ddf2 <_printf_i+0x23a>
 800ddca:	68e0      	ldr	r0, [r4, #12]
 800ddcc:	9b03      	ldr	r3, [sp, #12]
 800ddce:	4298      	cmp	r0, r3
 800ddd0:	bfb8      	it	lt
 800ddd2:	4618      	movlt	r0, r3
 800ddd4:	e7a4      	b.n	800dd20 <_printf_i+0x168>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	4632      	mov	r2, r6
 800ddda:	4649      	mov	r1, r9
 800dddc:	4640      	mov	r0, r8
 800ddde:	47d0      	blx	sl
 800dde0:	3001      	adds	r0, #1
 800dde2:	d09b      	beq.n	800dd1c <_printf_i+0x164>
 800dde4:	3501      	adds	r5, #1
 800dde6:	68e3      	ldr	r3, [r4, #12]
 800dde8:	9903      	ldr	r1, [sp, #12]
 800ddea:	1a5b      	subs	r3, r3, r1
 800ddec:	42ab      	cmp	r3, r5
 800ddee:	dcf2      	bgt.n	800ddd6 <_printf_i+0x21e>
 800ddf0:	e7eb      	b.n	800ddca <_printf_i+0x212>
 800ddf2:	2500      	movs	r5, #0
 800ddf4:	f104 0619 	add.w	r6, r4, #25
 800ddf8:	e7f5      	b.n	800dde6 <_printf_i+0x22e>
 800ddfa:	bf00      	nop
 800ddfc:	080184ea 	.word	0x080184ea
 800de00:	080184fb 	.word	0x080184fb

0800de04 <srand>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4b10      	ldr	r3, [pc, #64]	; (800de48 <srand+0x44>)
 800de08:	681d      	ldr	r5, [r3, #0]
 800de0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800de0c:	4604      	mov	r4, r0
 800de0e:	b9b3      	cbnz	r3, 800de3e <srand+0x3a>
 800de10:	2018      	movs	r0, #24
 800de12:	f7f6 fb99 	bl	8004548 <__wrap_malloc>
 800de16:	4602      	mov	r2, r0
 800de18:	63a8      	str	r0, [r5, #56]	; 0x38
 800de1a:	b920      	cbnz	r0, 800de26 <srand+0x22>
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <srand+0x48>)
 800de1e:	480c      	ldr	r0, [pc, #48]	; (800de50 <srand+0x4c>)
 800de20:	2142      	movs	r1, #66	; 0x42
 800de22:	f000 f8d5 	bl	800dfd0 <__assert_func>
 800de26:	490b      	ldr	r1, [pc, #44]	; (800de54 <srand+0x50>)
 800de28:	4b0b      	ldr	r3, [pc, #44]	; (800de58 <srand+0x54>)
 800de2a:	e9c0 1300 	strd	r1, r3, [r0]
 800de2e:	4b0b      	ldr	r3, [pc, #44]	; (800de5c <srand+0x58>)
 800de30:	6083      	str	r3, [r0, #8]
 800de32:	230b      	movs	r3, #11
 800de34:	8183      	strh	r3, [r0, #12]
 800de36:	2100      	movs	r1, #0
 800de38:	2001      	movs	r0, #1
 800de3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800de3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800de40:	2200      	movs	r2, #0
 800de42:	611c      	str	r4, [r3, #16]
 800de44:	615a      	str	r2, [r3, #20]
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	20001864 	.word	0x20001864
 800de4c:	0801850c 	.word	0x0801850c
 800de50:	08018523 	.word	0x08018523
 800de54:	abcd330e 	.word	0xabcd330e
 800de58:	e66d1234 	.word	0xe66d1234
 800de5c:	0005deec 	.word	0x0005deec

0800de60 <rand>:
 800de60:	4b16      	ldr	r3, [pc, #88]	; (800debc <rand+0x5c>)
 800de62:	b510      	push	{r4, lr}
 800de64:	681c      	ldr	r4, [r3, #0]
 800de66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de68:	b9b3      	cbnz	r3, 800de98 <rand+0x38>
 800de6a:	2018      	movs	r0, #24
 800de6c:	f7f6 fb6c 	bl	8004548 <__wrap_malloc>
 800de70:	63a0      	str	r0, [r4, #56]	; 0x38
 800de72:	b928      	cbnz	r0, 800de80 <rand+0x20>
 800de74:	4602      	mov	r2, r0
 800de76:	4b12      	ldr	r3, [pc, #72]	; (800dec0 <rand+0x60>)
 800de78:	4812      	ldr	r0, [pc, #72]	; (800dec4 <rand+0x64>)
 800de7a:	214e      	movs	r1, #78	; 0x4e
 800de7c:	f000 f8a8 	bl	800dfd0 <__assert_func>
 800de80:	4a11      	ldr	r2, [pc, #68]	; (800dec8 <rand+0x68>)
 800de82:	4b12      	ldr	r3, [pc, #72]	; (800decc <rand+0x6c>)
 800de84:	e9c0 2300 	strd	r2, r3, [r0]
 800de88:	4b11      	ldr	r3, [pc, #68]	; (800ded0 <rand+0x70>)
 800de8a:	6083      	str	r3, [r0, #8]
 800de8c:	230b      	movs	r3, #11
 800de8e:	8183      	strh	r3, [r0, #12]
 800de90:	2201      	movs	r2, #1
 800de92:	2300      	movs	r3, #0
 800de94:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800de98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800de9a:	4a0e      	ldr	r2, [pc, #56]	; (800ded4 <rand+0x74>)
 800de9c:	6920      	ldr	r0, [r4, #16]
 800de9e:	6963      	ldr	r3, [r4, #20]
 800dea0:	490d      	ldr	r1, [pc, #52]	; (800ded8 <rand+0x78>)
 800dea2:	4342      	muls	r2, r0
 800dea4:	fb01 2203 	mla	r2, r1, r3, r2
 800dea8:	fba0 0101 	umull	r0, r1, r0, r1
 800deac:	1c43      	adds	r3, r0, #1
 800deae:	eb42 0001 	adc.w	r0, r2, r1
 800deb2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800deb6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800deba:	bd10      	pop	{r4, pc}
 800debc:	20001864 	.word	0x20001864
 800dec0:	0801850c 	.word	0x0801850c
 800dec4:	08018523 	.word	0x08018523
 800dec8:	abcd330e 	.word	0xabcd330e
 800decc:	e66d1234 	.word	0xe66d1234
 800ded0:	0005deec 	.word	0x0005deec
 800ded4:	5851f42d 	.word	0x5851f42d
 800ded8:	4c957f2d 	.word	0x4c957f2d

0800dedc <_sbrk_r>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	4d06      	ldr	r5, [pc, #24]	; (800def8 <_sbrk_r+0x1c>)
 800dee0:	2300      	movs	r3, #0
 800dee2:	4604      	mov	r4, r0
 800dee4:	4608      	mov	r0, r1
 800dee6:	602b      	str	r3, [r5, #0]
 800dee8:	f7f3 fb02 	bl	80014f0 <_sbrk>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d102      	bne.n	800def6 <_sbrk_r+0x1a>
 800def0:	682b      	ldr	r3, [r5, #0]
 800def2:	b103      	cbz	r3, 800def6 <_sbrk_r+0x1a>
 800def4:	6023      	str	r3, [r4, #0]
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	20006998 	.word	0x20006998

0800defc <__sread>:
 800defc:	b510      	push	{r4, lr}
 800defe:	460c      	mov	r4, r1
 800df00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df04:	f001 fc36 	bl	800f774 <_read_r>
 800df08:	2800      	cmp	r0, #0
 800df0a:	bfab      	itete	ge
 800df0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df0e:	89a3      	ldrhlt	r3, [r4, #12]
 800df10:	181b      	addge	r3, r3, r0
 800df12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df16:	bfac      	ite	ge
 800df18:	6563      	strge	r3, [r4, #84]	; 0x54
 800df1a:	81a3      	strhlt	r3, [r4, #12]
 800df1c:	bd10      	pop	{r4, pc}

0800df1e <__swrite>:
 800df1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df22:	461f      	mov	r7, r3
 800df24:	898b      	ldrh	r3, [r1, #12]
 800df26:	05db      	lsls	r3, r3, #23
 800df28:	4605      	mov	r5, r0
 800df2a:	460c      	mov	r4, r1
 800df2c:	4616      	mov	r6, r2
 800df2e:	d505      	bpl.n	800df3c <__swrite+0x1e>
 800df30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df34:	2302      	movs	r3, #2
 800df36:	2200      	movs	r2, #0
 800df38:	f000 ff0a 	bl	800ed50 <_lseek_r>
 800df3c:	89a3      	ldrh	r3, [r4, #12]
 800df3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df46:	81a3      	strh	r3, [r4, #12]
 800df48:	4632      	mov	r2, r6
 800df4a:	463b      	mov	r3, r7
 800df4c:	4628      	mov	r0, r5
 800df4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df52:	f000 b82b 	b.w	800dfac <_write_r>

0800df56 <__sseek>:
 800df56:	b510      	push	{r4, lr}
 800df58:	460c      	mov	r4, r1
 800df5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df5e:	f000 fef7 	bl	800ed50 <_lseek_r>
 800df62:	1c43      	adds	r3, r0, #1
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	bf15      	itete	ne
 800df68:	6560      	strne	r0, [r4, #84]	; 0x54
 800df6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df72:	81a3      	strheq	r3, [r4, #12]
 800df74:	bf18      	it	ne
 800df76:	81a3      	strhne	r3, [r4, #12]
 800df78:	bd10      	pop	{r4, pc}

0800df7a <__sclose>:
 800df7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df7e:	f000 b845 	b.w	800e00c <_close_r>

0800df82 <strncmp>:
 800df82:	b510      	push	{r4, lr}
 800df84:	b17a      	cbz	r2, 800dfa6 <strncmp+0x24>
 800df86:	4603      	mov	r3, r0
 800df88:	3901      	subs	r1, #1
 800df8a:	1884      	adds	r4, r0, r2
 800df8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800df90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800df94:	4290      	cmp	r0, r2
 800df96:	d101      	bne.n	800df9c <strncmp+0x1a>
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d101      	bne.n	800dfa0 <strncmp+0x1e>
 800df9c:	1a80      	subs	r0, r0, r2
 800df9e:	bd10      	pop	{r4, pc}
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d1f3      	bne.n	800df8c <strncmp+0xa>
 800dfa4:	e7fa      	b.n	800df9c <strncmp+0x1a>
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	e7f9      	b.n	800df9e <strncmp+0x1c>
	...

0800dfac <_write_r>:
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	4d07      	ldr	r5, [pc, #28]	; (800dfcc <_write_r+0x20>)
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	4608      	mov	r0, r1
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	602a      	str	r2, [r5, #0]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f7f6 fa92 	bl	80044e4 <_write>
 800dfc0:	1c43      	adds	r3, r0, #1
 800dfc2:	d102      	bne.n	800dfca <_write_r+0x1e>
 800dfc4:	682b      	ldr	r3, [r5, #0]
 800dfc6:	b103      	cbz	r3, 800dfca <_write_r+0x1e>
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	20006998 	.word	0x20006998

0800dfd0 <__assert_func>:
 800dfd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfd2:	4614      	mov	r4, r2
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	4b09      	ldr	r3, [pc, #36]	; (800dffc <__assert_func+0x2c>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4605      	mov	r5, r0
 800dfdc:	68d8      	ldr	r0, [r3, #12]
 800dfde:	b14c      	cbz	r4, 800dff4 <__assert_func+0x24>
 800dfe0:	4b07      	ldr	r3, [pc, #28]	; (800e000 <__assert_func+0x30>)
 800dfe2:	9100      	str	r1, [sp, #0]
 800dfe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfe8:	4906      	ldr	r1, [pc, #24]	; (800e004 <__assert_func+0x34>)
 800dfea:	462b      	mov	r3, r5
 800dfec:	f000 fe9a 	bl	800ed24 <fiprintf>
 800dff0:	f001 fc92 	bl	800f918 <abort>
 800dff4:	4b04      	ldr	r3, [pc, #16]	; (800e008 <__assert_func+0x38>)
 800dff6:	461c      	mov	r4, r3
 800dff8:	e7f3      	b.n	800dfe2 <__assert_func+0x12>
 800dffa:	bf00      	nop
 800dffc:	20001864 	.word	0x20001864
 800e000:	0801857e 	.word	0x0801857e
 800e004:	0801858b 	.word	0x0801858b
 800e008:	080185b9 	.word	0x080185b9

0800e00c <_close_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	4d06      	ldr	r5, [pc, #24]	; (800e028 <_close_r+0x1c>)
 800e010:	2300      	movs	r3, #0
 800e012:	4604      	mov	r4, r0
 800e014:	4608      	mov	r0, r1
 800e016:	602b      	str	r3, [r5, #0]
 800e018:	f7f3 fa5e 	bl	80014d8 <_close>
 800e01c:	1c43      	adds	r3, r0, #1
 800e01e:	d102      	bne.n	800e026 <_close_r+0x1a>
 800e020:	682b      	ldr	r3, [r5, #0]
 800e022:	b103      	cbz	r3, 800e026 <_close_r+0x1a>
 800e024:	6023      	str	r3, [r4, #0]
 800e026:	bd38      	pop	{r3, r4, r5, pc}
 800e028:	20006998 	.word	0x20006998

0800e02c <quorem>:
 800e02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e030:	6903      	ldr	r3, [r0, #16]
 800e032:	690c      	ldr	r4, [r1, #16]
 800e034:	42a3      	cmp	r3, r4
 800e036:	4607      	mov	r7, r0
 800e038:	f2c0 8081 	blt.w	800e13e <quorem+0x112>
 800e03c:	3c01      	subs	r4, #1
 800e03e:	f101 0814 	add.w	r8, r1, #20
 800e042:	f100 0514 	add.w	r5, r0, #20
 800e046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e04a:	9301      	str	r3, [sp, #4]
 800e04c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e054:	3301      	adds	r3, #1
 800e056:	429a      	cmp	r2, r3
 800e058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e05c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e060:	fbb2 f6f3 	udiv	r6, r2, r3
 800e064:	d331      	bcc.n	800e0ca <quorem+0x9e>
 800e066:	f04f 0e00 	mov.w	lr, #0
 800e06a:	4640      	mov	r0, r8
 800e06c:	46ac      	mov	ip, r5
 800e06e:	46f2      	mov	sl, lr
 800e070:	f850 2b04 	ldr.w	r2, [r0], #4
 800e074:	b293      	uxth	r3, r2
 800e076:	fb06 e303 	mla	r3, r6, r3, lr
 800e07a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e07e:	b29b      	uxth	r3, r3
 800e080:	ebaa 0303 	sub.w	r3, sl, r3
 800e084:	f8dc a000 	ldr.w	sl, [ip]
 800e088:	0c12      	lsrs	r2, r2, #16
 800e08a:	fa13 f38a 	uxtah	r3, r3, sl
 800e08e:	fb06 e202 	mla	r2, r6, r2, lr
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	9b00      	ldr	r3, [sp, #0]
 800e096:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e09a:	b292      	uxth	r2, r2
 800e09c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e0a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800e0a8:	4581      	cmp	r9, r0
 800e0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0ae:	f84c 3b04 	str.w	r3, [ip], #4
 800e0b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e0b6:	d2db      	bcs.n	800e070 <quorem+0x44>
 800e0b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e0bc:	b92b      	cbnz	r3, 800e0ca <quorem+0x9e>
 800e0be:	9b01      	ldr	r3, [sp, #4]
 800e0c0:	3b04      	subs	r3, #4
 800e0c2:	429d      	cmp	r5, r3
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	d32e      	bcc.n	800e126 <quorem+0xfa>
 800e0c8:	613c      	str	r4, [r7, #16]
 800e0ca:	4638      	mov	r0, r7
 800e0cc:	f001 f8e0 	bl	800f290 <__mcmp>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	db24      	blt.n	800e11e <quorem+0xf2>
 800e0d4:	3601      	adds	r6, #1
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f04f 0c00 	mov.w	ip, #0
 800e0dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0e0:	f8d0 e000 	ldr.w	lr, [r0]
 800e0e4:	b293      	uxth	r3, r2
 800e0e6:	ebac 0303 	sub.w	r3, ip, r3
 800e0ea:	0c12      	lsrs	r2, r2, #16
 800e0ec:	fa13 f38e 	uxtah	r3, r3, lr
 800e0f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0fe:	45c1      	cmp	r9, r8
 800e100:	f840 3b04 	str.w	r3, [r0], #4
 800e104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e108:	d2e8      	bcs.n	800e0dc <quorem+0xb0>
 800e10a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e10e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e112:	b922      	cbnz	r2, 800e11e <quorem+0xf2>
 800e114:	3b04      	subs	r3, #4
 800e116:	429d      	cmp	r5, r3
 800e118:	461a      	mov	r2, r3
 800e11a:	d30a      	bcc.n	800e132 <quorem+0x106>
 800e11c:	613c      	str	r4, [r7, #16]
 800e11e:	4630      	mov	r0, r6
 800e120:	b003      	add	sp, #12
 800e122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e126:	6812      	ldr	r2, [r2, #0]
 800e128:	3b04      	subs	r3, #4
 800e12a:	2a00      	cmp	r2, #0
 800e12c:	d1cc      	bne.n	800e0c8 <quorem+0x9c>
 800e12e:	3c01      	subs	r4, #1
 800e130:	e7c7      	b.n	800e0c2 <quorem+0x96>
 800e132:	6812      	ldr	r2, [r2, #0]
 800e134:	3b04      	subs	r3, #4
 800e136:	2a00      	cmp	r2, #0
 800e138:	d1f0      	bne.n	800e11c <quorem+0xf0>
 800e13a:	3c01      	subs	r4, #1
 800e13c:	e7eb      	b.n	800e116 <quorem+0xea>
 800e13e:	2000      	movs	r0, #0
 800e140:	e7ee      	b.n	800e120 <quorem+0xf4>
 800e142:	0000      	movs	r0, r0
 800e144:	0000      	movs	r0, r0
	...

0800e148 <_dtoa_r>:
 800e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14c:	ed2d 8b04 	vpush	{d8-d9}
 800e150:	ec57 6b10 	vmov	r6, r7, d0
 800e154:	b093      	sub	sp, #76	; 0x4c
 800e156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e15c:	9106      	str	r1, [sp, #24]
 800e15e:	ee10 aa10 	vmov	sl, s0
 800e162:	4604      	mov	r4, r0
 800e164:	9209      	str	r2, [sp, #36]	; 0x24
 800e166:	930c      	str	r3, [sp, #48]	; 0x30
 800e168:	46bb      	mov	fp, r7
 800e16a:	b975      	cbnz	r5, 800e18a <_dtoa_r+0x42>
 800e16c:	2010      	movs	r0, #16
 800e16e:	f7f6 f9eb 	bl	8004548 <__wrap_malloc>
 800e172:	4602      	mov	r2, r0
 800e174:	6260      	str	r0, [r4, #36]	; 0x24
 800e176:	b920      	cbnz	r0, 800e182 <_dtoa_r+0x3a>
 800e178:	4ba7      	ldr	r3, [pc, #668]	; (800e418 <_dtoa_r+0x2d0>)
 800e17a:	21ea      	movs	r1, #234	; 0xea
 800e17c:	48a7      	ldr	r0, [pc, #668]	; (800e41c <_dtoa_r+0x2d4>)
 800e17e:	f7ff ff27 	bl	800dfd0 <__assert_func>
 800e182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e186:	6005      	str	r5, [r0, #0]
 800e188:	60c5      	str	r5, [r0, #12]
 800e18a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e18c:	6819      	ldr	r1, [r3, #0]
 800e18e:	b151      	cbz	r1, 800e1a6 <_dtoa_r+0x5e>
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	604a      	str	r2, [r1, #4]
 800e194:	2301      	movs	r3, #1
 800e196:	4093      	lsls	r3, r2
 800e198:	608b      	str	r3, [r1, #8]
 800e19a:	4620      	mov	r0, r4
 800e19c:	f000 fe36 	bl	800ee0c <_Bfree>
 800e1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	1e3b      	subs	r3, r7, #0
 800e1a8:	bfaa      	itet	ge
 800e1aa:	2300      	movge	r3, #0
 800e1ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e1b0:	f8c8 3000 	strge.w	r3, [r8]
 800e1b4:	4b9a      	ldr	r3, [pc, #616]	; (800e420 <_dtoa_r+0x2d8>)
 800e1b6:	bfbc      	itt	lt
 800e1b8:	2201      	movlt	r2, #1
 800e1ba:	f8c8 2000 	strlt.w	r2, [r8]
 800e1be:	ea33 030b 	bics.w	r3, r3, fp
 800e1c2:	d11b      	bne.n	800e1fc <_dtoa_r+0xb4>
 800e1c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e1ca:	6013      	str	r3, [r2, #0]
 800e1cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1d0:	4333      	orrs	r3, r6
 800e1d2:	f000 8592 	beq.w	800ecfa <_dtoa_r+0xbb2>
 800e1d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1d8:	b963      	cbnz	r3, 800e1f4 <_dtoa_r+0xac>
 800e1da:	4b92      	ldr	r3, [pc, #584]	; (800e424 <_dtoa_r+0x2dc>)
 800e1dc:	e022      	b.n	800e224 <_dtoa_r+0xdc>
 800e1de:	4b92      	ldr	r3, [pc, #584]	; (800e428 <_dtoa_r+0x2e0>)
 800e1e0:	9301      	str	r3, [sp, #4]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e1e6:	6013      	str	r3, [r2, #0]
 800e1e8:	9801      	ldr	r0, [sp, #4]
 800e1ea:	b013      	add	sp, #76	; 0x4c
 800e1ec:	ecbd 8b04 	vpop	{d8-d9}
 800e1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f4:	4b8b      	ldr	r3, [pc, #556]	; (800e424 <_dtoa_r+0x2dc>)
 800e1f6:	9301      	str	r3, [sp, #4]
 800e1f8:	3303      	adds	r3, #3
 800e1fa:	e7f3      	b.n	800e1e4 <_dtoa_r+0x9c>
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	2300      	movs	r3, #0
 800e200:	4650      	mov	r0, sl
 800e202:	4659      	mov	r1, fp
 800e204:	f7f2 fc78 	bl	8000af8 <__aeabi_dcmpeq>
 800e208:	ec4b ab19 	vmov	d9, sl, fp
 800e20c:	4680      	mov	r8, r0
 800e20e:	b158      	cbz	r0, 800e228 <_dtoa_r+0xe0>
 800e210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e212:	2301      	movs	r3, #1
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f000 856b 	beq.w	800ecf4 <_dtoa_r+0xbac>
 800e21e:	4883      	ldr	r0, [pc, #524]	; (800e42c <_dtoa_r+0x2e4>)
 800e220:	6018      	str	r0, [r3, #0]
 800e222:	1e43      	subs	r3, r0, #1
 800e224:	9301      	str	r3, [sp, #4]
 800e226:	e7df      	b.n	800e1e8 <_dtoa_r+0xa0>
 800e228:	ec4b ab10 	vmov	d0, sl, fp
 800e22c:	aa10      	add	r2, sp, #64	; 0x40
 800e22e:	a911      	add	r1, sp, #68	; 0x44
 800e230:	4620      	mov	r0, r4
 800e232:	f001 f8d3 	bl	800f3dc <__d2b>
 800e236:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e23a:	ee08 0a10 	vmov	s16, r0
 800e23e:	2d00      	cmp	r5, #0
 800e240:	f000 8084 	beq.w	800e34c <_dtoa_r+0x204>
 800e244:	ee19 3a90 	vmov	r3, s19
 800e248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e24c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e250:	4656      	mov	r6, sl
 800e252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e25a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e25e:	4b74      	ldr	r3, [pc, #464]	; (800e430 <_dtoa_r+0x2e8>)
 800e260:	2200      	movs	r2, #0
 800e262:	4630      	mov	r0, r6
 800e264:	4639      	mov	r1, r7
 800e266:	f7f2 f827 	bl	80002b8 <__aeabi_dsub>
 800e26a:	a365      	add	r3, pc, #404	; (adr r3, 800e400 <_dtoa_r+0x2b8>)
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	f7f2 f9da 	bl	8000628 <__aeabi_dmul>
 800e274:	a364      	add	r3, pc, #400	; (adr r3, 800e408 <_dtoa_r+0x2c0>)
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	f7f2 f81f 	bl	80002bc <__adddf3>
 800e27e:	4606      	mov	r6, r0
 800e280:	4628      	mov	r0, r5
 800e282:	460f      	mov	r7, r1
 800e284:	f7f2 f966 	bl	8000554 <__aeabi_i2d>
 800e288:	a361      	add	r3, pc, #388	; (adr r3, 800e410 <_dtoa_r+0x2c8>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f2 f9cb 	bl	8000628 <__aeabi_dmul>
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	4630      	mov	r0, r6
 800e298:	4639      	mov	r1, r7
 800e29a:	f7f2 f80f 	bl	80002bc <__adddf3>
 800e29e:	4606      	mov	r6, r0
 800e2a0:	460f      	mov	r7, r1
 800e2a2:	f7f2 fc71 	bl	8000b88 <__aeabi_d2iz>
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	9000      	str	r0, [sp, #0]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	4639      	mov	r1, r7
 800e2b0:	f7f2 fc2c 	bl	8000b0c <__aeabi_dcmplt>
 800e2b4:	b150      	cbz	r0, 800e2cc <_dtoa_r+0x184>
 800e2b6:	9800      	ldr	r0, [sp, #0]
 800e2b8:	f7f2 f94c 	bl	8000554 <__aeabi_i2d>
 800e2bc:	4632      	mov	r2, r6
 800e2be:	463b      	mov	r3, r7
 800e2c0:	f7f2 fc1a 	bl	8000af8 <__aeabi_dcmpeq>
 800e2c4:	b910      	cbnz	r0, 800e2cc <_dtoa_r+0x184>
 800e2c6:	9b00      	ldr	r3, [sp, #0]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	9b00      	ldr	r3, [sp, #0]
 800e2ce:	2b16      	cmp	r3, #22
 800e2d0:	d85a      	bhi.n	800e388 <_dtoa_r+0x240>
 800e2d2:	9a00      	ldr	r2, [sp, #0]
 800e2d4:	4b57      	ldr	r3, [pc, #348]	; (800e434 <_dtoa_r+0x2ec>)
 800e2d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2de:	ec51 0b19 	vmov	r0, r1, d9
 800e2e2:	f7f2 fc13 	bl	8000b0c <__aeabi_dcmplt>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d050      	beq.n	800e38c <_dtoa_r+0x244>
 800e2ea:	9b00      	ldr	r3, [sp, #0]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2f6:	1b5d      	subs	r5, r3, r5
 800e2f8:	1e6b      	subs	r3, r5, #1
 800e2fa:	9305      	str	r3, [sp, #20]
 800e2fc:	bf45      	ittet	mi
 800e2fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800e302:	9304      	strmi	r3, [sp, #16]
 800e304:	2300      	movpl	r3, #0
 800e306:	2300      	movmi	r3, #0
 800e308:	bf4c      	ite	mi
 800e30a:	9305      	strmi	r3, [sp, #20]
 800e30c:	9304      	strpl	r3, [sp, #16]
 800e30e:	9b00      	ldr	r3, [sp, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	db3d      	blt.n	800e390 <_dtoa_r+0x248>
 800e314:	9b05      	ldr	r3, [sp, #20]
 800e316:	9a00      	ldr	r2, [sp, #0]
 800e318:	920a      	str	r2, [sp, #40]	; 0x28
 800e31a:	4413      	add	r3, r2
 800e31c:	9305      	str	r3, [sp, #20]
 800e31e:	2300      	movs	r3, #0
 800e320:	9307      	str	r3, [sp, #28]
 800e322:	9b06      	ldr	r3, [sp, #24]
 800e324:	2b09      	cmp	r3, #9
 800e326:	f200 8089 	bhi.w	800e43c <_dtoa_r+0x2f4>
 800e32a:	2b05      	cmp	r3, #5
 800e32c:	bfc4      	itt	gt
 800e32e:	3b04      	subgt	r3, #4
 800e330:	9306      	strgt	r3, [sp, #24]
 800e332:	9b06      	ldr	r3, [sp, #24]
 800e334:	f1a3 0302 	sub.w	r3, r3, #2
 800e338:	bfcc      	ite	gt
 800e33a:	2500      	movgt	r5, #0
 800e33c:	2501      	movle	r5, #1
 800e33e:	2b03      	cmp	r3, #3
 800e340:	f200 8087 	bhi.w	800e452 <_dtoa_r+0x30a>
 800e344:	e8df f003 	tbb	[pc, r3]
 800e348:	59383a2d 	.word	0x59383a2d
 800e34c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e350:	441d      	add	r5, r3
 800e352:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e356:	2b20      	cmp	r3, #32
 800e358:	bfc1      	itttt	gt
 800e35a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e35e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e362:	fa0b f303 	lslgt.w	r3, fp, r3
 800e366:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e36a:	bfda      	itte	le
 800e36c:	f1c3 0320 	rsble	r3, r3, #32
 800e370:	fa06 f003 	lslle.w	r0, r6, r3
 800e374:	4318      	orrgt	r0, r3
 800e376:	f7f2 f8dd 	bl	8000534 <__aeabi_ui2d>
 800e37a:	2301      	movs	r3, #1
 800e37c:	4606      	mov	r6, r0
 800e37e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e382:	3d01      	subs	r5, #1
 800e384:	930e      	str	r3, [sp, #56]	; 0x38
 800e386:	e76a      	b.n	800e25e <_dtoa_r+0x116>
 800e388:	2301      	movs	r3, #1
 800e38a:	e7b2      	b.n	800e2f2 <_dtoa_r+0x1aa>
 800e38c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e38e:	e7b1      	b.n	800e2f4 <_dtoa_r+0x1ac>
 800e390:	9b04      	ldr	r3, [sp, #16]
 800e392:	9a00      	ldr	r2, [sp, #0]
 800e394:	1a9b      	subs	r3, r3, r2
 800e396:	9304      	str	r3, [sp, #16]
 800e398:	4253      	negs	r3, r2
 800e39a:	9307      	str	r3, [sp, #28]
 800e39c:	2300      	movs	r3, #0
 800e39e:	930a      	str	r3, [sp, #40]	; 0x28
 800e3a0:	e7bf      	b.n	800e322 <_dtoa_r+0x1da>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	9308      	str	r3, [sp, #32]
 800e3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	dc55      	bgt.n	800e458 <_dtoa_r+0x310>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e3b6:	e00c      	b.n	800e3d2 <_dtoa_r+0x28a>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e7f3      	b.n	800e3a4 <_dtoa_r+0x25c>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3c0:	9308      	str	r3, [sp, #32]
 800e3c2:	9b00      	ldr	r3, [sp, #0]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	9302      	str	r3, [sp, #8]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	9303      	str	r3, [sp, #12]
 800e3ce:	bfb8      	it	lt
 800e3d0:	2301      	movlt	r3, #1
 800e3d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	6042      	str	r2, [r0, #4]
 800e3d8:	2204      	movs	r2, #4
 800e3da:	f102 0614 	add.w	r6, r2, #20
 800e3de:	429e      	cmp	r6, r3
 800e3e0:	6841      	ldr	r1, [r0, #4]
 800e3e2:	d93d      	bls.n	800e460 <_dtoa_r+0x318>
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f000 fcd1 	bl	800ed8c <_Balloc>
 800e3ea:	9001      	str	r0, [sp, #4]
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d13b      	bne.n	800e468 <_dtoa_r+0x320>
 800e3f0:	4b11      	ldr	r3, [pc, #68]	; (800e438 <_dtoa_r+0x2f0>)
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e3f8:	e6c0      	b.n	800e17c <_dtoa_r+0x34>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e7df      	b.n	800e3be <_dtoa_r+0x276>
 800e3fe:	bf00      	nop
 800e400:	636f4361 	.word	0x636f4361
 800e404:	3fd287a7 	.word	0x3fd287a7
 800e408:	8b60c8b3 	.word	0x8b60c8b3
 800e40c:	3fc68a28 	.word	0x3fc68a28
 800e410:	509f79fb 	.word	0x509f79fb
 800e414:	3fd34413 	.word	0x3fd34413
 800e418:	0801850c 	.word	0x0801850c
 800e41c:	080185c7 	.word	0x080185c7
 800e420:	7ff00000 	.word	0x7ff00000
 800e424:	080185c3 	.word	0x080185c3
 800e428:	080185ba 	.word	0x080185ba
 800e42c:	080184e9 	.word	0x080184e9
 800e430:	3ff80000 	.word	0x3ff80000
 800e434:	080186b8 	.word	0x080186b8
 800e438:	08018622 	.word	0x08018622
 800e43c:	2501      	movs	r5, #1
 800e43e:	2300      	movs	r3, #0
 800e440:	9306      	str	r3, [sp, #24]
 800e442:	9508      	str	r5, [sp, #32]
 800e444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e44c:	2200      	movs	r2, #0
 800e44e:	2312      	movs	r3, #18
 800e450:	e7b0      	b.n	800e3b4 <_dtoa_r+0x26c>
 800e452:	2301      	movs	r3, #1
 800e454:	9308      	str	r3, [sp, #32]
 800e456:	e7f5      	b.n	800e444 <_dtoa_r+0x2fc>
 800e458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e45a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e45e:	e7b8      	b.n	800e3d2 <_dtoa_r+0x28a>
 800e460:	3101      	adds	r1, #1
 800e462:	6041      	str	r1, [r0, #4]
 800e464:	0052      	lsls	r2, r2, #1
 800e466:	e7b8      	b.n	800e3da <_dtoa_r+0x292>
 800e468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e46a:	9a01      	ldr	r2, [sp, #4]
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	9b03      	ldr	r3, [sp, #12]
 800e470:	2b0e      	cmp	r3, #14
 800e472:	f200 809d 	bhi.w	800e5b0 <_dtoa_r+0x468>
 800e476:	2d00      	cmp	r5, #0
 800e478:	f000 809a 	beq.w	800e5b0 <_dtoa_r+0x468>
 800e47c:	9b00      	ldr	r3, [sp, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	dd32      	ble.n	800e4e8 <_dtoa_r+0x3a0>
 800e482:	4ab7      	ldr	r2, [pc, #732]	; (800e760 <_dtoa_r+0x618>)
 800e484:	f003 030f 	and.w	r3, r3, #15
 800e488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e48c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e490:	9b00      	ldr	r3, [sp, #0]
 800e492:	05d8      	lsls	r0, r3, #23
 800e494:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e498:	d516      	bpl.n	800e4c8 <_dtoa_r+0x380>
 800e49a:	4bb2      	ldr	r3, [pc, #712]	; (800e764 <_dtoa_r+0x61c>)
 800e49c:	ec51 0b19 	vmov	r0, r1, d9
 800e4a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4a4:	f7f2 f9ea 	bl	800087c <__aeabi_ddiv>
 800e4a8:	f007 070f 	and.w	r7, r7, #15
 800e4ac:	4682      	mov	sl, r0
 800e4ae:	468b      	mov	fp, r1
 800e4b0:	2503      	movs	r5, #3
 800e4b2:	4eac      	ldr	r6, [pc, #688]	; (800e764 <_dtoa_r+0x61c>)
 800e4b4:	b957      	cbnz	r7, 800e4cc <_dtoa_r+0x384>
 800e4b6:	4642      	mov	r2, r8
 800e4b8:	464b      	mov	r3, r9
 800e4ba:	4650      	mov	r0, sl
 800e4bc:	4659      	mov	r1, fp
 800e4be:	f7f2 f9dd 	bl	800087c <__aeabi_ddiv>
 800e4c2:	4682      	mov	sl, r0
 800e4c4:	468b      	mov	fp, r1
 800e4c6:	e028      	b.n	800e51a <_dtoa_r+0x3d2>
 800e4c8:	2502      	movs	r5, #2
 800e4ca:	e7f2      	b.n	800e4b2 <_dtoa_r+0x36a>
 800e4cc:	07f9      	lsls	r1, r7, #31
 800e4ce:	d508      	bpl.n	800e4e2 <_dtoa_r+0x39a>
 800e4d0:	4640      	mov	r0, r8
 800e4d2:	4649      	mov	r1, r9
 800e4d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e4d8:	f7f2 f8a6 	bl	8000628 <__aeabi_dmul>
 800e4dc:	3501      	adds	r5, #1
 800e4de:	4680      	mov	r8, r0
 800e4e0:	4689      	mov	r9, r1
 800e4e2:	107f      	asrs	r7, r7, #1
 800e4e4:	3608      	adds	r6, #8
 800e4e6:	e7e5      	b.n	800e4b4 <_dtoa_r+0x36c>
 800e4e8:	f000 809b 	beq.w	800e622 <_dtoa_r+0x4da>
 800e4ec:	9b00      	ldr	r3, [sp, #0]
 800e4ee:	4f9d      	ldr	r7, [pc, #628]	; (800e764 <_dtoa_r+0x61c>)
 800e4f0:	425e      	negs	r6, r3
 800e4f2:	4b9b      	ldr	r3, [pc, #620]	; (800e760 <_dtoa_r+0x618>)
 800e4f4:	f006 020f 	and.w	r2, r6, #15
 800e4f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e500:	ec51 0b19 	vmov	r0, r1, d9
 800e504:	f7f2 f890 	bl	8000628 <__aeabi_dmul>
 800e508:	1136      	asrs	r6, r6, #4
 800e50a:	4682      	mov	sl, r0
 800e50c:	468b      	mov	fp, r1
 800e50e:	2300      	movs	r3, #0
 800e510:	2502      	movs	r5, #2
 800e512:	2e00      	cmp	r6, #0
 800e514:	d17a      	bne.n	800e60c <_dtoa_r+0x4c4>
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1d3      	bne.n	800e4c2 <_dtoa_r+0x37a>
 800e51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	f000 8082 	beq.w	800e626 <_dtoa_r+0x4de>
 800e522:	4b91      	ldr	r3, [pc, #580]	; (800e768 <_dtoa_r+0x620>)
 800e524:	2200      	movs	r2, #0
 800e526:	4650      	mov	r0, sl
 800e528:	4659      	mov	r1, fp
 800e52a:	f7f2 faef 	bl	8000b0c <__aeabi_dcmplt>
 800e52e:	2800      	cmp	r0, #0
 800e530:	d079      	beq.n	800e626 <_dtoa_r+0x4de>
 800e532:	9b03      	ldr	r3, [sp, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d076      	beq.n	800e626 <_dtoa_r+0x4de>
 800e538:	9b02      	ldr	r3, [sp, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	dd36      	ble.n	800e5ac <_dtoa_r+0x464>
 800e53e:	9b00      	ldr	r3, [sp, #0]
 800e540:	4650      	mov	r0, sl
 800e542:	4659      	mov	r1, fp
 800e544:	1e5f      	subs	r7, r3, #1
 800e546:	2200      	movs	r2, #0
 800e548:	4b88      	ldr	r3, [pc, #544]	; (800e76c <_dtoa_r+0x624>)
 800e54a:	f7f2 f86d 	bl	8000628 <__aeabi_dmul>
 800e54e:	9e02      	ldr	r6, [sp, #8]
 800e550:	4682      	mov	sl, r0
 800e552:	468b      	mov	fp, r1
 800e554:	3501      	adds	r5, #1
 800e556:	4628      	mov	r0, r5
 800e558:	f7f1 fffc 	bl	8000554 <__aeabi_i2d>
 800e55c:	4652      	mov	r2, sl
 800e55e:	465b      	mov	r3, fp
 800e560:	f7f2 f862 	bl	8000628 <__aeabi_dmul>
 800e564:	4b82      	ldr	r3, [pc, #520]	; (800e770 <_dtoa_r+0x628>)
 800e566:	2200      	movs	r2, #0
 800e568:	f7f1 fea8 	bl	80002bc <__adddf3>
 800e56c:	46d0      	mov	r8, sl
 800e56e:	46d9      	mov	r9, fp
 800e570:	4682      	mov	sl, r0
 800e572:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e576:	2e00      	cmp	r6, #0
 800e578:	d158      	bne.n	800e62c <_dtoa_r+0x4e4>
 800e57a:	4b7e      	ldr	r3, [pc, #504]	; (800e774 <_dtoa_r+0x62c>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	4640      	mov	r0, r8
 800e580:	4649      	mov	r1, r9
 800e582:	f7f1 fe99 	bl	80002b8 <__aeabi_dsub>
 800e586:	4652      	mov	r2, sl
 800e588:	465b      	mov	r3, fp
 800e58a:	4680      	mov	r8, r0
 800e58c:	4689      	mov	r9, r1
 800e58e:	f7f2 fadb 	bl	8000b48 <__aeabi_dcmpgt>
 800e592:	2800      	cmp	r0, #0
 800e594:	f040 8295 	bne.w	800eac2 <_dtoa_r+0x97a>
 800e598:	4652      	mov	r2, sl
 800e59a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e59e:	4640      	mov	r0, r8
 800e5a0:	4649      	mov	r1, r9
 800e5a2:	f7f2 fab3 	bl	8000b0c <__aeabi_dcmplt>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	f040 8289 	bne.w	800eabe <_dtoa_r+0x976>
 800e5ac:	ec5b ab19 	vmov	sl, fp, d9
 800e5b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f2c0 8148 	blt.w	800e848 <_dtoa_r+0x700>
 800e5b8:	9a00      	ldr	r2, [sp, #0]
 800e5ba:	2a0e      	cmp	r2, #14
 800e5bc:	f300 8144 	bgt.w	800e848 <_dtoa_r+0x700>
 800e5c0:	4b67      	ldr	r3, [pc, #412]	; (800e760 <_dtoa_r+0x618>)
 800e5c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	f280 80d5 	bge.w	800e77c <_dtoa_r+0x634>
 800e5d2:	9b03      	ldr	r3, [sp, #12]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f300 80d1 	bgt.w	800e77c <_dtoa_r+0x634>
 800e5da:	f040 826f 	bne.w	800eabc <_dtoa_r+0x974>
 800e5de:	4b65      	ldr	r3, [pc, #404]	; (800e774 <_dtoa_r+0x62c>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	4640      	mov	r0, r8
 800e5e4:	4649      	mov	r1, r9
 800e5e6:	f7f2 f81f 	bl	8000628 <__aeabi_dmul>
 800e5ea:	4652      	mov	r2, sl
 800e5ec:	465b      	mov	r3, fp
 800e5ee:	f7f2 faa1 	bl	8000b34 <__aeabi_dcmpge>
 800e5f2:	9e03      	ldr	r6, [sp, #12]
 800e5f4:	4637      	mov	r7, r6
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	f040 8245 	bne.w	800ea86 <_dtoa_r+0x93e>
 800e5fc:	9d01      	ldr	r5, [sp, #4]
 800e5fe:	2331      	movs	r3, #49	; 0x31
 800e600:	f805 3b01 	strb.w	r3, [r5], #1
 800e604:	9b00      	ldr	r3, [sp, #0]
 800e606:	3301      	adds	r3, #1
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	e240      	b.n	800ea8e <_dtoa_r+0x946>
 800e60c:	07f2      	lsls	r2, r6, #31
 800e60e:	d505      	bpl.n	800e61c <_dtoa_r+0x4d4>
 800e610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e614:	f7f2 f808 	bl	8000628 <__aeabi_dmul>
 800e618:	3501      	adds	r5, #1
 800e61a:	2301      	movs	r3, #1
 800e61c:	1076      	asrs	r6, r6, #1
 800e61e:	3708      	adds	r7, #8
 800e620:	e777      	b.n	800e512 <_dtoa_r+0x3ca>
 800e622:	2502      	movs	r5, #2
 800e624:	e779      	b.n	800e51a <_dtoa_r+0x3d2>
 800e626:	9f00      	ldr	r7, [sp, #0]
 800e628:	9e03      	ldr	r6, [sp, #12]
 800e62a:	e794      	b.n	800e556 <_dtoa_r+0x40e>
 800e62c:	9901      	ldr	r1, [sp, #4]
 800e62e:	4b4c      	ldr	r3, [pc, #304]	; (800e760 <_dtoa_r+0x618>)
 800e630:	4431      	add	r1, r6
 800e632:	910d      	str	r1, [sp, #52]	; 0x34
 800e634:	9908      	ldr	r1, [sp, #32]
 800e636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e63a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e63e:	2900      	cmp	r1, #0
 800e640:	d043      	beq.n	800e6ca <_dtoa_r+0x582>
 800e642:	494d      	ldr	r1, [pc, #308]	; (800e778 <_dtoa_r+0x630>)
 800e644:	2000      	movs	r0, #0
 800e646:	f7f2 f919 	bl	800087c <__aeabi_ddiv>
 800e64a:	4652      	mov	r2, sl
 800e64c:	465b      	mov	r3, fp
 800e64e:	f7f1 fe33 	bl	80002b8 <__aeabi_dsub>
 800e652:	9d01      	ldr	r5, [sp, #4]
 800e654:	4682      	mov	sl, r0
 800e656:	468b      	mov	fp, r1
 800e658:	4649      	mov	r1, r9
 800e65a:	4640      	mov	r0, r8
 800e65c:	f7f2 fa94 	bl	8000b88 <__aeabi_d2iz>
 800e660:	4606      	mov	r6, r0
 800e662:	f7f1 ff77 	bl	8000554 <__aeabi_i2d>
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	4640      	mov	r0, r8
 800e66c:	4649      	mov	r1, r9
 800e66e:	f7f1 fe23 	bl	80002b8 <__aeabi_dsub>
 800e672:	3630      	adds	r6, #48	; 0x30
 800e674:	f805 6b01 	strb.w	r6, [r5], #1
 800e678:	4652      	mov	r2, sl
 800e67a:	465b      	mov	r3, fp
 800e67c:	4680      	mov	r8, r0
 800e67e:	4689      	mov	r9, r1
 800e680:	f7f2 fa44 	bl	8000b0c <__aeabi_dcmplt>
 800e684:	2800      	cmp	r0, #0
 800e686:	d163      	bne.n	800e750 <_dtoa_r+0x608>
 800e688:	4642      	mov	r2, r8
 800e68a:	464b      	mov	r3, r9
 800e68c:	4936      	ldr	r1, [pc, #216]	; (800e768 <_dtoa_r+0x620>)
 800e68e:	2000      	movs	r0, #0
 800e690:	f7f1 fe12 	bl	80002b8 <__aeabi_dsub>
 800e694:	4652      	mov	r2, sl
 800e696:	465b      	mov	r3, fp
 800e698:	f7f2 fa38 	bl	8000b0c <__aeabi_dcmplt>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	f040 80b5 	bne.w	800e80c <_dtoa_r+0x6c4>
 800e6a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6a4:	429d      	cmp	r5, r3
 800e6a6:	d081      	beq.n	800e5ac <_dtoa_r+0x464>
 800e6a8:	4b30      	ldr	r3, [pc, #192]	; (800e76c <_dtoa_r+0x624>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	4650      	mov	r0, sl
 800e6ae:	4659      	mov	r1, fp
 800e6b0:	f7f1 ffba 	bl	8000628 <__aeabi_dmul>
 800e6b4:	4b2d      	ldr	r3, [pc, #180]	; (800e76c <_dtoa_r+0x624>)
 800e6b6:	4682      	mov	sl, r0
 800e6b8:	468b      	mov	fp, r1
 800e6ba:	4640      	mov	r0, r8
 800e6bc:	4649      	mov	r1, r9
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f7f1 ffb2 	bl	8000628 <__aeabi_dmul>
 800e6c4:	4680      	mov	r8, r0
 800e6c6:	4689      	mov	r9, r1
 800e6c8:	e7c6      	b.n	800e658 <_dtoa_r+0x510>
 800e6ca:	4650      	mov	r0, sl
 800e6cc:	4659      	mov	r1, fp
 800e6ce:	f7f1 ffab 	bl	8000628 <__aeabi_dmul>
 800e6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6d4:	9d01      	ldr	r5, [sp, #4]
 800e6d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6d8:	4682      	mov	sl, r0
 800e6da:	468b      	mov	fp, r1
 800e6dc:	4649      	mov	r1, r9
 800e6de:	4640      	mov	r0, r8
 800e6e0:	f7f2 fa52 	bl	8000b88 <__aeabi_d2iz>
 800e6e4:	4606      	mov	r6, r0
 800e6e6:	f7f1 ff35 	bl	8000554 <__aeabi_i2d>
 800e6ea:	3630      	adds	r6, #48	; 0x30
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	f7f1 fde0 	bl	80002b8 <__aeabi_dsub>
 800e6f8:	f805 6b01 	strb.w	r6, [r5], #1
 800e6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6fe:	429d      	cmp	r5, r3
 800e700:	4680      	mov	r8, r0
 800e702:	4689      	mov	r9, r1
 800e704:	f04f 0200 	mov.w	r2, #0
 800e708:	d124      	bne.n	800e754 <_dtoa_r+0x60c>
 800e70a:	4b1b      	ldr	r3, [pc, #108]	; (800e778 <_dtoa_r+0x630>)
 800e70c:	4650      	mov	r0, sl
 800e70e:	4659      	mov	r1, fp
 800e710:	f7f1 fdd4 	bl	80002bc <__adddf3>
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	4640      	mov	r0, r8
 800e71a:	4649      	mov	r1, r9
 800e71c:	f7f2 fa14 	bl	8000b48 <__aeabi_dcmpgt>
 800e720:	2800      	cmp	r0, #0
 800e722:	d173      	bne.n	800e80c <_dtoa_r+0x6c4>
 800e724:	4652      	mov	r2, sl
 800e726:	465b      	mov	r3, fp
 800e728:	4913      	ldr	r1, [pc, #76]	; (800e778 <_dtoa_r+0x630>)
 800e72a:	2000      	movs	r0, #0
 800e72c:	f7f1 fdc4 	bl	80002b8 <__aeabi_dsub>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	4640      	mov	r0, r8
 800e736:	4649      	mov	r1, r9
 800e738:	f7f2 f9e8 	bl	8000b0c <__aeabi_dcmplt>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	f43f af35 	beq.w	800e5ac <_dtoa_r+0x464>
 800e742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e744:	1e6b      	subs	r3, r5, #1
 800e746:	930f      	str	r3, [sp, #60]	; 0x3c
 800e748:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e74c:	2b30      	cmp	r3, #48	; 0x30
 800e74e:	d0f8      	beq.n	800e742 <_dtoa_r+0x5fa>
 800e750:	9700      	str	r7, [sp, #0]
 800e752:	e049      	b.n	800e7e8 <_dtoa_r+0x6a0>
 800e754:	4b05      	ldr	r3, [pc, #20]	; (800e76c <_dtoa_r+0x624>)
 800e756:	f7f1 ff67 	bl	8000628 <__aeabi_dmul>
 800e75a:	4680      	mov	r8, r0
 800e75c:	4689      	mov	r9, r1
 800e75e:	e7bd      	b.n	800e6dc <_dtoa_r+0x594>
 800e760:	080186b8 	.word	0x080186b8
 800e764:	08018690 	.word	0x08018690
 800e768:	3ff00000 	.word	0x3ff00000
 800e76c:	40240000 	.word	0x40240000
 800e770:	401c0000 	.word	0x401c0000
 800e774:	40140000 	.word	0x40140000
 800e778:	3fe00000 	.word	0x3fe00000
 800e77c:	9d01      	ldr	r5, [sp, #4]
 800e77e:	4656      	mov	r6, sl
 800e780:	465f      	mov	r7, fp
 800e782:	4642      	mov	r2, r8
 800e784:	464b      	mov	r3, r9
 800e786:	4630      	mov	r0, r6
 800e788:	4639      	mov	r1, r7
 800e78a:	f7f2 f877 	bl	800087c <__aeabi_ddiv>
 800e78e:	f7f2 f9fb 	bl	8000b88 <__aeabi_d2iz>
 800e792:	4682      	mov	sl, r0
 800e794:	f7f1 fede 	bl	8000554 <__aeabi_i2d>
 800e798:	4642      	mov	r2, r8
 800e79a:	464b      	mov	r3, r9
 800e79c:	f7f1 ff44 	bl	8000628 <__aeabi_dmul>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e7ac:	f7f1 fd84 	bl	80002b8 <__aeabi_dsub>
 800e7b0:	f805 6b01 	strb.w	r6, [r5], #1
 800e7b4:	9e01      	ldr	r6, [sp, #4]
 800e7b6:	9f03      	ldr	r7, [sp, #12]
 800e7b8:	1bae      	subs	r6, r5, r6
 800e7ba:	42b7      	cmp	r7, r6
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	d135      	bne.n	800e82e <_dtoa_r+0x6e6>
 800e7c2:	f7f1 fd7b 	bl	80002bc <__adddf3>
 800e7c6:	4642      	mov	r2, r8
 800e7c8:	464b      	mov	r3, r9
 800e7ca:	4606      	mov	r6, r0
 800e7cc:	460f      	mov	r7, r1
 800e7ce:	f7f2 f9bb 	bl	8000b48 <__aeabi_dcmpgt>
 800e7d2:	b9d0      	cbnz	r0, 800e80a <_dtoa_r+0x6c2>
 800e7d4:	4642      	mov	r2, r8
 800e7d6:	464b      	mov	r3, r9
 800e7d8:	4630      	mov	r0, r6
 800e7da:	4639      	mov	r1, r7
 800e7dc:	f7f2 f98c 	bl	8000af8 <__aeabi_dcmpeq>
 800e7e0:	b110      	cbz	r0, 800e7e8 <_dtoa_r+0x6a0>
 800e7e2:	f01a 0f01 	tst.w	sl, #1
 800e7e6:	d110      	bne.n	800e80a <_dtoa_r+0x6c2>
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	ee18 1a10 	vmov	r1, s16
 800e7ee:	f000 fb0d 	bl	800ee0c <_Bfree>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	9800      	ldr	r0, [sp, #0]
 800e7f6:	702b      	strb	r3, [r5, #0]
 800e7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7fa:	3001      	adds	r0, #1
 800e7fc:	6018      	str	r0, [r3, #0]
 800e7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e800:	2b00      	cmp	r3, #0
 800e802:	f43f acf1 	beq.w	800e1e8 <_dtoa_r+0xa0>
 800e806:	601d      	str	r5, [r3, #0]
 800e808:	e4ee      	b.n	800e1e8 <_dtoa_r+0xa0>
 800e80a:	9f00      	ldr	r7, [sp, #0]
 800e80c:	462b      	mov	r3, r5
 800e80e:	461d      	mov	r5, r3
 800e810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e814:	2a39      	cmp	r2, #57	; 0x39
 800e816:	d106      	bne.n	800e826 <_dtoa_r+0x6de>
 800e818:	9a01      	ldr	r2, [sp, #4]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d1f7      	bne.n	800e80e <_dtoa_r+0x6c6>
 800e81e:	9901      	ldr	r1, [sp, #4]
 800e820:	2230      	movs	r2, #48	; 0x30
 800e822:	3701      	adds	r7, #1
 800e824:	700a      	strb	r2, [r1, #0]
 800e826:	781a      	ldrb	r2, [r3, #0]
 800e828:	3201      	adds	r2, #1
 800e82a:	701a      	strb	r2, [r3, #0]
 800e82c:	e790      	b.n	800e750 <_dtoa_r+0x608>
 800e82e:	4ba6      	ldr	r3, [pc, #664]	; (800eac8 <_dtoa_r+0x980>)
 800e830:	2200      	movs	r2, #0
 800e832:	f7f1 fef9 	bl	8000628 <__aeabi_dmul>
 800e836:	2200      	movs	r2, #0
 800e838:	2300      	movs	r3, #0
 800e83a:	4606      	mov	r6, r0
 800e83c:	460f      	mov	r7, r1
 800e83e:	f7f2 f95b 	bl	8000af8 <__aeabi_dcmpeq>
 800e842:	2800      	cmp	r0, #0
 800e844:	d09d      	beq.n	800e782 <_dtoa_r+0x63a>
 800e846:	e7cf      	b.n	800e7e8 <_dtoa_r+0x6a0>
 800e848:	9a08      	ldr	r2, [sp, #32]
 800e84a:	2a00      	cmp	r2, #0
 800e84c:	f000 80d7 	beq.w	800e9fe <_dtoa_r+0x8b6>
 800e850:	9a06      	ldr	r2, [sp, #24]
 800e852:	2a01      	cmp	r2, #1
 800e854:	f300 80ba 	bgt.w	800e9cc <_dtoa_r+0x884>
 800e858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e85a:	2a00      	cmp	r2, #0
 800e85c:	f000 80b2 	beq.w	800e9c4 <_dtoa_r+0x87c>
 800e860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e864:	9e07      	ldr	r6, [sp, #28]
 800e866:	9d04      	ldr	r5, [sp, #16]
 800e868:	9a04      	ldr	r2, [sp, #16]
 800e86a:	441a      	add	r2, r3
 800e86c:	9204      	str	r2, [sp, #16]
 800e86e:	9a05      	ldr	r2, [sp, #20]
 800e870:	2101      	movs	r1, #1
 800e872:	441a      	add	r2, r3
 800e874:	4620      	mov	r0, r4
 800e876:	9205      	str	r2, [sp, #20]
 800e878:	f000 fb80 	bl	800ef7c <__i2b>
 800e87c:	4607      	mov	r7, r0
 800e87e:	2d00      	cmp	r5, #0
 800e880:	dd0c      	ble.n	800e89c <_dtoa_r+0x754>
 800e882:	9b05      	ldr	r3, [sp, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dd09      	ble.n	800e89c <_dtoa_r+0x754>
 800e888:	42ab      	cmp	r3, r5
 800e88a:	9a04      	ldr	r2, [sp, #16]
 800e88c:	bfa8      	it	ge
 800e88e:	462b      	movge	r3, r5
 800e890:	1ad2      	subs	r2, r2, r3
 800e892:	9204      	str	r2, [sp, #16]
 800e894:	9a05      	ldr	r2, [sp, #20]
 800e896:	1aed      	subs	r5, r5, r3
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	9305      	str	r3, [sp, #20]
 800e89c:	9b07      	ldr	r3, [sp, #28]
 800e89e:	b31b      	cbz	r3, 800e8e8 <_dtoa_r+0x7a0>
 800e8a0:	9b08      	ldr	r3, [sp, #32]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 80af 	beq.w	800ea06 <_dtoa_r+0x8be>
 800e8a8:	2e00      	cmp	r6, #0
 800e8aa:	dd13      	ble.n	800e8d4 <_dtoa_r+0x78c>
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	4632      	mov	r2, r6
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f000 fc23 	bl	800f0fc <__pow5mult>
 800e8b6:	ee18 2a10 	vmov	r2, s16
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	4607      	mov	r7, r0
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f000 fb72 	bl	800efa8 <__multiply>
 800e8c4:	ee18 1a10 	vmov	r1, s16
 800e8c8:	4680      	mov	r8, r0
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f000 fa9e 	bl	800ee0c <_Bfree>
 800e8d0:	ee08 8a10 	vmov	s16, r8
 800e8d4:	9b07      	ldr	r3, [sp, #28]
 800e8d6:	1b9a      	subs	r2, r3, r6
 800e8d8:	d006      	beq.n	800e8e8 <_dtoa_r+0x7a0>
 800e8da:	ee18 1a10 	vmov	r1, s16
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f000 fc0c 	bl	800f0fc <__pow5mult>
 800e8e4:	ee08 0a10 	vmov	s16, r0
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f000 fb46 	bl	800ef7c <__i2b>
 800e8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	4606      	mov	r6, r0
 800e8f6:	f340 8088 	ble.w	800ea0a <_dtoa_r+0x8c2>
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	4601      	mov	r1, r0
 800e8fe:	4620      	mov	r0, r4
 800e900:	f000 fbfc 	bl	800f0fc <__pow5mult>
 800e904:	9b06      	ldr	r3, [sp, #24]
 800e906:	2b01      	cmp	r3, #1
 800e908:	4606      	mov	r6, r0
 800e90a:	f340 8081 	ble.w	800ea10 <_dtoa_r+0x8c8>
 800e90e:	f04f 0800 	mov.w	r8, #0
 800e912:	6933      	ldr	r3, [r6, #16]
 800e914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e918:	6918      	ldr	r0, [r3, #16]
 800e91a:	f000 fadf 	bl	800eedc <__hi0bits>
 800e91e:	f1c0 0020 	rsb	r0, r0, #32
 800e922:	9b05      	ldr	r3, [sp, #20]
 800e924:	4418      	add	r0, r3
 800e926:	f010 001f 	ands.w	r0, r0, #31
 800e92a:	f000 8092 	beq.w	800ea52 <_dtoa_r+0x90a>
 800e92e:	f1c0 0320 	rsb	r3, r0, #32
 800e932:	2b04      	cmp	r3, #4
 800e934:	f340 808a 	ble.w	800ea4c <_dtoa_r+0x904>
 800e938:	f1c0 001c 	rsb	r0, r0, #28
 800e93c:	9b04      	ldr	r3, [sp, #16]
 800e93e:	4403      	add	r3, r0
 800e940:	9304      	str	r3, [sp, #16]
 800e942:	9b05      	ldr	r3, [sp, #20]
 800e944:	4403      	add	r3, r0
 800e946:	4405      	add	r5, r0
 800e948:	9305      	str	r3, [sp, #20]
 800e94a:	9b04      	ldr	r3, [sp, #16]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	dd07      	ble.n	800e960 <_dtoa_r+0x818>
 800e950:	ee18 1a10 	vmov	r1, s16
 800e954:	461a      	mov	r2, r3
 800e956:	4620      	mov	r0, r4
 800e958:	f000 fc2a 	bl	800f1b0 <__lshift>
 800e95c:	ee08 0a10 	vmov	s16, r0
 800e960:	9b05      	ldr	r3, [sp, #20]
 800e962:	2b00      	cmp	r3, #0
 800e964:	dd05      	ble.n	800e972 <_dtoa_r+0x82a>
 800e966:	4631      	mov	r1, r6
 800e968:	461a      	mov	r2, r3
 800e96a:	4620      	mov	r0, r4
 800e96c:	f000 fc20 	bl	800f1b0 <__lshift>
 800e970:	4606      	mov	r6, r0
 800e972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e974:	2b00      	cmp	r3, #0
 800e976:	d06e      	beq.n	800ea56 <_dtoa_r+0x90e>
 800e978:	ee18 0a10 	vmov	r0, s16
 800e97c:	4631      	mov	r1, r6
 800e97e:	f000 fc87 	bl	800f290 <__mcmp>
 800e982:	2800      	cmp	r0, #0
 800e984:	da67      	bge.n	800ea56 <_dtoa_r+0x90e>
 800e986:	9b00      	ldr	r3, [sp, #0]
 800e988:	3b01      	subs	r3, #1
 800e98a:	ee18 1a10 	vmov	r1, s16
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	220a      	movs	r2, #10
 800e992:	2300      	movs	r3, #0
 800e994:	4620      	mov	r0, r4
 800e996:	f000 fa5b 	bl	800ee50 <__multadd>
 800e99a:	9b08      	ldr	r3, [sp, #32]
 800e99c:	ee08 0a10 	vmov	s16, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 81b1 	beq.w	800ed08 <_dtoa_r+0xbc0>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	220a      	movs	r2, #10
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f000 fa4f 	bl	800ee50 <__multadd>
 800e9b2:	9b02      	ldr	r3, [sp, #8]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	4607      	mov	r7, r0
 800e9b8:	f300 808e 	bgt.w	800ead8 <_dtoa_r+0x990>
 800e9bc:	9b06      	ldr	r3, [sp, #24]
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	dc51      	bgt.n	800ea66 <_dtoa_r+0x91e>
 800e9c2:	e089      	b.n	800ead8 <_dtoa_r+0x990>
 800e9c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e9ca:	e74b      	b.n	800e864 <_dtoa_r+0x71c>
 800e9cc:	9b03      	ldr	r3, [sp, #12]
 800e9ce:	1e5e      	subs	r6, r3, #1
 800e9d0:	9b07      	ldr	r3, [sp, #28]
 800e9d2:	42b3      	cmp	r3, r6
 800e9d4:	bfbf      	itttt	lt
 800e9d6:	9b07      	ldrlt	r3, [sp, #28]
 800e9d8:	9607      	strlt	r6, [sp, #28]
 800e9da:	1af2      	sublt	r2, r6, r3
 800e9dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e9de:	bfb6      	itet	lt
 800e9e0:	189b      	addlt	r3, r3, r2
 800e9e2:	1b9e      	subge	r6, r3, r6
 800e9e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e9e6:	9b03      	ldr	r3, [sp, #12]
 800e9e8:	bfb8      	it	lt
 800e9ea:	2600      	movlt	r6, #0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	bfb7      	itett	lt
 800e9f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e9f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e9f8:	1a9d      	sublt	r5, r3, r2
 800e9fa:	2300      	movlt	r3, #0
 800e9fc:	e734      	b.n	800e868 <_dtoa_r+0x720>
 800e9fe:	9e07      	ldr	r6, [sp, #28]
 800ea00:	9d04      	ldr	r5, [sp, #16]
 800ea02:	9f08      	ldr	r7, [sp, #32]
 800ea04:	e73b      	b.n	800e87e <_dtoa_r+0x736>
 800ea06:	9a07      	ldr	r2, [sp, #28]
 800ea08:	e767      	b.n	800e8da <_dtoa_r+0x792>
 800ea0a:	9b06      	ldr	r3, [sp, #24]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	dc18      	bgt.n	800ea42 <_dtoa_r+0x8fa>
 800ea10:	f1ba 0f00 	cmp.w	sl, #0
 800ea14:	d115      	bne.n	800ea42 <_dtoa_r+0x8fa>
 800ea16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea1a:	b993      	cbnz	r3, 800ea42 <_dtoa_r+0x8fa>
 800ea1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea20:	0d1b      	lsrs	r3, r3, #20
 800ea22:	051b      	lsls	r3, r3, #20
 800ea24:	b183      	cbz	r3, 800ea48 <_dtoa_r+0x900>
 800ea26:	9b04      	ldr	r3, [sp, #16]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	9304      	str	r3, [sp, #16]
 800ea2c:	9b05      	ldr	r3, [sp, #20]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	9305      	str	r3, [sp, #20]
 800ea32:	f04f 0801 	mov.w	r8, #1
 800ea36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f47f af6a 	bne.w	800e912 <_dtoa_r+0x7ca>
 800ea3e:	2001      	movs	r0, #1
 800ea40:	e76f      	b.n	800e922 <_dtoa_r+0x7da>
 800ea42:	f04f 0800 	mov.w	r8, #0
 800ea46:	e7f6      	b.n	800ea36 <_dtoa_r+0x8ee>
 800ea48:	4698      	mov	r8, r3
 800ea4a:	e7f4      	b.n	800ea36 <_dtoa_r+0x8ee>
 800ea4c:	f43f af7d 	beq.w	800e94a <_dtoa_r+0x802>
 800ea50:	4618      	mov	r0, r3
 800ea52:	301c      	adds	r0, #28
 800ea54:	e772      	b.n	800e93c <_dtoa_r+0x7f4>
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	dc37      	bgt.n	800eacc <_dtoa_r+0x984>
 800ea5c:	9b06      	ldr	r3, [sp, #24]
 800ea5e:	2b02      	cmp	r3, #2
 800ea60:	dd34      	ble.n	800eacc <_dtoa_r+0x984>
 800ea62:	9b03      	ldr	r3, [sp, #12]
 800ea64:	9302      	str	r3, [sp, #8]
 800ea66:	9b02      	ldr	r3, [sp, #8]
 800ea68:	b96b      	cbnz	r3, 800ea86 <_dtoa_r+0x93e>
 800ea6a:	4631      	mov	r1, r6
 800ea6c:	2205      	movs	r2, #5
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f000 f9ee 	bl	800ee50 <__multadd>
 800ea74:	4601      	mov	r1, r0
 800ea76:	4606      	mov	r6, r0
 800ea78:	ee18 0a10 	vmov	r0, s16
 800ea7c:	f000 fc08 	bl	800f290 <__mcmp>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	f73f adbb 	bgt.w	800e5fc <_dtoa_r+0x4b4>
 800ea86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea88:	9d01      	ldr	r5, [sp, #4]
 800ea8a:	43db      	mvns	r3, r3
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	f04f 0800 	mov.w	r8, #0
 800ea92:	4631      	mov	r1, r6
 800ea94:	4620      	mov	r0, r4
 800ea96:	f000 f9b9 	bl	800ee0c <_Bfree>
 800ea9a:	2f00      	cmp	r7, #0
 800ea9c:	f43f aea4 	beq.w	800e7e8 <_dtoa_r+0x6a0>
 800eaa0:	f1b8 0f00 	cmp.w	r8, #0
 800eaa4:	d005      	beq.n	800eab2 <_dtoa_r+0x96a>
 800eaa6:	45b8      	cmp	r8, r7
 800eaa8:	d003      	beq.n	800eab2 <_dtoa_r+0x96a>
 800eaaa:	4641      	mov	r1, r8
 800eaac:	4620      	mov	r0, r4
 800eaae:	f000 f9ad 	bl	800ee0c <_Bfree>
 800eab2:	4639      	mov	r1, r7
 800eab4:	4620      	mov	r0, r4
 800eab6:	f000 f9a9 	bl	800ee0c <_Bfree>
 800eaba:	e695      	b.n	800e7e8 <_dtoa_r+0x6a0>
 800eabc:	2600      	movs	r6, #0
 800eabe:	4637      	mov	r7, r6
 800eac0:	e7e1      	b.n	800ea86 <_dtoa_r+0x93e>
 800eac2:	9700      	str	r7, [sp, #0]
 800eac4:	4637      	mov	r7, r6
 800eac6:	e599      	b.n	800e5fc <_dtoa_r+0x4b4>
 800eac8:	40240000 	.word	0x40240000
 800eacc:	9b08      	ldr	r3, [sp, #32]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f000 80ca 	beq.w	800ec68 <_dtoa_r+0xb20>
 800ead4:	9b03      	ldr	r3, [sp, #12]
 800ead6:	9302      	str	r3, [sp, #8]
 800ead8:	2d00      	cmp	r5, #0
 800eada:	dd05      	ble.n	800eae8 <_dtoa_r+0x9a0>
 800eadc:	4639      	mov	r1, r7
 800eade:	462a      	mov	r2, r5
 800eae0:	4620      	mov	r0, r4
 800eae2:	f000 fb65 	bl	800f1b0 <__lshift>
 800eae6:	4607      	mov	r7, r0
 800eae8:	f1b8 0f00 	cmp.w	r8, #0
 800eaec:	d05b      	beq.n	800eba6 <_dtoa_r+0xa5e>
 800eaee:	6879      	ldr	r1, [r7, #4]
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f000 f94b 	bl	800ed8c <_Balloc>
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	b928      	cbnz	r0, 800eb06 <_dtoa_r+0x9be>
 800eafa:	4b87      	ldr	r3, [pc, #540]	; (800ed18 <_dtoa_r+0xbd0>)
 800eafc:	4602      	mov	r2, r0
 800eafe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb02:	f7ff bb3b 	b.w	800e17c <_dtoa_r+0x34>
 800eb06:	693a      	ldr	r2, [r7, #16]
 800eb08:	3202      	adds	r2, #2
 800eb0a:	0092      	lsls	r2, r2, #2
 800eb0c:	f107 010c 	add.w	r1, r7, #12
 800eb10:	300c      	adds	r0, #12
 800eb12:	f7fe fc17 	bl	800d344 <memcpy>
 800eb16:	2201      	movs	r2, #1
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f000 fb48 	bl	800f1b0 <__lshift>
 800eb20:	9b01      	ldr	r3, [sp, #4]
 800eb22:	f103 0901 	add.w	r9, r3, #1
 800eb26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	9305      	str	r3, [sp, #20]
 800eb2e:	f00a 0301 	and.w	r3, sl, #1
 800eb32:	46b8      	mov	r8, r7
 800eb34:	9304      	str	r3, [sp, #16]
 800eb36:	4607      	mov	r7, r0
 800eb38:	4631      	mov	r1, r6
 800eb3a:	ee18 0a10 	vmov	r0, s16
 800eb3e:	f7ff fa75 	bl	800e02c <quorem>
 800eb42:	4641      	mov	r1, r8
 800eb44:	9002      	str	r0, [sp, #8]
 800eb46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb4a:	ee18 0a10 	vmov	r0, s16
 800eb4e:	f000 fb9f 	bl	800f290 <__mcmp>
 800eb52:	463a      	mov	r2, r7
 800eb54:	9003      	str	r0, [sp, #12]
 800eb56:	4631      	mov	r1, r6
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f000 fbb5 	bl	800f2c8 <__mdiff>
 800eb5e:	68c2      	ldr	r2, [r0, #12]
 800eb60:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800eb64:	4605      	mov	r5, r0
 800eb66:	bb02      	cbnz	r2, 800ebaa <_dtoa_r+0xa62>
 800eb68:	4601      	mov	r1, r0
 800eb6a:	ee18 0a10 	vmov	r0, s16
 800eb6e:	f000 fb8f 	bl	800f290 <__mcmp>
 800eb72:	4602      	mov	r2, r0
 800eb74:	4629      	mov	r1, r5
 800eb76:	4620      	mov	r0, r4
 800eb78:	9207      	str	r2, [sp, #28]
 800eb7a:	f000 f947 	bl	800ee0c <_Bfree>
 800eb7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800eb82:	ea43 0102 	orr.w	r1, r3, r2
 800eb86:	9b04      	ldr	r3, [sp, #16]
 800eb88:	430b      	orrs	r3, r1
 800eb8a:	464d      	mov	r5, r9
 800eb8c:	d10f      	bne.n	800ebae <_dtoa_r+0xa66>
 800eb8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eb92:	d02a      	beq.n	800ebea <_dtoa_r+0xaa2>
 800eb94:	9b03      	ldr	r3, [sp, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	dd02      	ble.n	800eba0 <_dtoa_r+0xa58>
 800eb9a:	9b02      	ldr	r3, [sp, #8]
 800eb9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800eba0:	f88b a000 	strb.w	sl, [fp]
 800eba4:	e775      	b.n	800ea92 <_dtoa_r+0x94a>
 800eba6:	4638      	mov	r0, r7
 800eba8:	e7ba      	b.n	800eb20 <_dtoa_r+0x9d8>
 800ebaa:	2201      	movs	r2, #1
 800ebac:	e7e2      	b.n	800eb74 <_dtoa_r+0xa2c>
 800ebae:	9b03      	ldr	r3, [sp, #12]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	db04      	blt.n	800ebbe <_dtoa_r+0xa76>
 800ebb4:	9906      	ldr	r1, [sp, #24]
 800ebb6:	430b      	orrs	r3, r1
 800ebb8:	9904      	ldr	r1, [sp, #16]
 800ebba:	430b      	orrs	r3, r1
 800ebbc:	d122      	bne.n	800ec04 <_dtoa_r+0xabc>
 800ebbe:	2a00      	cmp	r2, #0
 800ebc0:	ddee      	ble.n	800eba0 <_dtoa_r+0xa58>
 800ebc2:	ee18 1a10 	vmov	r1, s16
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f000 faf1 	bl	800f1b0 <__lshift>
 800ebce:	4631      	mov	r1, r6
 800ebd0:	ee08 0a10 	vmov	s16, r0
 800ebd4:	f000 fb5c 	bl	800f290 <__mcmp>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	dc03      	bgt.n	800ebe4 <_dtoa_r+0xa9c>
 800ebdc:	d1e0      	bne.n	800eba0 <_dtoa_r+0xa58>
 800ebde:	f01a 0f01 	tst.w	sl, #1
 800ebe2:	d0dd      	beq.n	800eba0 <_dtoa_r+0xa58>
 800ebe4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebe8:	d1d7      	bne.n	800eb9a <_dtoa_r+0xa52>
 800ebea:	2339      	movs	r3, #57	; 0x39
 800ebec:	f88b 3000 	strb.w	r3, [fp]
 800ebf0:	462b      	mov	r3, r5
 800ebf2:	461d      	mov	r5, r3
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ebfa:	2a39      	cmp	r2, #57	; 0x39
 800ebfc:	d071      	beq.n	800ece2 <_dtoa_r+0xb9a>
 800ebfe:	3201      	adds	r2, #1
 800ec00:	701a      	strb	r2, [r3, #0]
 800ec02:	e746      	b.n	800ea92 <_dtoa_r+0x94a>
 800ec04:	2a00      	cmp	r2, #0
 800ec06:	dd07      	ble.n	800ec18 <_dtoa_r+0xad0>
 800ec08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec0c:	d0ed      	beq.n	800ebea <_dtoa_r+0xaa2>
 800ec0e:	f10a 0301 	add.w	r3, sl, #1
 800ec12:	f88b 3000 	strb.w	r3, [fp]
 800ec16:	e73c      	b.n	800ea92 <_dtoa_r+0x94a>
 800ec18:	9b05      	ldr	r3, [sp, #20]
 800ec1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ec1e:	4599      	cmp	r9, r3
 800ec20:	d047      	beq.n	800ecb2 <_dtoa_r+0xb6a>
 800ec22:	ee18 1a10 	vmov	r1, s16
 800ec26:	2300      	movs	r3, #0
 800ec28:	220a      	movs	r2, #10
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f000 f910 	bl	800ee50 <__multadd>
 800ec30:	45b8      	cmp	r8, r7
 800ec32:	ee08 0a10 	vmov	s16, r0
 800ec36:	f04f 0300 	mov.w	r3, #0
 800ec3a:	f04f 020a 	mov.w	r2, #10
 800ec3e:	4641      	mov	r1, r8
 800ec40:	4620      	mov	r0, r4
 800ec42:	d106      	bne.n	800ec52 <_dtoa_r+0xb0a>
 800ec44:	f000 f904 	bl	800ee50 <__multadd>
 800ec48:	4680      	mov	r8, r0
 800ec4a:	4607      	mov	r7, r0
 800ec4c:	f109 0901 	add.w	r9, r9, #1
 800ec50:	e772      	b.n	800eb38 <_dtoa_r+0x9f0>
 800ec52:	f000 f8fd 	bl	800ee50 <__multadd>
 800ec56:	4639      	mov	r1, r7
 800ec58:	4680      	mov	r8, r0
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	220a      	movs	r2, #10
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 f8f6 	bl	800ee50 <__multadd>
 800ec64:	4607      	mov	r7, r0
 800ec66:	e7f1      	b.n	800ec4c <_dtoa_r+0xb04>
 800ec68:	9b03      	ldr	r3, [sp, #12]
 800ec6a:	9302      	str	r3, [sp, #8]
 800ec6c:	9d01      	ldr	r5, [sp, #4]
 800ec6e:	ee18 0a10 	vmov	r0, s16
 800ec72:	4631      	mov	r1, r6
 800ec74:	f7ff f9da 	bl	800e02c <quorem>
 800ec78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ec7c:	9b01      	ldr	r3, [sp, #4]
 800ec7e:	f805 ab01 	strb.w	sl, [r5], #1
 800ec82:	1aea      	subs	r2, r5, r3
 800ec84:	9b02      	ldr	r3, [sp, #8]
 800ec86:	4293      	cmp	r3, r2
 800ec88:	dd09      	ble.n	800ec9e <_dtoa_r+0xb56>
 800ec8a:	ee18 1a10 	vmov	r1, s16
 800ec8e:	2300      	movs	r3, #0
 800ec90:	220a      	movs	r2, #10
 800ec92:	4620      	mov	r0, r4
 800ec94:	f000 f8dc 	bl	800ee50 <__multadd>
 800ec98:	ee08 0a10 	vmov	s16, r0
 800ec9c:	e7e7      	b.n	800ec6e <_dtoa_r+0xb26>
 800ec9e:	9b02      	ldr	r3, [sp, #8]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	bfc8      	it	gt
 800eca4:	461d      	movgt	r5, r3
 800eca6:	9b01      	ldr	r3, [sp, #4]
 800eca8:	bfd8      	it	le
 800ecaa:	2501      	movle	r5, #1
 800ecac:	441d      	add	r5, r3
 800ecae:	f04f 0800 	mov.w	r8, #0
 800ecb2:	ee18 1a10 	vmov	r1, s16
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f000 fa79 	bl	800f1b0 <__lshift>
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	ee08 0a10 	vmov	s16, r0
 800ecc4:	f000 fae4 	bl	800f290 <__mcmp>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	dc91      	bgt.n	800ebf0 <_dtoa_r+0xaa8>
 800eccc:	d102      	bne.n	800ecd4 <_dtoa_r+0xb8c>
 800ecce:	f01a 0f01 	tst.w	sl, #1
 800ecd2:	d18d      	bne.n	800ebf0 <_dtoa_r+0xaa8>
 800ecd4:	462b      	mov	r3, r5
 800ecd6:	461d      	mov	r5, r3
 800ecd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecdc:	2a30      	cmp	r2, #48	; 0x30
 800ecde:	d0fa      	beq.n	800ecd6 <_dtoa_r+0xb8e>
 800ece0:	e6d7      	b.n	800ea92 <_dtoa_r+0x94a>
 800ece2:	9a01      	ldr	r2, [sp, #4]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d184      	bne.n	800ebf2 <_dtoa_r+0xaaa>
 800ece8:	9b00      	ldr	r3, [sp, #0]
 800ecea:	3301      	adds	r3, #1
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	2331      	movs	r3, #49	; 0x31
 800ecf0:	7013      	strb	r3, [r2, #0]
 800ecf2:	e6ce      	b.n	800ea92 <_dtoa_r+0x94a>
 800ecf4:	4b09      	ldr	r3, [pc, #36]	; (800ed1c <_dtoa_r+0xbd4>)
 800ecf6:	f7ff ba95 	b.w	800e224 <_dtoa_r+0xdc>
 800ecfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f47f aa6e 	bne.w	800e1de <_dtoa_r+0x96>
 800ed02:	4b07      	ldr	r3, [pc, #28]	; (800ed20 <_dtoa_r+0xbd8>)
 800ed04:	f7ff ba8e 	b.w	800e224 <_dtoa_r+0xdc>
 800ed08:	9b02      	ldr	r3, [sp, #8]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	dcae      	bgt.n	800ec6c <_dtoa_r+0xb24>
 800ed0e:	9b06      	ldr	r3, [sp, #24]
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	f73f aea8 	bgt.w	800ea66 <_dtoa_r+0x91e>
 800ed16:	e7a9      	b.n	800ec6c <_dtoa_r+0xb24>
 800ed18:	08018622 	.word	0x08018622
 800ed1c:	080184e8 	.word	0x080184e8
 800ed20:	080185ba 	.word	0x080185ba

0800ed24 <fiprintf>:
 800ed24:	b40e      	push	{r1, r2, r3}
 800ed26:	b503      	push	{r0, r1, lr}
 800ed28:	4601      	mov	r1, r0
 800ed2a:	ab03      	add	r3, sp, #12
 800ed2c:	4805      	ldr	r0, [pc, #20]	; (800ed44 <fiprintf+0x20>)
 800ed2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed32:	6800      	ldr	r0, [r0, #0]
 800ed34:	9301      	str	r3, [sp, #4]
 800ed36:	f000 fbed 	bl	800f514 <_vfiprintf_r>
 800ed3a:	b002      	add	sp, #8
 800ed3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed40:	b003      	add	sp, #12
 800ed42:	4770      	bx	lr
 800ed44:	20001864 	.word	0x20001864

0800ed48 <_localeconv_r>:
 800ed48:	4800      	ldr	r0, [pc, #0]	; (800ed4c <_localeconv_r+0x4>)
 800ed4a:	4770      	bx	lr
 800ed4c:	200019b8 	.word	0x200019b8

0800ed50 <_lseek_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4d07      	ldr	r5, [pc, #28]	; (800ed70 <_lseek_r+0x20>)
 800ed54:	4604      	mov	r4, r0
 800ed56:	4608      	mov	r0, r1
 800ed58:	4611      	mov	r1, r2
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	602a      	str	r2, [r5, #0]
 800ed5e:	461a      	mov	r2, r3
 800ed60:	f7f2 fbc4 	bl	80014ec <_lseek>
 800ed64:	1c43      	adds	r3, r0, #1
 800ed66:	d102      	bne.n	800ed6e <_lseek_r+0x1e>
 800ed68:	682b      	ldr	r3, [r5, #0]
 800ed6a:	b103      	cbz	r3, 800ed6e <_lseek_r+0x1e>
 800ed6c:	6023      	str	r3, [r4, #0]
 800ed6e:	bd38      	pop	{r3, r4, r5, pc}
 800ed70:	20006998 	.word	0x20006998

0800ed74 <__malloc_lock>:
 800ed74:	4801      	ldr	r0, [pc, #4]	; (800ed7c <__malloc_lock+0x8>)
 800ed76:	f7fe bad2 	b.w	800d31e <__retarget_lock_acquire_recursive>
 800ed7a:	bf00      	nop
 800ed7c:	2000698c 	.word	0x2000698c

0800ed80 <__malloc_unlock>:
 800ed80:	4801      	ldr	r0, [pc, #4]	; (800ed88 <__malloc_unlock+0x8>)
 800ed82:	f7fe bacd 	b.w	800d320 <__retarget_lock_release_recursive>
 800ed86:	bf00      	nop
 800ed88:	2000698c 	.word	0x2000698c

0800ed8c <_Balloc>:
 800ed8c:	b570      	push	{r4, r5, r6, lr}
 800ed8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed90:	4604      	mov	r4, r0
 800ed92:	460d      	mov	r5, r1
 800ed94:	b976      	cbnz	r6, 800edb4 <_Balloc+0x28>
 800ed96:	2010      	movs	r0, #16
 800ed98:	f7f5 fbd6 	bl	8004548 <__wrap_malloc>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	6260      	str	r0, [r4, #36]	; 0x24
 800eda0:	b920      	cbnz	r0, 800edac <_Balloc+0x20>
 800eda2:	4b18      	ldr	r3, [pc, #96]	; (800ee04 <_Balloc+0x78>)
 800eda4:	4818      	ldr	r0, [pc, #96]	; (800ee08 <_Balloc+0x7c>)
 800eda6:	2166      	movs	r1, #102	; 0x66
 800eda8:	f7ff f912 	bl	800dfd0 <__assert_func>
 800edac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edb0:	6006      	str	r6, [r0, #0]
 800edb2:	60c6      	str	r6, [r0, #12]
 800edb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800edb6:	68f3      	ldr	r3, [r6, #12]
 800edb8:	b183      	cbz	r3, 800eddc <_Balloc+0x50>
 800edba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800edc2:	b9b8      	cbnz	r0, 800edf4 <_Balloc+0x68>
 800edc4:	2101      	movs	r1, #1
 800edc6:	fa01 f605 	lsl.w	r6, r1, r5
 800edca:	1d72      	adds	r2, r6, #5
 800edcc:	0092      	lsls	r2, r2, #2
 800edce:	4620      	mov	r0, r4
 800edd0:	f000 fb60 	bl	800f494 <_calloc_r>
 800edd4:	b160      	cbz	r0, 800edf0 <_Balloc+0x64>
 800edd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800edda:	e00e      	b.n	800edfa <_Balloc+0x6e>
 800eddc:	2221      	movs	r2, #33	; 0x21
 800edde:	2104      	movs	r1, #4
 800ede0:	4620      	mov	r0, r4
 800ede2:	f000 fb57 	bl	800f494 <_calloc_r>
 800ede6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ede8:	60f0      	str	r0, [r6, #12]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1e4      	bne.n	800edba <_Balloc+0x2e>
 800edf0:	2000      	movs	r0, #0
 800edf2:	bd70      	pop	{r4, r5, r6, pc}
 800edf4:	6802      	ldr	r2, [r0, #0]
 800edf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edfa:	2300      	movs	r3, #0
 800edfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee00:	e7f7      	b.n	800edf2 <_Balloc+0x66>
 800ee02:	bf00      	nop
 800ee04:	0801850c 	.word	0x0801850c
 800ee08:	08018633 	.word	0x08018633

0800ee0c <_Bfree>:
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee10:	4605      	mov	r5, r0
 800ee12:	460c      	mov	r4, r1
 800ee14:	b976      	cbnz	r6, 800ee34 <_Bfree+0x28>
 800ee16:	2010      	movs	r0, #16
 800ee18:	f7f5 fb96 	bl	8004548 <__wrap_malloc>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	6268      	str	r0, [r5, #36]	; 0x24
 800ee20:	b920      	cbnz	r0, 800ee2c <_Bfree+0x20>
 800ee22:	4b09      	ldr	r3, [pc, #36]	; (800ee48 <_Bfree+0x3c>)
 800ee24:	4809      	ldr	r0, [pc, #36]	; (800ee4c <_Bfree+0x40>)
 800ee26:	218a      	movs	r1, #138	; 0x8a
 800ee28:	f7ff f8d2 	bl	800dfd0 <__assert_func>
 800ee2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee30:	6006      	str	r6, [r0, #0]
 800ee32:	60c6      	str	r6, [r0, #12]
 800ee34:	b13c      	cbz	r4, 800ee46 <_Bfree+0x3a>
 800ee36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee38:	6862      	ldr	r2, [r4, #4]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee40:	6021      	str	r1, [r4, #0]
 800ee42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee46:	bd70      	pop	{r4, r5, r6, pc}
 800ee48:	0801850c 	.word	0x0801850c
 800ee4c:	08018633 	.word	0x08018633

0800ee50 <__multadd>:
 800ee50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee54:	690d      	ldr	r5, [r1, #16]
 800ee56:	4607      	mov	r7, r0
 800ee58:	460c      	mov	r4, r1
 800ee5a:	461e      	mov	r6, r3
 800ee5c:	f101 0c14 	add.w	ip, r1, #20
 800ee60:	2000      	movs	r0, #0
 800ee62:	f8dc 3000 	ldr.w	r3, [ip]
 800ee66:	b299      	uxth	r1, r3
 800ee68:	fb02 6101 	mla	r1, r2, r1, r6
 800ee6c:	0c1e      	lsrs	r6, r3, #16
 800ee6e:	0c0b      	lsrs	r3, r1, #16
 800ee70:	fb02 3306 	mla	r3, r2, r6, r3
 800ee74:	b289      	uxth	r1, r1
 800ee76:	3001      	adds	r0, #1
 800ee78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee7c:	4285      	cmp	r5, r0
 800ee7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ee82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee86:	dcec      	bgt.n	800ee62 <__multadd+0x12>
 800ee88:	b30e      	cbz	r6, 800eece <__multadd+0x7e>
 800ee8a:	68a3      	ldr	r3, [r4, #8]
 800ee8c:	42ab      	cmp	r3, r5
 800ee8e:	dc19      	bgt.n	800eec4 <__multadd+0x74>
 800ee90:	6861      	ldr	r1, [r4, #4]
 800ee92:	4638      	mov	r0, r7
 800ee94:	3101      	adds	r1, #1
 800ee96:	f7ff ff79 	bl	800ed8c <_Balloc>
 800ee9a:	4680      	mov	r8, r0
 800ee9c:	b928      	cbnz	r0, 800eeaa <__multadd+0x5a>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	4b0c      	ldr	r3, [pc, #48]	; (800eed4 <__multadd+0x84>)
 800eea2:	480d      	ldr	r0, [pc, #52]	; (800eed8 <__multadd+0x88>)
 800eea4:	21b5      	movs	r1, #181	; 0xb5
 800eea6:	f7ff f893 	bl	800dfd0 <__assert_func>
 800eeaa:	6922      	ldr	r2, [r4, #16]
 800eeac:	3202      	adds	r2, #2
 800eeae:	f104 010c 	add.w	r1, r4, #12
 800eeb2:	0092      	lsls	r2, r2, #2
 800eeb4:	300c      	adds	r0, #12
 800eeb6:	f7fe fa45 	bl	800d344 <memcpy>
 800eeba:	4621      	mov	r1, r4
 800eebc:	4638      	mov	r0, r7
 800eebe:	f7ff ffa5 	bl	800ee0c <_Bfree>
 800eec2:	4644      	mov	r4, r8
 800eec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eec8:	3501      	adds	r5, #1
 800eeca:	615e      	str	r6, [r3, #20]
 800eecc:	6125      	str	r5, [r4, #16]
 800eece:	4620      	mov	r0, r4
 800eed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed4:	08018622 	.word	0x08018622
 800eed8:	08018633 	.word	0x08018633

0800eedc <__hi0bits>:
 800eedc:	0c03      	lsrs	r3, r0, #16
 800eede:	041b      	lsls	r3, r3, #16
 800eee0:	b9d3      	cbnz	r3, 800ef18 <__hi0bits+0x3c>
 800eee2:	0400      	lsls	r0, r0, #16
 800eee4:	2310      	movs	r3, #16
 800eee6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eeea:	bf04      	itt	eq
 800eeec:	0200      	lsleq	r0, r0, #8
 800eeee:	3308      	addeq	r3, #8
 800eef0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eef4:	bf04      	itt	eq
 800eef6:	0100      	lsleq	r0, r0, #4
 800eef8:	3304      	addeq	r3, #4
 800eefa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eefe:	bf04      	itt	eq
 800ef00:	0080      	lsleq	r0, r0, #2
 800ef02:	3302      	addeq	r3, #2
 800ef04:	2800      	cmp	r0, #0
 800ef06:	db05      	blt.n	800ef14 <__hi0bits+0x38>
 800ef08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ef0c:	f103 0301 	add.w	r3, r3, #1
 800ef10:	bf08      	it	eq
 800ef12:	2320      	moveq	r3, #32
 800ef14:	4618      	mov	r0, r3
 800ef16:	4770      	bx	lr
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e7e4      	b.n	800eee6 <__hi0bits+0xa>

0800ef1c <__lo0bits>:
 800ef1c:	6803      	ldr	r3, [r0, #0]
 800ef1e:	f013 0207 	ands.w	r2, r3, #7
 800ef22:	4601      	mov	r1, r0
 800ef24:	d00b      	beq.n	800ef3e <__lo0bits+0x22>
 800ef26:	07da      	lsls	r2, r3, #31
 800ef28:	d423      	bmi.n	800ef72 <__lo0bits+0x56>
 800ef2a:	0798      	lsls	r0, r3, #30
 800ef2c:	bf49      	itett	mi
 800ef2e:	085b      	lsrmi	r3, r3, #1
 800ef30:	089b      	lsrpl	r3, r3, #2
 800ef32:	2001      	movmi	r0, #1
 800ef34:	600b      	strmi	r3, [r1, #0]
 800ef36:	bf5c      	itt	pl
 800ef38:	600b      	strpl	r3, [r1, #0]
 800ef3a:	2002      	movpl	r0, #2
 800ef3c:	4770      	bx	lr
 800ef3e:	b298      	uxth	r0, r3
 800ef40:	b9a8      	cbnz	r0, 800ef6e <__lo0bits+0x52>
 800ef42:	0c1b      	lsrs	r3, r3, #16
 800ef44:	2010      	movs	r0, #16
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	b90a      	cbnz	r2, 800ef4e <__lo0bits+0x32>
 800ef4a:	3008      	adds	r0, #8
 800ef4c:	0a1b      	lsrs	r3, r3, #8
 800ef4e:	071a      	lsls	r2, r3, #28
 800ef50:	bf04      	itt	eq
 800ef52:	091b      	lsreq	r3, r3, #4
 800ef54:	3004      	addeq	r0, #4
 800ef56:	079a      	lsls	r2, r3, #30
 800ef58:	bf04      	itt	eq
 800ef5a:	089b      	lsreq	r3, r3, #2
 800ef5c:	3002      	addeq	r0, #2
 800ef5e:	07da      	lsls	r2, r3, #31
 800ef60:	d403      	bmi.n	800ef6a <__lo0bits+0x4e>
 800ef62:	085b      	lsrs	r3, r3, #1
 800ef64:	f100 0001 	add.w	r0, r0, #1
 800ef68:	d005      	beq.n	800ef76 <__lo0bits+0x5a>
 800ef6a:	600b      	str	r3, [r1, #0]
 800ef6c:	4770      	bx	lr
 800ef6e:	4610      	mov	r0, r2
 800ef70:	e7e9      	b.n	800ef46 <__lo0bits+0x2a>
 800ef72:	2000      	movs	r0, #0
 800ef74:	4770      	bx	lr
 800ef76:	2020      	movs	r0, #32
 800ef78:	4770      	bx	lr
	...

0800ef7c <__i2b>:
 800ef7c:	b510      	push	{r4, lr}
 800ef7e:	460c      	mov	r4, r1
 800ef80:	2101      	movs	r1, #1
 800ef82:	f7ff ff03 	bl	800ed8c <_Balloc>
 800ef86:	4602      	mov	r2, r0
 800ef88:	b928      	cbnz	r0, 800ef96 <__i2b+0x1a>
 800ef8a:	4b05      	ldr	r3, [pc, #20]	; (800efa0 <__i2b+0x24>)
 800ef8c:	4805      	ldr	r0, [pc, #20]	; (800efa4 <__i2b+0x28>)
 800ef8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ef92:	f7ff f81d 	bl	800dfd0 <__assert_func>
 800ef96:	2301      	movs	r3, #1
 800ef98:	6144      	str	r4, [r0, #20]
 800ef9a:	6103      	str	r3, [r0, #16]
 800ef9c:	bd10      	pop	{r4, pc}
 800ef9e:	bf00      	nop
 800efa0:	08018622 	.word	0x08018622
 800efa4:	08018633 	.word	0x08018633

0800efa8 <__multiply>:
 800efa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efac:	4691      	mov	r9, r2
 800efae:	690a      	ldr	r2, [r1, #16]
 800efb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	bfb8      	it	lt
 800efb8:	460b      	movlt	r3, r1
 800efba:	460c      	mov	r4, r1
 800efbc:	bfbc      	itt	lt
 800efbe:	464c      	movlt	r4, r9
 800efc0:	4699      	movlt	r9, r3
 800efc2:	6927      	ldr	r7, [r4, #16]
 800efc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800efc8:	68a3      	ldr	r3, [r4, #8]
 800efca:	6861      	ldr	r1, [r4, #4]
 800efcc:	eb07 060a 	add.w	r6, r7, sl
 800efd0:	42b3      	cmp	r3, r6
 800efd2:	b085      	sub	sp, #20
 800efd4:	bfb8      	it	lt
 800efd6:	3101      	addlt	r1, #1
 800efd8:	f7ff fed8 	bl	800ed8c <_Balloc>
 800efdc:	b930      	cbnz	r0, 800efec <__multiply+0x44>
 800efde:	4602      	mov	r2, r0
 800efe0:	4b44      	ldr	r3, [pc, #272]	; (800f0f4 <__multiply+0x14c>)
 800efe2:	4845      	ldr	r0, [pc, #276]	; (800f0f8 <__multiply+0x150>)
 800efe4:	f240 115d 	movw	r1, #349	; 0x15d
 800efe8:	f7fe fff2 	bl	800dfd0 <__assert_func>
 800efec:	f100 0514 	add.w	r5, r0, #20
 800eff0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eff4:	462b      	mov	r3, r5
 800eff6:	2200      	movs	r2, #0
 800eff8:	4543      	cmp	r3, r8
 800effa:	d321      	bcc.n	800f040 <__multiply+0x98>
 800effc:	f104 0314 	add.w	r3, r4, #20
 800f000:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f004:	f109 0314 	add.w	r3, r9, #20
 800f008:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f00c:	9202      	str	r2, [sp, #8]
 800f00e:	1b3a      	subs	r2, r7, r4
 800f010:	3a15      	subs	r2, #21
 800f012:	f022 0203 	bic.w	r2, r2, #3
 800f016:	3204      	adds	r2, #4
 800f018:	f104 0115 	add.w	r1, r4, #21
 800f01c:	428f      	cmp	r7, r1
 800f01e:	bf38      	it	cc
 800f020:	2204      	movcc	r2, #4
 800f022:	9201      	str	r2, [sp, #4]
 800f024:	9a02      	ldr	r2, [sp, #8]
 800f026:	9303      	str	r3, [sp, #12]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d80c      	bhi.n	800f046 <__multiply+0x9e>
 800f02c:	2e00      	cmp	r6, #0
 800f02e:	dd03      	ble.n	800f038 <__multiply+0x90>
 800f030:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f034:	2b00      	cmp	r3, #0
 800f036:	d05a      	beq.n	800f0ee <__multiply+0x146>
 800f038:	6106      	str	r6, [r0, #16]
 800f03a:	b005      	add	sp, #20
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f040:	f843 2b04 	str.w	r2, [r3], #4
 800f044:	e7d8      	b.n	800eff8 <__multiply+0x50>
 800f046:	f8b3 a000 	ldrh.w	sl, [r3]
 800f04a:	f1ba 0f00 	cmp.w	sl, #0
 800f04e:	d024      	beq.n	800f09a <__multiply+0xf2>
 800f050:	f104 0e14 	add.w	lr, r4, #20
 800f054:	46a9      	mov	r9, r5
 800f056:	f04f 0c00 	mov.w	ip, #0
 800f05a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f05e:	f8d9 1000 	ldr.w	r1, [r9]
 800f062:	fa1f fb82 	uxth.w	fp, r2
 800f066:	b289      	uxth	r1, r1
 800f068:	fb0a 110b 	mla	r1, sl, fp, r1
 800f06c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f070:	f8d9 2000 	ldr.w	r2, [r9]
 800f074:	4461      	add	r1, ip
 800f076:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f07a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f07e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f082:	b289      	uxth	r1, r1
 800f084:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f088:	4577      	cmp	r7, lr
 800f08a:	f849 1b04 	str.w	r1, [r9], #4
 800f08e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f092:	d8e2      	bhi.n	800f05a <__multiply+0xb2>
 800f094:	9a01      	ldr	r2, [sp, #4]
 800f096:	f845 c002 	str.w	ip, [r5, r2]
 800f09a:	9a03      	ldr	r2, [sp, #12]
 800f09c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f0a0:	3304      	adds	r3, #4
 800f0a2:	f1b9 0f00 	cmp.w	r9, #0
 800f0a6:	d020      	beq.n	800f0ea <__multiply+0x142>
 800f0a8:	6829      	ldr	r1, [r5, #0]
 800f0aa:	f104 0c14 	add.w	ip, r4, #20
 800f0ae:	46ae      	mov	lr, r5
 800f0b0:	f04f 0a00 	mov.w	sl, #0
 800f0b4:	f8bc b000 	ldrh.w	fp, [ip]
 800f0b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f0bc:	fb09 220b 	mla	r2, r9, fp, r2
 800f0c0:	4492      	add	sl, r2
 800f0c2:	b289      	uxth	r1, r1
 800f0c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f0c8:	f84e 1b04 	str.w	r1, [lr], #4
 800f0cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f0d0:	f8be 1000 	ldrh.w	r1, [lr]
 800f0d4:	0c12      	lsrs	r2, r2, #16
 800f0d6:	fb09 1102 	mla	r1, r9, r2, r1
 800f0da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f0de:	4567      	cmp	r7, ip
 800f0e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f0e4:	d8e6      	bhi.n	800f0b4 <__multiply+0x10c>
 800f0e6:	9a01      	ldr	r2, [sp, #4]
 800f0e8:	50a9      	str	r1, [r5, r2]
 800f0ea:	3504      	adds	r5, #4
 800f0ec:	e79a      	b.n	800f024 <__multiply+0x7c>
 800f0ee:	3e01      	subs	r6, #1
 800f0f0:	e79c      	b.n	800f02c <__multiply+0x84>
 800f0f2:	bf00      	nop
 800f0f4:	08018622 	.word	0x08018622
 800f0f8:	08018633 	.word	0x08018633

0800f0fc <__pow5mult>:
 800f0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f100:	4615      	mov	r5, r2
 800f102:	f012 0203 	ands.w	r2, r2, #3
 800f106:	4606      	mov	r6, r0
 800f108:	460f      	mov	r7, r1
 800f10a:	d007      	beq.n	800f11c <__pow5mult+0x20>
 800f10c:	4c25      	ldr	r4, [pc, #148]	; (800f1a4 <__pow5mult+0xa8>)
 800f10e:	3a01      	subs	r2, #1
 800f110:	2300      	movs	r3, #0
 800f112:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f116:	f7ff fe9b 	bl	800ee50 <__multadd>
 800f11a:	4607      	mov	r7, r0
 800f11c:	10ad      	asrs	r5, r5, #2
 800f11e:	d03d      	beq.n	800f19c <__pow5mult+0xa0>
 800f120:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f122:	b97c      	cbnz	r4, 800f144 <__pow5mult+0x48>
 800f124:	2010      	movs	r0, #16
 800f126:	f7f5 fa0f 	bl	8004548 <__wrap_malloc>
 800f12a:	4602      	mov	r2, r0
 800f12c:	6270      	str	r0, [r6, #36]	; 0x24
 800f12e:	b928      	cbnz	r0, 800f13c <__pow5mult+0x40>
 800f130:	4b1d      	ldr	r3, [pc, #116]	; (800f1a8 <__pow5mult+0xac>)
 800f132:	481e      	ldr	r0, [pc, #120]	; (800f1ac <__pow5mult+0xb0>)
 800f134:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f138:	f7fe ff4a 	bl	800dfd0 <__assert_func>
 800f13c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f140:	6004      	str	r4, [r0, #0]
 800f142:	60c4      	str	r4, [r0, #12]
 800f144:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f148:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f14c:	b94c      	cbnz	r4, 800f162 <__pow5mult+0x66>
 800f14e:	f240 2171 	movw	r1, #625	; 0x271
 800f152:	4630      	mov	r0, r6
 800f154:	f7ff ff12 	bl	800ef7c <__i2b>
 800f158:	2300      	movs	r3, #0
 800f15a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f15e:	4604      	mov	r4, r0
 800f160:	6003      	str	r3, [r0, #0]
 800f162:	f04f 0900 	mov.w	r9, #0
 800f166:	07eb      	lsls	r3, r5, #31
 800f168:	d50a      	bpl.n	800f180 <__pow5mult+0x84>
 800f16a:	4639      	mov	r1, r7
 800f16c:	4622      	mov	r2, r4
 800f16e:	4630      	mov	r0, r6
 800f170:	f7ff ff1a 	bl	800efa8 <__multiply>
 800f174:	4639      	mov	r1, r7
 800f176:	4680      	mov	r8, r0
 800f178:	4630      	mov	r0, r6
 800f17a:	f7ff fe47 	bl	800ee0c <_Bfree>
 800f17e:	4647      	mov	r7, r8
 800f180:	106d      	asrs	r5, r5, #1
 800f182:	d00b      	beq.n	800f19c <__pow5mult+0xa0>
 800f184:	6820      	ldr	r0, [r4, #0]
 800f186:	b938      	cbnz	r0, 800f198 <__pow5mult+0x9c>
 800f188:	4622      	mov	r2, r4
 800f18a:	4621      	mov	r1, r4
 800f18c:	4630      	mov	r0, r6
 800f18e:	f7ff ff0b 	bl	800efa8 <__multiply>
 800f192:	6020      	str	r0, [r4, #0]
 800f194:	f8c0 9000 	str.w	r9, [r0]
 800f198:	4604      	mov	r4, r0
 800f19a:	e7e4      	b.n	800f166 <__pow5mult+0x6a>
 800f19c:	4638      	mov	r0, r7
 800f19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a2:	bf00      	nop
 800f1a4:	08018780 	.word	0x08018780
 800f1a8:	0801850c 	.word	0x0801850c
 800f1ac:	08018633 	.word	0x08018633

0800f1b0 <__lshift>:
 800f1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1b4:	460c      	mov	r4, r1
 800f1b6:	6849      	ldr	r1, [r1, #4]
 800f1b8:	6923      	ldr	r3, [r4, #16]
 800f1ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f1be:	68a3      	ldr	r3, [r4, #8]
 800f1c0:	4607      	mov	r7, r0
 800f1c2:	4691      	mov	r9, r2
 800f1c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f1c8:	f108 0601 	add.w	r6, r8, #1
 800f1cc:	42b3      	cmp	r3, r6
 800f1ce:	db0b      	blt.n	800f1e8 <__lshift+0x38>
 800f1d0:	4638      	mov	r0, r7
 800f1d2:	f7ff fddb 	bl	800ed8c <_Balloc>
 800f1d6:	4605      	mov	r5, r0
 800f1d8:	b948      	cbnz	r0, 800f1ee <__lshift+0x3e>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	4b2a      	ldr	r3, [pc, #168]	; (800f288 <__lshift+0xd8>)
 800f1de:	482b      	ldr	r0, [pc, #172]	; (800f28c <__lshift+0xdc>)
 800f1e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f1e4:	f7fe fef4 	bl	800dfd0 <__assert_func>
 800f1e8:	3101      	adds	r1, #1
 800f1ea:	005b      	lsls	r3, r3, #1
 800f1ec:	e7ee      	b.n	800f1cc <__lshift+0x1c>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	f100 0114 	add.w	r1, r0, #20
 800f1f4:	f100 0210 	add.w	r2, r0, #16
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	4553      	cmp	r3, sl
 800f1fc:	db37      	blt.n	800f26e <__lshift+0xbe>
 800f1fe:	6920      	ldr	r0, [r4, #16]
 800f200:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f204:	f104 0314 	add.w	r3, r4, #20
 800f208:	f019 091f 	ands.w	r9, r9, #31
 800f20c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f210:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f214:	d02f      	beq.n	800f276 <__lshift+0xc6>
 800f216:	f1c9 0e20 	rsb	lr, r9, #32
 800f21a:	468a      	mov	sl, r1
 800f21c:	f04f 0c00 	mov.w	ip, #0
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	fa02 f209 	lsl.w	r2, r2, r9
 800f226:	ea42 020c 	orr.w	r2, r2, ip
 800f22a:	f84a 2b04 	str.w	r2, [sl], #4
 800f22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f232:	4298      	cmp	r0, r3
 800f234:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f238:	d8f2      	bhi.n	800f220 <__lshift+0x70>
 800f23a:	1b03      	subs	r3, r0, r4
 800f23c:	3b15      	subs	r3, #21
 800f23e:	f023 0303 	bic.w	r3, r3, #3
 800f242:	3304      	adds	r3, #4
 800f244:	f104 0215 	add.w	r2, r4, #21
 800f248:	4290      	cmp	r0, r2
 800f24a:	bf38      	it	cc
 800f24c:	2304      	movcc	r3, #4
 800f24e:	f841 c003 	str.w	ip, [r1, r3]
 800f252:	f1bc 0f00 	cmp.w	ip, #0
 800f256:	d001      	beq.n	800f25c <__lshift+0xac>
 800f258:	f108 0602 	add.w	r6, r8, #2
 800f25c:	3e01      	subs	r6, #1
 800f25e:	4638      	mov	r0, r7
 800f260:	612e      	str	r6, [r5, #16]
 800f262:	4621      	mov	r1, r4
 800f264:	f7ff fdd2 	bl	800ee0c <_Bfree>
 800f268:	4628      	mov	r0, r5
 800f26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f26e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f272:	3301      	adds	r3, #1
 800f274:	e7c1      	b.n	800f1fa <__lshift+0x4a>
 800f276:	3904      	subs	r1, #4
 800f278:	f853 2b04 	ldr.w	r2, [r3], #4
 800f27c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f280:	4298      	cmp	r0, r3
 800f282:	d8f9      	bhi.n	800f278 <__lshift+0xc8>
 800f284:	e7ea      	b.n	800f25c <__lshift+0xac>
 800f286:	bf00      	nop
 800f288:	08018622 	.word	0x08018622
 800f28c:	08018633 	.word	0x08018633

0800f290 <__mcmp>:
 800f290:	b530      	push	{r4, r5, lr}
 800f292:	6902      	ldr	r2, [r0, #16]
 800f294:	690c      	ldr	r4, [r1, #16]
 800f296:	1b12      	subs	r2, r2, r4
 800f298:	d10e      	bne.n	800f2b8 <__mcmp+0x28>
 800f29a:	f100 0314 	add.w	r3, r0, #20
 800f29e:	3114      	adds	r1, #20
 800f2a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f2a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f2a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f2ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f2b0:	42a5      	cmp	r5, r4
 800f2b2:	d003      	beq.n	800f2bc <__mcmp+0x2c>
 800f2b4:	d305      	bcc.n	800f2c2 <__mcmp+0x32>
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	bd30      	pop	{r4, r5, pc}
 800f2bc:	4283      	cmp	r3, r0
 800f2be:	d3f3      	bcc.n	800f2a8 <__mcmp+0x18>
 800f2c0:	e7fa      	b.n	800f2b8 <__mcmp+0x28>
 800f2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2c6:	e7f7      	b.n	800f2b8 <__mcmp+0x28>

0800f2c8 <__mdiff>:
 800f2c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2cc:	460c      	mov	r4, r1
 800f2ce:	4606      	mov	r6, r0
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	4690      	mov	r8, r2
 800f2d6:	f7ff ffdb 	bl	800f290 <__mcmp>
 800f2da:	1e05      	subs	r5, r0, #0
 800f2dc:	d110      	bne.n	800f300 <__mdiff+0x38>
 800f2de:	4629      	mov	r1, r5
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f7ff fd53 	bl	800ed8c <_Balloc>
 800f2e6:	b930      	cbnz	r0, 800f2f6 <__mdiff+0x2e>
 800f2e8:	4b3a      	ldr	r3, [pc, #232]	; (800f3d4 <__mdiff+0x10c>)
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	f240 2132 	movw	r1, #562	; 0x232
 800f2f0:	4839      	ldr	r0, [pc, #228]	; (800f3d8 <__mdiff+0x110>)
 800f2f2:	f7fe fe6d 	bl	800dfd0 <__assert_func>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f300:	bfa4      	itt	ge
 800f302:	4643      	movge	r3, r8
 800f304:	46a0      	movge	r8, r4
 800f306:	4630      	mov	r0, r6
 800f308:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f30c:	bfa6      	itte	ge
 800f30e:	461c      	movge	r4, r3
 800f310:	2500      	movge	r5, #0
 800f312:	2501      	movlt	r5, #1
 800f314:	f7ff fd3a 	bl	800ed8c <_Balloc>
 800f318:	b920      	cbnz	r0, 800f324 <__mdiff+0x5c>
 800f31a:	4b2e      	ldr	r3, [pc, #184]	; (800f3d4 <__mdiff+0x10c>)
 800f31c:	4602      	mov	r2, r0
 800f31e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f322:	e7e5      	b.n	800f2f0 <__mdiff+0x28>
 800f324:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f328:	6926      	ldr	r6, [r4, #16]
 800f32a:	60c5      	str	r5, [r0, #12]
 800f32c:	f104 0914 	add.w	r9, r4, #20
 800f330:	f108 0514 	add.w	r5, r8, #20
 800f334:	f100 0e14 	add.w	lr, r0, #20
 800f338:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f33c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f340:	f108 0210 	add.w	r2, r8, #16
 800f344:	46f2      	mov	sl, lr
 800f346:	2100      	movs	r1, #0
 800f348:	f859 3b04 	ldr.w	r3, [r9], #4
 800f34c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f350:	fa1f f883 	uxth.w	r8, r3
 800f354:	fa11 f18b 	uxtah	r1, r1, fp
 800f358:	0c1b      	lsrs	r3, r3, #16
 800f35a:	eba1 0808 	sub.w	r8, r1, r8
 800f35e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f362:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f366:	fa1f f888 	uxth.w	r8, r8
 800f36a:	1419      	asrs	r1, r3, #16
 800f36c:	454e      	cmp	r6, r9
 800f36e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f372:	f84a 3b04 	str.w	r3, [sl], #4
 800f376:	d8e7      	bhi.n	800f348 <__mdiff+0x80>
 800f378:	1b33      	subs	r3, r6, r4
 800f37a:	3b15      	subs	r3, #21
 800f37c:	f023 0303 	bic.w	r3, r3, #3
 800f380:	3304      	adds	r3, #4
 800f382:	3415      	adds	r4, #21
 800f384:	42a6      	cmp	r6, r4
 800f386:	bf38      	it	cc
 800f388:	2304      	movcc	r3, #4
 800f38a:	441d      	add	r5, r3
 800f38c:	4473      	add	r3, lr
 800f38e:	469e      	mov	lr, r3
 800f390:	462e      	mov	r6, r5
 800f392:	4566      	cmp	r6, ip
 800f394:	d30e      	bcc.n	800f3b4 <__mdiff+0xec>
 800f396:	f10c 0203 	add.w	r2, ip, #3
 800f39a:	1b52      	subs	r2, r2, r5
 800f39c:	f022 0203 	bic.w	r2, r2, #3
 800f3a0:	3d03      	subs	r5, #3
 800f3a2:	45ac      	cmp	ip, r5
 800f3a4:	bf38      	it	cc
 800f3a6:	2200      	movcc	r2, #0
 800f3a8:	441a      	add	r2, r3
 800f3aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f3ae:	b17b      	cbz	r3, 800f3d0 <__mdiff+0x108>
 800f3b0:	6107      	str	r7, [r0, #16]
 800f3b2:	e7a3      	b.n	800f2fc <__mdiff+0x34>
 800f3b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800f3b8:	fa11 f288 	uxtah	r2, r1, r8
 800f3bc:	1414      	asrs	r4, r2, #16
 800f3be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f3c2:	b292      	uxth	r2, r2
 800f3c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f3c8:	f84e 2b04 	str.w	r2, [lr], #4
 800f3cc:	1421      	asrs	r1, r4, #16
 800f3ce:	e7e0      	b.n	800f392 <__mdiff+0xca>
 800f3d0:	3f01      	subs	r7, #1
 800f3d2:	e7ea      	b.n	800f3aa <__mdiff+0xe2>
 800f3d4:	08018622 	.word	0x08018622
 800f3d8:	08018633 	.word	0x08018633

0800f3dc <__d2b>:
 800f3dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	4689      	mov	r9, r1
 800f3e2:	2101      	movs	r1, #1
 800f3e4:	ec57 6b10 	vmov	r6, r7, d0
 800f3e8:	4690      	mov	r8, r2
 800f3ea:	f7ff fccf 	bl	800ed8c <_Balloc>
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	b930      	cbnz	r0, 800f400 <__d2b+0x24>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	4b25      	ldr	r3, [pc, #148]	; (800f48c <__d2b+0xb0>)
 800f3f6:	4826      	ldr	r0, [pc, #152]	; (800f490 <__d2b+0xb4>)
 800f3f8:	f240 310a 	movw	r1, #778	; 0x30a
 800f3fc:	f7fe fde8 	bl	800dfd0 <__assert_func>
 800f400:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f404:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f408:	bb35      	cbnz	r5, 800f458 <__d2b+0x7c>
 800f40a:	2e00      	cmp	r6, #0
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	d028      	beq.n	800f462 <__d2b+0x86>
 800f410:	4668      	mov	r0, sp
 800f412:	9600      	str	r6, [sp, #0]
 800f414:	f7ff fd82 	bl	800ef1c <__lo0bits>
 800f418:	9900      	ldr	r1, [sp, #0]
 800f41a:	b300      	cbz	r0, 800f45e <__d2b+0x82>
 800f41c:	9a01      	ldr	r2, [sp, #4]
 800f41e:	f1c0 0320 	rsb	r3, r0, #32
 800f422:	fa02 f303 	lsl.w	r3, r2, r3
 800f426:	430b      	orrs	r3, r1
 800f428:	40c2      	lsrs	r2, r0
 800f42a:	6163      	str	r3, [r4, #20]
 800f42c:	9201      	str	r2, [sp, #4]
 800f42e:	9b01      	ldr	r3, [sp, #4]
 800f430:	61a3      	str	r3, [r4, #24]
 800f432:	2b00      	cmp	r3, #0
 800f434:	bf14      	ite	ne
 800f436:	2202      	movne	r2, #2
 800f438:	2201      	moveq	r2, #1
 800f43a:	6122      	str	r2, [r4, #16]
 800f43c:	b1d5      	cbz	r5, 800f474 <__d2b+0x98>
 800f43e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f442:	4405      	add	r5, r0
 800f444:	f8c9 5000 	str.w	r5, [r9]
 800f448:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f44c:	f8c8 0000 	str.w	r0, [r8]
 800f450:	4620      	mov	r0, r4
 800f452:	b003      	add	sp, #12
 800f454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f45c:	e7d5      	b.n	800f40a <__d2b+0x2e>
 800f45e:	6161      	str	r1, [r4, #20]
 800f460:	e7e5      	b.n	800f42e <__d2b+0x52>
 800f462:	a801      	add	r0, sp, #4
 800f464:	f7ff fd5a 	bl	800ef1c <__lo0bits>
 800f468:	9b01      	ldr	r3, [sp, #4]
 800f46a:	6163      	str	r3, [r4, #20]
 800f46c:	2201      	movs	r2, #1
 800f46e:	6122      	str	r2, [r4, #16]
 800f470:	3020      	adds	r0, #32
 800f472:	e7e3      	b.n	800f43c <__d2b+0x60>
 800f474:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f478:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f47c:	f8c9 0000 	str.w	r0, [r9]
 800f480:	6918      	ldr	r0, [r3, #16]
 800f482:	f7ff fd2b 	bl	800eedc <__hi0bits>
 800f486:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f48a:	e7df      	b.n	800f44c <__d2b+0x70>
 800f48c:	08018622 	.word	0x08018622
 800f490:	08018633 	.word	0x08018633

0800f494 <_calloc_r>:
 800f494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f496:	fba1 2402 	umull	r2, r4, r1, r2
 800f49a:	b94c      	cbnz	r4, 800f4b0 <_calloc_r+0x1c>
 800f49c:	4611      	mov	r1, r2
 800f49e:	9201      	str	r2, [sp, #4]
 800f4a0:	f7fd ffd2 	bl	800d448 <_malloc_r>
 800f4a4:	9a01      	ldr	r2, [sp, #4]
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	b930      	cbnz	r0, 800f4b8 <_calloc_r+0x24>
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	b003      	add	sp, #12
 800f4ae:	bd30      	pop	{r4, r5, pc}
 800f4b0:	220c      	movs	r2, #12
 800f4b2:	6002      	str	r2, [r0, #0]
 800f4b4:	2500      	movs	r5, #0
 800f4b6:	e7f8      	b.n	800f4aa <_calloc_r+0x16>
 800f4b8:	4621      	mov	r1, r4
 800f4ba:	f7fd ff51 	bl	800d360 <memset>
 800f4be:	e7f4      	b.n	800f4aa <_calloc_r+0x16>

0800f4c0 <__sfputc_r>:
 800f4c0:	6893      	ldr	r3, [r2, #8]
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	b410      	push	{r4}
 800f4c8:	6093      	str	r3, [r2, #8]
 800f4ca:	da08      	bge.n	800f4de <__sfputc_r+0x1e>
 800f4cc:	6994      	ldr	r4, [r2, #24]
 800f4ce:	42a3      	cmp	r3, r4
 800f4d0:	db01      	blt.n	800f4d6 <__sfputc_r+0x16>
 800f4d2:	290a      	cmp	r1, #10
 800f4d4:	d103      	bne.n	800f4de <__sfputc_r+0x1e>
 800f4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4da:	f000 b95d 	b.w	800f798 <__swbuf_r>
 800f4de:	6813      	ldr	r3, [r2, #0]
 800f4e0:	1c58      	adds	r0, r3, #1
 800f4e2:	6010      	str	r0, [r2, #0]
 800f4e4:	7019      	strb	r1, [r3, #0]
 800f4e6:	4608      	mov	r0, r1
 800f4e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4ec:	4770      	bx	lr

0800f4ee <__sfputs_r>:
 800f4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	460f      	mov	r7, r1
 800f4f4:	4614      	mov	r4, r2
 800f4f6:	18d5      	adds	r5, r2, r3
 800f4f8:	42ac      	cmp	r4, r5
 800f4fa:	d101      	bne.n	800f500 <__sfputs_r+0x12>
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	e007      	b.n	800f510 <__sfputs_r+0x22>
 800f500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f504:	463a      	mov	r2, r7
 800f506:	4630      	mov	r0, r6
 800f508:	f7ff ffda 	bl	800f4c0 <__sfputc_r>
 800f50c:	1c43      	adds	r3, r0, #1
 800f50e:	d1f3      	bne.n	800f4f8 <__sfputs_r+0xa>
 800f510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f514 <_vfiprintf_r>:
 800f514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f518:	460d      	mov	r5, r1
 800f51a:	b09d      	sub	sp, #116	; 0x74
 800f51c:	4614      	mov	r4, r2
 800f51e:	4698      	mov	r8, r3
 800f520:	4606      	mov	r6, r0
 800f522:	b118      	cbz	r0, 800f52c <_vfiprintf_r+0x18>
 800f524:	6983      	ldr	r3, [r0, #24]
 800f526:	b90b      	cbnz	r3, 800f52c <_vfiprintf_r+0x18>
 800f528:	f7fd fe36 	bl	800d198 <__sinit>
 800f52c:	4b89      	ldr	r3, [pc, #548]	; (800f754 <_vfiprintf_r+0x240>)
 800f52e:	429d      	cmp	r5, r3
 800f530:	d11b      	bne.n	800f56a <_vfiprintf_r+0x56>
 800f532:	6875      	ldr	r5, [r6, #4]
 800f534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f536:	07d9      	lsls	r1, r3, #31
 800f538:	d405      	bmi.n	800f546 <_vfiprintf_r+0x32>
 800f53a:	89ab      	ldrh	r3, [r5, #12]
 800f53c:	059a      	lsls	r2, r3, #22
 800f53e:	d402      	bmi.n	800f546 <_vfiprintf_r+0x32>
 800f540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f542:	f7fd feec 	bl	800d31e <__retarget_lock_acquire_recursive>
 800f546:	89ab      	ldrh	r3, [r5, #12]
 800f548:	071b      	lsls	r3, r3, #28
 800f54a:	d501      	bpl.n	800f550 <_vfiprintf_r+0x3c>
 800f54c:	692b      	ldr	r3, [r5, #16]
 800f54e:	b9eb      	cbnz	r3, 800f58c <_vfiprintf_r+0x78>
 800f550:	4629      	mov	r1, r5
 800f552:	4630      	mov	r0, r6
 800f554:	f000 f972 	bl	800f83c <__swsetup_r>
 800f558:	b1c0      	cbz	r0, 800f58c <_vfiprintf_r+0x78>
 800f55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f55c:	07dc      	lsls	r4, r3, #31
 800f55e:	d50e      	bpl.n	800f57e <_vfiprintf_r+0x6a>
 800f560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f564:	b01d      	add	sp, #116	; 0x74
 800f566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56a:	4b7b      	ldr	r3, [pc, #492]	; (800f758 <_vfiprintf_r+0x244>)
 800f56c:	429d      	cmp	r5, r3
 800f56e:	d101      	bne.n	800f574 <_vfiprintf_r+0x60>
 800f570:	68b5      	ldr	r5, [r6, #8]
 800f572:	e7df      	b.n	800f534 <_vfiprintf_r+0x20>
 800f574:	4b79      	ldr	r3, [pc, #484]	; (800f75c <_vfiprintf_r+0x248>)
 800f576:	429d      	cmp	r5, r3
 800f578:	bf08      	it	eq
 800f57a:	68f5      	ldreq	r5, [r6, #12]
 800f57c:	e7da      	b.n	800f534 <_vfiprintf_r+0x20>
 800f57e:	89ab      	ldrh	r3, [r5, #12]
 800f580:	0598      	lsls	r0, r3, #22
 800f582:	d4ed      	bmi.n	800f560 <_vfiprintf_r+0x4c>
 800f584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f586:	f7fd fecb 	bl	800d320 <__retarget_lock_release_recursive>
 800f58a:	e7e9      	b.n	800f560 <_vfiprintf_r+0x4c>
 800f58c:	2300      	movs	r3, #0
 800f58e:	9309      	str	r3, [sp, #36]	; 0x24
 800f590:	2320      	movs	r3, #32
 800f592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f596:	f8cd 800c 	str.w	r8, [sp, #12]
 800f59a:	2330      	movs	r3, #48	; 0x30
 800f59c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f760 <_vfiprintf_r+0x24c>
 800f5a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5a4:	f04f 0901 	mov.w	r9, #1
 800f5a8:	4623      	mov	r3, r4
 800f5aa:	469a      	mov	sl, r3
 800f5ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5b0:	b10a      	cbz	r2, 800f5b6 <_vfiprintf_r+0xa2>
 800f5b2:	2a25      	cmp	r2, #37	; 0x25
 800f5b4:	d1f9      	bne.n	800f5aa <_vfiprintf_r+0x96>
 800f5b6:	ebba 0b04 	subs.w	fp, sl, r4
 800f5ba:	d00b      	beq.n	800f5d4 <_vfiprintf_r+0xc0>
 800f5bc:	465b      	mov	r3, fp
 800f5be:	4622      	mov	r2, r4
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	f7ff ff93 	bl	800f4ee <__sfputs_r>
 800f5c8:	3001      	adds	r0, #1
 800f5ca:	f000 80aa 	beq.w	800f722 <_vfiprintf_r+0x20e>
 800f5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5d0:	445a      	add	r2, fp
 800f5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800f5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 80a2 	beq.w	800f722 <_vfiprintf_r+0x20e>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5e8:	f10a 0a01 	add.w	sl, sl, #1
 800f5ec:	9304      	str	r3, [sp, #16]
 800f5ee:	9307      	str	r3, [sp, #28]
 800f5f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5f4:	931a      	str	r3, [sp, #104]	; 0x68
 800f5f6:	4654      	mov	r4, sl
 800f5f8:	2205      	movs	r2, #5
 800f5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5fe:	4858      	ldr	r0, [pc, #352]	; (800f760 <_vfiprintf_r+0x24c>)
 800f600:	f7f0 fe06 	bl	8000210 <memchr>
 800f604:	9a04      	ldr	r2, [sp, #16]
 800f606:	b9d8      	cbnz	r0, 800f640 <_vfiprintf_r+0x12c>
 800f608:	06d1      	lsls	r1, r2, #27
 800f60a:	bf44      	itt	mi
 800f60c:	2320      	movmi	r3, #32
 800f60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f612:	0713      	lsls	r3, r2, #28
 800f614:	bf44      	itt	mi
 800f616:	232b      	movmi	r3, #43	; 0x2b
 800f618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f61c:	f89a 3000 	ldrb.w	r3, [sl]
 800f620:	2b2a      	cmp	r3, #42	; 0x2a
 800f622:	d015      	beq.n	800f650 <_vfiprintf_r+0x13c>
 800f624:	9a07      	ldr	r2, [sp, #28]
 800f626:	4654      	mov	r4, sl
 800f628:	2000      	movs	r0, #0
 800f62a:	f04f 0c0a 	mov.w	ip, #10
 800f62e:	4621      	mov	r1, r4
 800f630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f634:	3b30      	subs	r3, #48	; 0x30
 800f636:	2b09      	cmp	r3, #9
 800f638:	d94e      	bls.n	800f6d8 <_vfiprintf_r+0x1c4>
 800f63a:	b1b0      	cbz	r0, 800f66a <_vfiprintf_r+0x156>
 800f63c:	9207      	str	r2, [sp, #28]
 800f63e:	e014      	b.n	800f66a <_vfiprintf_r+0x156>
 800f640:	eba0 0308 	sub.w	r3, r0, r8
 800f644:	fa09 f303 	lsl.w	r3, r9, r3
 800f648:	4313      	orrs	r3, r2
 800f64a:	9304      	str	r3, [sp, #16]
 800f64c:	46a2      	mov	sl, r4
 800f64e:	e7d2      	b.n	800f5f6 <_vfiprintf_r+0xe2>
 800f650:	9b03      	ldr	r3, [sp, #12]
 800f652:	1d19      	adds	r1, r3, #4
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	9103      	str	r1, [sp, #12]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	bfbb      	ittet	lt
 800f65c:	425b      	neglt	r3, r3
 800f65e:	f042 0202 	orrlt.w	r2, r2, #2
 800f662:	9307      	strge	r3, [sp, #28]
 800f664:	9307      	strlt	r3, [sp, #28]
 800f666:	bfb8      	it	lt
 800f668:	9204      	strlt	r2, [sp, #16]
 800f66a:	7823      	ldrb	r3, [r4, #0]
 800f66c:	2b2e      	cmp	r3, #46	; 0x2e
 800f66e:	d10c      	bne.n	800f68a <_vfiprintf_r+0x176>
 800f670:	7863      	ldrb	r3, [r4, #1]
 800f672:	2b2a      	cmp	r3, #42	; 0x2a
 800f674:	d135      	bne.n	800f6e2 <_vfiprintf_r+0x1ce>
 800f676:	9b03      	ldr	r3, [sp, #12]
 800f678:	1d1a      	adds	r2, r3, #4
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	9203      	str	r2, [sp, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	bfb8      	it	lt
 800f682:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f686:	3402      	adds	r4, #2
 800f688:	9305      	str	r3, [sp, #20]
 800f68a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f770 <_vfiprintf_r+0x25c>
 800f68e:	7821      	ldrb	r1, [r4, #0]
 800f690:	2203      	movs	r2, #3
 800f692:	4650      	mov	r0, sl
 800f694:	f7f0 fdbc 	bl	8000210 <memchr>
 800f698:	b140      	cbz	r0, 800f6ac <_vfiprintf_r+0x198>
 800f69a:	2340      	movs	r3, #64	; 0x40
 800f69c:	eba0 000a 	sub.w	r0, r0, sl
 800f6a0:	fa03 f000 	lsl.w	r0, r3, r0
 800f6a4:	9b04      	ldr	r3, [sp, #16]
 800f6a6:	4303      	orrs	r3, r0
 800f6a8:	3401      	adds	r4, #1
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6b0:	482c      	ldr	r0, [pc, #176]	; (800f764 <_vfiprintf_r+0x250>)
 800f6b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6b6:	2206      	movs	r2, #6
 800f6b8:	f7f0 fdaa 	bl	8000210 <memchr>
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d03f      	beq.n	800f740 <_vfiprintf_r+0x22c>
 800f6c0:	4b29      	ldr	r3, [pc, #164]	; (800f768 <_vfiprintf_r+0x254>)
 800f6c2:	bb1b      	cbnz	r3, 800f70c <_vfiprintf_r+0x1f8>
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	3307      	adds	r3, #7
 800f6c8:	f023 0307 	bic.w	r3, r3, #7
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	9303      	str	r3, [sp, #12]
 800f6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d2:	443b      	add	r3, r7
 800f6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d6:	e767      	b.n	800f5a8 <_vfiprintf_r+0x94>
 800f6d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6dc:	460c      	mov	r4, r1
 800f6de:	2001      	movs	r0, #1
 800f6e0:	e7a5      	b.n	800f62e <_vfiprintf_r+0x11a>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	3401      	adds	r4, #1
 800f6e6:	9305      	str	r3, [sp, #20]
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	f04f 0c0a 	mov.w	ip, #10
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6f4:	3a30      	subs	r2, #48	; 0x30
 800f6f6:	2a09      	cmp	r2, #9
 800f6f8:	d903      	bls.n	800f702 <_vfiprintf_r+0x1ee>
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d0c5      	beq.n	800f68a <_vfiprintf_r+0x176>
 800f6fe:	9105      	str	r1, [sp, #20]
 800f700:	e7c3      	b.n	800f68a <_vfiprintf_r+0x176>
 800f702:	fb0c 2101 	mla	r1, ip, r1, r2
 800f706:	4604      	mov	r4, r0
 800f708:	2301      	movs	r3, #1
 800f70a:	e7f0      	b.n	800f6ee <_vfiprintf_r+0x1da>
 800f70c:	ab03      	add	r3, sp, #12
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	462a      	mov	r2, r5
 800f712:	4b16      	ldr	r3, [pc, #88]	; (800f76c <_vfiprintf_r+0x258>)
 800f714:	a904      	add	r1, sp, #16
 800f716:	4630      	mov	r0, r6
 800f718:	f7fd ffaa 	bl	800d670 <_printf_float>
 800f71c:	4607      	mov	r7, r0
 800f71e:	1c78      	adds	r0, r7, #1
 800f720:	d1d6      	bne.n	800f6d0 <_vfiprintf_r+0x1bc>
 800f722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f724:	07d9      	lsls	r1, r3, #31
 800f726:	d405      	bmi.n	800f734 <_vfiprintf_r+0x220>
 800f728:	89ab      	ldrh	r3, [r5, #12]
 800f72a:	059a      	lsls	r2, r3, #22
 800f72c:	d402      	bmi.n	800f734 <_vfiprintf_r+0x220>
 800f72e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f730:	f7fd fdf6 	bl	800d320 <__retarget_lock_release_recursive>
 800f734:	89ab      	ldrh	r3, [r5, #12]
 800f736:	065b      	lsls	r3, r3, #25
 800f738:	f53f af12 	bmi.w	800f560 <_vfiprintf_r+0x4c>
 800f73c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f73e:	e711      	b.n	800f564 <_vfiprintf_r+0x50>
 800f740:	ab03      	add	r3, sp, #12
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	462a      	mov	r2, r5
 800f746:	4b09      	ldr	r3, [pc, #36]	; (800f76c <_vfiprintf_r+0x258>)
 800f748:	a904      	add	r1, sp, #16
 800f74a:	4630      	mov	r0, r6
 800f74c:	f7fe fa34 	bl	800dbb8 <_printf_i>
 800f750:	e7e4      	b.n	800f71c <_vfiprintf_r+0x208>
 800f752:	bf00      	nop
 800f754:	08018494 	.word	0x08018494
 800f758:	080184b4 	.word	0x080184b4
 800f75c:	08018474 	.word	0x08018474
 800f760:	0801878c 	.word	0x0801878c
 800f764:	08018796 	.word	0x08018796
 800f768:	0800d671 	.word	0x0800d671
 800f76c:	0800f4ef 	.word	0x0800f4ef
 800f770:	08018792 	.word	0x08018792

0800f774 <_read_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	4d07      	ldr	r5, [pc, #28]	; (800f794 <_read_r+0x20>)
 800f778:	4604      	mov	r4, r0
 800f77a:	4608      	mov	r0, r1
 800f77c:	4611      	mov	r1, r2
 800f77e:	2200      	movs	r2, #0
 800f780:	602a      	str	r2, [r5, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	f7f1 fe9a 	bl	80014bc <_read>
 800f788:	1c43      	adds	r3, r0, #1
 800f78a:	d102      	bne.n	800f792 <_read_r+0x1e>
 800f78c:	682b      	ldr	r3, [r5, #0]
 800f78e:	b103      	cbz	r3, 800f792 <_read_r+0x1e>
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	bd38      	pop	{r3, r4, r5, pc}
 800f794:	20006998 	.word	0x20006998

0800f798 <__swbuf_r>:
 800f798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f79a:	460e      	mov	r6, r1
 800f79c:	4614      	mov	r4, r2
 800f79e:	4605      	mov	r5, r0
 800f7a0:	b118      	cbz	r0, 800f7aa <__swbuf_r+0x12>
 800f7a2:	6983      	ldr	r3, [r0, #24]
 800f7a4:	b90b      	cbnz	r3, 800f7aa <__swbuf_r+0x12>
 800f7a6:	f7fd fcf7 	bl	800d198 <__sinit>
 800f7aa:	4b21      	ldr	r3, [pc, #132]	; (800f830 <__swbuf_r+0x98>)
 800f7ac:	429c      	cmp	r4, r3
 800f7ae:	d12b      	bne.n	800f808 <__swbuf_r+0x70>
 800f7b0:	686c      	ldr	r4, [r5, #4]
 800f7b2:	69a3      	ldr	r3, [r4, #24]
 800f7b4:	60a3      	str	r3, [r4, #8]
 800f7b6:	89a3      	ldrh	r3, [r4, #12]
 800f7b8:	071a      	lsls	r2, r3, #28
 800f7ba:	d52f      	bpl.n	800f81c <__swbuf_r+0x84>
 800f7bc:	6923      	ldr	r3, [r4, #16]
 800f7be:	b36b      	cbz	r3, 800f81c <__swbuf_r+0x84>
 800f7c0:	6923      	ldr	r3, [r4, #16]
 800f7c2:	6820      	ldr	r0, [r4, #0]
 800f7c4:	1ac0      	subs	r0, r0, r3
 800f7c6:	6963      	ldr	r3, [r4, #20]
 800f7c8:	b2f6      	uxtb	r6, r6
 800f7ca:	4283      	cmp	r3, r0
 800f7cc:	4637      	mov	r7, r6
 800f7ce:	dc04      	bgt.n	800f7da <__swbuf_r+0x42>
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f7fd fc3a 	bl	800d04c <_fflush_r>
 800f7d8:	bb30      	cbnz	r0, 800f828 <__swbuf_r+0x90>
 800f7da:	68a3      	ldr	r3, [r4, #8]
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	60a3      	str	r3, [r4, #8]
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	6022      	str	r2, [r4, #0]
 800f7e6:	701e      	strb	r6, [r3, #0]
 800f7e8:	6963      	ldr	r3, [r4, #20]
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	4283      	cmp	r3, r0
 800f7ee:	d004      	beq.n	800f7fa <__swbuf_r+0x62>
 800f7f0:	89a3      	ldrh	r3, [r4, #12]
 800f7f2:	07db      	lsls	r3, r3, #31
 800f7f4:	d506      	bpl.n	800f804 <__swbuf_r+0x6c>
 800f7f6:	2e0a      	cmp	r6, #10
 800f7f8:	d104      	bne.n	800f804 <__swbuf_r+0x6c>
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	f7fd fc25 	bl	800d04c <_fflush_r>
 800f802:	b988      	cbnz	r0, 800f828 <__swbuf_r+0x90>
 800f804:	4638      	mov	r0, r7
 800f806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f808:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <__swbuf_r+0x9c>)
 800f80a:	429c      	cmp	r4, r3
 800f80c:	d101      	bne.n	800f812 <__swbuf_r+0x7a>
 800f80e:	68ac      	ldr	r4, [r5, #8]
 800f810:	e7cf      	b.n	800f7b2 <__swbuf_r+0x1a>
 800f812:	4b09      	ldr	r3, [pc, #36]	; (800f838 <__swbuf_r+0xa0>)
 800f814:	429c      	cmp	r4, r3
 800f816:	bf08      	it	eq
 800f818:	68ec      	ldreq	r4, [r5, #12]
 800f81a:	e7ca      	b.n	800f7b2 <__swbuf_r+0x1a>
 800f81c:	4621      	mov	r1, r4
 800f81e:	4628      	mov	r0, r5
 800f820:	f000 f80c 	bl	800f83c <__swsetup_r>
 800f824:	2800      	cmp	r0, #0
 800f826:	d0cb      	beq.n	800f7c0 <__swbuf_r+0x28>
 800f828:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f82c:	e7ea      	b.n	800f804 <__swbuf_r+0x6c>
 800f82e:	bf00      	nop
 800f830:	08018494 	.word	0x08018494
 800f834:	080184b4 	.word	0x080184b4
 800f838:	08018474 	.word	0x08018474

0800f83c <__swsetup_r>:
 800f83c:	4b32      	ldr	r3, [pc, #200]	; (800f908 <__swsetup_r+0xcc>)
 800f83e:	b570      	push	{r4, r5, r6, lr}
 800f840:	681d      	ldr	r5, [r3, #0]
 800f842:	4606      	mov	r6, r0
 800f844:	460c      	mov	r4, r1
 800f846:	b125      	cbz	r5, 800f852 <__swsetup_r+0x16>
 800f848:	69ab      	ldr	r3, [r5, #24]
 800f84a:	b913      	cbnz	r3, 800f852 <__swsetup_r+0x16>
 800f84c:	4628      	mov	r0, r5
 800f84e:	f7fd fca3 	bl	800d198 <__sinit>
 800f852:	4b2e      	ldr	r3, [pc, #184]	; (800f90c <__swsetup_r+0xd0>)
 800f854:	429c      	cmp	r4, r3
 800f856:	d10f      	bne.n	800f878 <__swsetup_r+0x3c>
 800f858:	686c      	ldr	r4, [r5, #4]
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f860:	0719      	lsls	r1, r3, #28
 800f862:	d42c      	bmi.n	800f8be <__swsetup_r+0x82>
 800f864:	06dd      	lsls	r5, r3, #27
 800f866:	d411      	bmi.n	800f88c <__swsetup_r+0x50>
 800f868:	2309      	movs	r3, #9
 800f86a:	6033      	str	r3, [r6, #0]
 800f86c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f876:	e03e      	b.n	800f8f6 <__swsetup_r+0xba>
 800f878:	4b25      	ldr	r3, [pc, #148]	; (800f910 <__swsetup_r+0xd4>)
 800f87a:	429c      	cmp	r4, r3
 800f87c:	d101      	bne.n	800f882 <__swsetup_r+0x46>
 800f87e:	68ac      	ldr	r4, [r5, #8]
 800f880:	e7eb      	b.n	800f85a <__swsetup_r+0x1e>
 800f882:	4b24      	ldr	r3, [pc, #144]	; (800f914 <__swsetup_r+0xd8>)
 800f884:	429c      	cmp	r4, r3
 800f886:	bf08      	it	eq
 800f888:	68ec      	ldreq	r4, [r5, #12]
 800f88a:	e7e6      	b.n	800f85a <__swsetup_r+0x1e>
 800f88c:	0758      	lsls	r0, r3, #29
 800f88e:	d512      	bpl.n	800f8b6 <__swsetup_r+0x7a>
 800f890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f892:	b141      	cbz	r1, 800f8a6 <__swsetup_r+0x6a>
 800f894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f898:	4299      	cmp	r1, r3
 800f89a:	d002      	beq.n	800f8a2 <__swsetup_r+0x66>
 800f89c:	4630      	mov	r0, r6
 800f89e:	f7fd fd67 	bl	800d370 <_free_r>
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	6363      	str	r3, [r4, #52]	; 0x34
 800f8a6:	89a3      	ldrh	r3, [r4, #12]
 800f8a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8ac:	81a3      	strh	r3, [r4, #12]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	6063      	str	r3, [r4, #4]
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	f043 0308 	orr.w	r3, r3, #8
 800f8bc:	81a3      	strh	r3, [r4, #12]
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	b94b      	cbnz	r3, 800f8d6 <__swsetup_r+0x9a>
 800f8c2:	89a3      	ldrh	r3, [r4, #12]
 800f8c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8cc:	d003      	beq.n	800f8d6 <__swsetup_r+0x9a>
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f000 f84d 	bl	800f970 <__smakebuf_r>
 800f8d6:	89a0      	ldrh	r0, [r4, #12]
 800f8d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8dc:	f010 0301 	ands.w	r3, r0, #1
 800f8e0:	d00a      	beq.n	800f8f8 <__swsetup_r+0xbc>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60a3      	str	r3, [r4, #8]
 800f8e6:	6963      	ldr	r3, [r4, #20]
 800f8e8:	425b      	negs	r3, r3
 800f8ea:	61a3      	str	r3, [r4, #24]
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	b943      	cbnz	r3, 800f902 <__swsetup_r+0xc6>
 800f8f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f8f4:	d1ba      	bne.n	800f86c <__swsetup_r+0x30>
 800f8f6:	bd70      	pop	{r4, r5, r6, pc}
 800f8f8:	0781      	lsls	r1, r0, #30
 800f8fa:	bf58      	it	pl
 800f8fc:	6963      	ldrpl	r3, [r4, #20]
 800f8fe:	60a3      	str	r3, [r4, #8]
 800f900:	e7f4      	b.n	800f8ec <__swsetup_r+0xb0>
 800f902:	2000      	movs	r0, #0
 800f904:	e7f7      	b.n	800f8f6 <__swsetup_r+0xba>
 800f906:	bf00      	nop
 800f908:	20001864 	.word	0x20001864
 800f90c:	08018494 	.word	0x08018494
 800f910:	080184b4 	.word	0x080184b4
 800f914:	08018474 	.word	0x08018474

0800f918 <abort>:
 800f918:	b508      	push	{r3, lr}
 800f91a:	2006      	movs	r0, #6
 800f91c:	f000 f8a2 	bl	800fa64 <raise>
 800f920:	2001      	movs	r0, #1
 800f922:	f7f1 fdc5 	bl	80014b0 <_exit>

0800f926 <__swhatbuf_r>:
 800f926:	b570      	push	{r4, r5, r6, lr}
 800f928:	460e      	mov	r6, r1
 800f92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f92e:	2900      	cmp	r1, #0
 800f930:	b096      	sub	sp, #88	; 0x58
 800f932:	4614      	mov	r4, r2
 800f934:	461d      	mov	r5, r3
 800f936:	da08      	bge.n	800f94a <__swhatbuf_r+0x24>
 800f938:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	602a      	str	r2, [r5, #0]
 800f940:	061a      	lsls	r2, r3, #24
 800f942:	d410      	bmi.n	800f966 <__swhatbuf_r+0x40>
 800f944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f948:	e00e      	b.n	800f968 <__swhatbuf_r+0x42>
 800f94a:	466a      	mov	r2, sp
 800f94c:	f000 f8b4 	bl	800fab8 <_fstat_r>
 800f950:	2800      	cmp	r0, #0
 800f952:	dbf1      	blt.n	800f938 <__swhatbuf_r+0x12>
 800f954:	9a01      	ldr	r2, [sp, #4]
 800f956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f95a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f95e:	425a      	negs	r2, r3
 800f960:	415a      	adcs	r2, r3
 800f962:	602a      	str	r2, [r5, #0]
 800f964:	e7ee      	b.n	800f944 <__swhatbuf_r+0x1e>
 800f966:	2340      	movs	r3, #64	; 0x40
 800f968:	2000      	movs	r0, #0
 800f96a:	6023      	str	r3, [r4, #0]
 800f96c:	b016      	add	sp, #88	; 0x58
 800f96e:	bd70      	pop	{r4, r5, r6, pc}

0800f970 <__smakebuf_r>:
 800f970:	898b      	ldrh	r3, [r1, #12]
 800f972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f974:	079d      	lsls	r5, r3, #30
 800f976:	4606      	mov	r6, r0
 800f978:	460c      	mov	r4, r1
 800f97a:	d507      	bpl.n	800f98c <__smakebuf_r+0x1c>
 800f97c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	6123      	str	r3, [r4, #16]
 800f984:	2301      	movs	r3, #1
 800f986:	6163      	str	r3, [r4, #20]
 800f988:	b002      	add	sp, #8
 800f98a:	bd70      	pop	{r4, r5, r6, pc}
 800f98c:	ab01      	add	r3, sp, #4
 800f98e:	466a      	mov	r2, sp
 800f990:	f7ff ffc9 	bl	800f926 <__swhatbuf_r>
 800f994:	9900      	ldr	r1, [sp, #0]
 800f996:	4605      	mov	r5, r0
 800f998:	4630      	mov	r0, r6
 800f99a:	f7fd fd55 	bl	800d448 <_malloc_r>
 800f99e:	b948      	cbnz	r0, 800f9b4 <__smakebuf_r+0x44>
 800f9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9a4:	059a      	lsls	r2, r3, #22
 800f9a6:	d4ef      	bmi.n	800f988 <__smakebuf_r+0x18>
 800f9a8:	f023 0303 	bic.w	r3, r3, #3
 800f9ac:	f043 0302 	orr.w	r3, r3, #2
 800f9b0:	81a3      	strh	r3, [r4, #12]
 800f9b2:	e7e3      	b.n	800f97c <__smakebuf_r+0xc>
 800f9b4:	4b0d      	ldr	r3, [pc, #52]	; (800f9ec <__smakebuf_r+0x7c>)
 800f9b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f9b8:	89a3      	ldrh	r3, [r4, #12]
 800f9ba:	6020      	str	r0, [r4, #0]
 800f9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9c0:	81a3      	strh	r3, [r4, #12]
 800f9c2:	9b00      	ldr	r3, [sp, #0]
 800f9c4:	6163      	str	r3, [r4, #20]
 800f9c6:	9b01      	ldr	r3, [sp, #4]
 800f9c8:	6120      	str	r0, [r4, #16]
 800f9ca:	b15b      	cbz	r3, 800f9e4 <__smakebuf_r+0x74>
 800f9cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	f000 f883 	bl	800fadc <_isatty_r>
 800f9d6:	b128      	cbz	r0, 800f9e4 <__smakebuf_r+0x74>
 800f9d8:	89a3      	ldrh	r3, [r4, #12]
 800f9da:	f023 0303 	bic.w	r3, r3, #3
 800f9de:	f043 0301 	orr.w	r3, r3, #1
 800f9e2:	81a3      	strh	r3, [r4, #12]
 800f9e4:	89a0      	ldrh	r0, [r4, #12]
 800f9e6:	4305      	orrs	r5, r0
 800f9e8:	81a5      	strh	r5, [r4, #12]
 800f9ea:	e7cd      	b.n	800f988 <__smakebuf_r+0x18>
 800f9ec:	0800d131 	.word	0x0800d131

0800f9f0 <__ascii_mbtowc>:
 800f9f0:	b082      	sub	sp, #8
 800f9f2:	b901      	cbnz	r1, 800f9f6 <__ascii_mbtowc+0x6>
 800f9f4:	a901      	add	r1, sp, #4
 800f9f6:	b142      	cbz	r2, 800fa0a <__ascii_mbtowc+0x1a>
 800f9f8:	b14b      	cbz	r3, 800fa0e <__ascii_mbtowc+0x1e>
 800f9fa:	7813      	ldrb	r3, [r2, #0]
 800f9fc:	600b      	str	r3, [r1, #0]
 800f9fe:	7812      	ldrb	r2, [r2, #0]
 800fa00:	1e10      	subs	r0, r2, #0
 800fa02:	bf18      	it	ne
 800fa04:	2001      	movne	r0, #1
 800fa06:	b002      	add	sp, #8
 800fa08:	4770      	bx	lr
 800fa0a:	4610      	mov	r0, r2
 800fa0c:	e7fb      	b.n	800fa06 <__ascii_mbtowc+0x16>
 800fa0e:	f06f 0001 	mvn.w	r0, #1
 800fa12:	e7f8      	b.n	800fa06 <__ascii_mbtowc+0x16>

0800fa14 <_raise_r>:
 800fa14:	291f      	cmp	r1, #31
 800fa16:	b538      	push	{r3, r4, r5, lr}
 800fa18:	4604      	mov	r4, r0
 800fa1a:	460d      	mov	r5, r1
 800fa1c:	d904      	bls.n	800fa28 <_raise_r+0x14>
 800fa1e:	2316      	movs	r3, #22
 800fa20:	6003      	str	r3, [r0, #0]
 800fa22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa26:	bd38      	pop	{r3, r4, r5, pc}
 800fa28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa2a:	b112      	cbz	r2, 800fa32 <_raise_r+0x1e>
 800fa2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa30:	b94b      	cbnz	r3, 800fa46 <_raise_r+0x32>
 800fa32:	4620      	mov	r0, r4
 800fa34:	f000 f830 	bl	800fa98 <_getpid_r>
 800fa38:	462a      	mov	r2, r5
 800fa3a:	4601      	mov	r1, r0
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa42:	f000 b817 	b.w	800fa74 <_kill_r>
 800fa46:	2b01      	cmp	r3, #1
 800fa48:	d00a      	beq.n	800fa60 <_raise_r+0x4c>
 800fa4a:	1c59      	adds	r1, r3, #1
 800fa4c:	d103      	bne.n	800fa56 <_raise_r+0x42>
 800fa4e:	2316      	movs	r3, #22
 800fa50:	6003      	str	r3, [r0, #0]
 800fa52:	2001      	movs	r0, #1
 800fa54:	e7e7      	b.n	800fa26 <_raise_r+0x12>
 800fa56:	2400      	movs	r4, #0
 800fa58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	4798      	blx	r3
 800fa60:	2000      	movs	r0, #0
 800fa62:	e7e0      	b.n	800fa26 <_raise_r+0x12>

0800fa64 <raise>:
 800fa64:	4b02      	ldr	r3, [pc, #8]	; (800fa70 <raise+0xc>)
 800fa66:	4601      	mov	r1, r0
 800fa68:	6818      	ldr	r0, [r3, #0]
 800fa6a:	f7ff bfd3 	b.w	800fa14 <_raise_r>
 800fa6e:	bf00      	nop
 800fa70:	20001864 	.word	0x20001864

0800fa74 <_kill_r>:
 800fa74:	b538      	push	{r3, r4, r5, lr}
 800fa76:	4d07      	ldr	r5, [pc, #28]	; (800fa94 <_kill_r+0x20>)
 800fa78:	2300      	movs	r3, #0
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	4608      	mov	r0, r1
 800fa7e:	4611      	mov	r1, r2
 800fa80:	602b      	str	r3, [r5, #0]
 800fa82:	f7f1 fd0d 	bl	80014a0 <_kill>
 800fa86:	1c43      	adds	r3, r0, #1
 800fa88:	d102      	bne.n	800fa90 <_kill_r+0x1c>
 800fa8a:	682b      	ldr	r3, [r5, #0]
 800fa8c:	b103      	cbz	r3, 800fa90 <_kill_r+0x1c>
 800fa8e:	6023      	str	r3, [r4, #0]
 800fa90:	bd38      	pop	{r3, r4, r5, pc}
 800fa92:	bf00      	nop
 800fa94:	20006998 	.word	0x20006998

0800fa98 <_getpid_r>:
 800fa98:	f7f1 bd00 	b.w	800149c <_getpid>

0800fa9c <__ascii_wctomb>:
 800fa9c:	b149      	cbz	r1, 800fab2 <__ascii_wctomb+0x16>
 800fa9e:	2aff      	cmp	r2, #255	; 0xff
 800faa0:	bf85      	ittet	hi
 800faa2:	238a      	movhi	r3, #138	; 0x8a
 800faa4:	6003      	strhi	r3, [r0, #0]
 800faa6:	700a      	strbls	r2, [r1, #0]
 800faa8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800faac:	bf98      	it	ls
 800faae:	2001      	movls	r0, #1
 800fab0:	4770      	bx	lr
 800fab2:	4608      	mov	r0, r1
 800fab4:	4770      	bx	lr
	...

0800fab8 <_fstat_r>:
 800fab8:	b538      	push	{r3, r4, r5, lr}
 800faba:	4d07      	ldr	r5, [pc, #28]	; (800fad8 <_fstat_r+0x20>)
 800fabc:	2300      	movs	r3, #0
 800fabe:	4604      	mov	r4, r0
 800fac0:	4608      	mov	r0, r1
 800fac2:	4611      	mov	r1, r2
 800fac4:	602b      	str	r3, [r5, #0]
 800fac6:	f7f1 fd0a 	bl	80014de <_fstat>
 800faca:	1c43      	adds	r3, r0, #1
 800facc:	d102      	bne.n	800fad4 <_fstat_r+0x1c>
 800face:	682b      	ldr	r3, [r5, #0]
 800fad0:	b103      	cbz	r3, 800fad4 <_fstat_r+0x1c>
 800fad2:	6023      	str	r3, [r4, #0]
 800fad4:	bd38      	pop	{r3, r4, r5, pc}
 800fad6:	bf00      	nop
 800fad8:	20006998 	.word	0x20006998

0800fadc <_isatty_r>:
 800fadc:	b538      	push	{r3, r4, r5, lr}
 800fade:	4d06      	ldr	r5, [pc, #24]	; (800faf8 <_isatty_r+0x1c>)
 800fae0:	2300      	movs	r3, #0
 800fae2:	4604      	mov	r4, r0
 800fae4:	4608      	mov	r0, r1
 800fae6:	602b      	str	r3, [r5, #0]
 800fae8:	f7f1 fcfe 	bl	80014e8 <_isatty>
 800faec:	1c43      	adds	r3, r0, #1
 800faee:	d102      	bne.n	800faf6 <_isatty_r+0x1a>
 800faf0:	682b      	ldr	r3, [r5, #0]
 800faf2:	b103      	cbz	r3, 800faf6 <_isatty_r+0x1a>
 800faf4:	6023      	str	r3, [r4, #0]
 800faf6:	bd38      	pop	{r3, r4, r5, pc}
 800faf8:	20006998 	.word	0x20006998

0800fafc <fabsf>:
 800fafc:	ee10 3a10 	vmov	r3, s0
 800fb00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb04:	ee00 3a10 	vmov	s0, r3
 800fb08:	4770      	bx	lr
	...

0800fb0c <expf>:
 800fb0c:	b508      	push	{r3, lr}
 800fb0e:	ed2d 8b02 	vpush	{d8}
 800fb12:	eef0 8a40 	vmov.f32	s17, s0
 800fb16:	f000 f887 	bl	800fc28 <__ieee754_expf>
 800fb1a:	eeb0 8a40 	vmov.f32	s16, s0
 800fb1e:	eeb0 0a68 	vmov.f32	s0, s17
 800fb22:	f000 fc43 	bl	80103ac <finitef>
 800fb26:	b160      	cbz	r0, 800fb42 <expf+0x36>
 800fb28:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800fb68 <expf+0x5c>
 800fb2c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb34:	dd0a      	ble.n	800fb4c <expf+0x40>
 800fb36:	f7fd f9fd 	bl	800cf34 <__errno>
 800fb3a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800fb6c <expf+0x60>
 800fb3e:	2322      	movs	r3, #34	; 0x22
 800fb40:	6003      	str	r3, [r0, #0]
 800fb42:	eeb0 0a48 	vmov.f32	s0, s16
 800fb46:	ecbd 8b02 	vpop	{d8}
 800fb4a:	bd08      	pop	{r3, pc}
 800fb4c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fb70 <expf+0x64>
 800fb50:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb58:	d5f3      	bpl.n	800fb42 <expf+0x36>
 800fb5a:	f7fd f9eb 	bl	800cf34 <__errno>
 800fb5e:	2322      	movs	r3, #34	; 0x22
 800fb60:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800fb74 <expf+0x68>
 800fb64:	6003      	str	r3, [r0, #0]
 800fb66:	e7ec      	b.n	800fb42 <expf+0x36>
 800fb68:	42b17180 	.word	0x42b17180
 800fb6c:	7f800000 	.word	0x7f800000
 800fb70:	c2cff1b5 	.word	0xc2cff1b5
 800fb74:	00000000 	.word	0x00000000

0800fb78 <powf>:
 800fb78:	b508      	push	{r3, lr}
 800fb7a:	ed2d 8b04 	vpush	{d8-d9}
 800fb7e:	eeb0 8a60 	vmov.f32	s16, s1
 800fb82:	eeb0 9a40 	vmov.f32	s18, s0
 800fb86:	f000 f91d 	bl	800fdc4 <__ieee754_powf>
 800fb8a:	eeb4 8a48 	vcmp.f32	s16, s16
 800fb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb92:	eef0 8a40 	vmov.f32	s17, s0
 800fb96:	d63e      	bvs.n	800fc16 <powf+0x9e>
 800fb98:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba0:	d112      	bne.n	800fbc8 <powf+0x50>
 800fba2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbaa:	d039      	beq.n	800fc20 <powf+0xa8>
 800fbac:	eeb0 0a48 	vmov.f32	s0, s16
 800fbb0:	f000 fbfc 	bl	80103ac <finitef>
 800fbb4:	b378      	cbz	r0, 800fc16 <powf+0x9e>
 800fbb6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbbe:	d52a      	bpl.n	800fc16 <powf+0x9e>
 800fbc0:	f7fd f9b8 	bl	800cf34 <__errno>
 800fbc4:	2322      	movs	r3, #34	; 0x22
 800fbc6:	e014      	b.n	800fbf2 <powf+0x7a>
 800fbc8:	f000 fbf0 	bl	80103ac <finitef>
 800fbcc:	b998      	cbnz	r0, 800fbf6 <powf+0x7e>
 800fbce:	eeb0 0a49 	vmov.f32	s0, s18
 800fbd2:	f000 fbeb 	bl	80103ac <finitef>
 800fbd6:	b170      	cbz	r0, 800fbf6 <powf+0x7e>
 800fbd8:	eeb0 0a48 	vmov.f32	s0, s16
 800fbdc:	f000 fbe6 	bl	80103ac <finitef>
 800fbe0:	b148      	cbz	r0, 800fbf6 <powf+0x7e>
 800fbe2:	eef4 8a68 	vcmp.f32	s17, s17
 800fbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbea:	d7e9      	bvc.n	800fbc0 <powf+0x48>
 800fbec:	f7fd f9a2 	bl	800cf34 <__errno>
 800fbf0:	2321      	movs	r3, #33	; 0x21
 800fbf2:	6003      	str	r3, [r0, #0]
 800fbf4:	e00f      	b.n	800fc16 <powf+0x9e>
 800fbf6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbfe:	d10a      	bne.n	800fc16 <powf+0x9e>
 800fc00:	eeb0 0a49 	vmov.f32	s0, s18
 800fc04:	f000 fbd2 	bl	80103ac <finitef>
 800fc08:	b128      	cbz	r0, 800fc16 <powf+0x9e>
 800fc0a:	eeb0 0a48 	vmov.f32	s0, s16
 800fc0e:	f000 fbcd 	bl	80103ac <finitef>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	d1d4      	bne.n	800fbc0 <powf+0x48>
 800fc16:	eeb0 0a68 	vmov.f32	s0, s17
 800fc1a:	ecbd 8b04 	vpop	{d8-d9}
 800fc1e:	bd08      	pop	{r3, pc}
 800fc20:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800fc24:	e7f7      	b.n	800fc16 <powf+0x9e>
	...

0800fc28 <__ieee754_expf>:
 800fc28:	ee10 2a10 	vmov	r2, s0
 800fc2c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800fc30:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fc34:	d902      	bls.n	800fc3c <__ieee754_expf+0x14>
 800fc36:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc3a:	4770      	bx	lr
 800fc3c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800fc40:	d106      	bne.n	800fc50 <__ieee754_expf+0x28>
 800fc42:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800fd7c <__ieee754_expf+0x154>
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	bf18      	it	ne
 800fc4a:	eeb0 0a67 	vmovne.f32	s0, s15
 800fc4e:	4770      	bx	lr
 800fc50:	484b      	ldr	r0, [pc, #300]	; (800fd80 <__ieee754_expf+0x158>)
 800fc52:	4282      	cmp	r2, r0
 800fc54:	dd02      	ble.n	800fc5c <__ieee754_expf+0x34>
 800fc56:	2000      	movs	r0, #0
 800fc58:	f000 bba2 	b.w	80103a0 <__math_oflowf>
 800fc5c:	2a00      	cmp	r2, #0
 800fc5e:	da05      	bge.n	800fc6c <__ieee754_expf+0x44>
 800fc60:	4a48      	ldr	r2, [pc, #288]	; (800fd84 <__ieee754_expf+0x15c>)
 800fc62:	4291      	cmp	r1, r2
 800fc64:	d902      	bls.n	800fc6c <__ieee754_expf+0x44>
 800fc66:	2000      	movs	r0, #0
 800fc68:	f000 bb94 	b.w	8010394 <__math_uflowf>
 800fc6c:	4a46      	ldr	r2, [pc, #280]	; (800fd88 <__ieee754_expf+0x160>)
 800fc6e:	4291      	cmp	r1, r2
 800fc70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fc74:	d952      	bls.n	800fd1c <__ieee754_expf+0xf4>
 800fc76:	4a45      	ldr	r2, [pc, #276]	; (800fd8c <__ieee754_expf+0x164>)
 800fc78:	4291      	cmp	r1, r2
 800fc7a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800fc7e:	d834      	bhi.n	800fcea <__ieee754_expf+0xc2>
 800fc80:	4943      	ldr	r1, [pc, #268]	; (800fd90 <__ieee754_expf+0x168>)
 800fc82:	4411      	add	r1, r2
 800fc84:	ed91 7a00 	vldr	s14, [r1]
 800fc88:	4942      	ldr	r1, [pc, #264]	; (800fd94 <__ieee754_expf+0x16c>)
 800fc8a:	440a      	add	r2, r1
 800fc8c:	edd2 7a00 	vldr	s15, [r2]
 800fc90:	ee30 7a47 	vsub.f32	s14, s0, s14
 800fc94:	f1c3 0201 	rsb	r2, r3, #1
 800fc98:	1ad2      	subs	r2, r2, r3
 800fc9a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800fc9e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800fca2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800fd98 <__ieee754_expf+0x170>
 800fca6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fd9c <__ieee754_expf+0x174>
 800fcaa:	eee6 6a05 	vfma.f32	s13, s12, s10
 800fcae:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800fda0 <__ieee754_expf+0x178>
 800fcb2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fcb6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fda4 <__ieee754_expf+0x17c>
 800fcba:	eee5 6a06 	vfma.f32	s13, s10, s12
 800fcbe:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800fda8 <__ieee754_expf+0x180>
 800fcc2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fcc6:	eef0 6a40 	vmov.f32	s13, s0
 800fcca:	eee5 6a46 	vfms.f32	s13, s10, s12
 800fcce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800fcd2:	ee20 5a26 	vmul.f32	s10, s0, s13
 800fcd6:	bb92      	cbnz	r2, 800fd3e <__ieee754_expf+0x116>
 800fcd8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800fcdc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800fce0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fce4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800fce8:	4770      	bx	lr
 800fcea:	4b30      	ldr	r3, [pc, #192]	; (800fdac <__ieee754_expf+0x184>)
 800fcec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800fdb0 <__ieee754_expf+0x188>
 800fcf0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fdb4 <__ieee754_expf+0x18c>
 800fcf4:	4413      	add	r3, r2
 800fcf6:	edd3 7a00 	vldr	s15, [r3]
 800fcfa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fcfe:	eeb0 7a40 	vmov.f32	s14, s0
 800fd02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd06:	ee17 2a90 	vmov	r2, s15
 800fd0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800fd12:	eddf 6a29 	vldr	s13, [pc, #164]	; 800fdb8 <__ieee754_expf+0x190>
 800fd16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fd1a:	e7be      	b.n	800fc9a <__ieee754_expf+0x72>
 800fd1c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800fd20:	d20b      	bcs.n	800fd3a <__ieee754_expf+0x112>
 800fd22:	eddf 6a26 	vldr	s13, [pc, #152]	; 800fdbc <__ieee754_expf+0x194>
 800fd26:	ee70 6a26 	vadd.f32	s13, s0, s13
 800fd2a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800fd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd32:	dd02      	ble.n	800fd3a <__ieee754_expf+0x112>
 800fd34:	ee30 0a25 	vadd.f32	s0, s0, s11
 800fd38:	4770      	bx	lr
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	e7af      	b.n	800fc9e <__ieee754_expf+0x76>
 800fd3e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800fd42:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800fd46:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800fd4a:	bfb8      	it	lt
 800fd4c:	3264      	addlt	r2, #100	; 0x64
 800fd4e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fd52:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800fd56:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800fd5a:	ee17 3a90 	vmov	r3, s15
 800fd5e:	bfab      	itete	ge
 800fd60:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800fd64:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800fd68:	ee00 3a10 	vmovge	s0, r3
 800fd6c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800fdc0 <__ieee754_expf+0x198>
 800fd70:	bfbc      	itt	lt
 800fd72:	ee00 3a10 	vmovlt	s0, r3
 800fd76:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800fd7a:	4770      	bx	lr
 800fd7c:	00000000 	.word	0x00000000
 800fd80:	42b17217 	.word	0x42b17217
 800fd84:	42cff1b5 	.word	0x42cff1b5
 800fd88:	3eb17218 	.word	0x3eb17218
 800fd8c:	3f851591 	.word	0x3f851591
 800fd90:	080188b0 	.word	0x080188b0
 800fd94:	080188b8 	.word	0x080188b8
 800fd98:	3331bb4c 	.word	0x3331bb4c
 800fd9c:	b5ddea0e 	.word	0xb5ddea0e
 800fda0:	388ab355 	.word	0x388ab355
 800fda4:	bb360b61 	.word	0xbb360b61
 800fda8:	3e2aaaab 	.word	0x3e2aaaab
 800fdac:	080188a8 	.word	0x080188a8
 800fdb0:	3fb8aa3b 	.word	0x3fb8aa3b
 800fdb4:	3f317180 	.word	0x3f317180
 800fdb8:	3717f7d1 	.word	0x3717f7d1
 800fdbc:	7149f2ca 	.word	0x7149f2ca
 800fdc0:	0d800000 	.word	0x0d800000

0800fdc4 <__ieee754_powf>:
 800fdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc8:	ee10 4a90 	vmov	r4, s1
 800fdcc:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800fdd0:	ed2d 8b02 	vpush	{d8}
 800fdd4:	ee10 6a10 	vmov	r6, s0
 800fdd8:	eeb0 8a40 	vmov.f32	s16, s0
 800fddc:	eef0 8a60 	vmov.f32	s17, s1
 800fde0:	d10c      	bne.n	800fdfc <__ieee754_powf+0x38>
 800fde2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800fde6:	0076      	lsls	r6, r6, #1
 800fde8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800fdec:	f240 8296 	bls.w	801031c <__ieee754_powf+0x558>
 800fdf0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800fdf4:	ecbd 8b02 	vpop	{d8}
 800fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800fe00:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fe04:	dcf4      	bgt.n	800fdf0 <__ieee754_powf+0x2c>
 800fe06:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800fe0a:	dd08      	ble.n	800fe1e <__ieee754_powf+0x5a>
 800fe0c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800fe10:	d1ee      	bne.n	800fdf0 <__ieee754_powf+0x2c>
 800fe12:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800fe16:	0064      	lsls	r4, r4, #1
 800fe18:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800fe1c:	e7e6      	b.n	800fdec <__ieee754_powf+0x28>
 800fe1e:	2e00      	cmp	r6, #0
 800fe20:	da20      	bge.n	800fe64 <__ieee754_powf+0xa0>
 800fe22:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800fe26:	da2d      	bge.n	800fe84 <__ieee754_powf+0xc0>
 800fe28:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800fe2c:	f2c0 827f 	blt.w	801032e <__ieee754_powf+0x56a>
 800fe30:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800fe34:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800fe38:	fa48 f703 	asr.w	r7, r8, r3
 800fe3c:	fa07 f303 	lsl.w	r3, r7, r3
 800fe40:	4543      	cmp	r3, r8
 800fe42:	f040 8274 	bne.w	801032e <__ieee754_powf+0x56a>
 800fe46:	f007 0701 	and.w	r7, r7, #1
 800fe4a:	f1c7 0702 	rsb	r7, r7, #2
 800fe4e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800fe52:	d11f      	bne.n	800fe94 <__ieee754_powf+0xd0>
 800fe54:	2c00      	cmp	r4, #0
 800fe56:	f280 8267 	bge.w	8010328 <__ieee754_powf+0x564>
 800fe5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe5e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fe62:	e7c7      	b.n	800fdf4 <__ieee754_powf+0x30>
 800fe64:	2700      	movs	r7, #0
 800fe66:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800fe6a:	d1f0      	bne.n	800fe4e <__ieee754_powf+0x8a>
 800fe6c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800fe70:	f000 8254 	beq.w	801031c <__ieee754_powf+0x558>
 800fe74:	dd08      	ble.n	800fe88 <__ieee754_powf+0xc4>
 800fe76:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8010180 <__ieee754_powf+0x3bc>
 800fe7a:	2c00      	cmp	r4, #0
 800fe7c:	bfa8      	it	ge
 800fe7e:	eeb0 0a68 	vmovge.f32	s0, s17
 800fe82:	e7b7      	b.n	800fdf4 <__ieee754_powf+0x30>
 800fe84:	2702      	movs	r7, #2
 800fe86:	e7ee      	b.n	800fe66 <__ieee754_powf+0xa2>
 800fe88:	2c00      	cmp	r4, #0
 800fe8a:	f280 824a 	bge.w	8010322 <__ieee754_powf+0x55e>
 800fe8e:	eeb1 0a68 	vneg.f32	s0, s17
 800fe92:	e7af      	b.n	800fdf4 <__ieee754_powf+0x30>
 800fe94:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800fe98:	d102      	bne.n	800fea0 <__ieee754_powf+0xdc>
 800fe9a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800fe9e:	e7a9      	b.n	800fdf4 <__ieee754_powf+0x30>
 800fea0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800fea4:	eeb0 0a48 	vmov.f32	s0, s16
 800fea8:	d107      	bne.n	800feba <__ieee754_powf+0xf6>
 800feaa:	2e00      	cmp	r6, #0
 800feac:	db05      	blt.n	800feba <__ieee754_powf+0xf6>
 800feae:	ecbd 8b02 	vpop	{d8}
 800feb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feb6:	f000 ba53 	b.w	8010360 <__ieee754_sqrtf>
 800feba:	f7ff fe1f 	bl	800fafc <fabsf>
 800febe:	b125      	cbz	r5, 800feca <__ieee754_powf+0x106>
 800fec0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800fec4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800fec8:	d116      	bne.n	800fef8 <__ieee754_powf+0x134>
 800feca:	2c00      	cmp	r4, #0
 800fecc:	bfbc      	itt	lt
 800fece:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800fed2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800fed6:	2e00      	cmp	r6, #0
 800fed8:	da8c      	bge.n	800fdf4 <__ieee754_powf+0x30>
 800feda:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800fede:	ea55 0307 	orrs.w	r3, r5, r7
 800fee2:	d104      	bne.n	800feee <__ieee754_powf+0x12a>
 800fee4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fee8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800feec:	e782      	b.n	800fdf4 <__ieee754_powf+0x30>
 800feee:	2f01      	cmp	r7, #1
 800fef0:	d180      	bne.n	800fdf4 <__ieee754_powf+0x30>
 800fef2:	eeb1 0a40 	vneg.f32	s0, s0
 800fef6:	e77d      	b.n	800fdf4 <__ieee754_powf+0x30>
 800fef8:	0ff0      	lsrs	r0, r6, #31
 800fefa:	3801      	subs	r0, #1
 800fefc:	ea57 0300 	orrs.w	r3, r7, r0
 800ff00:	d104      	bne.n	800ff0c <__ieee754_powf+0x148>
 800ff02:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ff06:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ff0a:	e773      	b.n	800fdf4 <__ieee754_powf+0x30>
 800ff0c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800ff10:	dd74      	ble.n	800fffc <__ieee754_powf+0x238>
 800ff12:	4b9c      	ldr	r3, [pc, #624]	; (8010184 <__ieee754_powf+0x3c0>)
 800ff14:	429d      	cmp	r5, r3
 800ff16:	dc08      	bgt.n	800ff2a <__ieee754_powf+0x166>
 800ff18:	2c00      	cmp	r4, #0
 800ff1a:	da0b      	bge.n	800ff34 <__ieee754_powf+0x170>
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	ecbd 8b02 	vpop	{d8}
 800ff22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff26:	f000 ba3b 	b.w	80103a0 <__math_oflowf>
 800ff2a:	4b97      	ldr	r3, [pc, #604]	; (8010188 <__ieee754_powf+0x3c4>)
 800ff2c:	429d      	cmp	r5, r3
 800ff2e:	dd08      	ble.n	800ff42 <__ieee754_powf+0x17e>
 800ff30:	2c00      	cmp	r4, #0
 800ff32:	dcf3      	bgt.n	800ff1c <__ieee754_powf+0x158>
 800ff34:	2000      	movs	r0, #0
 800ff36:	ecbd 8b02 	vpop	{d8}
 800ff3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3e:	f000 ba29 	b.w	8010394 <__math_uflowf>
 800ff42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ff46:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ff4a:	eddf 6a90 	vldr	s13, [pc, #576]	; 801018c <__ieee754_powf+0x3c8>
 800ff4e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ff52:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ff56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff5a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ff5e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ff62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff66:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8010190 <__ieee754_powf+0x3cc>
 800ff6a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800ff6e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8010194 <__ieee754_powf+0x3d0>
 800ff72:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ff76:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8010198 <__ieee754_powf+0x3d4>
 800ff7a:	eef0 6a67 	vmov.f32	s13, s15
 800ff7e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ff82:	ee16 3a90 	vmov	r3, s13
 800ff86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ff8a:	f023 030f 	bic.w	r3, r3, #15
 800ff8e:	ee00 3a90 	vmov	s1, r3
 800ff92:	eee0 0a47 	vfms.f32	s1, s0, s14
 800ff96:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ff9a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800ff9e:	f024 040f 	bic.w	r4, r4, #15
 800ffa2:	ee07 4a10 	vmov	s14, r4
 800ffa6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ffaa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ffae:	ee07 3a90 	vmov	s15, r3
 800ffb2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ffb6:	3f01      	subs	r7, #1
 800ffb8:	ea57 0200 	orrs.w	r2, r7, r0
 800ffbc:	ee07 4a10 	vmov	s14, r4
 800ffc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffc4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ffc8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ffcc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ffd0:	ee17 4a10 	vmov	r4, s14
 800ffd4:	bf08      	it	eq
 800ffd6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800ffda:	2c00      	cmp	r4, #0
 800ffdc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ffe0:	f340 817e 	ble.w	80102e0 <__ieee754_powf+0x51c>
 800ffe4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ffe8:	f340 80f8 	ble.w	80101dc <__ieee754_powf+0x418>
 800ffec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff4:	bf4c      	ite	mi
 800fff6:	2001      	movmi	r0, #1
 800fff8:	2000      	movpl	r0, #0
 800fffa:	e790      	b.n	800ff1e <__ieee754_powf+0x15a>
 800fffc:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8010000:	bf01      	itttt	eq
 8010002:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801019c <__ieee754_powf+0x3d8>
 8010006:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801000a:	f06f 0217 	mvneq.w	r2, #23
 801000e:	ee17 5a90 	vmoveq	r5, s15
 8010012:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010016:	bf18      	it	ne
 8010018:	2200      	movne	r2, #0
 801001a:	3b7f      	subs	r3, #127	; 0x7f
 801001c:	4413      	add	r3, r2
 801001e:	4a60      	ldr	r2, [pc, #384]	; (80101a0 <__ieee754_powf+0x3dc>)
 8010020:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8010024:	4295      	cmp	r5, r2
 8010026:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801002a:	dd06      	ble.n	801003a <__ieee754_powf+0x276>
 801002c:	4a5d      	ldr	r2, [pc, #372]	; (80101a4 <__ieee754_powf+0x3e0>)
 801002e:	4295      	cmp	r5, r2
 8010030:	f340 80a4 	ble.w	801017c <__ieee754_powf+0x3b8>
 8010034:	3301      	adds	r3, #1
 8010036:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801003a:	2500      	movs	r5, #0
 801003c:	4a5a      	ldr	r2, [pc, #360]	; (80101a8 <__ieee754_powf+0x3e4>)
 801003e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8010042:	ee07 1a90 	vmov	s15, r1
 8010046:	ed92 7a00 	vldr	s14, [r2]
 801004a:	4a58      	ldr	r2, [pc, #352]	; (80101ac <__ieee754_powf+0x3e8>)
 801004c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010050:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010054:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010058:	1049      	asrs	r1, r1, #1
 801005a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801005e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8010062:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8010066:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801006a:	ee06 1a10 	vmov	s12, r1
 801006e:	ee65 4a26 	vmul.f32	s9, s10, s13
 8010072:	ee36 7a47 	vsub.f32	s14, s12, s14
 8010076:	ee14 6a90 	vmov	r6, s9
 801007a:	4016      	ands	r6, r2
 801007c:	ee05 6a90 	vmov	s11, r6
 8010080:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8010084:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010088:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80101b0 <__ieee754_powf+0x3ec>
 801008c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8010090:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8010094:	ee25 6a26 	vmul.f32	s12, s10, s13
 8010098:	eddf 6a46 	vldr	s13, [pc, #280]	; 80101b4 <__ieee754_powf+0x3f0>
 801009c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80100a0:	eddf 6a45 	vldr	s13, [pc, #276]	; 80101b8 <__ieee754_powf+0x3f4>
 80100a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80100a8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801018c <__ieee754_powf+0x3c8>
 80100ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80100b0:	eddf 6a42 	vldr	s13, [pc, #264]	; 80101bc <__ieee754_powf+0x3f8>
 80100b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80100b8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80101c0 <__ieee754_powf+0x3fc>
 80100bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80100c0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80100c4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80100c8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80100cc:	eee5 6a07 	vfma.f32	s13, s10, s14
 80100d0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80100d4:	eef0 7a45 	vmov.f32	s15, s10
 80100d8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80100dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100e0:	ee17 1a90 	vmov	r1, s15
 80100e4:	4011      	ands	r1, r2
 80100e6:	ee07 1a90 	vmov	s15, r1
 80100ea:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80100ee:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80100f2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80100f6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80100fa:	eea6 7a27 	vfma.f32	s14, s12, s15
 80100fe:	eeb0 6a47 	vmov.f32	s12, s14
 8010102:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010106:	ee16 1a10 	vmov	r1, s12
 801010a:	4011      	ands	r1, r2
 801010c:	ee06 1a90 	vmov	s13, r1
 8010110:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8010114:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80101c4 <__ieee754_powf+0x400>
 8010118:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80101c8 <__ieee754_powf+0x404>
 801011c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010120:	ee06 1a10 	vmov	s12, r1
 8010124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010128:	eddf 7a28 	vldr	s15, [pc, #160]	; 80101cc <__ieee754_powf+0x408>
 801012c:	4928      	ldr	r1, [pc, #160]	; (80101d0 <__ieee754_powf+0x40c>)
 801012e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010132:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8010136:	edd1 7a00 	vldr	s15, [r1]
 801013a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801013e:	ee07 3a90 	vmov	s15, r3
 8010142:	4b24      	ldr	r3, [pc, #144]	; (80101d4 <__ieee754_powf+0x410>)
 8010144:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010148:	eef0 7a47 	vmov.f32	s15, s14
 801014c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010150:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010154:	edd5 0a00 	vldr	s1, [r5]
 8010158:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801015c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010160:	ee17 3a90 	vmov	r3, s15
 8010164:	4013      	ands	r3, r2
 8010166:	ee07 3a90 	vmov	s15, r3
 801016a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801016e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8010172:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010176:	ee77 7a66 	vsub.f32	s15, s14, s13
 801017a:	e70e      	b.n	800ff9a <__ieee754_powf+0x1d6>
 801017c:	2501      	movs	r5, #1
 801017e:	e75d      	b.n	801003c <__ieee754_powf+0x278>
 8010180:	00000000 	.word	0x00000000
 8010184:	3f7ffff3 	.word	0x3f7ffff3
 8010188:	3f800007 	.word	0x3f800007
 801018c:	3eaaaaab 	.word	0x3eaaaaab
 8010190:	3fb8aa3b 	.word	0x3fb8aa3b
 8010194:	36eca570 	.word	0x36eca570
 8010198:	3fb8aa00 	.word	0x3fb8aa00
 801019c:	4b800000 	.word	0x4b800000
 80101a0:	001cc471 	.word	0x001cc471
 80101a4:	005db3d6 	.word	0x005db3d6
 80101a8:	080188c0 	.word	0x080188c0
 80101ac:	fffff000 	.word	0xfffff000
 80101b0:	3e6c3255 	.word	0x3e6c3255
 80101b4:	3e53f142 	.word	0x3e53f142
 80101b8:	3e8ba305 	.word	0x3e8ba305
 80101bc:	3edb6db7 	.word	0x3edb6db7
 80101c0:	3f19999a 	.word	0x3f19999a
 80101c4:	3f76384f 	.word	0x3f76384f
 80101c8:	3f763800 	.word	0x3f763800
 80101cc:	369dc3a0 	.word	0x369dc3a0
 80101d0:	080188d0 	.word	0x080188d0
 80101d4:	080188c8 	.word	0x080188c8
 80101d8:	3338aa3c 	.word	0x3338aa3c
 80101dc:	f040 8095 	bne.w	801030a <__ieee754_powf+0x546>
 80101e0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80101d8 <__ieee754_powf+0x414>
 80101e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80101e8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80101ec:	eef4 6ac7 	vcmpe.f32	s13, s14
 80101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f4:	f73f aefa 	bgt.w	800ffec <__ieee754_powf+0x228>
 80101f8:	15db      	asrs	r3, r3, #23
 80101fa:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80101fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010202:	4103      	asrs	r3, r0
 8010204:	4423      	add	r3, r4
 8010206:	494b      	ldr	r1, [pc, #300]	; (8010334 <__ieee754_powf+0x570>)
 8010208:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801020c:	3a7f      	subs	r2, #127	; 0x7f
 801020e:	4111      	asrs	r1, r2
 8010210:	ea23 0101 	bic.w	r1, r3, r1
 8010214:	ee07 1a10 	vmov	s14, r1
 8010218:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801021c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010220:	f1c2 0217 	rsb	r2, r2, #23
 8010224:	4110      	asrs	r0, r2
 8010226:	2c00      	cmp	r4, #0
 8010228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801022c:	bfb8      	it	lt
 801022e:	4240      	neglt	r0, r0
 8010230:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010234:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8010338 <__ieee754_powf+0x574>
 8010238:	eddf 6a40 	vldr	s13, [pc, #256]	; 801033c <__ieee754_powf+0x578>
 801023c:	ee17 3a10 	vmov	r3, s14
 8010240:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010244:	f023 030f 	bic.w	r3, r3, #15
 8010248:	ee07 3a10 	vmov	s14, r3
 801024c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010250:	ee27 0a00 	vmul.f32	s0, s14, s0
 8010254:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010258:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010340 <__ieee754_powf+0x57c>
 801025c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8010260:	eef0 7a40 	vmov.f32	s15, s0
 8010264:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010268:	eeb0 6a67 	vmov.f32	s12, s15
 801026c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010270:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010274:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010278:	eddf 6a32 	vldr	s13, [pc, #200]	; 8010344 <__ieee754_powf+0x580>
 801027c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8010348 <__ieee754_powf+0x584>
 8010280:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010284:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801034c <__ieee754_powf+0x588>
 8010288:	eea6 6a87 	vfma.f32	s12, s13, s14
 801028c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8010350 <__ieee754_powf+0x58c>
 8010290:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010294:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8010354 <__ieee754_powf+0x590>
 8010298:	eea6 6a87 	vfma.f32	s12, s13, s14
 801029c:	eef0 6a67 	vmov.f32	s13, s15
 80102a0:	eee6 6a47 	vfms.f32	s13, s12, s14
 80102a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80102a8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80102ac:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80102b0:	eea7 0a80 	vfma.f32	s0, s15, s0
 80102b4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80102b8:	ee37 0a40 	vsub.f32	s0, s14, s0
 80102bc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80102c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80102c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80102c8:	ee10 3a10 	vmov	r3, s0
 80102cc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80102d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80102d4:	da1f      	bge.n	8010316 <__ieee754_powf+0x552>
 80102d6:	f000 f877 	bl	80103c8 <scalbnf>
 80102da:	ee20 0a08 	vmul.f32	s0, s0, s16
 80102de:	e589      	b.n	800fdf4 <__ieee754_powf+0x30>
 80102e0:	4a1d      	ldr	r2, [pc, #116]	; (8010358 <__ieee754_powf+0x594>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	dd07      	ble.n	80102f6 <__ieee754_powf+0x532>
 80102e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80102ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ee:	bf4c      	ite	mi
 80102f0:	2001      	movmi	r0, #1
 80102f2:	2000      	movpl	r0, #0
 80102f4:	e61f      	b.n	800ff36 <__ieee754_powf+0x172>
 80102f6:	d108      	bne.n	801030a <__ieee754_powf+0x546>
 80102f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80102fc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010304:	f6ff af78 	blt.w	80101f8 <__ieee754_powf+0x434>
 8010308:	e7ed      	b.n	80102e6 <__ieee754_powf+0x522>
 801030a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801030e:	f73f af73 	bgt.w	80101f8 <__ieee754_powf+0x434>
 8010312:	2000      	movs	r0, #0
 8010314:	e78c      	b.n	8010230 <__ieee754_powf+0x46c>
 8010316:	ee00 3a10 	vmov	s0, r3
 801031a:	e7de      	b.n	80102da <__ieee754_powf+0x516>
 801031c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010320:	e568      	b.n	800fdf4 <__ieee754_powf+0x30>
 8010322:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801035c <__ieee754_powf+0x598>
 8010326:	e565      	b.n	800fdf4 <__ieee754_powf+0x30>
 8010328:	eeb0 0a48 	vmov.f32	s0, s16
 801032c:	e562      	b.n	800fdf4 <__ieee754_powf+0x30>
 801032e:	2700      	movs	r7, #0
 8010330:	e58d      	b.n	800fe4e <__ieee754_powf+0x8a>
 8010332:	bf00      	nop
 8010334:	007fffff 	.word	0x007fffff
 8010338:	35bfbe8c 	.word	0x35bfbe8c
 801033c:	3f317200 	.word	0x3f317200
 8010340:	3f317218 	.word	0x3f317218
 8010344:	b5ddea0e 	.word	0xb5ddea0e
 8010348:	3331bb4c 	.word	0x3331bb4c
 801034c:	388ab355 	.word	0x388ab355
 8010350:	bb360b61 	.word	0xbb360b61
 8010354:	3e2aaaab 	.word	0x3e2aaaab
 8010358:	43160000 	.word	0x43160000
 801035c:	00000000 	.word	0x00000000

08010360 <__ieee754_sqrtf>:
 8010360:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010364:	4770      	bx	lr

08010366 <with_errnof>:
 8010366:	b513      	push	{r0, r1, r4, lr}
 8010368:	4604      	mov	r4, r0
 801036a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801036e:	f7fc fde1 	bl	800cf34 <__errno>
 8010372:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010376:	6004      	str	r4, [r0, #0]
 8010378:	b002      	add	sp, #8
 801037a:	bd10      	pop	{r4, pc}

0801037c <xflowf>:
 801037c:	b130      	cbz	r0, 801038c <xflowf+0x10>
 801037e:	eef1 7a40 	vneg.f32	s15, s0
 8010382:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010386:	2022      	movs	r0, #34	; 0x22
 8010388:	f7ff bfed 	b.w	8010366 <with_errnof>
 801038c:	eef0 7a40 	vmov.f32	s15, s0
 8010390:	e7f7      	b.n	8010382 <xflowf+0x6>
	...

08010394 <__math_uflowf>:
 8010394:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801039c <__math_uflowf+0x8>
 8010398:	f7ff bff0 	b.w	801037c <xflowf>
 801039c:	10000000 	.word	0x10000000

080103a0 <__math_oflowf>:
 80103a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80103a8 <__math_oflowf+0x8>
 80103a4:	f7ff bfea 	b.w	801037c <xflowf>
 80103a8:	70000000 	.word	0x70000000

080103ac <finitef>:
 80103ac:	b082      	sub	sp, #8
 80103ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 80103b2:	9801      	ldr	r0, [sp, #4]
 80103b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80103b8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80103bc:	bfac      	ite	ge
 80103be:	2000      	movge	r0, #0
 80103c0:	2001      	movlt	r0, #1
 80103c2:	b002      	add	sp, #8
 80103c4:	4770      	bx	lr
	...

080103c8 <scalbnf>:
 80103c8:	ee10 3a10 	vmov	r3, s0
 80103cc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80103d0:	d025      	beq.n	801041e <scalbnf+0x56>
 80103d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80103d6:	d302      	bcc.n	80103de <scalbnf+0x16>
 80103d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80103dc:	4770      	bx	lr
 80103de:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80103e2:	d122      	bne.n	801042a <scalbnf+0x62>
 80103e4:	4b2a      	ldr	r3, [pc, #168]	; (8010490 <scalbnf+0xc8>)
 80103e6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010494 <scalbnf+0xcc>
 80103ea:	4298      	cmp	r0, r3
 80103ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80103f0:	db16      	blt.n	8010420 <scalbnf+0x58>
 80103f2:	ee10 3a10 	vmov	r3, s0
 80103f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80103fa:	3a19      	subs	r2, #25
 80103fc:	4402      	add	r2, r0
 80103fe:	2afe      	cmp	r2, #254	; 0xfe
 8010400:	dd15      	ble.n	801042e <scalbnf+0x66>
 8010402:	ee10 3a10 	vmov	r3, s0
 8010406:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010498 <scalbnf+0xd0>
 801040a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801049c <scalbnf+0xd4>
 801040e:	2b00      	cmp	r3, #0
 8010410:	eeb0 7a67 	vmov.f32	s14, s15
 8010414:	bfb8      	it	lt
 8010416:	eef0 7a66 	vmovlt.f32	s15, s13
 801041a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801041e:	4770      	bx	lr
 8010420:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80104a0 <scalbnf+0xd8>
 8010424:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010428:	4770      	bx	lr
 801042a:	0dd2      	lsrs	r2, r2, #23
 801042c:	e7e6      	b.n	80103fc <scalbnf+0x34>
 801042e:	2a00      	cmp	r2, #0
 8010430:	dd06      	ble.n	8010440 <scalbnf+0x78>
 8010432:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010436:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801043a:	ee00 3a10 	vmov	s0, r3
 801043e:	4770      	bx	lr
 8010440:	f112 0f16 	cmn.w	r2, #22
 8010444:	da1a      	bge.n	801047c <scalbnf+0xb4>
 8010446:	f24c 3350 	movw	r3, #50000	; 0xc350
 801044a:	4298      	cmp	r0, r3
 801044c:	ee10 3a10 	vmov	r3, s0
 8010450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010454:	dd0a      	ble.n	801046c <scalbnf+0xa4>
 8010456:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010498 <scalbnf+0xd0>
 801045a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801049c <scalbnf+0xd4>
 801045e:	eef0 7a40 	vmov.f32	s15, s0
 8010462:	2b00      	cmp	r3, #0
 8010464:	bf18      	it	ne
 8010466:	eeb0 0a47 	vmovne.f32	s0, s14
 801046a:	e7db      	b.n	8010424 <scalbnf+0x5c>
 801046c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80104a0 <scalbnf+0xd8>
 8010470:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80104a4 <scalbnf+0xdc>
 8010474:	eef0 7a40 	vmov.f32	s15, s0
 8010478:	2b00      	cmp	r3, #0
 801047a:	e7f3      	b.n	8010464 <scalbnf+0x9c>
 801047c:	3219      	adds	r2, #25
 801047e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010482:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010486:	eddf 7a08 	vldr	s15, [pc, #32]	; 80104a8 <scalbnf+0xe0>
 801048a:	ee07 3a10 	vmov	s14, r3
 801048e:	e7c4      	b.n	801041a <scalbnf+0x52>
 8010490:	ffff3cb0 	.word	0xffff3cb0
 8010494:	4c000000 	.word	0x4c000000
 8010498:	7149f2ca 	.word	0x7149f2ca
 801049c:	f149f2ca 	.word	0xf149f2ca
 80104a0:	0da24260 	.word	0x0da24260
 80104a4:	8da24260 	.word	0x8da24260
 80104a8:	33000000 	.word	0x33000000

080104ac <_init>:
 80104ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ae:	bf00      	nop
 80104b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b2:	bc08      	pop	{r3}
 80104b4:	469e      	mov	lr, r3
 80104b6:	4770      	bx	lr

080104b8 <_fini>:
 80104b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ba:	bf00      	nop
 80104bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104be:	bc08      	pop	{r3}
 80104c0:	469e      	mov	lr, r3
 80104c2:	4770      	bx	lr
