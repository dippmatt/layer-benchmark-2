
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000457dc  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08049d94  08049d94  00060078  2**0
                  CONTENTS
  4 .ARM          00000008  08049d94  08049d94  00059d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08049d9c  08049d9c  00060078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08049d9c  08049d9c  00059d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08049da0  08049da0  00059da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08049da4  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ac  20000078  08049e1c  00060078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001524  08049e1c  00061524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bce3  00000000  00000000  000600a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db0  00000000  00000000  0008bd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002bd89  00000000  00000000  0008fb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  000bb8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004860  00000000  00000000  000bc568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf7e  00000000  00000000  000c0dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000231e4  00000000  00000000  000ecd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109a86  00000000  00000000  0010ff2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002199b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002938  00000000  00000000  00219a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080045a0 	.word	0x080045a0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	080045a0 	.word	0x080045a0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <invoke>:
    return NNoutput;
}
void end2endinference(q7_t* img){
    invoke(NULL);
}
void invoke(float* labels){
 80005a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005a8:	b08f      	sub	sp, #60	; 0x3c
/* layer 0:CONV_2D */
convolve_1x1_s8(&buffer0[0],1,1,640,(const q7_t*) weight0,bias0,shift0,multiplier0,-128,-89,-128,127,&buffer0[640],1,1,128,sbuf);
 80005aa:	4b81      	ldr	r3, [pc, #516]	; (80007b0 <invoke+0x20c>)
 80005ac:	9303      	str	r3, [sp, #12]
 80005ae:	4b81      	ldr	r3, [pc, #516]	; (80007b4 <invoke+0x210>)
 80005b0:	4e81      	ldr	r6, [pc, #516]	; (80007b8 <invoke+0x214>)
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	4b81      	ldr	r3, [pc, #516]	; (80007bc <invoke+0x218>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	4b81      	ldr	r3, [pc, #516]	; (80007c0 <invoke+0x21c>)
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2701      	movs	r7, #1
 80005be:	2480      	movs	r4, #128	; 0x80
 80005c0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80005c4:	f506 7840 	add.w	r8, r6, #768	; 0x300
 80005c8:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
 80005cc:	f506 7a20 	add.w	sl, r6, #640	; 0x280
 80005d0:	f06f 0358 	mvn.w	r3, #88	; 0x58
 80005d4:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
 80005d8:	9305      	str	r3, [sp, #20]
 80005da:	463a      	mov	r2, r7
 80005dc:	4639      	mov	r1, r7
 80005de:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 80005e2:	9506      	str	r5, [sp, #24]
 80005e4:	9504      	str	r5, [sp, #16]
 80005e6:	f8cd b01c 	str.w	fp, [sp, #28]
 80005ea:	f8cd a020 	str.w	sl, [sp, #32]
 80005ee:	f44f 7320 	mov.w	r3, #640	; 0x280
 80005f2:	4630      	mov	r0, r6
 80005f4:	f000 fb22 	bl	8000c3c <convolve_1x1_s8>
/* layer 1:CONV_2D */
convolve_1x1_s8(&buffer0[640],1,1,128,(const q7_t*) weight1,bias1,shift1,multiplier1,-128,128,-128,127,&buffer0[0],1,1,128,sbuf);
 80005f8:	4b72      	ldr	r3, [pc, #456]	; (80007c4 <invoke+0x220>)
 80005fa:	9303      	str	r3, [sp, #12]
 80005fc:	4b72      	ldr	r3, [pc, #456]	; (80007c8 <invoke+0x224>)
 80005fe:	9302      	str	r3, [sp, #8]
 8000600:	4b72      	ldr	r3, [pc, #456]	; (80007cc <invoke+0x228>)
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	4b72      	ldr	r3, [pc, #456]	; (80007d0 <invoke+0x22c>)
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
 800060c:	e9cd 4505 	strd	r4, r5, [sp, #20]
 8000610:	4623      	mov	r3, r4
 8000612:	463a      	mov	r2, r7
 8000614:	4639      	mov	r1, r7
 8000616:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 800061a:	e9cd b607 	strd	fp, r6, [sp, #28]
 800061e:	9504      	str	r5, [sp, #16]
 8000620:	4650      	mov	r0, sl
 8000622:	f000 fb0b 	bl	8000c3c <convolve_1x1_s8>
/* layer 2:CONV_2D */
convolve_1x1_s8(&buffer0[0],1,1,128,(const q7_t*) weight2,bias2,shift2,multiplier2,-128,128,-128,127,&buffer0[128],1,1,128,sbuf);
 8000626:	4b6b      	ldr	r3, [pc, #428]	; (80007d4 <invoke+0x230>)
 8000628:	9303      	str	r3, [sp, #12]
 800062a:	4b6b      	ldr	r3, [pc, #428]	; (80007d8 <invoke+0x234>)
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	4b6b      	ldr	r3, [pc, #428]	; (80007dc <invoke+0x238>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	eb06 0904 	add.w	r9, r6, r4
 8000636:	4b6a      	ldr	r3, [pc, #424]	; (80007e0 <invoke+0x23c>)
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
 800063e:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8000642:	4623      	mov	r3, r4
 8000644:	463a      	mov	r2, r7
 8000646:	4639      	mov	r1, r7
 8000648:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 800064c:	e9cd 5b06 	strd	r5, fp, [sp, #24]
 8000650:	f8cd 9020 	str.w	r9, [sp, #32]
 8000654:	4630      	mov	r0, r6
 8000656:	f000 faf1 	bl	8000c3c <convolve_1x1_s8>
/* layer 3:CONV_2D */
convolve_1x1_s8(&buffer0[128],1,1,128,(const q7_t*) weight3,bias3,shift3,multiplier3,-128,128,-128,127,&buffer0[0],1,1,128,sbuf);
 800065a:	4b62      	ldr	r3, [pc, #392]	; (80007e4 <invoke+0x240>)
 800065c:	9303      	str	r3, [sp, #12]
 800065e:	4b62      	ldr	r3, [pc, #392]	; (80007e8 <invoke+0x244>)
 8000660:	9302      	str	r3, [sp, #8]
 8000662:	4b62      	ldr	r3, [pc, #392]	; (80007ec <invoke+0x248>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <invoke+0x24c>)
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
 800066e:	e9cd 4505 	strd	r4, r5, [sp, #20]
 8000672:	4623      	mov	r3, r4
 8000674:	463a      	mov	r2, r7
 8000676:	4639      	mov	r1, r7
 8000678:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 800067c:	e9cd b607 	strd	fp, r6, [sp, #28]
 8000680:	9504      	str	r5, [sp, #16]
 8000682:	4648      	mov	r0, r9
 8000684:	f000 fada 	bl	8000c3c <convolve_1x1_s8>
/* layer 4:CONV_2D */
convolve_1x1_s8(&buffer0[0],1,1,128,(const q7_t*) weight4,bias4,shift4,multiplier4,-128,128,-128,127,&buffer0[128],1,1,8,sbuf);
 8000688:	2308      	movs	r3, #8
 800068a:	930b      	str	r3, [sp, #44]	; 0x2c
 800068c:	4b59      	ldr	r3, [pc, #356]	; (80007f4 <invoke+0x250>)
 800068e:	9303      	str	r3, [sp, #12]
 8000690:	4b59      	ldr	r3, [pc, #356]	; (80007f8 <invoke+0x254>)
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	4b59      	ldr	r3, [pc, #356]	; (80007fc <invoke+0x258>)
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	4b59      	ldr	r3, [pc, #356]	; (8000800 <invoke+0x25c>)
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	e9cd 4505 	strd	r4, r5, [sp, #20]
 80006a0:	4623      	mov	r3, r4
 80006a2:	463a      	mov	r2, r7
 80006a4:	4639      	mov	r1, r7
 80006a6:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 80006aa:	e9cd b907 	strd	fp, r9, [sp, #28]
 80006ae:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80006b2:	9504      	str	r5, [sp, #16]
 80006b4:	4630      	mov	r0, r6
 80006b6:	f000 fac1 	bl	8000c3c <convolve_1x1_s8>
/* layer 5:CONV_2D */
convolve_1x1_s8_ch8(&buffer0[128],1,1,8,(const q7_t*) weight5,bias5,shift5,multiplier5,-128,128,-128,127,&buffer0[0],1,1,128,sbuf);
 80006ba:	4952      	ldr	r1, [pc, #328]	; (8000804 <invoke+0x260>)
 80006bc:	9103      	str	r1, [sp, #12]
 80006be:	4952      	ldr	r1, [pc, #328]	; (8000808 <invoke+0x264>)
 80006c0:	9102      	str	r1, [sp, #8]
 80006c2:	4952      	ldr	r1, [pc, #328]	; (800080c <invoke+0x268>)
 80006c4:	9101      	str	r1, [sp, #4]
 80006c6:	4952      	ldr	r1, [pc, #328]	; (8000810 <invoke+0x26c>)
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
 80006ce:	e9cd 4505 	strd	r4, r5, [sp, #20]
 80006d2:	463a      	mov	r2, r7
 80006d4:	4639      	mov	r1, r7
 80006d6:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 80006da:	e9cd b607 	strd	fp, r6, [sp, #28]
 80006de:	2308      	movs	r3, #8
 80006e0:	9504      	str	r5, [sp, #16]
 80006e2:	4648      	mov	r0, r9
 80006e4:	f000 fba6 	bl	8000e34 <convolve_1x1_s8_ch8>
/* layer 6:CONV_2D */
convolve_1x1_s8(&buffer0[0],1,1,128,(const q7_t*) weight6,bias6,shift6,multiplier6,-128,128,-128,127,&buffer0[128],1,1,128,sbuf);
 80006e8:	4b4a      	ldr	r3, [pc, #296]	; (8000814 <invoke+0x270>)
 80006ea:	9303      	str	r3, [sp, #12]
 80006ec:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <invoke+0x274>)
 80006ee:	9302      	str	r3, [sp, #8]
 80006f0:	4b4a      	ldr	r3, [pc, #296]	; (800081c <invoke+0x278>)
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <invoke+0x27c>)
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
 80006fc:	e9cd 4505 	strd	r4, r5, [sp, #20]
 8000700:	4623      	mov	r3, r4
 8000702:	463a      	mov	r2, r7
 8000704:	4639      	mov	r1, r7
 8000706:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 800070a:	e9cd b907 	strd	fp, r9, [sp, #28]
 800070e:	9504      	str	r5, [sp, #16]
 8000710:	4630      	mov	r0, r6
 8000712:	f000 fa93 	bl	8000c3c <convolve_1x1_s8>
/* layer 7:CONV_2D */
convolve_1x1_s8(&buffer0[128],1,1,128,(const q7_t*) weight7,bias7,shift7,multiplier7,-128,128,-128,127,&buffer0[0],1,1,128,sbuf);
 8000716:	4b43      	ldr	r3, [pc, #268]	; (8000824 <invoke+0x280>)
 8000718:	9303      	str	r3, [sp, #12]
 800071a:	4b43      	ldr	r3, [pc, #268]	; (8000828 <invoke+0x284>)
 800071c:	9302      	str	r3, [sp, #8]
 800071e:	4b43      	ldr	r3, [pc, #268]	; (800082c <invoke+0x288>)
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	4b43      	ldr	r3, [pc, #268]	; (8000830 <invoke+0x28c>)
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
 800072a:	e9cd 4505 	strd	r4, r5, [sp, #20]
 800072e:	4623      	mov	r3, r4
 8000730:	463a      	mov	r2, r7
 8000732:	4639      	mov	r1, r7
 8000734:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 8000738:	e9cd b607 	strd	fp, r6, [sp, #28]
 800073c:	9504      	str	r5, [sp, #16]
 800073e:	4648      	mov	r0, r9
 8000740:	f000 fa7c 	bl	8000c3c <convolve_1x1_s8>
/* layer 8:CONV_2D */
convolve_1x1_s8(&buffer0[0],1,1,128,(const q7_t*) weight8,bias8,shift8,multiplier8,-128,128,-128,127,&buffer0[640],1,1,128,sbuf);
 8000744:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <invoke+0x290>)
 8000746:	9303      	str	r3, [sp, #12]
 8000748:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <invoke+0x294>)
 800074a:	9302      	str	r3, [sp, #8]
 800074c:	4b3b      	ldr	r3, [pc, #236]	; (800083c <invoke+0x298>)
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <invoke+0x29c>)
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
 8000758:	e9cd 4505 	strd	r4, r5, [sp, #20]
 800075c:	4623      	mov	r3, r4
 800075e:	463a      	mov	r2, r7
 8000760:	4639      	mov	r1, r7
 8000762:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 8000766:	e9cd ba07 	strd	fp, sl, [sp, #28]
 800076a:	9504      	str	r5, [sp, #16]
 800076c:	4630      	mov	r0, r6
 800076e:	f000 fa65 	bl	8000c3c <convolve_1x1_s8>
/* layer 9:CONV_2D */
convolve_1x1_s8(&buffer0[640],1,1,128,(const q7_t*) weight9,bias9,shift9,multiplier9,96,128,-128,127,&buffer0[0],1,1,640,sbuf);
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <invoke+0x2a0>)
 8000774:	9303      	str	r3, [sp, #12]
 8000776:	2160      	movs	r1, #96	; 0x60
 8000778:	9104      	str	r1, [sp, #16]
 800077a:	4b33      	ldr	r3, [pc, #204]	; (8000848 <invoke+0x2a4>)
 800077c:	4933      	ldr	r1, [pc, #204]	; (800084c <invoke+0x2a8>)
 800077e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8000782:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8000786:	4b32      	ldr	r3, [pc, #200]	; (8000850 <invoke+0x2ac>)
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	e9cd 4505 	strd	r4, r5, [sp, #20]
 800078e:	4623      	mov	r3, r4
 8000790:	f44f 7420 	mov.w	r4, #640	; 0x280
 8000794:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 8000798:	9608      	str	r6, [sp, #32]
 800079a:	f8cd b01c 	str.w	fp, [sp, #28]
 800079e:	463a      	mov	r2, r7
 80007a0:	4639      	mov	r1, r7
 80007a2:	4650      	mov	r0, sl
 80007a4:	940b      	str	r4, [sp, #44]	; 0x2c
 80007a6:	f000 fa49 	bl	8000c3c <convolve_1x1_s8>
}
 80007aa:	b00f      	add	sp, #60	; 0x3c
 80007ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007b0:	08005fd8 	.word	0x08005fd8
 80007b4:	080079f8 	.word	0x080079f8
 80007b8:	20000094 	.word	0x20000094
 80007bc:	080045b8 	.word	0x080045b8
 80007c0:	08009418 	.word	0x08009418
 80007c4:	080061d8 	.word	0x080061d8
 80007c8:	08007bf8 	.word	0x08007bf8
 80007cc:	080047b8 	.word	0x080047b8
 80007d0:	0801d418 	.word	0x0801d418
 80007d4:	080063d8 	.word	0x080063d8
 80007d8:	08007df8 	.word	0x08007df8
 80007dc:	080049b8 	.word	0x080049b8
 80007e0:	08021418 	.word	0x08021418
 80007e4:	080065d8 	.word	0x080065d8
 80007e8:	08007ff8 	.word	0x08007ff8
 80007ec:	08004bb8 	.word	0x08004bb8
 80007f0:	08025418 	.word	0x08025418
 80007f4:	080067d8 	.word	0x080067d8
 80007f8:	080081f8 	.word	0x080081f8
 80007fc:	08004db8 	.word	0x08004db8
 8000800:	08029418 	.word	0x08029418
 8000804:	080067f8 	.word	0x080067f8
 8000808:	08008218 	.word	0x08008218
 800080c:	08004dd8 	.word	0x08004dd8
 8000810:	08029818 	.word	0x08029818
 8000814:	080069f8 	.word	0x080069f8
 8000818:	08008418 	.word	0x08008418
 800081c:	08004fd8 	.word	0x08004fd8
 8000820:	08029c18 	.word	0x08029c18
 8000824:	08006bf8 	.word	0x08006bf8
 8000828:	08008618 	.word	0x08008618
 800082c:	080051d8 	.word	0x080051d8
 8000830:	0802dc18 	.word	0x0802dc18
 8000834:	08006df8 	.word	0x08006df8
 8000838:	08008818 	.word	0x08008818
 800083c:	080053d8 	.word	0x080053d8
 8000840:	08031c18 	.word	0x08031c18
 8000844:	08006ff8 	.word	0x08006ff8
 8000848:	080055d8 	.word	0x080055d8
 800084c:	08008a18 	.word	0x08008a18
 8000850:	08035c18 	.word	0x08035c18

08000854 <end2endinference>:
    invoke(NULL);
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff bea5 	b.w	80005a4 <invoke>
 800085a:	bf00      	nop

0800085c <arm_nn_mat_mult_kernel_s8_s16_reordered>:
                                              const int16_t activation_min,
                                              const int16_t activation_max,
                                              const uint16_t num_col_a,
                                              const int32_t *const output_bias,
                                              q7_t *out_0)
{
 800085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000860:	b095      	sub	sp, #84	; 0x54
#if defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 8000862:	9c24      	ldr	r4, [sp, #144]	; 0x90
{
 8000864:	9008      	str	r0, [sp, #32]
 8000866:	f9bd 0080 	ldrsh.w	r0, [sp, #128]	; 0x80
 800086a:	9003      	str	r0, [sp, #12]
 800086c:	f9bd 0084 	ldrsh.w	r0, [sp, #132]	; 0x84
 8000870:	9212      	str	r2, [sp, #72]	; 0x48
    q7_t *out_1 = out_0 + output_ch;
 8000872:	4414      	add	r4, r2
{
 8000874:	9004      	str	r0, [sp, #16]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
 8000876:	0852      	lsrs	r2, r2, #1
{
 8000878:	f8bd 0088 	ldrh.w	r0, [sp, #136]	; 0x88
 800087c:	910c      	str	r1, [sp, #48]	; 0x30
 800087e:	9310      	str	r3, [sp, #64]	; 0x40
 8000880:	9009      	str	r0, [sp, #36]	; 0x24
    q7_t *out_1 = out_0 + output_ch;
 8000882:	9411      	str	r4, [sp, #68]	; 0x44
    while (row_count)
 8000884:	9213      	str	r2, [sp, #76]	; 0x4c
 8000886:	f000 8148 	beq.w	8000b1a <arm_nn_mat_mult_kernel_s8_s16_reordered+0x2be>
        q31_t ch_0_out_0 = *bias;
        q31_t ch_0_out_1 = *bias++;
        q31_t ch_1_out_0 = *bias;
        q31_t ch_1_out_1 = *bias++;

        uint16_t col_count = num_col_a / 4;
 800088a:	0885      	lsrs	r5, r0, #2
 800088c:	461e      	mov	r6, r3
 800088e:	950a      	str	r5, [sp, #40]	; 0x28
 8000890:	1e6b      	subs	r3, r5, #1
 8000892:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8000894:	3a01      	subs	r2, #1
 8000896:	460f      	mov	r7, r1
 8000898:	b292      	uxth	r2, r2
 800089a:	f105 0110 	add.w	r1, r5, #16
 800089e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 80008a2:	eb07 0140 	add.w	r1, r7, r0, lsl #1
 80008a6:	910d      	str	r1, [sp, #52]	; 0x34
 80008a8:	4629      	mov	r1, r5
 80008aa:	3108      	adds	r1, #8
 80008ac:	9107      	str	r1, [sp, #28]
 80008ae:	9924      	ldr	r1, [sp, #144]	; 0x90
 80008b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80008b2:	3102      	adds	r1, #2
 80008b4:	9105      	str	r1, [sp, #20]
 80008b6:	1ca1      	adds	r1, r4, #2
 80008b8:	9106      	str	r1, [sp, #24]
 80008ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 80008bc:	3108      	adds	r1, #8
 80008be:	b29b      	uxth	r3, r3
 80008c0:	9102      	str	r1, [sp, #8]
 80008c2:	4631      	mov	r1, r6
 80008c4:	3301      	adds	r3, #1
 80008c6:	3108      	adds	r1, #8
 80008c8:	9101      	str	r1, [sp, #4]
 80008ca:	0099      	lsls	r1, r3, #2
        *out_1++ = (q7_t)ch_1_out_1;
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
 80008cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80008d0:	910e      	str	r1, [sp, #56]	; 0x38
 80008d2:	930f      	str	r3, [sp, #60]	; 0x3c
        q31_t ch_0_out_0 = *bias;
 80008d4:	9a07      	ldr	r2, [sp, #28]
        q31_t ch_1_out_0 = *bias;
 80008d6:	e952 3b02 	ldrd	r3, fp, [r2, #-8]
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 80008da:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80008de:	eb01 0c02 	add.w	ip, r1, r2
        while (col_count)
 80008e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	f000 81a4 	beq.w	8000c32 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x3d6>
 80008ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        const q15_t *ip_b0 = input_b;
 80008ec:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80008f0:	4462      	add	r2, ip
 80008f2:	9200      	str	r2, [sp, #0]
        q31_t ch_1_out_1 = *bias++;
 80008f4:	46da      	mov	sl, fp
        q31_t ch_0_out_1 = *bias++;
 80008f6:	461a      	mov	r2, r3
        while (col_count)
 80008f8:	4689      	mov	r9, r1
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
{
    q31_t val;

    memcpy(&val, *in_q15, 4);
 80008fa:	f859 0b04 	ldr.w	r0, [r9], #4
 80008fe:	f85c 1b04 	ldr.w	r1, [ip], #4
 8000902:	f8d6 8000 	ldr.w	r8, [r6]
 8000906:	f8d7 e000 	ldr.w	lr, [r7]
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 800090a:	ea4f 2530 	mov.w	r5, r0, ror #8
 800090e:	ea4f 2431 	mov.w	r4, r1, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000912:	fa2f f080 	sxtb16	r0, r0
 8000916:	fa2f f585 	sxtb16	r5, r5
 800091a:	fa2f f181 	sxtb16	r1, r1
 800091e:	fa2f f484 	sxtb16	r4, r4

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000922:	fb20 3308 	smlad	r3, r0, r8, r3
 8000926:	fb20 220e 	smlad	r2, r0, lr, r2
 800092a:	fb21 bb08 	smlad	fp, r1, r8, fp
 800092e:	fb21 aa0e 	smlad	sl, r1, lr, sl
 8000932:	6871      	ldr	r1, [r6, #4]
    *in_q15 += 2;
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	3608      	adds	r6, #8
 8000938:	3708      	adds	r7, #8
 800093a:	fb25 3301 	smlad	r3, r5, r1, r3
 800093e:	fb25 2200 	smlad	r2, r5, r0, r2
 8000942:	fb24 bb01 	smlad	fp, r4, r1, fp
 8000946:	fb24 aa00 	smlad	sl, r4, r0, sl
 800094a:	9900      	ldr	r1, [sp, #0]
 800094c:	458c      	cmp	ip, r1
 800094e:	d1d4      	bne.n	80008fa <arm_nn_mat_mult_kernel_s8_s16_reordered+0x9e>
        ip_a0 += num_col_a;
 8000950:	9908      	ldr	r1, [sp, #32]
 8000952:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000954:	4401      	add	r1, r0
 8000956:	9108      	str	r1, [sp, #32]
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8000958:	9901      	ldr	r1, [sp, #4]
 800095a:	f851 4c08 	ldr.w	r4, [r1, #-8]
    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
    mult.word.high = 0;

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800095e:	9902      	ldr	r1, [sp, #8]
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000960:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000964:	f851 1c08 	ldr.w	r1, [r1, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000968:	4083      	lsls	r3, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800096a:	2500      	movs	r5, #0
 800096c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000970:	fbc3 0501 	smlal	r0, r5, r3, r1
    result = (int32_t)(mult.long_long >> 31);
 8000974:	0fc0      	lsrs	r0, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000976:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 8000978:	ea40 0545 	orr.w	r5, r0, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800097c:	dc0d      	bgt.n	800099a <arm_nn_mat_mult_kernel_s8_s16_reordered+0x13e>
 800097e:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000980:	2301      	movs	r3, #1
 8000982:	40a3      	lsls	r3, r4
 8000984:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000986:	ea05 0103 	and.w	r1, r5, r3
    if (result < 0)
 800098a:	4125      	asrs	r5, r4
    q31_t threshold = remainder_mask >> 1;
 800098c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000990:	bf48      	it	mi
 8000992:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000994:	4299      	cmp	r1, r3
        result++;
 8000996:	bfc8      	it	gt
 8000998:	3501      	addgt	r5, #1
        ch_0_out_0 += out_offset;
 800099a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800099c:	441d      	add	r5, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800099e:	9b03      	ldr	r3, [sp, #12]
 80009a0:	429d      	cmp	r5, r3
 80009a2:	bfb8      	it	lt
 80009a4:	461d      	movlt	r5, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80009a6:	9b04      	ldr	r3, [sp, #16]
 80009a8:	429d      	cmp	r5, r3
 80009aa:	bfa8      	it	ge
 80009ac:	461d      	movge	r5, r3
        *out_0++ = (q7_t)ch_0_out_0;
 80009ae:	9b05      	ldr	r3, [sp, #20]
 80009b0:	f803 5c02 	strb.w	r5, [r3, #-2]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 80009b4:	9b01      	ldr	r3, [sp, #4]
 80009b6:	f853 0c08 	ldr.w	r0, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80009ba:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80009bc:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80009c0:	f853 3c08 	ldr.w	r3, [r3, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80009c4:	408a      	lsls	r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80009c6:	2400      	movs	r4, #0
 80009c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009cc:	fbc2 1403 	smlal	r1, r4, r2, r3
    result = (int32_t)(mult.long_long >> 31);
 80009d0:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80009d2:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 80009d4:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80009d8:	dc0d      	bgt.n	80009f6 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x19a>
 80009da:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	4083      	lsls	r3, r0
 80009e0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 80009e2:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 80009e6:	4104      	asrs	r4, r0
    q31_t threshold = remainder_mask >> 1;
 80009e8:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 80009ec:	bf48      	it	mi
 80009ee:	3301      	addmi	r3, #1
    if (remainder > threshold)
 80009f0:	429a      	cmp	r2, r3
        result++;
 80009f2:	bfc8      	it	gt
 80009f4:	3401      	addgt	r4, #1
        ch_0_out_1 += out_offset;
 80009f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80009f8:	441c      	add	r4, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80009fa:	9b03      	ldr	r3, [sp, #12]
 80009fc:	429c      	cmp	r4, r3
 80009fe:	bfb8      	it	lt
 8000a00:	461c      	movlt	r4, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8000a02:	9b04      	ldr	r3, [sp, #16]
 8000a04:	429c      	cmp	r4, r3
 8000a06:	bfa8      	it	ge
 8000a08:	461c      	movge	r4, r3
        *out_1++ = (q7_t)ch_0_out_1;
 8000a0a:	9b06      	ldr	r3, [sp, #24]
 8000a0c:	f803 4c02 	strb.w	r4, [r3, #-2]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8000a10:	9b01      	ldr	r3, [sp, #4]
 8000a12:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000a16:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000a18:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000a1c:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000a20:	fa0b f404 	lsl.w	r4, fp, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a28:	2000      	movs	r0, #0
 8000a2a:	fbc4 2003 	smlal	r2, r0, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 8000a2e:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000a30:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8000a32:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000a36:	dc0d      	bgt.n	8000a54 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x1f8>
 8000a38:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	408b      	lsls	r3, r1
 8000a3e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000a40:	ea00 0203 	and.w	r2, r0, r3
    if (result < 0)
 8000a44:	4108      	asrs	r0, r1
    q31_t threshold = remainder_mask >> 1;
 8000a46:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000a4a:	bf48      	it	mi
 8000a4c:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000a4e:	429a      	cmp	r2, r3
        result++;
 8000a50:	bfc8      	it	gt
 8000a52:	3001      	addgt	r0, #1
        ch_1_out_0 += out_offset;
 8000a54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000a56:	4418      	add	r0, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8000a58:	9b03      	ldr	r3, [sp, #12]
 8000a5a:	4298      	cmp	r0, r3
 8000a5c:	bfb8      	it	lt
 8000a5e:	4618      	movlt	r0, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8000a60:	9b04      	ldr	r3, [sp, #16]
 8000a62:	4298      	cmp	r0, r3
 8000a64:	bfa8      	it	ge
 8000a66:	4618      	movge	r0, r3
        *out_0++ = (q7_t)ch_1_out_0;
 8000a68:	9b05      	ldr	r3, [sp, #20]
 8000a6a:	f803 0c01 	strb.w	r0, [r3, #-1]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 8000a6e:	9b01      	ldr	r3, [sp, #4]
 8000a70:	f853 0c04 	ldr.w	r0, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000a74:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000a76:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000a7a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000a7e:	fa0a f101 	lsl.w	r1, sl, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a86:	2400      	movs	r4, #0
 8000a88:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 8000a8c:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000a8e:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 8000a90:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000a94:	dc0d      	bgt.n	8000ab2 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x256>
 8000a96:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	4083      	lsls	r3, r0
 8000a9c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000a9e:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 8000aa2:	4104      	asrs	r4, r0
    q31_t threshold = remainder_mask >> 1;
 8000aa4:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000aa8:	bf48      	it	mi
 8000aaa:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000aac:	429a      	cmp	r2, r3
        result++;
 8000aae:	bfc8      	it	gt
 8000ab0:	3401      	addgt	r4, #1
        ch_1_out_1 += out_offset;
 8000ab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        *out_1++ = (q7_t)ch_1_out_1;
 8000ab4:	9a06      	ldr	r2, [sp, #24]
    while (row_count)
 8000ab6:	9905      	ldr	r1, [sp, #20]
        ch_1_out_1 += out_offset;
 8000ab8:	441c      	add	r4, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8000aba:	9b03      	ldr	r3, [sp, #12]
 8000abc:	429c      	cmp	r4, r3
 8000abe:	bfb8      	it	lt
 8000ac0:	461c      	movlt	r4, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8000ac2:	9b04      	ldr	r3, [sp, #16]
 8000ac4:	429c      	cmp	r4, r3
 8000ac6:	bfa8      	it	ge
 8000ac8:	461c      	movge	r4, r3
        *out_1++ = (q7_t)ch_1_out_1;
 8000aca:	f802 4c01 	strb.w	r4, [r2, #-1]
    while (row_count)
 8000ace:	3202      	adds	r2, #2
 8000ad0:	9206      	str	r2, [sp, #24]
 8000ad2:	9a02      	ldr	r2, [sp, #8]
 8000ad4:	9b07      	ldr	r3, [sp, #28]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	9202      	str	r2, [sp, #8]
 8000ada:	9a01      	ldr	r2, [sp, #4]
 8000adc:	3208      	adds	r2, #8
 8000ade:	9201      	str	r2, [sp, #4]
 8000ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000ae2:	3308      	adds	r3, #8
 8000ae4:	3102      	adds	r1, #2
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	9307      	str	r3, [sp, #28]
 8000aea:	9105      	str	r1, [sp, #20]
 8000aec:	f47f aef2 	bne.w	80008d4 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x78>
        out_shift++;
 8000af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000af2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000af4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000af8:	9210      	str	r2, [sp, #64]	; 0x40
        out_mult++;
 8000afa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8000afc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000b00:	921e      	str	r2, [sp, #120]	; 0x78
        *out_0++ = (q7_t)ch_1_out_0;
 8000b02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000b04:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000b08:	9224      	str	r2, [sp, #144]	; 0x90
        *out_1++ = (q7_t)ch_1_out_1;
 8000b0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000b0c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000b10:	9211      	str	r2, [sp, #68]	; 0x44
        q31_t ch_1_out_1 = *bias++;
 8000b12:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000b14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000b18:	9323      	str	r3, [sp, #140]	; 0x8c
        row_count--;
    }

    if (output_ch & 1)
 8000b1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000b1c:	07db      	lsls	r3, r3, #31
 8000b1e:	f140 8082 	bpl.w	8000c26 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x3ca>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* Init accumulator with bias for channel N + 1 */
        q31_t ch_0_out_0 = *bias;
 8000b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8000b24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        q31_t ch_0_out_0 = *bias;
 8000b26:	681a      	ldr	r2, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8000b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
        q31_t ch_0_out_1 = ch_0_out_0;

        int32_t col_count = num_col_a / 4;
        while (col_count)
 8000b2a:	089d      	lsrs	r5, r3, #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8000b2c:	eb06 0443 	add.w	r4, r6, r3, lsl #1
        q31_t ch_0_out_1 = ch_0_out_0;
 8000b30:	4613      	mov	r3, r2
        while (col_count)
 8000b32:	d01b      	beq.n	8000b6c <arm_nn_mat_mult_kernel_s8_s16_reordered+0x310>
        q31_t ch_0_out_1 = ch_0_out_0;
 8000b34:	9f08      	ldr	r7, [sp, #32]
    memcpy(&val, *in_q7, 4);
 8000b36:	f857 1b04 	ldr.w	r1, [r7], #4
 8000b3a:	f8d6 c000 	ldr.w	ip, [r6]
  return (op1 >> op2) | (op1 << (32U - op2));
 8000b3e:	ea4f 2031 	mov.w	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000b42:	fa2f f181 	sxtb16	r1, r1
 8000b46:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000b4a:	fb21 220c 	smlad	r2, r1, ip, r2
 8000b4e:	f8d4 c000 	ldr.w	ip, [r4]
 8000b52:	fb21 330c 	smlad	r3, r1, ip, r3
    memcpy(&val, *in_q15, 4);
 8000b56:	f8d6 c004 	ldr.w	ip, [r6, #4]
    *in_q15 += 2;
 8000b5a:	6861      	ldr	r1, [r4, #4]
 8000b5c:	3608      	adds	r6, #8
 8000b5e:	3408      	adds	r4, #8
 8000b60:	fb20 220c 	smlad	r2, r0, ip, r2
 8000b64:	fb20 3301 	smlad	r3, r0, r1, r3
        while (col_count)
 8000b68:	3d01      	subs	r5, #1
 8000b6a:	d1e4      	bne.n	8000b36 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x2da>
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8000b6c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000b6e:	680c      	ldr	r4, [r1, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000b70:	991e      	ldr	r1, [sp, #120]	; 0x78
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000b72:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000b76:	6809      	ldr	r1, [r1, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000b78:	fa02 f505 	lsl.w	r5, r2, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000b7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b80:	2200      	movs	r2, #0
 8000b82:	fbc5 0201 	smlal	r0, r2, r5, r1
 8000b86:	4616      	mov	r6, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000b88:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 8000b8a:	ea4f 72d0 	mov.w	r2, r0, lsr #31
 8000b8e:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000b92:	dc0d      	bgt.n	8000bb0 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x354>
 8000b94:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000b96:	2101      	movs	r1, #1
 8000b98:	40a1      	lsls	r1, r4
 8000b9a:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 8000b9c:	ea02 0001 	and.w	r0, r2, r1
    if (result < 0)
 8000ba0:	4122      	asrs	r2, r4
    q31_t threshold = remainder_mask >> 1;
 8000ba2:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 8000ba6:	bf48      	it	mi
 8000ba8:	3101      	addmi	r1, #1
    if (remainder > threshold)
 8000baa:	4288      	cmp	r0, r1
        result++;
 8000bac:	bfc8      	it	gt
 8000bae:	3201      	addgt	r2, #1
        ch_0_out_0 += out_offset;
 8000bb0:	991f      	ldr	r1, [sp, #124]	; 0x7c
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q7_t)ch_0_out_0;
 8000bb2:	9824      	ldr	r0, [sp, #144]	; 0x90
        ch_0_out_0 += out_offset;
 8000bb4:	440a      	add	r2, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8000bb6:	9903      	ldr	r1, [sp, #12]
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	bfb8      	it	lt
 8000bbc:	460a      	movlt	r2, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8000bbe:	9904      	ldr	r1, [sp, #16]
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	bfa8      	it	ge
 8000bc4:	460a      	movge	r2, r1
        *out_0++ = (q7_t)ch_0_out_0;
 8000bc6:	f800 2b01 	strb.w	r2, [r0], #1

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8000bca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000bcc:	6811      	ldr	r1, [r2, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000bce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8000bd0:	6815      	ldr	r5, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000bd2:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 8000bd6:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000bd8:	2400      	movs	r4, #0
 8000bda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bde:	fbc3 2405 	smlal	r2, r4, r3, r5
    result = (int32_t)(mult.long_long >> 31);
 8000be2:	0fd3      	lsrs	r3, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000be4:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8000be6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000bea:	dc0d      	bgt.n	8000c08 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x3ac>
 8000bec:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000bee:	2201      	movs	r2, #1
 8000bf0:	408a      	lsls	r2, r1
 8000bf2:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8000bf4:	ea03 0402 	and.w	r4, r3, r2
    if (result < 0)
 8000bf8:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 8000bfa:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8000bfe:	bf48      	it	mi
 8000c00:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8000c02:	4294      	cmp	r4, r2
        result++;
 8000c04:	bfc8      	it	gt
 8000c06:	3301      	addgt	r3, #1
        ch_0_out_1 += out_offset;
 8000c08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
        *out_0++ = (q7_t)ch_0_out_0;
 8000c0a:	9024      	str	r0, [sp, #144]	; 0x90
        ch_0_out_1 += out_offset;
 8000c0c:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8000c0e:	9a03      	ldr	r2, [sp, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	bfb8      	it	lt
 8000c14:	461a      	movlt	r2, r3
 8000c16:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8000c18:	9a04      	ldr	r2, [sp, #16]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	bfa8      	it	ge
 8000c1e:	461a      	movge	r2, r3
 8000c20:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
 8000c22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000c24:	7013      	strb	r3, [r2, #0]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 8000c26:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000c28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000c2a:	4418      	add	r0, r3
 8000c2c:	b015      	add	sp, #84	; 0x54
 8000c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (col_count)
 8000c32:	f8cd c020 	str.w	ip, [sp, #32]
        q31_t ch_1_out_1 = *bias++;
 8000c36:	46da      	mov	sl, fp
        q31_t ch_0_out_1 = *bias++;
 8000c38:	461a      	mov	r2, r3
 8000c3a:	e68d      	b.n	8000958 <arm_nn_mat_mult_kernel_s8_s16_reordered+0xfc>

08000c3c <convolve_1x1_s8>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c40:	4699      	mov	r9, r3
 8000c42:	b093      	sub	sp, #76	; 0x4c
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8000c44:	f019 0603 	ands.w	r6, r9, #3
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8000c48:	4607      	mov	r7, r0
 8000c4a:	9010      	str	r0, [sp, #64]	; 0x40
 8000c4c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8000c4e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000c50:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8000c54:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8000c58:	f8bd b09c 	ldrh.w	fp, [sp, #156]	; 0x9c
 8000c5c:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8000c60:	f040 80e4 	bne.w	8000e2c <convolve_1x1_s8+0x1f0>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
	const int channel_div4 = (input_ch >> 2);

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8000c68:	9a21      	ldr	r2, [sp, #132]	; 0x84
	const int32_t num_elements = output_x * output_y;
 8000c6a:	930f      	str	r3, [sp, #60]	; 0x3c
	const int channel_div4 = (input_ch >> 2);
 8000c6c:	ea4f 0a99 	mov.w	sl, r9, lsr #2

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000c70:	105b      	asrs	r3, r3, #1
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8000c72:	b214      	sxth	r4, r2
	const int channel_div4 = (input_ch >> 2);
 8000c74:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8000c78:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000c7c:	9309      	str	r3, [sp, #36]	; 0x24
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8000c7e:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000c82:	d058      	beq.n	8000d36 <convolve_1x1_s8+0xfa>
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8000c84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000c86:	f8cd 9020 	str.w	r9, [sp, #32]
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	930c      	str	r3, [sp, #48]	; 0x30
 8000c94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	930d      	str	r3, [sp, #52]	; 0x34
 8000c9a:	4655      	mov	r5, sl
 8000c9c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000ca0:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8000ca4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8000ca8:	930a      	str	r3, [sp, #40]	; 0x28
		q7_t *src = &input[i_element * input_ch * 2];
 8000caa:	4639      	mov	r1, r7
		while (cnt > 0) {
 8000cac:	b325      	cbz	r5, 8000cf8 <convolve_1x1_s8+0xbc>
		q15_t *dst = two_column_buffer;
 8000cae:	4642      	mov	r2, r8
		while (cnt > 0) {
 8000cb0:	46ae      	mov	lr, r5
    memcpy(&val, *in_q7, 4);
 8000cb2:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000cb4:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8000cb8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000cbc:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000cc0:	fa93 f304 	sadd16	r3, r3, r4
 8000cc4:	fa9c fc04 	sadd16	ip, ip, r4
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8000cc8:	6053      	str	r3, [r2, #4]
 8000cca:	f8c2 c000 	str.w	ip, [r2]
 8000cce:	f8d1 c004 	ldr.w	ip, [r1, #4]
    *in_q7 += 4;
 8000cd2:	3108      	adds	r1, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8000cd4:	ea4f 233c 	mov.w	r3, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000cd8:	fa2f fc8c 	sxtb16	ip, ip
 8000cdc:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000ce0:	fa93 f304 	sadd16	r3, r3, r4
 8000ce4:	fa9c fc04 	sadd16	ip, ip, r4
 8000ce8:	f1be 0e01 	subs.w	lr, lr, #1
 8000cec:	f8c2 c008 	str.w	ip, [r2, #8]
 8000cf0:	60d3      	str	r3, [r2, #12]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 8000cf2:	f102 0210 	add.w	r2, r2, #16
 8000cf6:	d1dc      	bne.n	8000cb2 <convolve_1x1_s8+0x76>
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8000cf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000cfa:	9305      	str	r3, [sp, #20]
 8000cfc:	9b08      	ldr	r3, [sp, #32]
 8000cfe:	9304      	str	r3, [sp, #16]
 8000d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000d02:	9303      	str	r3, [sp, #12]
 8000d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000d0e:	9300      	str	r3, [sp, #0]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8000d12:	9006      	str	r0, [sp, #24]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000d14:	441f      	add	r7, r3
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8000d16:	465a      	mov	r2, fp
 8000d18:	464b      	mov	r3, r9
 8000d1a:	4641      	mov	r1, r8
 8000d1c:	4650      	mov	r0, sl
 8000d1e:	f7ff fd9d 	bl	800085c <arm_nn_mat_mult_kernel_s8_s16_reordered>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d24:	3601      	adds	r6, #1
 8000d26:	429e      	cmp	r6, r3
 8000d28:	d1bf      	bne.n	8000caa <convolve_1x1_s8+0x6e>
 8000d2a:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 8000d2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d32:	46aa      	mov	sl, r5
 8000d34:	9d1c      	ldr	r5, [sp, #112]	; 0x70
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8000d36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000d38:	07da      	lsls	r2, r3, #31
 8000d3a:	d573      	bpl.n	8000e24 <convolve_1x1_s8+0x1e8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8000d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	fb09 2903 	mla	r9, r9, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8000d44:	f1ba 0f00 	cmp.w	sl, #0
 8000d48:	d013      	beq.n	8000d72 <convolve_1x1_s8+0x136>
		q15_t *dst = two_column_buffer;
 8000d4a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8000d4c:	4642      	mov	r2, r8
    memcpy(&val, *in_q7, 4);
 8000d4e:	f859 3b04 	ldr.w	r3, [r9], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000d52:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8000d56:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000d5a:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000d5e:	fa93 f304 	sadd16	r3, r3, r4
 8000d62:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8000d66:	3e01      	subs	r6, #1
  memcpy (*pQ15, &val, 4);
 8000d68:	6011      	str	r1, [r2, #0]
 8000d6a:	6053      	str	r3, [r2, #4]
 *pQ15 += 2;
 8000d6c:	f102 0208 	add.w	r2, r2, #8
 8000d70:	d1ed      	bne.n	8000d4e <convolve_1x1_s8+0x112>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8000d72:	f1bb 0f00 	cmp.w	fp, #0
 8000d76:	d055      	beq.n	8000e24 <convolve_1x1_s8+0x1e8>
 8000d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000d7a:	f1a3 0904 	sub.w	r9, r3, #4
 8000d7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000d80:	f1a3 0e04 	sub.w	lr, r3, #4
 8000d84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000d86:	f1a3 0a04 	sub.w	sl, r3, #4
 8000d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4483      	add	fp, r0
 8000d96:	9308      	str	r3, [sp, #32]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000d98:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8000d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			q31_t sum = bias[i_ch_out];
 8000d9e:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8000da2:	b19a      	cbz	r2, 8000dcc <convolve_1x1_s8+0x190>
 8000da4:	9a08      	ldr	r2, [sp, #32]
			const q15_t *ip_as_col = runtime_buf;
 8000da6:	4641      	mov	r1, r8
 8000da8:	18af      	adds	r7, r5, r2
    memcpy(&val, *in_q7, 4);
 8000daa:	f855 2b04 	ldr.w	r2, [r5], #4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000dae:	680e      	ldr	r6, [r1, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8000db0:	ea4f 2432 	mov.w	r4, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000db4:	fa2f f282 	sxtb16	r2, r2
 8000db8:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000dbc:	fb22 3306 	smlad	r3, r2, r6, r3
    memcpy(&val, *in_q15, 4);
 8000dc0:	684a      	ldr	r2, [r1, #4]
    *in_q15 += 2;
 8000dc2:	3108      	adds	r1, #8
 8000dc4:	fb24 3302 	smlad	r3, r4, r2, r3
			while (col_count) {
 8000dc8:	42bd      	cmp	r5, r7
 8000dca:	d1ee      	bne.n	8000daa <convolve_1x1_s8+0x16e>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8000dcc:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000dd0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000dd4:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 8000dd8:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4662      	mov	r2, ip
 8000dde:	fbc3 2604 	smlal	r2, r6, r3, r4
    result = (int32_t)(mult.long_long >> 31);
 8000de2:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000de4:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8000de6:	ea42 0646 	orr.w	r6, r2, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000dea:	dc0d      	bgt.n	8000e08 <convolve_1x1_s8+0x1cc>
 8000dec:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	408b      	lsls	r3, r1
 8000df2:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000df4:	ea06 0203 	and.w	r2, r6, r3
    if (result < 0)
 8000df8:	410e      	asrs	r6, r1
    q31_t threshold = remainder_mask >> 1;
 8000dfa:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000dfe:	bf48      	it	mi
 8000e00:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000e02:	429a      	cmp	r2, r3
        result++;
 8000e04:	bfc8      	it	gt
 8000e06:	3601      	addgt	r6, #1
					output_shift[i_ch_out]);
			sum += out_offset;
 8000e08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000e0a:	441e      	add	r6, r3
			sum = MAX(sum, out_activation_min);
 8000e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	bfb8      	it	lt
 8000e12:	461e      	movlt	r6, r3
			sum = MIN(sum, out_activation_max);
 8000e14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000e16:	429e      	cmp	r6, r3
 8000e18:	bfa8      	it	ge
 8000e1a:	461e      	movge	r6, r3
			*out++ = (q7_t) sum;
 8000e1c:	f800 6b01 	strb.w	r6, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8000e20:	4558      	cmp	r0, fp
 8000e22:	d1bb      	bne.n	8000d9c <convolve_1x1_s8+0x160>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8000e24:	2000      	movs	r0, #0
}
 8000e26:	b013      	add	sp, #76	; 0x4c
 8000e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 8000e2c:	2001      	movs	r0, #1
}
 8000e2e:	b013      	add	sp, #76	; 0x4c
 8000e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e34 <convolve_1x1_s8_ch8>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8000e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e38:	b091      	sub	sp, #68	; 0x44
 8000e3a:	469a      	mov	sl, r3
 8000e3c:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8000e40:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8000e44:	f9bd 407c 	ldrsh.w	r4, [sp, #124]	; 0x7c
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8000e48:	900f      	str	r0, [sp, #60]	; 0x3c
	const int32_t num_elements = output_x * output_y;
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
	const int channel_div4 = (input_ch >> 2);
 8000e4e:	ea4f 099a 	mov.w	r9, sl, lsr #2
	const int32_t num_elements = output_x * output_y;
 8000e52:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000e54:	105b      	asrs	r3, r3, #1
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8000e56:	4607      	mov	r7, r0
 8000e58:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8000e5a:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e5c:	f8bd b094 	ldrh.w	fp, [sp, #148]	; 0x94
 8000e60:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
	const int channel_div4 = (input_ch >> 2);
 8000e64:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8000e68:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000e6c:	9309      	str	r3, [sp, #36]	; 0x24
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8000e6e:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000e72:	d053      	beq.n	8000f1c <convolve_1x1_s8_ch8+0xe8>
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch8(kernel,
 8000e74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000e76:	f8cd a020 	str.w	sl, [sp, #32]
		out = mat_mult_kernel_s8_s16_reordered_ch8(kernel,
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	930b      	str	r3, [sp, #44]	; 0x2c
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000e7e:	464d      	mov	r5, r9
 8000e80:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8000e84:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8000e88:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8000e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8000e8e:	2600      	movs	r6, #0
		q7_t *src = &input[i_element * input_ch * 2];
 8000e90:	4639      	mov	r1, r7
		while (cnt > 0) {
 8000e92:	b325      	cbz	r5, 8000ede <convolve_1x1_s8_ch8+0xaa>
		q15_t *dst = two_column_buffer;
 8000e94:	4642      	mov	r2, r8
		while (cnt > 0) {
 8000e96:	46ae      	mov	lr, r5
    memcpy(&val, *in_q7, 4);
 8000e98:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000e9a:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8000e9e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000ea2:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000ea6:	fa93 f304 	sadd16	r3, r3, r4
 8000eaa:	fa9c fc04 	sadd16	ip, ip, r4
  memcpy (*pQ15, &val, 4);
 8000eae:	6053      	str	r3, [r2, #4]
 8000eb0:	f8c2 c000 	str.w	ip, [r2]
 8000eb4:	f8d1 c004 	ldr.w	ip, [r1, #4]
    *in_q7 += 4;
 8000eb8:	3108      	adds	r1, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8000eba:	ea4f 233c 	mov.w	r3, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000ebe:	fa2f fc8c 	sxtb16	ip, ip
 8000ec2:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000ec6:	fa93 f304 	sadd16	r3, r3, r4
 8000eca:	fa9c fc04 	sadd16	ip, ip, r4
 8000ece:	f1be 0e01 	subs.w	lr, lr, #1
 8000ed2:	f8c2 c008 	str.w	ip, [r2, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
 *pQ15 += 2;
 8000ed8:	f102 0210 	add.w	r2, r2, #16
 8000edc:	d1dc      	bne.n	8000e98 <convolve_1x1_s8_ch8+0x64>
		out = mat_mult_kernel_s8_s16_reordered_ch8(kernel,
 8000ede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8000ee0:	9305      	str	r3, [sp, #20]
 8000ee2:	9b08      	ldr	r3, [sp, #32]
 8000ee4:	9304      	str	r3, [sp, #16]
 8000ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000ee8:	9303      	str	r3, [sp, #12]
 8000eea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000ef4:	9300      	str	r3, [sp, #0]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		out = mat_mult_kernel_s8_s16_reordered_ch8(kernel,
 8000ef8:	9006      	str	r0, [sp, #24]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000efa:	441f      	add	r7, r3
		out = mat_mult_kernel_s8_s16_reordered_ch8(kernel,
 8000efc:	465a      	mov	r2, fp
 8000efe:	4653      	mov	r3, sl
 8000f00:	4641      	mov	r1, r8
 8000f02:	4648      	mov	r0, r9
 8000f04:	f000 f886 	bl	8001014 <mat_mult_kernel_s8_s16_reordered_ch8>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8000f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f0a:	3601      	adds	r6, #1
 8000f0c:	429e      	cmp	r6, r3
 8000f0e:	d1bf      	bne.n	8000e90 <convolve_1x1_s8_ch8+0x5c>
 8000f10:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8000f14:	f8dd a020 	ldr.w	sl, [sp, #32]
 8000f18:	46a9      	mov	r9, r5
 8000f1a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8000f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f1e:	07da      	lsls	r2, r3, #31
 8000f20:	d573      	bpl.n	800100a <convolve_1x1_s8_ch8+0x1d6>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8000f22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000f24:	3b01      	subs	r3, #1
 8000f26:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8000f2a:	f1b9 0f00 	cmp.w	r9, #0
 8000f2e:	d013      	beq.n	8000f58 <convolve_1x1_s8_ch8+0x124>
		q15_t *dst = two_column_buffer;
 8000f30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000f32:	4642      	mov	r2, r8
    memcpy(&val, *in_q7, 4);
 8000f34:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000f38:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8000f3c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000f40:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000f44:	fa93 f304 	sadd16	r3, r3, r4
 8000f48:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8000f4c:	3e01      	subs	r6, #1
  memcpy (*pQ15, &val, 4);
 8000f4e:	6011      	str	r1, [r2, #0]
 8000f50:	6053      	str	r3, [r2, #4]
 *pQ15 += 2;
 8000f52:	f102 0208 	add.w	r2, r2, #8
 8000f56:	d1ed      	bne.n	8000f34 <convolve_1x1_s8_ch8+0x100>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8000f58:	f1bb 0f00 	cmp.w	fp, #0
 8000f5c:	d055      	beq.n	800100a <convolve_1x1_s8_ch8+0x1d6>
 8000f5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8000f60:	1f1f      	subs	r7, r3, #4
 8000f62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000f64:	f1a3 0c04 	sub.w	ip, r3, #4
 8000f68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000f6a:	f1a3 0e04 	sub.w	lr, r3, #4
 8000f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000f70:	3b01      	subs	r3, #1
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4483      	add	fp, r0
 8000f7a:	9308      	str	r3, [sp, #32]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000f7c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8000f80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8000f82:	f857 3f04 	ldr.w	r3, [r7, #4]!
			while (col_count) {
 8000f86:	b1a2      	cbz	r2, 8000fb2 <convolve_1x1_s8_ch8+0x17e>
 8000f88:	9a08      	ldr	r2, [sp, #32]
			const q15_t *ip_as_col = runtime_buf;
 8000f8a:	4641      	mov	r1, r8
 8000f8c:	eb05 0902 	add.w	r9, r5, r2
    memcpy(&val, *in_q7, 4);
 8000f90:	f855 2b04 	ldr.w	r2, [r5], #4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000f94:	680e      	ldr	r6, [r1, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8000f96:	ea4f 2432 	mov.w	r4, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000f9a:	fa2f f282 	sxtb16	r2, r2
 8000f9e:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000fa2:	fb22 3306 	smlad	r3, r2, r6, r3
    memcpy(&val, *in_q15, 4);
 8000fa6:	684a      	ldr	r2, [r1, #4]
    *in_q15 += 2;
 8000fa8:	3108      	adds	r1, #8
 8000faa:	fb24 3302 	smlad	r3, r4, r2, r3
			while (col_count) {
 8000fae:	454d      	cmp	r5, r9
 8000fb0:	d1ee      	bne.n	8000f90 <convolve_1x1_s8_ch8+0x15c>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8000fb2:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000fb6:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000fba:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 8000fbe:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	4652      	mov	r2, sl
 8000fc4:	fbc3 2604 	smlal	r2, r6, r3, r4
    result = (int32_t)(mult.long_long >> 31);
 8000fc8:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000fca:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8000fcc:	ea42 0646 	orr.w	r6, r2, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000fd0:	dc0d      	bgt.n	8000fee <convolve_1x1_s8_ch8+0x1ba>
 8000fd2:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	408b      	lsls	r3, r1
 8000fd8:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000fda:	ea06 0203 	and.w	r2, r6, r3
    if (result < 0)
 8000fde:	410e      	asrs	r6, r1
    q31_t threshold = remainder_mask >> 1;
 8000fe0:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000fe4:	bf48      	it	mi
 8000fe6:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000fe8:	429a      	cmp	r2, r3
        result++;
 8000fea:	bfc8      	it	gt
 8000fec:	3601      	addgt	r6, #1
					output_shift[i_ch_out]);
			sum += out_offset;
 8000fee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000ff0:	441e      	add	r6, r3
			sum = MAX(sum, out_activation_min);
 8000ff2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000ff4:	429e      	cmp	r6, r3
 8000ff6:	bfb8      	it	lt
 8000ff8:	461e      	movlt	r6, r3
			sum = MIN(sum, out_activation_max);
 8000ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000ffc:	429e      	cmp	r6, r3
 8000ffe:	bfa8      	it	ge
 8001000:	461e      	movge	r6, r3
			*out++ = (q7_t) sum;
 8001002:	f800 6b01 	strb.w	r6, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8001006:	4558      	cmp	r0, fp
 8001008:	d1ba      	bne.n	8000f80 <convolve_1x1_s8_ch8+0x14c>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 800100a:	2000      	movs	r0, #0
 800100c:	b011      	add	sp, #68	; 0x44
 800100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001012:	bf00      	nop

08001014 <mat_mult_kernel_s8_s16_reordered_ch8>:
										  const int16_t activation_min,
										  const int16_t activation_max,
										  const uint16_t num_col_a,
										  const int32_t *const output_bias,
										  q7_t *out_0)
{
 8001014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001018:	b08f      	sub	sp, #60	; 0x3c
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 800101a:	e9dd 671d 	ldrd	r6, r7, [sp, #116]	; 0x74
{
 800101e:	f9bd 5068 	ldrsh.w	r5, [sp, #104]	; 0x68
 8001022:	9502      	str	r5, [sp, #8]
 8001024:	4614      	mov	r4, r2
 8001026:	f9bd 506c 	ldrsh.w	r5, [sp, #108]	; 0x6c
 800102a:	920d      	str	r2, [sp, #52]	; 0x34
 800102c:	9503      	str	r5, [sp, #12]
    q7_t *out_1 = out_0 + output_ch;
 800102e:	18ba      	adds	r2, r7, r2
{
 8001030:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8001034:	9101      	str	r1, [sp, #4]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
 8001036:	0867      	lsrs	r7, r4, #1
{
 8001038:	9509      	str	r5, [sp, #36]	; 0x24
    while (row_count)
 800103a:	970c      	str	r7, [sp, #48]	; 0x30
 800103c:	f000 8146 	beq.w	80012cc <mat_mult_kernel_s8_s16_reordered_ch8+0x2b8>
 8001040:	3202      	adds	r2, #2
 8001042:	f103 0408 	add.w	r4, r3, #8
 8001046:	1e7b      	subs	r3, r7, #1
 8001048:	9206      	str	r2, [sp, #24]
 800104a:	b29b      	uxth	r3, r3
 800104c:	f106 0210 	add.w	r2, r6, #16
 8001050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8001054:	eb01 0245 	add.w	r2, r1, r5, lsl #1
 8001058:	9204      	str	r2, [sp, #16]
 800105a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800105c:	930a      	str	r3, [sp, #40]	; 0x28
 800105e:	3202      	adds	r2, #2
 8001060:	462b      	mov	r3, r5
 8001062:	9205      	str	r2, [sp, #20]
 8001064:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001066:	3608      	adds	r6, #8
 8001068:	3308      	adds	r3, #8
 800106a:	f102 0508 	add.w	r5, r2, #8
 800106e:	930b      	str	r3, [sp, #44]	; 0x2c
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001070:	9607      	str	r6, [sp, #28]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8001072:	9904      	ldr	r1, [sp, #16]
 8001074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001076:	6803      	ldr	r3, [r0, #0]
 8001078:	9e01      	ldr	r6, [sp, #4]
		q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 800107a:	9f07      	ldr	r7, [sp, #28]
 800107c:	f8d1 9000 	ldr.w	r9, [r1]
 8001080:	f8d6 a000 	ldr.w	sl, [r6]
 8001084:	f857 cc08 	ldr.w	ip, [r7, #-8]
 8001088:	1881      	adds	r1, r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 800108a:	ea4f 2b33 	mov.w	fp, r3, ror #8
 800108e:	9108      	str	r1, [sp, #32]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001090:	fa2f f383 	sxtb16	r3, r3
 8001094:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001098:	fb23 c10a 	smlad	r1, r3, sl, ip
    memcpy(&val, *in_q7, 4);
 800109c:	5882      	ldr	r2, [r0, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800109e:	fa2f fe82 	sxtb16	lr, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80010a2:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80010a6:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80010aa:	fb23 c309 	smlad	r3, r3, r9, ip
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 80010ae:	f857 cc04 	ldr.w	ip, [r7, #-4]
 80010b2:	fb2e c80a 	smlad	r8, lr, sl, ip
    memcpy(&val, *in_q15, 4);
 80010b6:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80010ba:	fb2e ce09 	smlad	lr, lr, r9, ip
 80010be:	9f04      	ldr	r7, [sp, #16]
 80010c0:	f8d7 9004 	ldr.w	r9, [r7, #4]
 80010c4:	fb2b 110a 	smlad	r1, fp, sl, r1
 80010c8:	fb2b 3c09 	smlad	ip, fp, r9, r3
 80010cc:	fb22 8a0a 	smlad	sl, r2, sl, r8
 80010d0:	9e01      	ldr	r6, [sp, #4]
 80010d2:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80010d6:	fb22 e209 	smlad	r2, r2, r9, lr
 80010da:	6843      	ldr	r3, [r0, #4]
 80010dc:	f8d7 b008 	ldr.w	fp, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80010e0:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80010e4:	fa2f f383 	sxtb16	r3, r3
 80010e8:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80010ec:	fb23 1108 	smlad	r1, r3, r8, r1
    memcpy(&val, *in_q7, 4);
 80010f0:	9f08      	ldr	r7, [sp, #32]
 80010f2:	687f      	ldr	r7, [r7, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80010f4:	fa2f fe87 	sxtb16	lr, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 80010f8:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80010fc:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001100:	fb23 c30b 	smlad	r3, r3, fp, ip
 8001104:	fb2e a808 	smlad	r8, lr, r8, sl
    memcpy(&val, *in_q15, 4);
 8001108:	9e01      	ldr	r6, [sp, #4]
 800110a:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800110e:	fb2e 2e0b 	smlad	lr, lr, fp, r2
 8001112:	9e04      	ldr	r6, [sp, #16]
 8001114:	68f2      	ldr	r2, [r6, #12]
 8001116:	fb29 110a 	smlad	r1, r9, sl, r1
 800111a:	fb29 3302 	smlad	r3, r9, r2, r3
 800111e:	fb27 880a 	smlad	r8, r7, sl, r8
 8001122:	fb27 eb02 	smlad	fp, r7, r2, lr
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8001126:	f854 2c08 	ldr.w	r2, [r4, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800112a:	f855 6c08 	ldr.w	r6, [r5, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800112e:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
 8001132:	40b9      	lsls	r1, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001134:	f04f 0e00 	mov.w	lr, #0
 8001138:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800113c:	fbc1 7e06 	smlal	r7, lr, r1, r6
    result = (int32_t)(mult.long_long >> 31);
 8001140:	0fff      	lsrs	r7, r7, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001142:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
 8001144:	ea47 0e4e 	orr.w	lr, r7, lr, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001148:	dc11      	bgt.n	800116e <mat_mult_kernel_s8_s16_reordered_ch8+0x15a>
 800114a:	f1c2 0c00 	rsb	ip, r2, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800114e:	2201      	movs	r2, #1
 8001150:	fa02 f20c 	lsl.w	r2, r2, ip
 8001154:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8001156:	ea0e 0102 	and.w	r1, lr, r2
    if (result < 0)
 800115a:	fa5e fe0c 	asrs.w	lr, lr, ip
    q31_t threshold = remainder_mask >> 1;
 800115e:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8001162:	bf48      	it	mi
 8001164:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8001166:	4291      	cmp	r1, r2
        result++;
 8001168:	bfc8      	it	gt
 800116a:	f10e 0e01 	addgt.w	lr, lr, #1
        ch_0_out_0 += out_offset;
 800116e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001170:	4496      	add	lr, r2
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8001172:	9a02      	ldr	r2, [sp, #8]
 8001174:	4596      	cmp	lr, r2
 8001176:	bfb8      	it	lt
 8001178:	4696      	movlt	lr, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800117a:	9a03      	ldr	r2, [sp, #12]
 800117c:	4596      	cmp	lr, r2
 800117e:	bfa8      	it	ge
 8001180:	4696      	movge	lr, r2
        *out_0++ = (q7_t)ch_0_out_0;
 8001182:	9a05      	ldr	r2, [sp, #20]
 8001184:	f802 ec02 	strb.w	lr, [r2, #-2]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8001188:	f854 7c08 	ldr.w	r7, [r4, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800118c:	f855 2c08 	ldr.w	r2, [r5, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001190:	ea27 79e7 	bic.w	r9, r7, r7, asr #31
 8001194:	fa03 f309 	lsl.w	r3, r3, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001198:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800119c:	f04f 0c00 	mov.w	ip, #0
 80011a0:	fbc3 1c02 	smlal	r1, ip, r3, r2
    result = (int32_t)(mult.long_long >> 31);
 80011a4:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80011a6:	2f00      	cmp	r7, #0
    result = (int32_t)(mult.long_long >> 31);
 80011a8:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80011ac:	dc0f      	bgt.n	80011ce <mat_mult_kernel_s8_s16_reordered_ch8+0x1ba>
 80011ae:	427f      	negs	r7, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	40bb      	lsls	r3, r7
 80011b4:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 80011b6:	ea0c 0203 	and.w	r2, ip, r3
    if (result < 0)
 80011ba:	fa5c fc07 	asrs.w	ip, ip, r7
    q31_t threshold = remainder_mask >> 1;
 80011be:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 80011c2:	bf48      	it	mi
 80011c4:	3301      	addmi	r3, #1
    if (remainder > threshold)
 80011c6:	429a      	cmp	r2, r3
        result++;
 80011c8:	bfc8      	it	gt
 80011ca:	f10c 0c01 	addgt.w	ip, ip, #1
        ch_0_out_1 += out_offset;
 80011ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80011d0:	449c      	add	ip, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80011d2:	9b02      	ldr	r3, [sp, #8]
 80011d4:	459c      	cmp	ip, r3
 80011d6:	bfb8      	it	lt
 80011d8:	469c      	movlt	ip, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80011da:	9b03      	ldr	r3, [sp, #12]
 80011dc:	459c      	cmp	ip, r3
 80011de:	bfa8      	it	ge
 80011e0:	469c      	movge	ip, r3
        *out_1++ = (q7_t)ch_0_out_1;
 80011e2:	9b06      	ldr	r3, [sp, #24]
 80011e4:	f803 cc02 	strb.w	ip, [r3, #-2]
        out_mult++;
        out_shift++;

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 80011e8:	f854 1c04 	ldr.w	r1, [r4, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80011ec:	f855 3c04 	ldr.w	r3, [r5, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80011f0:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 80011f4:	fa08 f80a 	lsl.w	r8, r8, sl
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80011f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fc:	2700      	movs	r7, #0
 80011fe:	fbc8 2703 	smlal	r2, r7, r8, r3
    result = (int32_t)(mult.long_long >> 31);
 8001202:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001204:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8001206:	ea42 0747 	orr.w	r7, r2, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800120a:	dc0d      	bgt.n	8001228 <mat_mult_kernel_s8_s16_reordered_ch8+0x214>
 800120c:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800120e:	2301      	movs	r3, #1
 8001210:	408b      	lsls	r3, r1
 8001212:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8001214:	ea07 0203 	and.w	r2, r7, r3
    if (result < 0)
 8001218:	410f      	asrs	r7, r1
    q31_t threshold = remainder_mask >> 1;
 800121a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800121e:	bf48      	it	mi
 8001220:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8001222:	429a      	cmp	r2, r3
        result++;
 8001224:	bfc8      	it	gt
 8001226:	3701      	addgt	r7, #1
        ch_1_out_0 += out_offset;
 8001228:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800122a:	441f      	add	r7, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 800122c:	9b02      	ldr	r3, [sp, #8]
 800122e:	429f      	cmp	r7, r3
 8001230:	bfb8      	it	lt
 8001232:	461f      	movlt	r7, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8001234:	9b03      	ldr	r3, [sp, #12]
 8001236:	429f      	cmp	r7, r3
 8001238:	bfa8      	it	ge
 800123a:	461f      	movge	r7, r3
        *out_0++ = (q7_t)ch_1_out_0;
 800123c:	9b05      	ldr	r3, [sp, #20]
 800123e:	f803 7c01 	strb.w	r7, [r3, #-1]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 8001242:	f854 7c04 	ldr.w	r7, [r4, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001246:	f855 3c04 	ldr.w	r3, [r5, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800124a:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 800124e:	fa0b fb02 	lsl.w	fp, fp, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001252:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001256:	2200      	movs	r2, #0
 8001258:	fbc3 120b 	smlal	r1, r2, r3, fp
    result = (int32_t)(mult.long_long >> 31);
 800125c:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800125e:	2f00      	cmp	r7, #0
    result = (int32_t)(mult.long_long >> 31);
 8001260:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001264:	dc0d      	bgt.n	8001282 <mat_mult_kernel_s8_s16_reordered_ch8+0x26e>
 8001266:	427f      	negs	r7, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001268:	2301      	movs	r3, #1
 800126a:	40bb      	lsls	r3, r7
 800126c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800126e:	ea02 0103 	and.w	r1, r2, r3
    if (result < 0)
 8001272:	413a      	asrs	r2, r7
    q31_t threshold = remainder_mask >> 1;
 8001274:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8001278:	bf48      	it	mi
 800127a:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800127c:	4299      	cmp	r1, r3
        result++;
 800127e:	bfc8      	it	gt
 8001280:	3201      	addgt	r2, #1
        ch_1_out_1 += out_offset;
 8001282:	9b19      	ldr	r3, [sp, #100]	; 0x64
    while (row_count)
 8001284:	9907      	ldr	r1, [sp, #28]
        ch_1_out_1 += out_offset;
 8001286:	441a      	add	r2, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8001288:	9b02      	ldr	r3, [sp, #8]
 800128a:	429a      	cmp	r2, r3
 800128c:	bfb8      	it	lt
 800128e:	461a      	movlt	r2, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8001290:	9b03      	ldr	r3, [sp, #12]
 8001292:	429a      	cmp	r2, r3
 8001294:	bfa8      	it	ge
 8001296:	461a      	movge	r2, r3
        *out_1++ = (q7_t)ch_1_out_1;
 8001298:	9b06      	ldr	r3, [sp, #24]
 800129a:	f803 2c01 	strb.w	r2, [r3, #-1]
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
 800129e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    while (row_count)
 80012a0:	3302      	adds	r3, #2
 80012a2:	4410      	add	r0, r2
 80012a4:	9306      	str	r3, [sp, #24]
 80012a6:	9a05      	ldr	r2, [sp, #20]
 80012a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80012aa:	3108      	adds	r1, #8
 80012ac:	3202      	adds	r2, #2
 80012ae:	428b      	cmp	r3, r1
 80012b0:	9107      	str	r1, [sp, #28]
 80012b2:	9205      	str	r2, [sp, #20]
 80012b4:	f105 0508 	add.w	r5, r5, #8
 80012b8:	f104 0408 	add.w	r4, r4, #8
 80012bc:	f47f aed9 	bne.w	8001072 <mat_mult_kernel_s8_s16_reordered_ch8+0x5e>
        row_count--;
    }

    out_0 += output_ch;
 80012c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80012c4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80012c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80012ca:	441a      	add	r2, r3

    /* return the new output pointer with offset */
    return out_0;
}
 80012cc:	4610      	mov	r0, r2
 80012ce:	b00f      	add	sp, #60	; 0x3c
 80012d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d4:	0000      	movs	r0, r0
	...

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b500      	push	{lr}
 80012da:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012dc:	2244      	movs	r2, #68	; 0x44
 80012de:	2100      	movs	r1, #0
 80012e0:	a805      	add	r0, sp, #20
 80012e2:	f002 fd0f 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e6:	2000      	movs	r0, #0
 80012e8:	e9cd 0000 	strd	r0, r0, [sp]
 80012ec:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80012f0:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80012f2:	f000 fe1f 	bl	8001f34 <HAL_PWREx_ControlVoltageScaling>
 80012f6:	b108      	cbz	r0, 80012fc <SystemClock_Config+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fa:	e7fe      	b.n	80012fa <SystemClock_Config+0x22>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001300:	2122      	movs	r1, #34	; 0x22
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001304:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001306:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001308:	9105      	str	r1, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800130c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 30;
 800130e:	221e      	movs	r2, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001312:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001316:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800131a:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800131e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001320:	910e      	str	r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f000 ff31 	bl	8002188 <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	b108      	cbz	r0, 800132e <SystemClock_Config+0x56>
 800132a:	b672      	cpsid	i
  while (1)
 800132c:	e7fe      	b.n	800132c <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8001358 <SystemClock_Config+0x80>
 8001332:	ed8d 7b00 	vstr	d7, [sp]
 8001336:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8001360 <SystemClock_Config+0x88>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800133a:	2105      	movs	r1, #5
 800133c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001344:	f001 fa32 	bl	80027ac <HAL_RCC_ClockConfig>
 8001348:	b108      	cbz	r0, 800134e <SystemClock_Config+0x76>
 800134a:	b672      	cpsid	i
  while (1)
 800134c:	e7fe      	b.n	800134c <SystemClock_Config+0x74>
}
 800134e:	b017      	add	sp, #92	; 0x5c
 8001350:	f85d fb04 	ldr.w	pc, [sp], #4
 8001354:	f3af 8000 	nop.w
 8001358:	0000000f 	.word	0x0000000f
 800135c:	00000003 	.word	0x00000003
 8001360:	00000000 	.word	0x00000000
 8001364:	00000400 	.word	0x00000400

08001368 <main>:
{
 8001368:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	2500      	movs	r5, #0
{
 800136c:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800136e:	f000 fb77 	bl	8001a60 <HAL_Init>
  SystemClock_Config();
 8001372:	f7ff ffb1 	bl	80012d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800137a:	e9cd 5508 	strd	r5, r5, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4c79      	ldr	r4, [pc, #484]	; (8001564 <main+0x1fc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64e3      	str	r3, [r4, #76]	; 0x4c
 800138a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001394:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800139c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	64e3      	str	r3, [r4, #76]	; 0x4c
 80013ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	64e3      	str	r3, [r4, #76]	; 0x4c
 80013c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80013d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d8:	9304      	str	r3, [sp, #16]
 80013da:	9b04      	ldr	r3, [sp, #16]
  HAL_PWREx_EnableVddIO2();
 80013dc:	f000 fe30 	bl	8002040 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013e2:	4861      	ldr	r0, [pc, #388]	; (8001568 <main+0x200>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80013ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  hlpuart1.Instance = LPUART1;
 80013ec:	4c5f      	ldr	r4, [pc, #380]	; (800156c <main+0x204>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013f2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80013f6:	462a      	mov	r2, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	9305      	str	r3, [sp, #20]
 80013fa:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013fc:	f000 fcd6 	bl	8001dac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001400:	485b      	ldr	r0, [pc, #364]	; (8001570 <main+0x208>)
 8001402:	462a      	mov	r2, r5
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	f000 fcd1 	bl	8001dac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800140a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001412:	4858      	ldr	r0, [pc, #352]	; (8001574 <main+0x20c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001416:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = B1_Pin;
 8001418:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800141c:	2600      	movs	r6, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141e:	f000 fbbd 	bl	8001b9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001422:	2700      	movs	r7, #0
 8001424:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8001428:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	484f      	ldr	r0, [pc, #316]	; (8001568 <main+0x200>)
 800142c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800142e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001432:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f000 fbb1 	bl	8001b9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800143a:	2220      	movs	r2, #32
 800143c:	2300      	movs	r3, #0
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800143e:	484c      	ldr	r0, [pc, #304]	; (8001570 <main+0x208>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001442:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001444:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001448:	f000 fba8 	bl	8001b9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800144c:	2301      	movs	r3, #1
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800144e:	4848      	ldr	r0, [pc, #288]	; (8001570 <main+0x208>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001450:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001452:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001454:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001458:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800145c:	f000 fb9e 	bl	8001b9c <HAL_GPIO_Init>
  hlpuart1.Instance = LPUART1;
 8001460:	4b45      	ldr	r3, [pc, #276]	; (8001578 <main+0x210>)
 8001462:	6023      	str	r3, [r4, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001464:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001468:	f04f 080c 	mov.w	r8, #12
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 800146c:	f44f 7380 	mov.w	r3, #256	; 0x100
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001470:	e9c4 6708 	strd	r6, r7, [r4, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001474:	4620      	mov	r0, r4
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	e9c4 9501 	strd	r9, r5, [r4, #4]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800147a:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800147e:	f8c4 8014 	str.w	r8, [r4, #20]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001482:	62a5      	str	r5, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001484:	6665      	str	r5, [r4, #100]	; 0x64
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001486:	61a3      	str	r3, [r4, #24]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001488:	f002 f944 	bl	8003714 <HAL_UART_Init>
 800148c:	b108      	cbz	r0, 8001492 <main+0x12a>
 800148e:	b672      	cpsid	i
  while (1)
 8001490:	e7fe      	b.n	8001490 <main+0x128>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001492:	4601      	mov	r1, r0
 8001494:	4620      	mov	r0, r4
 8001496:	f002 f9c7 	bl	8003828 <HAL_UARTEx_SetTxFifoThreshold>
 800149a:	b108      	cbz	r0, 80014a0 <main+0x138>
 800149c:	b672      	cpsid	i
  while (1)
 800149e:	e7fe      	b.n	800149e <main+0x136>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a0:	4601      	mov	r1, r0
 80014a2:	4620      	mov	r0, r4
 80014a4:	f002 fa02 	bl	80038ac <HAL_UARTEx_SetRxFifoThreshold>
 80014a8:	b108      	cbz	r0, 80014ae <main+0x146>
 80014aa:	b672      	cpsid	i
  while (1)
 80014ac:	e7fe      	b.n	80014ac <main+0x144>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014ae:	4620      	mov	r0, r4
 80014b0:	f002 f99c 	bl	80037ec <HAL_UARTEx_DisableFifoMode>
 80014b4:	b108      	cbz	r0, 80014ba <main+0x152>
 80014b6:	b672      	cpsid	i
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <main+0x150>
  huart3.Instance = USART3;
 80014ba:	4d30      	ldr	r5, [pc, #192]	; (800157c <main+0x214>)
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <main+0x218>)
  huart3.Init.Parity = UART_PARITY_NONE;
 80014be:	6128      	str	r0, [r5, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014c0:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	e9c5 0006 	strd	r0, r0, [r5, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c8:	e9c5 0008 	strd	r0, r0, [r5, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014cc:	62a8      	str	r0, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ce:	4628      	mov	r0, r5
  huart3.Init.BaudRate = 115200;
 80014d0:	f8c5 9004 	str.w	r9, [r5, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014d4:	f8c5 8014 	str.w	r8, [r5, #20]
  huart3.Instance = USART3;
 80014d8:	602b      	str	r3, [r5, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014da:	f002 f91b 	bl	8003714 <HAL_UART_Init>
 80014de:	4601      	mov	r1, r0
 80014e0:	b108      	cbz	r0, 80014e6 <main+0x17e>
 80014e2:	b672      	cpsid	i
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <main+0x17c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e6:	4628      	mov	r0, r5
 80014e8:	f002 f99e 	bl	8003828 <HAL_UARTEx_SetTxFifoThreshold>
 80014ec:	4601      	mov	r1, r0
 80014ee:	b108      	cbz	r0, 80014f4 <main+0x18c>
 80014f0:	b672      	cpsid	i
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <main+0x18a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f4:	4628      	mov	r0, r5
 80014f6:	f002 f9d9 	bl	80038ac <HAL_UARTEx_SetRxFifoThreshold>
 80014fa:	b108      	cbz	r0, 8001500 <main+0x198>
 80014fc:	b672      	cpsid	i
  while (1)
 80014fe:	e7fe      	b.n	80014fe <main+0x196>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001500:	4628      	mov	r0, r5
 8001502:	f002 f973 	bl	80037ec <HAL_UARTEx_DisableFifoMode>
 8001506:	b108      	cbz	r0, 800150c <main+0x1a4>
 8001508:	b672      	cpsid	i
  while (1)
 800150a:	e7fe      	b.n	800150a <main+0x1a2>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <main+0x21c>)
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800150e:	e9c3 6708 	strd	r6, r7, [r3, #32]
 8001512:	2602      	movs	r6, #2
 8001514:	2701      	movs	r7, #1
 8001516:	e9c3 6706 	strd	r6, r7, [r3, #24]
 800151a:	2601      	movs	r6, #1
 800151c:	2701      	movs	r7, #1
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800151e:	6318      	str	r0, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001520:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001524:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001526:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800152a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800152c:	e9c3 1200 	strd	r1, r2, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001530:	f000 fc42 	bl	8001db8 <HAL_PCD_Init>
 8001534:	b998      	cbnz	r0, 800155e <main+0x1f6>
	  PROFILING_START("MAIN loop timing");
 8001536:	4e14      	ldr	r6, [pc, #80]	; (8001588 <main+0x220>)
	  PROFILING_EVENT("Event END");
 8001538:	4d14      	ldr	r5, [pc, #80]	; (800158c <main+0x224>)
 800153a:	b672      	cpsid	i
	  PROFILING_START("MAIN loop timing");
 800153c:	4630      	mov	r0, r6
 800153e:	f000 f829 	bl	8001594 <PROFILING_START>
	  end2endinference();
 8001542:	f7ff f987 	bl	8000854 <end2endinference>
	  PROFILING_EVENT("Event END");
 8001546:	4628      	mov	r0, r5
 8001548:	f000 f84e 	bl	80015e8 <PROFILING_EVENT>
  __ASM volatile ("cpsie i" : : : "memory");
 800154c:	b662      	cpsie	i
	  PROFILING_STOP(&hlpuart1);
 800154e:	4620      	mov	r0, r4
 8001550:	f000 f866 	bl	8001620 <PROFILING_STOP>
	  HAL_Delay(10000);
 8001554:	f242 7010 	movw	r0, #10000	; 0x2710
 8001558:	f000 faa4 	bl	8001aa4 <HAL_Delay>
  while (1)
 800155c:	e7ed      	b.n	800153a <main+0x1d2>
  __ASM volatile ("cpsid i" : : : "memory");
 800155e:	b672      	cpsid	i
  while (1)
 8001560:	e7fe      	b.n	8001560 <main+0x1f8>
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	48000400 	.word	0x48000400
 800156c:	20000d98 	.word	0x20000d98
 8001570:	48001800 	.word	0x48001800
 8001574:	48000800 	.word	0x48000800
 8001578:	40008000 	.word	0x40008000
 800157c:	20001334 	.word	0x20001334
 8001580:	40004800 	.word	0x40004800
 8001584:	20000e28 	.word	0x20000e28
 8001588:	08049c18 	.word	0x08049c18
 800158c:	08049c2c 	.word	0x08049c2c

08001590 <Error_Handler>:
 8001590:	b672      	cpsid	i
 8001592:	e7fe      	b.n	8001592 <Error_Handler+0x2>

08001594 <PROFILING_START>:
 * @param profile_name Profiler name
 */
void PROFILING_START(const char *profile_name)
{
  prof_name = profile_name;
  event_count = 0;
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <PROFILING_START+0x38>)

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <PROFILING_START+0x3c>)
  event_count = 0;
 8001598:	2100      	movs	r1, #0
{
 800159a:	b410      	push	{r4}
  event_count = 0;
 800159c:	7019      	strb	r1, [r3, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800159e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
  prof_name = profile_name;
 80015a2:	4c0c      	ldr	r4, [pc, #48]	; (80015d4 <PROFILING_START+0x40>)
  *LAR = 0xC5ACCE55;
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <PROFILING_START+0x44>)
  prof_name = profile_name;
 80015a6:	6020      	str	r0, [r4, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80015a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ac:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  *LAR = 0xC5ACCE55;
 80015b0:	680a      	ldr	r2, [r1, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable counter
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <PROFILING_START+0x48>)
  *LAR = 0xC5ACCE55;
 80015b4:	490a      	ldr	r1, [pc, #40]	; (80015e0 <PROFILING_START+0x4c>)
 80015b6:	6011      	str	r1, [r2, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable counter
 80015b8:	681a      	ldr	r2, [r3, #0]
  //DWT->CYCCNT  = time_start = 0;
  time_start = DWT->CYCCNT;
 80015ba:	490a      	ldr	r1, [pc, #40]	; (80015e4 <PROFILING_START+0x50>)
}
 80015bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable counter
 80015c0:	f042 0201 	orr.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
  time_start = DWT->CYCCNT;
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	600b      	str	r3, [r1, #0]
}
 80015ca:	4770      	bx	lr
 80015cc:	20000004 	.word	0x20000004
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	20001464 	.word	0x20001464
 80015d8:	20000000 	.word	0x20000000
 80015dc:	e0001000 	.word	0xe0001000
 80015e0:	c5acce55 	.word	0xc5acce55
 80015e4:	20001508 	.word	0x20001508

080015e8 <PROFILING_EVENT>:
 *
 * @param event Event name
 */
void PROFILING_EVENT(const char *event)
{
  if (event_count == __PROF_STOPED)
 80015e8:	4a09      	ldr	r2, [pc, #36]	; (8001610 <PROFILING_EVENT+0x28>)
 80015ea:	7813      	ldrb	r3, [r2, #0]
    return;

  if (event_count < MAX_EVENT_COUNT)
 80015ec:	2b27      	cmp	r3, #39	; 0x27
 80015ee:	d900      	bls.n	80015f2 <PROFILING_EVENT+0xa>
 80015f0:	4770      	bx	lr
{
 80015f2:	b410      	push	{r4}
  {
    time_event[event_count] = DWT->CYCCNT;
 80015f4:	4c07      	ldr	r4, [pc, #28]	; (8001614 <PROFILING_EVENT+0x2c>)
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <PROFILING_EVENT+0x30>)
 80015f8:	6864      	ldr	r4, [r4, #4]
 80015fa:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
    event_name[event_count] = event;
 80015fe:	4c07      	ldr	r4, [pc, #28]	; (800161c <PROFILING_EVENT+0x34>)
    event_count++;
 8001600:	1c59      	adds	r1, r3, #1
 8001602:	7011      	strb	r1, [r2, #0]
    event_name[event_count] = event;
 8001604:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  }
}
 8001608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000004 	.word	0x20000004
 8001614:	e0001000 	.word	0xe0001000
 8001618:	20001468 	.word	0x20001468
 800161c:	200013c4 	.word	0x200013c4

08001620 <PROFILING_STOP>:
  int32_t timestamp;
  int32_t delta_t;

  tick_per_1us = SystemCoreClock / 1000000;

  if (event_count == __PROF_STOPED)
 8001620:	4b32      	ldr	r3, [pc, #200]	; (80016ec <PROFILING_STOP+0xcc>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2bff      	cmp	r3, #255	; 0xff
 8001626:	d05b      	beq.n	80016e0 <PROFILING_STOP+0xc0>
{
 8001628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tick_per_1us = SystemCoreClock / 1000000;
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <PROFILING_STOP+0xd0>)
{
 800162e:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8001632:	4680      	mov	r8, r0
    return;
  }

  //DEBUG_PRINTF("Profiling \"%s\" sequence: \r\n"
  //             "--Event-----------------------|--timestamp--|----delta_t---\r\n", prof_name);
  uint8_t *init[100] = {};
 8001634:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001638:	2100      	movs	r1, #0
 800163a:	a81e      	add	r0, sp, #120	; 0x78
  tick_per_1us = SystemCoreClock / 1000000;
 800163c:	681c      	ldr	r4, [r3, #0]
  uint8_t *init[100] = {};
 800163e:	f002 fb61 	bl	8003d04 <memset>
  sprintf(init, "Profiling \"%s\" sequence: \r\n--Event-----------------------|--timestamp--|----delta_t---\r\n", prof_name);
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <PROFILING_STOP+0xd4>)
 8001644:	492c      	ldr	r1, [pc, #176]	; (80016f8 <PROFILING_STOP+0xd8>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	a81e      	add	r0, sp, #120	; 0x78
 800164a:	f002 fb63 	bl	8003d14 <siprintf>
  HAL_UART_Transmit (huart2, init, sizeof (init), 10);
 800164e:	230a      	movs	r3, #10
 8001650:	a91e      	add	r1, sp, #120	; 0x78
 8001652:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001656:	4640      	mov	r0, r8
 8001658:	f001 ff96 	bl	8003588 <HAL_UART_Transmit>
  time_prev = 0;

  for (int i = 0; i < event_count; i++)
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <PROFILING_STOP+0xcc>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b38b      	cbz	r3, 80016c6 <PROFILING_STOP+0xa6>
  tick_per_1us = SystemCoreClock / 1000000;
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <PROFILING_STOP+0xdc>)
 8001664:	4f26      	ldr	r7, [pc, #152]	; (8001700 <PROFILING_STOP+0xe0>)
 8001666:	4e27      	ldr	r6, [pc, #156]	; (8001704 <PROFILING_STOP+0xe4>)
 8001668:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8001710 <PROFILING_STOP+0xf0>
    timestamp = (time_event[i] - time_start) / tick_per_1us;
    delta_t = timestamp - time_prev;
    time_prev = timestamp;
    //DEBUG_PRINTF("%-30s:%9d µs | +%9d µs\r\n", event_name[i], timestamp, delta_t);
    uint8_t data[100] = {};
	sprintf(data, "%-30s:%9d µs | +%9d µs\r\n", event_name[i], timestamp, delta_t);
 800166c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8001714 <PROFILING_STOP+0xf4>
  tick_per_1us = SystemCoreClock / 1000000;
 8001670:	fba3 3404 	umull	r3, r4, r3, r4
 8001674:	0ca3      	lsrs	r3, r4, #18
  for (int i = 0; i < event_count; i++)
 8001676:	2500      	movs	r5, #0
  tick_per_1us = SystemCoreClock / 1000000;
 8001678:	9303      	str	r3, [sp, #12]
  time_prev = 0;
 800167a:	462c      	mov	r4, r5
    timestamp = (time_event[i] - time_start) / tick_per_1us;
 800167c:	f8db 2000 	ldr.w	r2, [fp]
 8001680:	46a1      	mov	r9, r4
 8001682:	f857 4b04 	ldr.w	r4, [r7], #4
    uint8_t data[100] = {};
 8001686:	2300      	movs	r3, #0
    timestamp = (time_event[i] - time_start) / tick_per_1us;
 8001688:	1aa4      	subs	r4, r4, r2
    uint8_t data[100] = {};
 800168a:	2100      	movs	r1, #0
 800168c:	2260      	movs	r2, #96	; 0x60
 800168e:	a806      	add	r0, sp, #24
 8001690:	9305      	str	r3, [sp, #20]
    timestamp = (time_event[i] - time_start) / tick_per_1us;
 8001692:	9b03      	ldr	r3, [sp, #12]
 8001694:	fbb4 f4f3 	udiv	r4, r4, r3
    uint8_t data[100] = {};
 8001698:	f002 fb34 	bl	8003d04 <memset>
    delta_t = timestamp - time_prev;
 800169c:	eba4 0309 	sub.w	r3, r4, r9
	sprintf(data, "%-30s:%9d µs | +%9d µs\r\n", event_name[i], timestamp, delta_t);
 80016a0:	f856 2b04 	ldr.w	r2, [r6], #4
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4651      	mov	r1, sl
 80016a8:	4623      	mov	r3, r4
 80016aa:	a805      	add	r0, sp, #20
 80016ac:	f002 fb32 	bl	8003d14 <siprintf>
    HAL_UART_Transmit (huart2, data, sizeof (data), 10);
 80016b0:	230a      	movs	r3, #10
 80016b2:	2264      	movs	r2, #100	; 0x64
 80016b4:	a905      	add	r1, sp, #20
 80016b6:	4640      	mov	r0, r8
 80016b8:	f001 ff66 	bl	8003588 <HAL_UART_Transmit>
  for (int i = 0; i < event_count; i++)
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <PROFILING_STOP+0xcc>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	3501      	adds	r5, #1
 80016c2:	42ab      	cmp	r3, r5
 80016c4:	dcda      	bgt.n	800167c <PROFILING_STOP+0x5c>
  }
  //DEBUG_PRINTF("\r\n");
  HAL_UART_Transmit (huart2, "\r\n", sizeof ("\r\n"), 10);
 80016c6:	4910      	ldr	r1, [pc, #64]	; (8001708 <PROFILING_STOP+0xe8>)
 80016c8:	230a      	movs	r3, #10
 80016ca:	2203      	movs	r2, #3
 80016cc:	4640      	mov	r0, r8
 80016ce:	f001 ff5b 	bl	8003588 <HAL_UART_Transmit>
  event_count = __PROF_STOPED;
 80016d2:	4a06      	ldr	r2, [pc, #24]	; (80016ec <PROFILING_STOP+0xcc>)
 80016d4:	23ff      	movs	r3, #255	; 0xff
 80016d6:	7013      	strb	r3, [r2, #0]
}
 80016d8:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 80016dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	HAL_UART_Transmit (huart2, warning, sizeof (warning), 10);
 80016e0:	490a      	ldr	r1, [pc, #40]	; (800170c <PROFILING_STOP+0xec>)
 80016e2:	230a      	movs	r3, #10
 80016e4:	2204      	movs	r2, #4
 80016e6:	f001 bf4f 	b.w	8003588 <HAL_UART_Transmit>
 80016ea:	bf00      	nop
 80016ec:	20000004 	.word	0x20000004
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20001464 	.word	0x20001464
 80016f8:	08049c64 	.word	0x08049c64
 80016fc:	431bde83 	.word	0x431bde83
 8001700:	20001468 	.word	0x20001468
 8001704:	200013c4 	.word	0x200013c4
 8001708:	08049c60 	.word	0x08049c60
 800170c:	08049c38 	.word	0x08049c38
 8001710:	20001508 	.word	0x20001508
 8001714:	08049cc0 	.word	0x08049cc0

08001718 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_MspInit+0x2c>)
 800171a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800171c:	f042 0201 	orr.w	r2, r2, #1
 8001720:	661a      	str	r2, [r3, #96]	; 0x60
 8001722:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001724:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	f002 0201 	and.w	r2, r2, #1
 800172a:	9200      	str	r2, [sp, #0]
 800172c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001730:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001734:	659a      	str	r2, [r3, #88]	; 0x58
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001740:	b002      	add	sp, #8
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b5d0      	push	{r4, r6, r7, lr}
 800174a:	4604      	mov	r4, r0
 800174c:	b0b0      	sub	sp, #192	; 0xc0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001750:	2294      	movs	r2, #148	; 0x94
 8001752:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001758:	e9cd 1108 	strd	r1, r1, [sp, #32]
 800175c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175e:	f002 fad1 	bl	8003d04 <memset>
  if(huart->Instance==LPUART1)
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	4a3c      	ldr	r2, [pc, #240]	; (8001858 <HAL_UART_MspInit+0x110>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d004      	beq.n	8001774 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800176a:	4a3c      	ldr	r2, [pc, #240]	; (800185c <HAL_UART_MspInit+0x114>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d042      	beq.n	80017f6 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001770:	b030      	add	sp, #192	; 0xc0
 8001772:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001774:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001776:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001778:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177a:	f001 fa63 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	2800      	cmp	r0, #0
 8001780:	d163      	bne.n	800184a <HAL_UART_MspInit+0x102>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_UART_MspInit+0x118>)
 8001784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	65da      	str	r2, [r3, #92]	; 0x5c
 800178c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800178e:	f002 0201 	and.w	r2, r2, #1
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001798:	f042 0202 	orr.w	r2, r2, #2
 800179c:	64da      	str	r2, [r3, #76]	; 0x4c
 800179e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a0:	f002 0202 	and.w	r2, r2, #2
 80017a4:	9202      	str	r2, [sp, #8]
 80017a6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b6:	9303      	str	r3, [sp, #12]
 80017b8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017ba:	2408      	movs	r4, #8
    HAL_PWREx_EnableVddIO2();
 80017bc:	f000 fc40 	bl	8002040 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017c0:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017c4:	2202      	movs	r2, #2
 80017c6:	2302      	movs	r3, #2
 80017c8:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	4826      	ldr	r0, [pc, #152]	; (8001864 <HAL_UART_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017cc:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017d2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f000 f9e1 	bl	8001b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80017da:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017de:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e0:	4821      	ldr	r0, [pc, #132]	; (8001868 <HAL_UART_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017e2:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80017e6:	e9cd 6708 	strd	r6, r7, [sp, #32]
 80017ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ee:	f000 f9d5 	bl	8001b9c <HAL_GPIO_Init>
}
 80017f2:	b030      	add	sp, #192	; 0xc0
 80017f4:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017f6:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017fa:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fc:	f001 fa22 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	bb30      	cbnz	r0, 8001850 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x118>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	4819      	ldr	r0, [pc, #100]	; (800186c <HAL_UART_MspInit+0x124>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001806:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001808:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800180c:	659a      	str	r2, [r3, #88]	; 0x58
 800180e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001810:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001814:	9204      	str	r2, [sp, #16]
 8001816:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181a:	f042 0208 	orr.w	r2, r2, #8
 800181e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001822:	f44f 7640 	mov.w	r6, #768	; 0x300
 8001826:	2702      	movs	r7, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001828:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800182c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001830:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001832:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001834:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001836:	2600      	movs	r6, #0
 8001838:	2703      	movs	r7, #3
 800183a:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001840:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001842:	f000 f9ab 	bl	8001b9c <HAL_GPIO_Init>
}
 8001846:	b030      	add	sp, #192	; 0xc0
 8001848:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800184a:	f7ff fea1 	bl	8001590 <Error_Handler>
 800184e:	e798      	b.n	8001782 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001850:	f7ff fe9e 	bl	8001590 <Error_Handler>
 8001854:	e7d5      	b.n	8001802 <HAL_UART_MspInit+0xba>
 8001856:	bf00      	nop
 8001858:	40008000 	.word	0x40008000
 800185c:	40004800 	.word	0x40004800
 8001860:	40021000 	.word	0x40021000
 8001864:	48000400 	.word	0x48000400
 8001868:	48001800 	.word	0x48001800
 800186c:	48000c00 	.word	0x48000c00

08001870 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001870:	b510      	push	{r4, lr}
 8001872:	4604      	mov	r4, r0
 8001874:	b0ae      	sub	sp, #184	; 0xb8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	2294      	movs	r2, #148	; 0x94
 800187a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001880:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001884:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001886:	f002 fa3d 	bl	8003d04 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001890:	d001      	beq.n	8001896 <HAL_PCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001892:	b02e      	add	sp, #184	; 0xb8
 8001894:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189a:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800189c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189e:	f001 f9d1 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d143      	bne.n	800192e <HAL_PCD_MspInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4c26      	ldr	r4, [pc, #152]	; (8001940 <HAL_PCD_MspInit+0xd0>)
 80018a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80018b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018b8:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
 80018bc:	2302      	movs	r3, #2
 80018be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018c2:	2200      	movs	r2, #0
 80018c4:	2303      	movs	r3, #3
 80018c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018cc:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018d4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f000 f961 	bl	8001b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018da:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8001938 <HAL_PCD_MspInit+0xc8>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e0:	a904      	add	r1, sp, #16
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018e8:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f000 f956 	bl	8001b9c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80018f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	d40f      	bmi.n	8001928 <HAL_PCD_MspInit+0xb8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	9303      	str	r3, [sp, #12]
 8001918:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 800191a:	f000 fb89 	bl	8002030 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001924:	65a3      	str	r3, [r4, #88]	; 0x58
 8001926:	e7b4      	b.n	8001892 <HAL_PCD_MspInit+0x22>
      HAL_PWREx_EnableVddUSB();
 8001928:	f000 fb82 	bl	8002030 <HAL_PWREx_EnableVddUSB>
}
 800192c:	e7b1      	b.n	8001892 <HAL_PCD_MspInit+0x22>
      Error_Handler();
 800192e:	f7ff fe2f 	bl	8001590 <Error_Handler>
 8001932:	e7b8      	b.n	80018a6 <HAL_PCD_MspInit+0x36>
 8001934:	f3af 8000 	nop.w
 8001938:	00000200 	.word	0x00000200
 800193c:	00000000 	.word	0x00000000
 8001940:	40021000 	.word	0x40021000

08001944 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler>
 8001946:	bf00      	nop

08001948 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <HardFault_Handler>
 800194a:	bf00      	nop

0800194c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler>
 800194e:	bf00      	nop

08001950 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <BusFault_Handler>
 8001952:	bf00      	nop

08001954 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler>
 8001956:	bf00      	nop

08001958 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <DebugMon_Handler>:
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <PendSV_Handler>:
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 b88c 	b.w	8001a80 <HAL_IncTick>

08001968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001968:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196a:	4c0c      	ldr	r4, [pc, #48]	; (800199c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <_sbrk+0x38>)
 800196e:	490d      	ldr	r1, [pc, #52]	; (80019a4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001970:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001972:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001974:	b12a      	cbz	r2, 8001982 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4410      	add	r0, r2
 8001978:	4288      	cmp	r0, r1
 800197a:	d807      	bhi.n	800198c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800197c:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 800197e:	4610      	mov	r0, r2
 8001980:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <_sbrk+0x40>)
 8001984:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4410      	add	r0, r2
 8001988:	4288      	cmp	r0, r1
 800198a:	d9f7      	bls.n	800197c <_sbrk+0x14>
    errno = ENOMEM;
 800198c:	f002 f968 	bl	8003c60 <__errno>
 8001990:	230c      	movs	r3, #12
    return (void *)-1;
 8001992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8001996:	6003      	str	r3, [r0, #0]
}
 8001998:	4610      	mov	r0, r2
 800199a:	bd10      	pop	{r4, pc}
 800199c:	2000150c 	.word	0x2000150c
 80019a0:	200a0000 	.word	0x200a0000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	20001528 	.word	0x20001528

080019ac <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <SystemInit+0x10>)
 80019ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c4:	f7ff fff2 	bl	80019ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <LoopForever+0x6>)
  ldr r1, =_edata
 80019ca:	490d      	ldr	r1, [pc, #52]	; (8001a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <LoopForever+0xe>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e0:	4c0a      	ldr	r4, [pc, #40]	; (8001a0c <LoopForever+0x16>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f002 f93d 	bl	8003c6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f2:	f7ff fcb9 	bl	8001368 <main>

080019f6 <LoopForever>:

LoopForever:
    b LoopForever
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a04:	08049da4 	.word	0x08049da4
  ldr r2, =_sbss
 8001a08:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a0c:	20001524 	.word	0x20001524

08001a10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC1_IRQHandler>
	...

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_InitTick+0x40>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b90b      	cbnz	r3, 8001a20 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a20:	490d      	ldr	r1, [pc, #52]	; (8001a58 <HAL_InitTick+0x44>)
 8001a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a26:	4605      	mov	r5, r0
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	6808      	ldr	r0, [r1, #0]
 8001a2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a32:	f000 f899 	bl	8001b68 <HAL_SYSTICK_Config>
 8001a36:	4604      	mov	r4, r0
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d1ef      	bne.n	8001a1c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3c:	2d0f      	cmp	r5, #15
 8001a3e:	d8ed      	bhi.n	8001a1c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	4602      	mov	r2, r0
 8001a42:	4629      	mov	r1, r5
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a48:	f000 f850 	bl	8001aec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_InitTick+0x48>)
 8001a4e:	4620      	mov	r0, r4
 8001a50:	601d      	str	r5, [r3, #0]
}
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000010 	.word	0x20000010

08001a60 <HAL_Init>:
{
 8001a60:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a62:	2003      	movs	r0, #3
 8001a64:	f000 f830 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff ffd3 	bl	8001a14 <HAL_InitTick>
 8001a6e:	b110      	cbz	r0, 8001a76 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001a70:	2401      	movs	r4, #1
}
 8001a72:	4620      	mov	r0, r4
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	4604      	mov	r4, r0
    HAL_MspInit();
 8001a78:	f7ff fe4e 	bl	8001718 <HAL_MspInit>
}
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	bd10      	pop	{r4, pc}

08001a80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001a80:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <HAL_IncTick+0x10>)
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_IncTick+0x14>)
 8001a84:	6811      	ldr	r1, [r2, #0]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	440b      	add	r3, r1
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20001510 	.word	0x20001510
 8001a94:	2000000c 	.word	0x2000000c

08001a98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a98:	4b01      	ldr	r3, [pc, #4]	; (8001aa0 <HAL_GetTick+0x8>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20001510 	.word	0x20001510

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fff6 	bl	8001a98 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aac:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001aae:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001ab0:	d002      	beq.n	8001ab8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_Delay+0x20>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	1b43      	subs	r3, r0, r5
 8001abe:	42a3      	cmp	r3, r4
 8001ac0:	d3fa      	bcc.n	8001ab8 <HAL_Delay+0x14>
  {
  }
}
 8001ac2:	bd38      	pop	{r3, r4, r5, pc}
 8001ac4:	2000000c 	.word	0x2000000c

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001aca:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ada:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ae2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_NVIC_SetPriority+0x74>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af6:	f1c3 0e07 	rsb	lr, r3, #7
 8001afa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b02:	bf28      	it	cs
 8001b04:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b08:	f1bc 0f06 	cmp.w	ip, #6
 8001b0c:	d91b      	bls.n	8001b46 <HAL_NVIC_SetPriority+0x5a>
 8001b0e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001b14:	fa0c fc03 	lsl.w	ip, ip, r3
 8001b18:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001b20:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001b24:	ea21 010c 	bic.w	r1, r1, ip
 8001b28:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001b30:	db0c      	blt.n	8001b4c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001b36:	0109      	lsls	r1, r1, #4
 8001b38:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001b3c:	b2c9      	uxtb	r1, r1
 8001b3e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b46:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b48:	4613      	mov	r3, r2
 8001b4a:	e7e7      	b.n	8001b1c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_NVIC_SetPriority+0x78>)
 8001b4e:	f000 000f 	and.w	r0, r0, #15
 8001b52:	0109      	lsls	r1, r1, #4
 8001b54:	4403      	add	r3, r0
 8001b56:	b2c9      	uxtb	r1, r1
 8001b58:	7619      	strb	r1, [r3, #24]
 8001b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00
 8001b64:	e000ecfc 	.word	0xe000ecfc

08001b68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	3801      	subs	r0, #1
 8001b6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b6e:	d210      	bcs.n	8001b92 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b70:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	4c08      	ldr	r4, [pc, #32]	; (8001b98 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b78:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001b7e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b82:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b84:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b86:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	6119      	str	r1, [r3, #16]
 8001b90:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2001      	movs	r0, #1
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba0:	680c      	ldr	r4, [r1, #0]
{
 8001ba2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	f000 808c 	beq.w	8001cc2 <HAL_GPIO_Init+0x126>
 8001baa:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8001da4 <HAL_GPIO_Init+0x208>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb2:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8001da8 <HAL_GPIO_Init+0x20c>
  uint32_t position = 0x00u;
 8001bb6:	4663      	mov	r3, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb8:	4688      	mov	r8, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bba:	2601      	movs	r6, #1
 8001bbc:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001bbe:	ea16 0904 	ands.w	r9, r6, r4
 8001bc2:	d077      	beq.n	8001cb4 <HAL_GPIO_Init+0x118>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001bc8:	f005 0203 	and.w	r2, r5, #3
 8001bcc:	1e51      	subs	r1, r2, #1
 8001bce:	2901      	cmp	r1, #1
 8001bd0:	d97a      	bls.n	8001cc8 <HAL_GPIO_Init+0x12c>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd2:	2a03      	cmp	r2, #3
 8001bd4:	f040 80b5 	bne.w	8001d42 <HAL_GPIO_Init+0x1a6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd8:	fa02 f20c 	lsl.w	r2, r2, ip
 8001bdc:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8001bde:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be0:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001be2:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001be4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001be8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bea:	d063      	beq.n	8001cb4 <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bec:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	f8cb 2060 	str.w	r2, [fp, #96]	; 0x60
 8001bf8:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8001bfc:	f002 0201 	and.w	r2, r2, #1
 8001c00:	9203      	str	r2, [sp, #12]
 8001c02:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c04:	f023 0203 	bic.w	r2, r3, #3
 8001c08:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001c0c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c10:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c14:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c16:	00b6      	lsls	r6, r6, #2
 8001c18:	210f      	movs	r1, #15
 8001c1a:	40b1      	lsls	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c1c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c20:	ea27 0101 	bic.w	r1, r7, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c24:	d01f      	beq.n	8001c66 <HAL_GPIO_Init+0xca>
 8001c26:	4f58      	ldr	r7, [pc, #352]	; (8001d88 <HAL_GPIO_Init+0x1ec>)
 8001c28:	42b8      	cmp	r0, r7
 8001c2a:	f000 8094 	beq.w	8001d56 <HAL_GPIO_Init+0x1ba>
 8001c2e:	4f57      	ldr	r7, [pc, #348]	; (8001d8c <HAL_GPIO_Init+0x1f0>)
 8001c30:	42b8      	cmp	r0, r7
 8001c32:	f000 8095 	beq.w	8001d60 <HAL_GPIO_Init+0x1c4>
 8001c36:	4f56      	ldr	r7, [pc, #344]	; (8001d90 <HAL_GPIO_Init+0x1f4>)
 8001c38:	42b8      	cmp	r0, r7
 8001c3a:	f000 8087 	beq.w	8001d4c <HAL_GPIO_Init+0x1b0>
 8001c3e:	4f55      	ldr	r7, [pc, #340]	; (8001d94 <HAL_GPIO_Init+0x1f8>)
 8001c40:	42b8      	cmp	r0, r7
 8001c42:	f000 8097 	beq.w	8001d74 <HAL_GPIO_Init+0x1d8>
 8001c46:	4f54      	ldr	r7, [pc, #336]	; (8001d98 <HAL_GPIO_Init+0x1fc>)
 8001c48:	42b8      	cmp	r0, r7
 8001c4a:	f000 8098 	beq.w	8001d7e <HAL_GPIO_Init+0x1e2>
 8001c4e:	4f53      	ldr	r7, [pc, #332]	; (8001d9c <HAL_GPIO_Init+0x200>)
 8001c50:	42b8      	cmp	r0, r7
 8001c52:	f000 808a 	beq.w	8001d6a <HAL_GPIO_Init+0x1ce>
 8001c56:	4f52      	ldr	r7, [pc, #328]	; (8001da0 <HAL_GPIO_Init+0x204>)
 8001c58:	42b8      	cmp	r0, r7
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2707      	moveq	r7, #7
 8001c5e:	2708      	movne	r7, #8
 8001c60:	fa07 f606 	lsl.w	r6, r7, r6
 8001c64:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c66:	6091      	str	r1, [r2, #8]
        temp = EXTI->RTSR1;
 8001c68:	f8da 2008 	ldr.w	r2, [sl, #8]
        temp &= ~(iocurrent);
 8001c6c:	ea6f 0609 	mvn.w	r6, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c70:	02e9      	lsls	r1, r5, #11
        temp &= ~(iocurrent);
 8001c72:	bf54      	ite	pl
 8001c74:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001c76:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8001c7a:	f8ca 2008 	str.w	r2, [sl, #8]

        temp = EXTI->FTSR1;
 8001c7e:	f8da 100c 	ldr.w	r1, [sl, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c82:	02aa      	lsls	r2, r5, #10
        temp &= ~(iocurrent);
 8001c84:	bf54      	ite	pl
 8001c86:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8001c88:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->FTSR1 = temp;
 8001c8c:	f8ca 100c 	str.w	r1, [sl, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c90:	f8da 1004 	ldr.w	r1, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c94:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8001c96:	bf54      	ite	pl
 8001c98:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8001c9a:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->EMR1 = temp;
 8001c9e:	f8ca 1004 	str.w	r1, [sl, #4]

        temp = EXTI->IMR1;
 8001ca2:	f8da 2000 	ldr.w	r2, [sl]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca6:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8001ca8:	bf54      	ite	pl
 8001caa:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001cac:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8001cb0:	f8ca 2000 	str.w	r2, [sl]
      }
    }

    position++;
 8001cb4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	fa34 f203 	lsrs.w	r2, r4, r3
 8001cba:	f10c 0c02 	add.w	ip, ip, #2
 8001cbe:	f47f af7c 	bne.w	8001bba <HAL_GPIO_Init+0x1e>
  }
}
 8001cc2:	b005      	add	sp, #20
 8001cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001cc8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ccc:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cd0:	2703      	movs	r7, #3
 8001cd2:	fa07 f70c 	lsl.w	r7, r7, ip
 8001cd6:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cda:	fa01 f10c 	lsl.w	r1, r1, ip
 8001cde:	ea41 010e 	orr.w	r1, r1, lr
        GPIOx->OSPEEDR = temp;
 8001ce2:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce4:	43f9      	mvns	r1, r7
        temp = GPIOx->OTYPER;
 8001ce6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce8:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cec:	f3c5 1600 	ubfx	r6, r5, #4, #1
 8001cf0:	409e      	lsls	r6, r3
 8001cf2:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001cf4:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001cf6:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf8:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cfc:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfe:	fa06 f60c 	lsl.w	r6, r6, ip
 8001d02:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d04:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001d06:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d08:	fa02 f20c 	lsl.w	r2, r2, ip
 8001d0c:	f47f af67 	bne.w	8001bde <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3u];
 8001d10:	08df      	lsrs	r7, r3, #3
 8001d12:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d16:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001d1a:	6a3e      	ldr	r6, [r7, #32]
 8001d1c:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1e:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d22:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d26:	fa06 f60e 	lsl.w	r6, r6, lr
 8001d2a:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d2c:	260f      	movs	r6, #15
 8001d2e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001d32:	9e00      	ldr	r6, [sp, #0]
 8001d34:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d38:	9e01      	ldr	r6, [sp, #4]
 8001d3a:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001d3e:	623e      	str	r6, [r7, #32]
 8001d40:	e74d      	b.n	8001bde <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d42:	2103      	movs	r1, #3
 8001d44:	fa01 f10c 	lsl.w	r1, r1, ip
 8001d48:	43c9      	mvns	r1, r1
 8001d4a:	e7d4      	b.n	8001cf6 <HAL_GPIO_Init+0x15a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d4c:	2703      	movs	r7, #3
 8001d4e:	fa07 f606 	lsl.w	r6, r7, r6
 8001d52:	4331      	orrs	r1, r6
 8001d54:	e787      	b.n	8001c66 <HAL_GPIO_Init+0xca>
 8001d56:	2701      	movs	r7, #1
 8001d58:	fa07 f606 	lsl.w	r6, r7, r6
 8001d5c:	4331      	orrs	r1, r6
 8001d5e:	e782      	b.n	8001c66 <HAL_GPIO_Init+0xca>
 8001d60:	2702      	movs	r7, #2
 8001d62:	fa07 f606 	lsl.w	r6, r7, r6
 8001d66:	4331      	orrs	r1, r6
 8001d68:	e77d      	b.n	8001c66 <HAL_GPIO_Init+0xca>
 8001d6a:	2706      	movs	r7, #6
 8001d6c:	fa07 f606 	lsl.w	r6, r7, r6
 8001d70:	4331      	orrs	r1, r6
 8001d72:	e778      	b.n	8001c66 <HAL_GPIO_Init+0xca>
 8001d74:	2704      	movs	r7, #4
 8001d76:	fa07 f606 	lsl.w	r6, r7, r6
 8001d7a:	4331      	orrs	r1, r6
 8001d7c:	e773      	b.n	8001c66 <HAL_GPIO_Init+0xca>
 8001d7e:	2705      	movs	r7, #5
 8001d80:	fa07 f606 	lsl.w	r6, r7, r6
 8001d84:	4331      	orrs	r1, r6
 8001d86:	e76e      	b.n	8001c66 <HAL_GPIO_Init+0xca>
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	48000800 	.word	0x48000800
 8001d90:	48000c00 	.word	0x48000c00
 8001d94:	48001000 	.word	0x48001000
 8001d98:	48001400 	.word	0x48001400
 8001d9c:	48001800 	.word	0x48001800
 8001da0:	48001c00 	.word	0x48001c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010400 	.word	0x40010400

08001dac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dac:	b10a      	cbz	r2, 8001db2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dae:	6181      	str	r1, [r0, #24]
 8001db0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop

08001db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dba:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	f000 8088 	beq.w	8001ed2 <HAL_PCD_Init+0x11a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc2:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8001dc6:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc8:	4605      	mov	r5, r0
 8001dca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d079      	beq.n	8001ec6 <HAL_PCD_Init+0x10e>
 8001dd2:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dda:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ddc:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dde:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8001de2:	bf08      	it	eq
 8001de4:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001de6:	f001 fdeb 	bl	80039c0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dea:	f856 eb10 	ldr.w	lr, [r6], #16
 8001dee:	46b4      	mov	ip, r6
 8001df0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001df4:	466c      	mov	r4, sp
 8001df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfe:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001e02:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e06:	1d2f      	adds	r7, r5, #4
 8001e08:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e0c:	4670      	mov	r0, lr
 8001e0e:	f001 fd8f 	bl	8003930 <USB_CoreInit>
 8001e12:	4604      	mov	r4, r0
 8001e14:	b130      	cbz	r0, 8001e24 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8001e16:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e18:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001e1a:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e1c:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8001e20:	b00b      	add	sp, #44	; 0x2c
 8001e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e24:	4601      	mov	r1, r0
 8001e26:	6828      	ldr	r0, [r5, #0]
 8001e28:	f001 fdd2 	bl	80039d0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2c:	6868      	ldr	r0, [r5, #4]
 8001e2e:	b358      	cbz	r0, 8001e88 <HAL_PCD_Init+0xd0>
 8001e30:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001e32:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e36:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001e38:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001e3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	fa5f f28c 	uxtb.w	r2, ip
 8001e50:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e52:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8001e56:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e5a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e5e:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e60:	d3ea      	bcc.n	8001e38 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8001e62:	2200      	movs	r2, #0
 8001e64:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6c:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8001e6e:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e72:	b2cc      	uxtb	r4, r1
 8001e74:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e76:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8001e7a:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e7e:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e86:	d3ed      	bcc.n	8001e64 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e8a:	466c      	mov	r4, sp
 8001e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e92:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001e96:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e9a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e9e:	6828      	ldr	r0, [r5, #0]
 8001ea0:	f001 fdce 	bl	8003a40 <USB_DevInit>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d1b5      	bne.n	8001e16 <HAL_PCD_Init+0x5e>
  if (hpcd->Init.lpm_enable == 1U)
 8001eaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8001eac:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eb0:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8001eb2:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8001eb4:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8001eb8:	d00f      	beq.n	8001eda <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eba:	6828      	ldr	r0, [r5, #0]
 8001ebc:	f001 fec0 	bl	8003c40 <USB_DevDisconnect>
}
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	b00b      	add	sp, #44	; 0x2c
 8001ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001ec6:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001eca:	f7ff fcd1 	bl	8001870 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8001ece:	6828      	ldr	r0, [r5, #0]
 8001ed0:	e780      	b.n	8001dd4 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8001ed2:	2401      	movs	r4, #1
}
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	b00b      	add	sp, #44	; 0x2c
 8001ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001eda:	4628      	mov	r0, r5
 8001edc:	f000 f802 	bl	8001ee4 <HAL_PCDEx_ActivateLPM>
 8001ee0:	e7eb      	b.n	8001eba <HAL_PCD_Init+0x102>
 8001ee2:	bf00      	nop

08001ee4 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee4:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8001ee6:	2100      	movs	r1, #0
{
 8001ee8:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8001eea:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001eee:	6993      	ldr	r3, [r2, #24]
  hpcd->lpm_active = 1U;
 8001ef0:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  hpcd->lpm_active = 1U;
 8001ef6:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001efa:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001efc:	6d53      	ldr	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001efe:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	f043 0303 	orr.w	r3, r3, #3
}
 8001f0a:	4608      	mov	r0, r1
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f0c:	6553      	str	r3, [r2, #84]	; 0x54
}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_PWREx_GetVoltageRange+0x20>)
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001f18:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001f1c:	d006      	beq.n	8001f2c <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f1e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f22:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8001f26:	bf18      	it	ne
 8001f28:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40007000 	.word	0x40007000

08001f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f34:	b410      	push	{r4}

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f36:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f38:	b970      	cbnz	r0, 8001f58 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f44:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f48:	d023      	beq.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    }
  }
#endif

  return HAL_OK;
}
 8001f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8001f56:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001f5c:	d009      	beq.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f5e:	6813      	ldr	r3, [r2, #0]
}
 8001f60:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8001f6c:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f7c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f80:	d02f      	beq.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8001f86:	2000      	movs	r0, #0
}
 8001f88:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8001f90:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f9c:	4c22      	ldr	r4, [pc, #136]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001f9e:	4823      	ldr	r0, [pc, #140]	; (800202c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8001fa4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001fa8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	2132      	movs	r1, #50	; 0x32
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fb4:	fba0 0303 	umull	r0, r3, r0, r3
 8001fb8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fba:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fbc:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc0:	d506      	bpl.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8001fc2:	e000      	b.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
 8001fc4:	b123      	cbz	r3, 8001fd0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8001fc6:	6951      	ldr	r1, [r2, #20]
 8001fc8:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8001fca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fce:	d4f9      	bmi.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8001fd6:	bf54      	ite	pl
 8001fd8:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8001fda:	2003      	movmi	r0, #3
}
 8001fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fe0:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fea:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fec:	4c0e      	ldr	r4, [pc, #56]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001fee:	480f      	ldr	r0, [pc, #60]	; (800202c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8001ff4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001ff8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	2132      	movs	r1, #50	; 0x32
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002002:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002004:	fba0 0303 	umull	r0, r3, r0, r3
 8002008:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800200a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800200c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002010:	d5de      	bpl.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8002012:	e001      	b.n	8002018 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0db      	beq.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8002018:	6951      	ldr	r1, [r2, #20]
 800201a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800201c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002020:	d5d6      	bpl.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8002022:	e7f7      	b.n	8002014 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8002024:	40007000 	.word	0x40007000
 8002028:	20000008 	.word	0x20000008
 800202c:	431bde83 	.word	0x431bde83

08002030 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002030:	4a02      	ldr	r2, [pc, #8]	; (800203c <HAL_PWREx_EnableVddUSB+0xc>)
 8002032:	6853      	ldr	r3, [r2, #4]
 8002034:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002038:	6053      	str	r3, [r2, #4]
}
 800203a:	4770      	bx	lr
 800203c:	40007000 	.word	0x40007000

08002040 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002040:	4a02      	ldr	r2, [pc, #8]	; (800204c <HAL_PWREx_EnableVddIO2+0xc>)
 8002042:	6853      	ldr	r3, [r2, #4]
 8002044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002048:	6053      	str	r3, [r2, #4]
}
 800204a:	4770      	bx	lr
 800204c:	40007000 	.word	0x40007000

08002050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002050:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002052:	4d1e      	ldr	r5, [pc, #120]	; (80020cc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002054:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002056:	00db      	lsls	r3, r3, #3
{
 8002058:	b083      	sub	sp, #12
 800205a:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800205c:	d519      	bpl.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x42>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800205e:	f7ff ff57 	bl	8001f10 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002062:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002066:	d026      	beq.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x66>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002068:	2c7f      	cmp	r4, #127	; 0x7f
 800206a:	d82b      	bhi.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x74>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800206c:	f1a4 0070 	sub.w	r0, r4, #112	; 0x70
 8002070:	fab0 f080 	clz	r0, r0
 8002074:	0940      	lsrs	r0, r0, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002078:	6813      	ldr	r3, [r2, #0]
 800207a:	f023 030f 	bic.w	r3, r3, #15
 800207e:	4303      	orrs	r3, r0
 8002080:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002088:	1a18      	subs	r0, r3, r0
 800208a:	bf18      	it	ne
 800208c:	2001      	movne	r0, #1
 800208e:	b003      	add	sp, #12
 8002090:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	65ab      	str	r3, [r5, #88]	; 0x58
 800209a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80020a4:	f7ff ff34 	bl	8001f10 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80020a8:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020aa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b2:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b4:	d1d8      	bne.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80020b6:	2c80      	cmp	r4, #128	; 0x80
 80020b8:	d906      	bls.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x78>
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ba:	2ca0      	cmp	r4, #160	; 0xa0
 80020bc:	bf8c      	ite	hi
 80020be:	2002      	movhi	r0, #2
 80020c0:	2001      	movls	r0, #1
 80020c2:	e7d8      	b.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x26>
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c4:	2002      	movs	r0, #2
 80020c6:	e7d6      	b.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020c8:	2000      	movs	r0, #0
 80020ca:	e7d4      	b.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x26>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40022000 	.word	0x40022000

080020d4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020d6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d8:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020da:	f013 030c 	ands.w	r3, r3, #12
 80020de:	d008      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x1e>
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d038      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d034      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	4824      	ldr	r0, [pc, #144]	; (800217c <HAL_RCC_GetSysClockFreq+0xa8>)
 80020ec:	bf18      	it	ne
 80020ee:	2000      	movne	r0, #0
 80020f0:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f2:	4a21      	ldr	r2, [pc, #132]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020f4:	6811      	ldr	r1, [r2, #0]
 80020f6:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f8:	bf54      	ite	pl
 80020fa:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020fe:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002100:	491f      	ldr	r1, [pc, #124]	; (8002180 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002102:	bf54      	ite	pl
 8002104:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002108:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800210c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002110:	b303      	cbz	r3, 8002154 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d12d      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800211e:	2b02      	cmp	r3, #2
 8002120:	d025      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x9a>
 8002122:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002124:	2b03      	cmp	r3, #3
 8002126:	bf08      	it	eq
 8002128:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa4>)
 800212c:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800212e:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002136:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800213a:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800213e:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002140:	fb02 f000 	mul.w	r0, r2, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002144:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002146:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002148:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 800214c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002150:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002152:	480c      	ldr	r0, [pc, #48]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8002154:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002156:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800215a:	2a01      	cmp	r2, #1
 800215c:	d0c9      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002166:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002168:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800216c:	d1d9      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002170:	e7db      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x56>
 8002172:	2000      	movs	r0, #0
  return sysclockfreq;
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	007a1200 	.word	0x007a1200
 8002180:	08049cf4 	.word	0x08049cf4
 8002184:	00f42400 	.word	0x00f42400

08002188 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002188:	2800      	cmp	r0, #0
 800218a:	f000 828f 	beq.w	80026ac <HAL_RCC_OscConfig+0x524>
{
 800218e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002192:	4a94      	ldr	r2, [pc, #592]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002194:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002196:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002198:	68d6      	ldr	r6, [r2, #12]
 800219a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800219c:	06d8      	lsls	r0, r3, #27
{
 800219e:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021a8:	d52e      	bpl.n	8002208 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	f000 8123 	beq.w	80023f6 <HAL_RCC_OscConfig+0x26e>
 80021b0:	2d0c      	cmp	r5, #12
 80021b2:	f000 811d 	beq.w	80023f0 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021b6:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80021b8:	4f8a      	ldr	r7, [pc, #552]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8193 	beq.w	80024e6 <HAL_RCC_OscConfig+0x35e>
        __HAL_RCC_MSI_ENABLE();
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80021c8:	f7ff fc66 	bl	8001a98 <HAL_GetTick>
 80021cc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ce:	e006      	b.n	80021de <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d0:	f7ff fc62 	bl	8001a98 <HAL_GetTick>
 80021d4:	eba0 0008 	sub.w	r0, r0, r8
 80021d8:	2802      	cmp	r0, #2
 80021da:	f200 8194 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	079b      	lsls	r3, r3, #30
 80021e2:	d5f5      	bpl.n	80021d0 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6a22      	ldr	r2, [r4, #32]
 80021f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f4:	4313      	orrs	r3, r2
 80021f6:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69e2      	ldr	r2, [r4, #28]
 80021fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002200:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002204:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	07d9      	lsls	r1, r3, #31
 800220a:	f100 80c2 	bmi.w	8002392 <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	0799      	lsls	r1, r3, #30
 8002210:	d523      	bpl.n	800225a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002212:	2d04      	cmp	r5, #4
 8002214:	f000 8157 	beq.w	80024c6 <HAL_RCC_OscConfig+0x33e>
 8002218:	2d0c      	cmp	r5, #12
 800221a:	f000 8151 	beq.w	80024c0 <HAL_RCC_OscConfig+0x338>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002220:	4e70      	ldr	r6, [pc, #448]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 81dc 	beq.w	80025e0 <HAL_RCC_OscConfig+0x458>
        __HAL_RCC_HSI_ENABLE();
 8002228:	6833      	ldr	r3, [r6, #0]
 800222a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002230:	f7ff fc32 	bl	8001a98 <HAL_GetTick>
 8002234:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002236:	e005      	b.n	8002244 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002238:	f7ff fc2e 	bl	8001a98 <HAL_GetTick>
 800223c:	1bc0      	subs	r0, r0, r7
 800223e:	2802      	cmp	r0, #2
 8002240:	f200 8161 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	6833      	ldr	r3, [r6, #0]
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	d5f6      	bpl.n	8002238 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	6873      	ldr	r3, [r6, #4]
 800224c:	6922      	ldr	r2, [r4, #16]
 800224e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002252:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002256:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	0719      	lsls	r1, r3, #28
 800225c:	d519      	bpl.n	8002292 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002260:	4e60      	ldr	r6, [pc, #384]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8118 	beq.w	8002498 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 8002268:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002274:	f7ff fc10 	bl	8001a98 <HAL_GetTick>
 8002278:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800227a:	e005      	b.n	8002288 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7ff fc0c 	bl	8001a98 <HAL_GetTick>
 8002280:	1bc0      	subs	r0, r0, r7
 8002282:	2802      	cmp	r0, #2
 8002284:	f200 813f 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002288:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800228c:	079a      	lsls	r2, r3, #30
 800228e:	d5f5      	bpl.n	800227c <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	075e      	lsls	r6, r3, #29
 8002294:	d53f      	bpl.n	8002316 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002296:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
 8002298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800229a:	00d0      	lsls	r0, r2, #3
 800229c:	f100 819e 	bmi.w	80025dc <HAL_RCC_OscConfig+0x454>
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a6:	659a      	str	r2, [r3, #88]	; 0x58
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022b2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4f4c      	ldr	r7, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x260>)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	05d9      	lsls	r1, r3, #23
 80022ba:	f140 81f9 	bpl.w	80026b0 <HAL_RCC_OscConfig+0x528>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022be:	68a3      	ldr	r3, [r4, #8]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	f000 819f 	beq.w	8002604 <HAL_RCC_OscConfig+0x47c>
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	f000 821d 	beq.w	8002706 <HAL_RCC_OscConfig+0x57e>
 80022cc:	4f45      	ldr	r7, [pc, #276]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
 80022ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80022da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 8193 	bne.w	8002612 <HAL_RCC_OscConfig+0x48a>
      tickstart = HAL_GetTick();
 80022ec:	f7ff fbd4 	bl	8001a98 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80022f4:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f6:	e006      	b.n	8002306 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7ff fbce 	bl	8001a98 <HAL_GetTick>
 80022fc:	eba0 0008 	sub.w	r0, r0, r8
 8002300:	4548      	cmp	r0, r9
 8002302:	f200 8100 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800230a:	0798      	lsls	r0, r3, #30
 800230c:	d4f4      	bmi.n	80022f8 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800230e:	2e00      	cmp	r6, #0
 8002310:	f040 81e0 	bne.w	80026d4 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	0699      	lsls	r1, r3, #26
 8002318:	d518      	bpl.n	800234c <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800231a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 800231c:	4e31      	ldr	r6, [pc, #196]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 81a5 	beq.w	800266e <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSI48_ENABLE();
 8002324:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002330:	f7ff fbb2 	bl	8001a98 <HAL_GetTick>
 8002334:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002336:	e005      	b.n	8002344 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002338:	f7ff fbae 	bl	8001a98 <HAL_GetTick>
 800233c:	1bc0      	subs	r0, r0, r7
 800233e:	2802      	cmp	r0, #2
 8002340:	f200 80e1 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002344:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002348:	079a      	lsls	r2, r3, #30
 800234a:	d5f5      	bpl.n	8002338 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800234c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8142 	beq.w	80025d8 <HAL_RCC_OscConfig+0x450>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002354:	2b02      	cmp	r3, #2
 8002356:	f000 80ef 	beq.w	8002538 <HAL_RCC_OscConfig+0x3b0>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235a:	2d0c      	cmp	r5, #12
 800235c:	f000 808c 	beq.w	8002478 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8002360:	4c20      	ldr	r4, [pc, #128]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002368:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800236a:	f7ff fb95 	bl	8001a98 <HAL_GetTick>
 800236e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002370:	e005      	b.n	800237e <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7ff fb91 	bl	8001a98 <HAL_GetTick>
 8002376:	1b40      	subs	r0, r0, r5
 8002378:	2802      	cmp	r0, #2
 800237a:	f200 80c4 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002384:	d1f5      	bne.n	8002372 <HAL_RCC_OscConfig+0x1ea>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002386:	68e1      	ldr	r1, [r4, #12]
 8002388:	4a18      	ldr	r2, [pc, #96]	; (80023ec <HAL_RCC_OscConfig+0x264>)
 800238a:	400a      	ands	r2, r1
  return HAL_OK;
 800238c:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800238e:	60e2      	str	r2, [r4, #12]
 8002390:	e073      	b.n	800247a <HAL_RCC_OscConfig+0x2f2>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002392:	2d08      	cmp	r5, #8
 8002394:	d076      	beq.n	8002484 <HAL_RCC_OscConfig+0x2fc>
 8002396:	2d0c      	cmp	r5, #12
 8002398:	d072      	beq.n	8002480 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	6863      	ldr	r3, [r4, #4]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	f000 80b5 	beq.w	800250e <HAL_RCC_OscConfig+0x386>
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a8:	f000 81a0 	beq.w	80026ec <HAL_RCC_OscConfig+0x564>
 80023ac:	4f0d      	ldr	r7, [pc, #52]	; (80023e4 <HAL_RCC_OscConfig+0x25c>)
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023b4:	603a      	str	r2, [r7, #0]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023bc:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 80aa 	bne.w	8002518 <HAL_RCC_OscConfig+0x390>
        tickstart = HAL_GetTick();
 80023c4:	f7ff fb68 	bl	8001a98 <HAL_GetTick>
 80023c8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ca:	e006      	b.n	80023da <HAL_RCC_OscConfig+0x252>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff fb64 	bl	8001a98 <HAL_GetTick>
 80023d0:	eba0 0008 	sub.w	r0, r0, r8
 80023d4:	2864      	cmp	r0, #100	; 0x64
 80023d6:	f200 8096 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	0398      	lsls	r0, r3, #14
 80023de:	d4f5      	bmi.n	80023cc <HAL_RCC_OscConfig+0x244>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	e714      	b.n	800220e <HAL_RCC_OscConfig+0x86>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023f0:	2e01      	cmp	r6, #1
 80023f2:	f47f aee0 	bne.w	80021b6 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f6:	4ba8      	ldr	r3, [pc, #672]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0799      	lsls	r1, r3, #30
 80023fc:	d439      	bmi.n	8002472 <HAL_RCC_OscConfig+0x2ea>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023fe:	4ba6      	ldr	r3, [pc, #664]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 8002400:	6a20      	ldr	r0, [r4, #32]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	0712      	lsls	r2, r2, #28
 8002406:	bf56      	itet	pl
 8002408:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 800240c:	681b      	ldrmi	r3, [r3, #0]
 800240e:	091b      	lsrpl	r3, r3, #4
 8002410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002414:	4298      	cmp	r0, r3
 8002416:	f200 8112 	bhi.w	800263e <HAL_RCC_OscConfig+0x4b6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241a:	4b9f      	ldr	r3, [pc, #636]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f042 0208 	orr.w	r2, r2, #8
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800242a:	4302      	orrs	r2, r0
 800242c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	69e1      	ldr	r1, [r4, #28]
 8002432:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002436:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800243a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800243c:	2d00      	cmp	r5, #0
 800243e:	f000 814f 	beq.w	80026e0 <HAL_RCC_OscConfig+0x558>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002442:	f7ff fe47 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002446:	4b94      	ldr	r3, [pc, #592]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 8002448:	4a94      	ldr	r2, [pc, #592]	; (800269c <HAL_RCC_OscConfig+0x514>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002450:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8002452:	4a93      	ldr	r2, [pc, #588]	; (80026a0 <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800245c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800245e:	4a91      	ldr	r2, [pc, #580]	; (80026a4 <HAL_RCC_OscConfig+0x51c>)
 8002460:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002462:	f7ff fad7 	bl	8001a14 <HAL_InitTick>
        if(status != HAL_OK)
 8002466:	b940      	cbnz	r0, 800247a <HAL_RCC_OscConfig+0x2f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	07d9      	lsls	r1, r3, #31
 800246c:	f57f aecf 	bpl.w	800220e <HAL_RCC_OscConfig+0x86>
 8002470:	e78f      	b.n	8002392 <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002472:	69a3      	ldr	r3, [r4, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1c2      	bne.n	80023fe <HAL_RCC_OscConfig+0x276>
          return HAL_ERROR;
 8002478:	2001      	movs	r0, #1
}
 800247a:	b003      	add	sp, #12
 800247c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002480:	2e03      	cmp	r6, #3
 8002482:	d18a      	bne.n	800239a <HAL_RCC_OscConfig+0x212>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	4a84      	ldr	r2, [pc, #528]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	0392      	lsls	r2, r2, #14
 800248a:	f57f aec0 	bpl.w	800220e <HAL_RCC_OscConfig+0x86>
 800248e:	6862      	ldr	r2, [r4, #4]
 8002490:	2a00      	cmp	r2, #0
 8002492:	f47f aebc 	bne.w	800220e <HAL_RCC_OscConfig+0x86>
 8002496:	e7ef      	b.n	8002478 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_DISABLE();
 8002498:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80024a4:	f7ff faf8 	bl	8001a98 <HAL_GetTick>
 80024a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024aa:	e004      	b.n	80024b6 <HAL_RCC_OscConfig+0x32e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7ff faf4 	bl	8001a98 <HAL_GetTick>
 80024b0:	1bc0      	subs	r0, r0, r7
 80024b2:	2802      	cmp	r0, #2
 80024b4:	d827      	bhi.n	8002506 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80024ba:	079b      	lsls	r3, r3, #30
 80024bc:	d4f6      	bmi.n	80024ac <HAL_RCC_OscConfig+0x324>
 80024be:	e6e7      	b.n	8002290 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024c0:	2e02      	cmp	r6, #2
 80024c2:	f47f aeac 	bne.w	800221e <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c6:	4a74      	ldr	r2, [pc, #464]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	0552      	lsls	r2, r2, #21
 80024cc:	d502      	bpl.n	80024d4 <HAL_RCC_OscConfig+0x34c>
 80024ce:	68e2      	ldr	r2, [r4, #12]
 80024d0:	2a00      	cmp	r2, #0
 80024d2:	d0d1      	beq.n	8002478 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4970      	ldr	r1, [pc, #448]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 80024d6:	6920      	ldr	r0, [r4, #16]
 80024d8:	684a      	ldr	r2, [r1, #4]
 80024da:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80024de:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80024e2:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	e6b9      	b.n	800225a <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80024ee:	f7ff fad3 	bl	8001a98 <HAL_GetTick>
 80024f2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	0798      	lsls	r0, r3, #30
 80024f8:	d5b6      	bpl.n	8002468 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024fa:	f7ff facd 	bl	8001a98 <HAL_GetTick>
 80024fe:	eba0 0008 	sub.w	r0, r0, r8
 8002502:	2802      	cmp	r0, #2
 8002504:	d9f6      	bls.n	80024f4 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 8002506:	2003      	movs	r0, #3
}
 8002508:	b003      	add	sp, #12
 800250a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250e:	4a62      	ldr	r2, [pc, #392]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 8002510:	6813      	ldr	r3, [r2, #0]
 8002512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002518:	f7ff fabe 	bl	8001a98 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8002698 <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 8002520:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	e004      	b.n	800252e <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff fab8 	bl	8001a98 <HAL_GetTick>
 8002528:	1bc0      	subs	r0, r0, r7
 800252a:	2864      	cmp	r0, #100	; 0x64
 800252c:	d8eb      	bhi.n	8002506 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252e:	f8d8 3000 	ldr.w	r3, [r8]
 8002532:	039b      	lsls	r3, r3, #14
 8002534:	d5f6      	bpl.n	8002524 <HAL_RCC_OscConfig+0x39c>
 8002536:	e753      	b.n	80023e0 <HAL_RCC_OscConfig+0x258>
      pll_config = RCC->PLLCFGR;
 8002538:	4e57      	ldr	r6, [pc, #348]	; (8002698 <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 800253c:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	f003 0103 	and.w	r1, r3, #3
 8002542:	4291      	cmp	r1, r2
 8002544:	f000 80ed 	beq.w	8002722 <HAL_RCC_OscConfig+0x59a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002548:	2d0c      	cmp	r5, #12
 800254a:	d095      	beq.n	8002478 <HAL_RCC_OscConfig+0x2f0>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800254c:	4d52      	ldr	r5, [pc, #328]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 800254e:	682b      	ldr	r3, [r5, #0]
 8002550:	015f      	lsls	r7, r3, #5
 8002552:	d491      	bmi.n	8002478 <HAL_RCC_OscConfig+0x2f0>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	00de      	lsls	r6, r3, #3
 8002558:	d48e      	bmi.n	8002478 <HAL_RCC_OscConfig+0x2f0>
            __HAL_RCC_PLL_DISABLE();
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002560:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002562:	f7ff fa99 	bl	8001a98 <HAL_GetTick>
 8002566:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002568:	e004      	b.n	8002574 <HAL_RCC_OscConfig+0x3ec>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7ff fa95 	bl	8001a98 <HAL_GetTick>
 800256e:	1b80      	subs	r0, r0, r6
 8002570:	2802      	cmp	r0, #2
 8002572:	d8c8      	bhi.n	8002506 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	0198      	lsls	r0, r3, #6
 8002578:	d4f7      	bmi.n	800256a <HAL_RCC_OscConfig+0x3e2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257a:	68e9      	ldr	r1, [r5, #12]
 800257c:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <HAL_RCC_OscConfig+0x520>)
 800257e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002580:	6b20      	ldr	r0, [r4, #48]	; 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002582:	4e45      	ldr	r6, [pc, #276]	; (8002698 <HAL_RCC_OscConfig+0x510>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002584:	400b      	ands	r3, r1
 8002586:	4313      	orrs	r3, r2
 8002588:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 800258c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002590:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8002594:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8002598:	3801      	subs	r0, #1
 800259a:	0849      	lsrs	r1, r1, #1
 800259c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80025a0:	3901      	subs	r1, #1
 80025a2:	0852      	lsrs	r2, r2, #1
 80025a4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80025a8:	3a01      	subs	r2, #1
 80025aa:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80025ae:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b6:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b8:	68eb      	ldr	r3, [r5, #12]
 80025ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025be:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80025c0:	f7ff fa6a 	bl	8001a98 <HAL_GetTick>
 80025c4:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c6:	e004      	b.n	80025d2 <HAL_RCC_OscConfig+0x44a>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7ff fa66 	bl	8001a98 <HAL_GetTick>
 80025cc:	1b00      	subs	r0, r0, r4
 80025ce:	2802      	cmp	r0, #2
 80025d0:	d899      	bhi.n	8002506 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d2:	6833      	ldr	r3, [r6, #0]
 80025d4:	0199      	lsls	r1, r3, #6
 80025d6:	d5f7      	bpl.n	80025c8 <HAL_RCC_OscConfig+0x440>
  return HAL_OK;
 80025d8:	2000      	movs	r0, #0
 80025da:	e74e      	b.n	800247a <HAL_RCC_OscConfig+0x2f2>
    FlagStatus       pwrclkchanged = RESET;
 80025dc:	2600      	movs	r6, #0
 80025de:	e669      	b.n	80022b4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80025e0:	6833      	ldr	r3, [r6, #0]
 80025e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80025e8:	f7ff fa56 	bl	8001a98 <HAL_GetTick>
 80025ec:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ee:	e004      	b.n	80025fa <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f0:	f7ff fa52 	bl	8001a98 <HAL_GetTick>
 80025f4:	1bc0      	subs	r0, r0, r7
 80025f6:	2802      	cmp	r0, #2
 80025f8:	d885      	bhi.n	8002506 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fa:	6833      	ldr	r3, [r6, #0]
 80025fc:	0558      	lsls	r0, r3, #21
 80025fe:	d4f7      	bmi.n	80025f0 <HAL_RCC_OscConfig+0x468>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	e62a      	b.n	800225a <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	4a24      	ldr	r2, [pc, #144]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 8002606:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002612:	f7ff fa41 	bl	8001a98 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002698 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 800261a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002620:	e005      	b.n	800262e <HAL_RCC_OscConfig+0x4a6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7ff fa39 	bl	8001a98 <HAL_GetTick>
 8002626:	1bc0      	subs	r0, r0, r7
 8002628:	4548      	cmp	r0, r9
 800262a:	f63f af6c 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262e:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8002632:	079b      	lsls	r3, r3, #30
 8002634:	d5f5      	bpl.n	8002622 <HAL_RCC_OscConfig+0x49a>
    if(pwrclkchanged == SET)
 8002636:	2e00      	cmp	r6, #0
 8002638:	f43f ae6c 	beq.w	8002314 <HAL_RCC_OscConfig+0x18c>
 800263c:	e04a      	b.n	80026d4 <HAL_RCC_OscConfig+0x54c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800263e:	f7ff fd07 	bl	8002050 <RCC_SetFlashLatencyFromMSIRange>
 8002642:	2800      	cmp	r0, #0
 8002644:	f47f af18 	bne.w	8002478 <HAL_RCC_OscConfig+0x2f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_OscConfig+0x510>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f042 0208 	orr.w	r2, r2, #8
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	6a21      	ldr	r1, [r4, #32]
 8002656:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	69e1      	ldr	r1, [r4, #28]
 8002662:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002666:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	e6e9      	b.n	8002442 <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 800266e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800267a:	f7ff fa0d 	bl	8001a98 <HAL_GetTick>
 800267e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002680:	e005      	b.n	800268e <HAL_RCC_OscConfig+0x506>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002682:	f7ff fa09 	bl	8001a98 <HAL_GetTick>
 8002686:	1bc0      	subs	r0, r0, r7
 8002688:	2802      	cmp	r0, #2
 800268a:	f63f af3c 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800268e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002692:	079b      	lsls	r3, r3, #30
 8002694:	d4f5      	bmi.n	8002682 <HAL_RCC_OscConfig+0x4fa>
 8002696:	e659      	b.n	800234c <HAL_RCC_OscConfig+0x1c4>
 8002698:	40021000 	.word	0x40021000
 800269c:	08049cdc 	.word	0x08049cdc
 80026a0:	20000010 	.word	0x20000010
 80026a4:	20000008 	.word	0x20000008
 80026a8:	019d800c 	.word	0x019d800c
    return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
}
 80026ae:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80026b8:	f7ff f9ee 	bl	8001a98 <HAL_GetTick>
 80026bc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	05da      	lsls	r2, r3, #23
 80026c2:	f53f adfc 	bmi.w	80022be <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7ff f9e7 	bl	8001a98 <HAL_GetTick>
 80026ca:	eba0 0008 	sub.w	r0, r0, r8
 80026ce:	2802      	cmp	r0, #2
 80026d0:	d9f5      	bls.n	80026be <HAL_RCC_OscConfig+0x536>
 80026d2:	e718      	b.n	8002506 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <HAL_RCC_OscConfig+0x620>)
 80026d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
 80026de:	e619      	b.n	8002314 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026e0:	f7ff fcb6 	bl	8002050 <RCC_SetFlashLatencyFromMSIRange>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	f43f aeac 	beq.w	8002442 <HAL_RCC_OscConfig+0x2ba>
 80026ea:	e6c5      	b.n	8002478 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026f0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002702:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002704:	e708      	b.n	8002518 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_RCC_OscConfig+0x620>)
 8002708:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800270c:	f042 0204 	orr.w	r2, r2, #4
 8002710:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002714:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002720:	e777      	b.n	8002612 <HAL_RCC_OscConfig+0x48a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002722:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002724:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002728:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800272e:	f47f af0b 	bne.w	8002548 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002738:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800273c:	f47f af04 	bne.w	8002548 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002740:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002742:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002746:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800274a:	f47f aefd 	bne.w	8002548 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002750:	0852      	lsrs	r2, r2, #1
 8002752:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002756:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002758:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800275c:	f47f aef4 	bne.w	8002548 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002760:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002762:	0852      	lsrs	r2, r2, #1
 8002764:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002768:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800276e:	f47f aeeb 	bne.w	8002548 <HAL_RCC_OscConfig+0x3c0>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	6833      	ldr	r3, [r6, #0]
 8002774:	019a      	lsls	r2, r3, #6
 8002776:	f53f af2f 	bmi.w	80025d8 <HAL_RCC_OscConfig+0x450>
          __HAL_RCC_PLL_ENABLE();
 800277a:	6833      	ldr	r3, [r6, #0]
 800277c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002780:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002782:	68f3      	ldr	r3, [r6, #12]
 8002784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002788:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 800278a:	f7ff f985 	bl	8001a98 <HAL_GetTick>
 800278e:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002790:	e005      	b.n	800279e <HAL_RCC_OscConfig+0x616>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002792:	f7ff f981 	bl	8001a98 <HAL_GetTick>
 8002796:	1b00      	subs	r0, r0, r4
 8002798:	2802      	cmp	r0, #2
 800279a:	f63f aeb4 	bhi.w	8002506 <HAL_RCC_OscConfig+0x37e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	6833      	ldr	r3, [r6, #0]
 80027a0:	019b      	lsls	r3, r3, #6
 80027a2:	d5f6      	bpl.n	8002792 <HAL_RCC_OscConfig+0x60a>
 80027a4:	e718      	b.n	80025d8 <HAL_RCC_OscConfig+0x450>
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80027ac:	2800      	cmp	r0, #0
 80027ae:	f000 80cd 	beq.w	800294c <HAL_RCC_ClockConfig+0x1a0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b2:	4a8c      	ldr	r2, [pc, #560]	; (80029e4 <HAL_RCC_ClockConfig+0x238>)
{
 80027b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	6813      	ldr	r3, [r2, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	428b      	cmp	r3, r1
 80027c0:	460d      	mov	r5, r1
 80027c2:	4604      	mov	r4, r0
 80027c4:	d20c      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	f023 030f 	bic.w	r3, r3, #15
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d0:	6813      	ldr	r3, [r2, #0]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	428b      	cmp	r3, r1
 80027d8:	d002      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80027da:	2001      	movs	r0, #1
}
 80027dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	079e      	lsls	r6, r3, #30
 80027e4:	f140 8086 	bpl.w	80028f4 <HAL_RCC_ClockConfig+0x148>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027e8:	487f      	ldr	r0, [pc, #508]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 80027ea:	68a1      	ldr	r1, [r4, #8]
 80027ec:	6882      	ldr	r2, [r0, #8]
 80027ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80027f2:	4291      	cmp	r1, r2
 80027f4:	d904      	bls.n	8002800 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f6:	6882      	ldr	r2, [r0, #8]
 80027f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027fc:	430a      	orrs	r2, r1
 80027fe:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002800:	07da      	lsls	r2, r3, #31
 8002802:	f140 8091 	bpl.w	8002928 <HAL_RCC_ClockConfig+0x17c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002806:	6863      	ldr	r3, [r4, #4]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d078      	beq.n	80028fe <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280c:	2b02      	cmp	r3, #2
 800280e:	f000 8097 	beq.w	8002940 <HAL_RCC_ClockConfig+0x194>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 809e 	bne.w	8002954 <HAL_RCC_ClockConfig+0x1a8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800281c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	079b      	lsls	r3, r3, #30
 8002824:	d5d9      	bpl.n	80027da <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002826:	f7ff fc55 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800282a:	4b70      	ldr	r3, [pc, #448]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 800282c:	4298      	cmp	r0, r3
 800282e:	d905      	bls.n	800283c <HAL_RCC_ClockConfig+0x90>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002830:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8002838:	f000 8092 	beq.w	8002960 <HAL_RCC_ClockConfig+0x1b4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800283c:	6863      	ldr	r3, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800283e:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4e69      	ldr	r6, [pc, #420]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 8002844:	68b2      	ldr	r2, [r6, #8]
 8002846:	f022 0203 	bic.w	r2, r2, #3
 800284a:	4313      	orrs	r3, r2
 800284c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800284e:	f7ff f923 	bl	8001a98 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002852:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002856:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002858:	e004      	b.n	8002864 <HAL_RCC_ClockConfig+0xb8>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285a:	f7ff f91d 	bl	8001a98 <HAL_GetTick>
 800285e:	1bc0      	subs	r0, r0, r7
 8002860:	4540      	cmp	r0, r8
 8002862:	d875      	bhi.n	8002950 <HAL_RCC_ClockConfig+0x1a4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002864:	68b3      	ldr	r3, [r6, #8]
 8002866:	6862      	ldr	r2, [r4, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002870:	d1f3      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
  if(hpre == RCC_SYSCLK_DIV2)
 8002872:	f1b9 0f00 	cmp.w	r9, #0
 8002876:	d003      	beq.n	8002880 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002878:	68b3      	ldr	r3, [r6, #8]
 800287a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800287e:	60b3      	str	r3, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	079e      	lsls	r6, r3, #30
 8002884:	d44f      	bmi.n	8002926 <HAL_RCC_ClockConfig+0x17a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002886:	4957      	ldr	r1, [pc, #348]	; (80029e4 <HAL_RCC_ClockConfig+0x238>)
 8002888:	680a      	ldr	r2, [r1, #0]
 800288a:	f002 020f 	and.w	r2, r2, #15
 800288e:	42aa      	cmp	r2, r5
 8002890:	d909      	bls.n	80028a6 <HAL_RCC_ClockConfig+0xfa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	680a      	ldr	r2, [r1, #0]
 8002894:	f022 020f 	bic.w	r2, r2, #15
 8002898:	432a      	orrs	r2, r5
 800289a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289c:	680a      	ldr	r2, [r1, #0]
 800289e:	f002 020f 	and.w	r2, r2, #15
 80028a2:	42aa      	cmp	r2, r5
 80028a4:	d199      	bne.n	80027da <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	075d      	lsls	r5, r3, #29
 80028a8:	d506      	bpl.n	80028b8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028aa:	494f      	ldr	r1, [pc, #316]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 80028ac:	68e0      	ldr	r0, [r4, #12]
 80028ae:	688a      	ldr	r2, [r1, #8]
 80028b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028b4:	4302      	orrs	r2, r0
 80028b6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b8:	0718      	lsls	r0, r3, #28
 80028ba:	d507      	bpl.n	80028cc <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028bc:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 80028be:	6921      	ldr	r1, [r4, #16]
 80028c0:	6893      	ldr	r3, [r2, #8]
 80028c2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80028c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028cc:	f7ff fc02 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 80028d0:	4a45      	ldr	r2, [pc, #276]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 80028d2:	4c47      	ldr	r4, [pc, #284]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80028d4:	6892      	ldr	r2, [r2, #8]
 80028d6:	4947      	ldr	r1, [pc, #284]	; (80029f4 <HAL_RCC_ClockConfig+0x248>)
 80028d8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80028dc:	4603      	mov	r3, r0
 80028de:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80028e0:	4845      	ldr	r0, [pc, #276]	; (80029f8 <HAL_RCC_ClockConfig+0x24c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e2:	f002 021f 	and.w	r2, r2, #31
 80028e6:	40d3      	lsrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80028ea:	6800      	ldr	r0, [r0, #0]
}
 80028ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 80028f0:	f7ff b890 	b.w	8001a14 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f4:	07d9      	lsls	r1, r3, #31
 80028f6:	d5c6      	bpl.n	8002886 <HAL_RCC_ClockConfig+0xda>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f8:	6863      	ldr	r3, [r4, #4]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d186      	bne.n	800280c <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	4a3a      	ldr	r2, [pc, #232]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 8002900:	6811      	ldr	r1, [r2, #0]
 8002902:	0188      	lsls	r0, r1, #6
 8002904:	f57f af69 	bpl.w	80027da <HAL_RCC_ClockConfig+0x2e>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002908:	68d1      	ldr	r1, [r2, #12]
 800290a:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 800290e:	2902      	cmp	r1, #2
 8002910:	d063      	beq.n	80029da <HAL_RCC_ClockConfig+0x22e>
 8002912:	2903      	cmp	r1, #3
 8002914:	d02e      	beq.n	8002974 <HAL_RCC_ClockConfig+0x1c8>
 8002916:	2901      	cmp	r1, #1
 8002918:	d050      	beq.n	80029bc <HAL_RCC_ClockConfig+0x210>
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800291a:	68d1      	ldr	r1, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800291c:	68d1      	ldr	r1, [r2, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291e:	68d2      	ldr	r2, [r2, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002920:	f04f 0900 	mov.w	r9, #0
 8002924:	e78d      	b.n	8002842 <HAL_RCC_ClockConfig+0x96>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002926:	68a1      	ldr	r1, [r4, #8]
 8002928:	482f      	ldr	r0, [pc, #188]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 800292a:	6882      	ldr	r2, [r0, #8]
 800292c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002930:	428a      	cmp	r2, r1
 8002932:	d9a8      	bls.n	8002886 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002934:	6882      	ldr	r2, [r0, #8]
 8002936:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800293a:	4311      	orrs	r1, r2
 800293c:	6081      	str	r1, [r0, #8]
 800293e:	e7a2      	b.n	8002886 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	039a      	lsls	r2, r3, #14
 8002946:	f53f af6e 	bmi.w	8002826 <HAL_RCC_ClockConfig+0x7a>
 800294a:	e746      	b.n	80027da <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800294c:	2001      	movs	r0, #1
}
 800294e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002950:	2003      	movs	r0, #3
 8002952:	e743      	b.n	80027dc <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	055f      	lsls	r7, r3, #21
 800295a:	f57f af3e 	bpl.w	80027da <HAL_RCC_ClockConfig+0x2e>
 800295e:	e762      	b.n	8002826 <HAL_RCC_ClockConfig+0x7a>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002960:	689a      	ldr	r2, [r3, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002962:	f04f 0980 	mov.w	r9, #128	; 0x80
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002966:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800296a:	ea42 0209 	orr.w	r2, r2, r9
 800296e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002970:	6863      	ldr	r3, [r4, #4]
 8002972:	e766      	b.n	8002842 <HAL_RCC_ClockConfig+0x96>
  switch (pllsource)
 8002974:	4f21      	ldr	r7, [pc, #132]	; (80029fc <HAL_RCC_ClockConfig+0x250>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002976:	481c      	ldr	r0, [pc, #112]	; (80029e8 <HAL_RCC_ClockConfig+0x23c>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002978:	4e1c      	ldr	r6, [pc, #112]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800297a:	68c2      	ldr	r2, [r0, #12]
 800297c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002980:	1c51      	adds	r1, r2, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002982:	68c2      	ldr	r2, [r0, #12]
 8002984:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002988:	fb07 f202 	mul.w	r2, r7, r2
 800298c:	fbb2 f2f1 	udiv	r2, r2, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002990:	68c1      	ldr	r1, [r0, #12]
 8002992:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8002996:	3101      	adds	r1, #1
 8002998:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco / pllr;
 800299a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800299e:	42b2      	cmp	r2, r6
 80029a0:	d91d      	bls.n	80029de <HAL_RCC_ClockConfig+0x232>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029a2:	6882      	ldr	r2, [r0, #8]
 80029a4:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80029a8:	d119      	bne.n	80029de <HAL_RCC_ClockConfig+0x232>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029aa:	6882      	ldr	r2, [r0, #8]
 80029ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b4:	6082      	str	r2, [r0, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029b6:	f04f 0980 	mov.w	r9, #128	; 0x80
 80029ba:	e742      	b.n	8002842 <HAL_RCC_ClockConfig+0x96>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029bc:	6811      	ldr	r1, [r2, #0]
 80029be:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029c0:	bf54      	ite	pl
 80029c2:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c6:	6812      	ldrmi	r2, [r2, #0]
    pllvco = MSIRangeTable[msirange];
 80029c8:	490d      	ldr	r1, [pc, #52]	; (8002a00 <HAL_RCC_ClockConfig+0x254>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029ca:	bf54      	ite	pl
 80029cc:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029d0:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    pllvco = MSIRangeTable[msirange];
 80029d4:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
    break;
 80029d8:	e7cd      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ca>
    pllvco = HSI_VALUE;
 80029da:	4f0a      	ldr	r7, [pc, #40]	; (8002a04 <HAL_RCC_ClockConfig+0x258>)
 80029dc:	e7cb      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029de:	f04f 0900 	mov.w	r9, #0
 80029e2:	e72e      	b.n	8002842 <HAL_RCC_ClockConfig+0x96>
 80029e4:	40022000 	.word	0x40022000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	04c4b400 	.word	0x04c4b400
 80029f0:	08049cdc 	.word	0x08049cdc
 80029f4:	20000008 	.word	0x20000008
 80029f8:	20000010 	.word	0x20000010
 80029fc:	007a1200 	.word	0x007a1200
 8002a00:	08049cf4 	.word	0x08049cf4
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a0a:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002a0e:	4906      	ldr	r1, [pc, #24]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a10:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a14:	6808      	ldr	r0, [r1, #0]
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	f003 031f 	and.w	r3, r3, #31
}
 8002a1c:	40d8      	lsrs	r0, r3
 8002a1e:	4770      	bx	lr
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08049cec 	.word	0x08049cec
 8002a28:	20000008 	.word	0x20000008

08002a2c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a2e:	4a06      	ldr	r2, [pc, #24]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a30:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002a32:	4906      	ldr	r1, [pc, #24]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a34:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a38:	6808      	ldr	r0, [r1, #0]
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
}
 8002a40:	40d8      	lsrs	r0, r3
 8002a42:	4770      	bx	lr
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08049cec 	.word	0x08049cec
 8002a4c:	20000008 	.word	0x20000008

08002a50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a52:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <RCCEx_PLLSAI1_Config+0x114>)
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	0792      	lsls	r2, r2, #30
{
 8002a58:	4604      	mov	r4, r0
 8002a5a:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a5c:	d007      	beq.n	8002a6e <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	6802      	ldr	r2, [r0, #0]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d012      	beq.n	8002a90 <RCCEx_PLLSAI1_Config+0x40>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8002a6e:	6800      	ldr	r0, [r0, #0]
 8002a70:	2802      	cmp	r0, #2
 8002a72:	d04e      	beq.n	8002b12 <RCCEx_PLLSAI1_Config+0xc2>
 8002a74:	2803      	cmp	r0, #3
 8002a76:	d045      	beq.n	8002b04 <RCCEx_PLLSAI1_Config+0xb4>
 8002a78:	2801      	cmp	r0, #1
 8002a7a:	d1f6      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	079b      	lsls	r3, r3, #30
 8002a80:	d5f4      	bpl.n	8002a6c <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002a82:	4a38      	ldr	r2, [pc, #224]	; (8002b64 <RCCEx_PLLSAI1_Config+0x114>)
 8002a84:	68d3      	ldr	r3, [r2, #12]
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	4318      	orrs	r0, r3
 8002a8c:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 8002a8e:	e001      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0x44>
       ||
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ea      	beq.n	8002a6a <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a94:	4d33      	ldr	r5, [pc, #204]	; (8002b64 <RCCEx_PLLSAI1_Config+0x114>)
 8002a96:	682b      	ldr	r3, [r5, #0]
 8002a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a9c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002a9e:	f7fe fffb 	bl	8001a98 <HAL_GetTick>
 8002aa2:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aa4:	e004      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0x60>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa6:	f7fe fff7 	bl	8001a98 <HAL_GetTick>
 8002aaa:	1b83      	subs	r3, r0, r6
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d834      	bhi.n	8002b1a <RCCEx_PLLSAI1_Config+0xca>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ab0:	682b      	ldr	r3, [r5, #0]
 8002ab2:	011a      	lsls	r2, r3, #4
 8002ab4:	d4f7      	bmi.n	8002aa6 <RCCEx_PLLSAI1_Config+0x56>
      if(Divider == DIVIDER_P_UPDATE)
 8002ab6:	2f00      	cmp	r7, #0
 8002ab8:	d131      	bne.n	8002b1e <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aba:	68e3      	ldr	r3, [r4, #12]
 8002abc:	68a1      	ldr	r1, [r4, #8]
 8002abe:	692a      	ldr	r2, [r5, #16]
 8002ac0:	06db      	lsls	r3, r3, #27
 8002ac2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ac6:	4928      	ldr	r1, [pc, #160]	; (8002b68 <RCCEx_PLLSAI1_Config+0x118>)
 8002ac8:	4011      	ands	r1, r2
 8002aca:	6862      	ldr	r2, [r4, #4]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	3a01      	subs	r2, #1
 8002ad0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002ad4:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ad6:	4d23      	ldr	r5, [pc, #140]	; (8002b64 <RCCEx_PLLSAI1_Config+0x114>)
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ade:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ae0:	f7fe ffda 	bl	8001a98 <HAL_GetTick>
 8002ae4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae6:	e004      	b.n	8002af2 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae8:	f7fe ffd6 	bl	8001a98 <HAL_GetTick>
 8002aec:	1b83      	subs	r3, r0, r6
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d813      	bhi.n	8002b1a <RCCEx_PLLSAI1_Config+0xca>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002af2:	682b      	ldr	r3, [r5, #0]
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	d5f7      	bpl.n	8002ae8 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002af8:	692b      	ldr	r3, [r5, #16]
 8002afa:	69a2      	ldr	r2, [r4, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	2000      	movs	r0, #0
 8002b00:	612b      	str	r3, [r5, #16]
}
 8002b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	0395      	lsls	r5, r2, #14
 8002b08:	d4bb      	bmi.n	8002a82 <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0359      	lsls	r1, r3, #13
 8002b0e:	d5ac      	bpl.n	8002a6a <RCCEx_PLLSAI1_Config+0x1a>
 8002b10:	e7b7      	b.n	8002a82 <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	055e      	lsls	r6, r3, #21
 8002b16:	d5a8      	bpl.n	8002a6a <RCCEx_PLLSAI1_Config+0x1a>
 8002b18:	e7b3      	b.n	8002a82 <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8002b1a:	2003      	movs	r0, #3
}
 8002b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b1e:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b20:	692a      	ldr	r2, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b22:	d00f      	beq.n	8002b44 <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <RCCEx_PLLSAI1_Config+0x11c>)
 8002b26:	68a1      	ldr	r1, [r4, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	6862      	ldr	r2, [r4, #4]
 8002b2c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b30:	3a01      	subs	r2, #1
 8002b32:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002b36:	6962      	ldr	r2, [r4, #20]
 8002b38:	0852      	lsrs	r2, r2, #1
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002b40:	612b      	str	r3, [r5, #16]
 8002b42:	e7c8      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <RCCEx_PLLSAI1_Config+0x120>)
 8002b46:	68a1      	ldr	r1, [r4, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	6862      	ldr	r2, [r4, #4]
 8002b4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b50:	3a01      	subs	r2, #1
 8002b52:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002b56:	6922      	ldr	r2, [r4, #16]
 8002b58:	0852      	lsrs	r2, r2, #1
 8002b5a:	3a01      	subs	r2, #1
 8002b5c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002b60:	612b      	str	r3, [r5, #16]
 8002b62:	e7b8      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0x86>
 8002b64:	40021000 	.word	0x40021000
 8002b68:	07ff800f 	.word	0x07ff800f
 8002b6c:	f9ff800f 	.word	0xf9ff800f
 8002b70:	ff9f800f 	.word	0xff9f800f

08002b74 <RCCEx_PLLSAI2_Config.constprop.0>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	0792      	lsls	r2, r2, #30
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 8002b7a:	b570      	push	{r4, r5, r6, lr}
 8002b7c:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b7e:	d007      	beq.n	8002b90 <RCCEx_PLLSAI2_Config.constprop.0+0x1c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	6802      	ldr	r2, [r0, #0]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d012      	beq.n	8002bb2 <RCCEx_PLLSAI2_Config.constprop.0+0x3e>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b8c:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
    switch(PllSai2->PLLSAI2Source)
 8002b90:	6800      	ldr	r0, [r0, #0]
 8002b92:	2802      	cmp	r0, #2
 8002b94:	d04c      	beq.n	8002c30 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
 8002b96:	2803      	cmp	r0, #3
 8002b98:	d043      	beq.n	8002c22 <RCCEx_PLLSAI2_Config.constprop.0+0xae>
 8002b9a:	2801      	cmp	r0, #1
 8002b9c:	d1f6      	bne.n	8002b8c <RCCEx_PLLSAI2_Config.constprop.0+0x18>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	079b      	lsls	r3, r3, #30
 8002ba2:	d5f4      	bpl.n	8002b8e <RCCEx_PLLSAI2_Config.constprop.0+0x1a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002ba4:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8002ba6:	68d3      	ldr	r3, [r2, #12]
 8002ba8:	f023 0303 	bic.w	r3, r3, #3
 8002bac:	4318      	orrs	r0, r3
 8002bae:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 8002bb0:	e001      	b.n	8002bb6 <RCCEx_PLLSAI2_Config.constprop.0+0x42>
       ||
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0ea      	beq.n	8002b8c <RCCEx_PLLSAI2_Config.constprop.0+0x18>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bb6:	4c21      	ldr	r4, [pc, #132]	; (8002c3c <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002bc0:	f7fe ff6a 	bl	8001a98 <HAL_GetTick>
 8002bc4:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bc6:	e004      	b.n	8002bd2 <RCCEx_PLLSAI2_Config.constprop.0+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc8:	f7fe ff66 	bl	8001a98 <HAL_GetTick>
 8002bcc:	1b83      	subs	r3, r0, r6
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d832      	bhi.n	8002c38 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	d4f7      	bmi.n	8002bc8 <RCCEx_PLLSAI2_Config.constprop.0+0x54>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bd8:	68eb      	ldr	r3, [r5, #12]
 8002bda:	68a9      	ldr	r1, [r5, #8]
 8002bdc:	6962      	ldr	r2, [r4, #20]
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bde:	4e17      	ldr	r6, [pc, #92]	; (8002c3c <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be0:	06db      	lsls	r3, r3, #27
 8002be2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002be6:	4916      	ldr	r1, [pc, #88]	; (8002c40 <RCCEx_PLLSAI2_Config.constprop.0+0xcc>)
 8002be8:	4011      	ands	r1, r2
 8002bea:	686a      	ldr	r2, [r5, #4]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	3a01      	subs	r2, #1
 8002bf0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002bf4:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002bfe:	f7fe ff4b 	bl	8001a98 <HAL_GetTick>
 8002c02:	4604      	mov	r4, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c04:	e004      	b.n	8002c10 <RCCEx_PLLSAI2_Config.constprop.0+0x9c>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c06:	f7fe ff47 	bl	8001a98 <HAL_GetTick>
 8002c0a:	1b03      	subs	r3, r0, r4
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d813      	bhi.n	8002c38 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c10:	6833      	ldr	r3, [r6, #0]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	d5f7      	bpl.n	8002c06 <RCCEx_PLLSAI2_Config.constprop.0+0x92>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c16:	6973      	ldr	r3, [r6, #20]
 8002c18:	69aa      	ldr	r2, [r5, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	6173      	str	r3, [r6, #20]
}
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	0394      	lsls	r4, r2, #14
 8002c26:	d4bd      	bmi.n	8002ba4 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0359      	lsls	r1, r3, #13
 8002c2c:	d5ae      	bpl.n	8002b8c <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8002c2e:	e7b9      	b.n	8002ba4 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	055e      	lsls	r6, r3, #21
 8002c34:	d5aa      	bpl.n	8002b8c <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8002c36:	e7b5      	b.n	8002ba4 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        status = HAL_TIMEOUT;
 8002c38:	2003      	movs	r0, #3
}
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	07ff800f 	.word	0x07ff800f

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c48:	6803      	ldr	r3, [r0, #0]
 8002c4a:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 8002c4e:	b083      	sub	sp, #12
 8002c50:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c52:	d022      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c54:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8002c56:	2940      	cmp	r1, #64	; 0x40
 8002c58:	f000 8214 	beq.w	8003084 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002c5c:	d80f      	bhi.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002c5e:	2900      	cmp	r1, #0
 8002c60:	f000 81d4 	beq.w	800300c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8002c64:	2920      	cmp	r1, #32
 8002c66:	f040 8229 	bne.w	80030bc <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c6a:	3020      	adds	r0, #32
 8002c6c:	f7ff ff82 	bl	8002b74 <RCCEx_PLLSAI2_Config.constprop.0>
 8002c70:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002c72:	2e00      	cmp	r6, #0
 8002c74:	f040 81fd 	bne.w	8003072 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c78:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	e004      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c7e:	2960      	cmp	r1, #96	; 0x60
 8002c80:	d002      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c82:	2980      	cmp	r1, #128	; 0x80
 8002c84:	f040 821a 	bne.w	80030bc <HAL_RCCEx_PeriphCLKConfig+0x478>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c88:	48a9      	ldr	r0, [pc, #676]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c8a:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8002c8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c92:	4311      	orrs	r1, r2
 8002c94:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 8002c98:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c9a:	04da      	lsls	r2, r3, #19
 8002c9c:	f140 8135 	bpl.w	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002ca0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002ca2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002ca6:	f000 81e6 	beq.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002caa:	f200 8120 	bhi.w	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002cae:	2900      	cmp	r1, #0
 8002cb0:	f000 81b4 	beq.w	800301c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8002cb4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002cb8:	f040 8204 	bne.w	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cbc:	f104 0020 	add.w	r0, r4, #32
 8002cc0:	f7ff ff58 	bl	8002b74 <RCCEx_PLLSAI2_Config.constprop.0>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cc6:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8002cc8:	f1b8 0f00 	cmp.w	r8, #0
 8002ccc:	f040 811b 	bne.w	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cd0:	4997      	ldr	r1, [pc, #604]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cd2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002cd4:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002cd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cdc:	4302      	orrs	r2, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cde:	039f      	lsls	r7, r3, #14
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ce0:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce4:	f100 8115 	bmi.w	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce8:	07d8      	lsls	r0, r3, #31
 8002cea:	d508      	bpl.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cec:	4990      	ldr	r1, [pc, #576]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002cf0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cf4:	f022 0203 	bic.w	r2, r2, #3
 8002cf8:	4302      	orrs	r2, r0
 8002cfa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cfe:	0799      	lsls	r1, r3, #30
 8002d00:	d508      	bpl.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d02:	498b      	ldr	r1, [pc, #556]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002d06:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d0a:	f022 020c 	bic.w	r2, r2, #12
 8002d0e:	4302      	orrs	r2, r0
 8002d10:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d14:	075a      	lsls	r2, r3, #29
 8002d16:	d508      	bpl.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d18:	4985      	ldr	r1, [pc, #532]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d1a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002d1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d20:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002d24:	4302      	orrs	r2, r0
 8002d26:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d2a:	071f      	lsls	r7, r3, #28
 8002d2c:	d508      	bpl.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d2e:	4980      	ldr	r1, [pc, #512]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d30:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002d32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d36:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002d3a:	4302      	orrs	r2, r0
 8002d3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d40:	06dd      	lsls	r5, r3, #27
 8002d42:	d508      	bpl.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d44:	497a      	ldr	r1, [pc, #488]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d46:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002d48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d50:	4302      	orrs	r2, r0
 8002d52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d56:	0698      	lsls	r0, r3, #26
 8002d58:	d508      	bpl.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d5a:	4975      	ldr	r1, [pc, #468]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d5c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002d5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d66:	4302      	orrs	r2, r0
 8002d68:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d6c:	0599      	lsls	r1, r3, #22
 8002d6e:	d508      	bpl.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d70:	496f      	ldr	r1, [pc, #444]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d72:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002d74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d78:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002d7c:	4302      	orrs	r2, r0
 8002d7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d82:	055a      	lsls	r2, r3, #21
 8002d84:	d508      	bpl.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d86:	496a      	ldr	r1, [pc, #424]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d88:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002d8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d8e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002d92:	4302      	orrs	r2, r0
 8002d94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d98:	065f      	lsls	r7, r3, #25
 8002d9a:	d508      	bpl.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d9c:	4964      	ldr	r1, [pc, #400]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002da0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002da4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002da8:	4302      	orrs	r2, r0
 8002daa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dae:	061d      	lsls	r5, r3, #24
 8002db0:	d508      	bpl.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002db2:	495f      	ldr	r1, [pc, #380]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002db6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002dbe:	4302      	orrs	r2, r0
 8002dc0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dc4:	05d8      	lsls	r0, r3, #23
 8002dc6:	d508      	bpl.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc8:	4959      	ldr	r1, [pc, #356]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002dca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002dcc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dd0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002dd4:	4302      	orrs	r2, r0
 8002dd6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dda:	02d9      	lsls	r1, r3, #11
 8002ddc:	d508      	bpl.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dde:	4954      	ldr	r1, [pc, #336]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002de0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002de2:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002de6:	f022 0203 	bic.w	r2, r2, #3
 8002dea:	4302      	orrs	r2, r0
 8002dec:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002df0:	049a      	lsls	r2, r3, #18
 8002df2:	d510      	bpl.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df4:	494e      	ldr	r1, [pc, #312]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002df6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002df8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dfc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002e00:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e02:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e0a:	f000 8115 	beq.w	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e0e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002e12:	f000 813d 	beq.w	8003090 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e16:	031f      	lsls	r7, r3, #12
 8002e18:	d51a      	bpl.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e1a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002e1c:	4a44      	ldr	r2, [pc, #272]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e1e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002e22:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8002e26:	f000 810c 	beq.w	8003042 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8002e2a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002e2e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 8002e32:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8002e36:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8002e3a:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e3c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e40:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e44:	f040 80d2 	bne.w	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e48:	68d1      	ldr	r1, [r2, #12]
 8002e4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002e4e:	60d1      	str	r1, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e50:	035d      	lsls	r5, r3, #13
 8002e52:	d510      	bpl.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e54:	4936      	ldr	r1, [pc, #216]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e56:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002e58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e5c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002e60:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e62:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e6a:	f000 80f3 	beq.w	8003054 <HAL_RCCEx_PeriphCLKConfig+0x410>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e6e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002e72:	f000 8117 	beq.w	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e76:	0458      	lsls	r0, r3, #17
 8002e78:	d50d      	bpl.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e7a:	482d      	ldr	r0, [pc, #180]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e7c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002e80:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e88:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e8a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e8e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e92:	f000 80e4 	beq.w	800305e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e96:	03d9      	lsls	r1, r3, #15
 8002e98:	d509      	bpl.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e9c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002ea0:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002ea4:	f022 0204 	bic.w	r2, r2, #4
 8002ea8:	4302      	orrs	r2, r0
 8002eaa:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002eae:	029a      	lsls	r2, r3, #10
 8002eb0:	d509      	bpl.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002eb2:	491f      	ldr	r1, [pc, #124]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002eb4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002eb8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002ebc:	f022 0218 	bic.w	r2, r2, #24
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ec6:	01db      	lsls	r3, r3, #7
 8002ec8:	d50d      	bpl.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002eca:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ecc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002ed0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002ed4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002ed8:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002eda:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ede:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ee2:	f000 80a1 	beq.w	8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
}
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	b003      	add	sp, #12
 8002eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8002eee:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002ef2:	d003      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002ef4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002ef8:	f040 80e4 	bne.w	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002efc:	46b0      	mov	r8, r6
    if(ret == HAL_OK)
 8002efe:	f1b8 0f00 	cmp.w	r8, #0
 8002f02:	f43f aee5 	beq.w	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8002f06:	4646      	mov	r6, r8
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002f0a:	46b0      	mov	r8, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f0c:	039f      	lsls	r7, r3, #14
 8002f0e:	f57f aeeb 	bpl.w	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002f14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f16:	00d5      	lsls	r5, r2, #3
 8002f18:	d55c      	bpl.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f1e:	4d05      	ldr	r5, [pc, #20]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f26:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002f28:	f7fe fdb6 	bl	8001a98 <HAL_GetTick>
 8002f2c:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7fe fdae 	bl	8001a98 <HAL_GetTick>
 8002f3c:	1bc3      	subs	r3, r0, r7
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d862      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f42:	682b      	ldr	r3, [r5, #0]
 8002f44:	05d8      	lsls	r0, r3, #23
 8002f46:	d5f7      	bpl.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    if(ret == HAL_OK)
 8002f48:	f1b8 0f00 	cmp.w	r8, #0
 8002f4c:	f040 80b4 	bne.w	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f50:	4d5e      	ldr	r5, [pc, #376]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f52:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f56:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f5a:	d027      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002f5c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d025      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f64:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f68:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f74:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f80:	f421 7340 	bic.w	r3, r1, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f84:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8002f86:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f8a:	f140 8099 	bpl.w	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fd83 	bl	8001a98 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002f96:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f98:	e004      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fd7d 	bl	8001a98 <HAL_GetTick>
 8002f9e:	1bc0      	subs	r0, r0, r7
 8002fa0:	4540      	cmp	r0, r8
 8002fa2:	d831      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002fa8:	079b      	lsls	r3, r3, #30
 8002faa:	d5f6      	bpl.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x356>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002fb0:	4946      	ldr	r1, [pc, #280]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002fb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8002fc0:	f1b9 0f00 	cmp.w	r9, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc6:	4a41      	ldr	r2, [pc, #260]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	e689      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fda:	659a      	str	r2, [r3, #88]	; 0x58
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002fe6:	f04f 0901 	mov.w	r9, #1
 8002fea:	e798      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fec:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002ff0:	f47f af2e 	bne.w	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	1d20      	adds	r0, r4, #4
 8002ff8:	f7ff fd2a 	bl	8002a50 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ffc:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8002ffe:	2800      	cmp	r0, #0
 8003000:	f43f af26 	beq.w	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003004:	4606      	mov	r6, r0
 8003006:	e723      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        ret = HAL_TIMEOUT;
 8003008:	2603      	movs	r6, #3
 800300a:	e7d9      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800300c:	3004      	adds	r0, #4
 800300e:	f7ff fd1f 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 8003012:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003014:	2e00      	cmp	r6, #0
 8003016:	f43f ae2f 	beq.w	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800301a:	e02a      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800301c:	1d20      	adds	r0, r4, #4
 800301e:	f7ff fd17 	bl	8002a50 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003022:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003024:	4680      	mov	r8, r0
      break;
 8003026:	e64f      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003028:	68d3      	ldr	r3, [r2, #12]
}
 800302a:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800302c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003030:	60d3      	str	r3, [r2, #12]
}
 8003032:	b003      	add	sp, #12
 8003034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003038:	68ca      	ldr	r2, [r1, #12]
 800303a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800303e:	60ca      	str	r2, [r1, #12]
 8003040:	e6e9      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003042:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003046:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800304a:	68d1      	ldr	r1, [r2, #12]
 800304c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003050:	60d1      	str	r1, [r2, #12]
 8003052:	e6fd      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003054:	68ca      	ldr	r2, [r1, #12]
 8003056:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800305a:	60ca      	str	r2, [r1, #12]
 800305c:	e70b      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x232>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800305e:	2102      	movs	r1, #2
 8003060:	1d20      	adds	r0, r4, #4
 8003062:	f7ff fcf5 	bl	8002a50 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003066:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003068:	2800      	cmp	r0, #0
 800306a:	f43f af14 	beq.w	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x252>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800306e:	4606      	mov	r6, r0
 8003070:	e711      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x252>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	e611      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003076:	4915      	ldr	r1, [pc, #84]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003078:	68ca      	ldr	r2, [r1, #12]
 800307a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800307e:	60ca      	str	r2, [r1, #12]
      break;
 8003080:	46b0      	mov	r8, r6
 8003082:	e621      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003084:	4811      	ldr	r0, [pc, #68]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003086:	68c2      	ldr	r2, [r0, #12]
 8003088:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800308c:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 800308e:	e5fb      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003090:	2101      	movs	r1, #1
 8003092:	1d20      	adds	r0, r4, #4
 8003094:	f7ff fcdc 	bl	8002a50 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003098:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800309a:	2800      	cmp	r0, #0
 800309c:	f43f aebb 	beq.w	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030a0:	4606      	mov	r6, r0
 80030a2:	e6b8      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030a4:	2101      	movs	r1, #1
 80030a6:	1d20      	adds	r0, r4, #4
 80030a8:	f7ff fcd2 	bl	8002a50 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030ac:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80030ae:	2800      	cmp	r0, #0
 80030b0:	f43f aee1 	beq.w	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x232>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b4:	4606      	mov	r6, r0
 80030b6:	e6de      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80030b8:	4646      	mov	r6, r8
 80030ba:	e781      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80030bc:	2601      	movs	r6, #1
 80030be:	e5ec      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030c0:	4613      	mov	r3, r2
 80030c2:	e775      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80030c4:	2601      	movs	r6, #1
 80030c6:	46b0      	mov	r8, r6
 80030c8:	e720      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000

080030d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80030d4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d6:	6882      	ldr	r2, [r0, #8]
 80030d8:	6900      	ldr	r0, [r0, #16]
 80030da:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030dc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030de:	4302      	orrs	r2, r0
 80030e0:	430a      	orrs	r2, r1
 80030e2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e4:	49b3      	ldr	r1, [pc, #716]	; (80033b4 <UART_SetConfig+0x2e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e8:	4029      	ands	r1, r5
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68e1      	ldr	r1, [r4, #12]
 80030f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80030f6:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030f8:	49af      	ldr	r1, [pc, #700]	; (80033b8 <UART_SetConfig+0x2e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fa:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030fc:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030fe:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003100:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003102:	f000 8081 	beq.w	8003208 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 8003106:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003108:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800310c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8003110:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800311a:	f022 020f 	bic.w	r2, r2, #15
 800311e:	430a      	orrs	r2, r1
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003122:	4aa6      	ldr	r2, [pc, #664]	; (80033bc <UART_SetConfig+0x2ec>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d027      	beq.n	8003178 <UART_SetConfig+0xa8>
 8003128:	4aa5      	ldr	r2, [pc, #660]	; (80033c0 <UART_SetConfig+0x2f0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d04b      	beq.n	80031c6 <UART_SetConfig+0xf6>
 800312e:	4aa5      	ldr	r2, [pc, #660]	; (80033c4 <UART_SetConfig+0x2f4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	f000 8113 	beq.w	800335c <UART_SetConfig+0x28c>
 8003136:	4aa4      	ldr	r2, [pc, #656]	; (80033c8 <UART_SetConfig+0x2f8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	f000 80ba 	beq.w	80032b2 <UART_SetConfig+0x1e2>
 800313e:	4aa3      	ldr	r2, [pc, #652]	; (80033cc <UART_SetConfig+0x2fc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <UART_SetConfig+0x98>
 8003144:	4ba2      	ldr	r3, [pc, #648]	; (80033d0 <UART_SetConfig+0x300>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003152:	f000 8128 	beq.w	80033a6 <UART_SetConfig+0x2d6>
 8003156:	f200 80d7 	bhi.w	8003308 <UART_SetConfig+0x238>
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80db 	beq.w	8003316 <UART_SetConfig+0x246>
 8003160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003164:	f000 80b1 	beq.w	80032ca <UART_SetConfig+0x1fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8003168:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800316a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800316c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8003170:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8003174:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8003176:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003178:	4b95      	ldr	r3, [pc, #596]	; (80033d0 <UART_SetConfig+0x300>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	3b01      	subs	r3, #1
 8003184:	2b02      	cmp	r3, #2
 8003186:	f240 808e 	bls.w	80032a6 <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800318e:	f000 8105 	beq.w	800339c <UART_SetConfig+0x2cc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003192:	f7ff fc4b 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003196:	2800      	cmp	r0, #0
 8003198:	f000 80de 	beq.w	8003358 <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800319c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800319e:	6862      	ldr	r2, [r4, #4]
 80031a0:	4b8c      	ldr	r3, [pc, #560]	; (80033d4 <UART_SetConfig+0x304>)
 80031a2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80031a6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031aa:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ae:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80031b2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b6:	f1a3 0210 	sub.w	r2, r3, #16
 80031ba:	428a      	cmp	r2, r1
 80031bc:	d8d4      	bhi.n	8003168 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	2000      	movs	r0, #0
 80031c2:	60d3      	str	r3, [r2, #12]
 80031c4:	e7d1      	b.n	800316a <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031c6:	4b82      	ldr	r3, [pc, #520]	; (80033d0 <UART_SetConfig+0x300>)
 80031c8:	4a83      	ldr	r2, [pc, #524]	; (80033d8 <UART_SetConfig+0x308>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80031d8:	d07d      	beq.n	80032d6 <UART_SetConfig+0x206>
    switch (clocksource)
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d8c4      	bhi.n	8003168 <UART_SetConfig+0x98>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x114>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003311 	.word	0x08003311
 80031e8:	08003193 	.word	0x08003193
 80031ec:	08003393 	.word	0x08003393
 80031f0:	08003169 	.word	0x08003169
 80031f4:	080032d1 	.word	0x080032d1
 80031f8:	08003169 	.word	0x08003169
 80031fc:	08003169 	.word	0x08003169
 8003200:	08003169 	.word	0x08003169
 8003204:	08003383 	.word	0x08003383
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003208:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800320c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003218:	486d      	ldr	r0, [pc, #436]	; (80033d0 <UART_SetConfig+0x300>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800321a:	f022 020f 	bic.w	r2, r2, #15
 800321e:	430a      	orrs	r2, r1
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003222:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003226:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322e:	f000 80ae 	beq.w	800338e <UART_SetConfig+0x2be>
 8003232:	d80b      	bhi.n	800324c <UART_SetConfig+0x17c>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d039      	beq.n	80032ac <UART_SetConfig+0x1dc>
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d194      	bne.n	8003168 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 800323e:	f7fe ff49 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003242:	2800      	cmp	r0, #0
 8003244:	f000 8088 	beq.w	8003358 <UART_SetConfig+0x288>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003248:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800324a:	e004      	b.n	8003256 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003250:	d18a      	bne.n	8003168 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 8003252:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <UART_SetConfig+0x304>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003258:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800325a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800325e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003262:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8003266:	4299      	cmp	r1, r3
 8003268:	f63f af7e 	bhi.w	8003168 <UART_SetConfig+0x98>
 800326c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8003270:	f63f af7a 	bhi.w	8003168 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003274:	2300      	movs	r3, #0
 8003276:	4619      	mov	r1, r3
 8003278:	f7fd f812 	bl	80002a0 <__aeabi_uldivmod>
 800327c:	0209      	lsls	r1, r1, #8
 800327e:	0203      	lsls	r3, r0, #8
 8003280:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8003284:	0868      	lsrs	r0, r5, #1
 8003286:	1818      	adds	r0, r3, r0
 8003288:	462a      	mov	r2, r5
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	f141 0100 	adc.w	r1, r1, #0
 8003292:	f7fd f805 	bl	80002a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003296:	4a51      	ldr	r2, [pc, #324]	; (80033dc <UART_SetConfig+0x30c>)
 8003298:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800329c:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800329e:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032a0:	f63f af62 	bhi.w	8003168 <UART_SetConfig+0x98>
 80032a4:	e78b      	b.n	80031be <UART_SetConfig+0xee>
 80032a6:	4a4e      	ldr	r2, [pc, #312]	; (80033e0 <UART_SetConfig+0x310>)
 80032a8:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80032aa:	e793      	b.n	80031d4 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7ff fbac 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
        break;
 80032b0:	e7c7      	b.n	8003242 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <UART_SetConfig+0x300>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d072      	beq.n	80033a6 <UART_SetConfig+0x2d6>
 80032c0:	d862      	bhi.n	8003388 <UART_SetConfig+0x2b8>
 80032c2:	b343      	cbz	r3, 8003316 <UART_SetConfig+0x246>
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	f47f af4f 	bne.w	8003168 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80032ce:	d062      	beq.n	8003396 <UART_SetConfig+0x2c6>
        pclk = HAL_RCC_GetSysClockFreq();
 80032d0:	f7fe ff00 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
        break;
 80032d4:	e75f      	b.n	8003196 <UART_SetConfig+0xc6>
    switch (clocksource)
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	f63f af46 	bhi.w	8003168 <UART_SetConfig+0x98>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x214>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	0800331d 	.word	0x0800331d
 80032e8:	0800339d 	.word	0x0800339d
 80032ec:	080033a3 	.word	0x080033a3
 80032f0:	08003169 	.word	0x08003169
 80032f4:	08003397 	.word	0x08003397
 80032f8:	08003169 	.word	0x08003169
 80032fc:	08003169 	.word	0x08003169
 8003300:	08003169 	.word	0x08003169
 8003304:	08003325 	.word	0x08003325
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330c:	d036      	beq.n	800337c <UART_SetConfig+0x2ac>
 800330e:	e72b      	b.n	8003168 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7ff fb7a 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
        break;
 8003314:	e73f      	b.n	8003196 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003316:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800331a:	d1f9      	bne.n	8003310 <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7ff fb74 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003320:	b1d0      	cbz	r0, 8003358 <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003322:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003324:	6862      	ldr	r2, [r4, #4]
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <UART_SetConfig+0x304>)
 8003328:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800332c:	fbb0 f0f1 	udiv	r0, r0, r1
 8003330:	0853      	lsrs	r3, r2, #1
 8003332:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003336:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800333a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333e:	f1a0 0210 	sub.w	r2, r0, #16
 8003342:	429a      	cmp	r2, r3
 8003344:	f63f af10 	bhi.w	8003168 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003348:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800334c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800334e:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003350:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003354:	4318      	orrs	r0, r3
 8003356:	60d0      	str	r0, [r2, #12]
 8003358:	2000      	movs	r0, #0
 800335a:	e706      	b.n	800316a <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800335c:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <UART_SetConfig+0x300>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003366:	2b20      	cmp	r3, #32
 8003368:	d01d      	beq.n	80033a6 <UART_SetConfig+0x2d6>
 800336a:	d804      	bhi.n	8003376 <UART_SetConfig+0x2a6>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0d2      	beq.n	8003316 <UART_SetConfig+0x246>
 8003370:	2b10      	cmp	r3, #16
 8003372:	d0aa      	beq.n	80032ca <UART_SetConfig+0x1fa>
 8003374:	e6f8      	b.n	8003168 <UART_SetConfig+0x98>
 8003376:	2b30      	cmp	r3, #48	; 0x30
 8003378:	f47f aef6 	bne.w	8003168 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800337c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003380:	d0d0      	beq.n	8003324 <UART_SetConfig+0x254>
    switch (clocksource)
 8003382:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003386:	e70a      	b.n	800319e <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003388:	2bc0      	cmp	r3, #192	; 0xc0
 800338a:	d0f7      	beq.n	800337c <UART_SetConfig+0x2ac>
 800338c:	e6ec      	b.n	8003168 <UART_SetConfig+0x98>
 800338e:	4815      	ldr	r0, [pc, #84]	; (80033e4 <UART_SetConfig+0x314>)
 8003390:	e761      	b.n	8003256 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 8003392:	4814      	ldr	r0, [pc, #80]	; (80033e4 <UART_SetConfig+0x314>)
 8003394:	e703      	b.n	800319e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003396:	f7fe fe9d 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
        break;
 800339a:	e7c1      	b.n	8003320 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff fb46 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
        break;
 80033a0:	e7be      	b.n	8003320 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 80033a2:	4810      	ldr	r0, [pc, #64]	; (80033e4 <UART_SetConfig+0x314>)
 80033a4:	e7be      	b.n	8003324 <UART_SetConfig+0x254>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80033aa:	480e      	ldr	r0, [pc, #56]	; (80033e4 <UART_SetConfig+0x314>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ac:	f47f aef7 	bne.w	800319e <UART_SetConfig+0xce>
 80033b0:	e7b8      	b.n	8003324 <UART_SetConfig+0x254>
 80033b2:	bf00      	nop
 80033b4:	cfff69f3 	.word	0xcfff69f3
 80033b8:	40008000 	.word	0x40008000
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40004400 	.word	0x40004400
 80033c4:	40004800 	.word	0x40004800
 80033c8:	40004c00 	.word	0x40004c00
 80033cc:	40005000 	.word	0x40005000
 80033d0:	40021000 	.word	0x40021000
 80033d4:	08049d38 	.word	0x08049d38
 80033d8:	08049d28 	.word	0x08049d28
 80033dc:	000ffcff 	.word	0x000ffcff
 80033e0:	08049d24 	.word	0x08049d24
 80033e4:	00f42400 	.word	0x00f42400

080033e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80033ea:	07da      	lsls	r2, r3, #31
{
 80033ec:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ee:	d506      	bpl.n	80033fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033f0:	6801      	ldr	r1, [r0, #0]
 80033f2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80033f4:	684a      	ldr	r2, [r1, #4]
 80033f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80033fa:	4322      	orrs	r2, r4
 80033fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033fe:	079c      	lsls	r4, r3, #30
 8003400:	d506      	bpl.n	8003410 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003402:	6801      	ldr	r1, [r0, #0]
 8003404:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003406:	684a      	ldr	r2, [r1, #4]
 8003408:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800340c:	4322      	orrs	r2, r4
 800340e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003410:	0759      	lsls	r1, r3, #29
 8003412:	d506      	bpl.n	8003422 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003414:	6801      	ldr	r1, [r0, #0]
 8003416:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003418:	684a      	ldr	r2, [r1, #4]
 800341a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800341e:	4322      	orrs	r2, r4
 8003420:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003422:	071a      	lsls	r2, r3, #28
 8003424:	d506      	bpl.n	8003434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003426:	6801      	ldr	r1, [r0, #0]
 8003428:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800342a:	684a      	ldr	r2, [r1, #4]
 800342c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003430:	4322      	orrs	r2, r4
 8003432:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003434:	06dc      	lsls	r4, r3, #27
 8003436:	d506      	bpl.n	8003446 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003438:	6801      	ldr	r1, [r0, #0]
 800343a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800343c:	688a      	ldr	r2, [r1, #8]
 800343e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003442:	4322      	orrs	r2, r4
 8003444:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003446:	0699      	lsls	r1, r3, #26
 8003448:	d506      	bpl.n	8003458 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800344a:	6801      	ldr	r1, [r0, #0]
 800344c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800344e:	688a      	ldr	r2, [r1, #8]
 8003450:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003454:	4322      	orrs	r2, r4
 8003456:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003458:	065a      	lsls	r2, r3, #25
 800345a:	d509      	bpl.n	8003470 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800345c:	6801      	ldr	r1, [r0, #0]
 800345e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003460:	684a      	ldr	r2, [r1, #4]
 8003462:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003466:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003468:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800346c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800346e:	d00b      	beq.n	8003488 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	d506      	bpl.n	8003482 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003474:	6802      	ldr	r2, [r0, #0]
 8003476:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003478:	6853      	ldr	r3, [r2, #4]
 800347a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800347e:	430b      	orrs	r3, r1
 8003480:	6053      	str	r3, [r2, #4]
  }
}
 8003482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003486:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003488:	684a      	ldr	r2, [r1, #4]
 800348a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800348c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003490:	4322      	orrs	r2, r4
 8003492:	604a      	str	r2, [r1, #4]
 8003494:	e7ec      	b.n	8003470 <UART_AdvFeatureConfig+0x88>
 8003496:	bf00      	nop

08003498 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800349c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a0:	6804      	ldr	r4, [r0, #0]
{
 80034a2:	4607      	mov	r7, r0
 80034a4:	460e      	mov	r6, r1
 80034a6:	4615      	mov	r5, r2
 80034a8:	4699      	mov	r9, r3
 80034aa:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80034ae:	d10a      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b0:	69e3      	ldr	r3, [r4, #28]
 80034b2:	ea36 0303 	bics.w	r3, r6, r3
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	429d      	cmp	r5, r3
 80034be:	d0f7      	beq.n	80034b0 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80034c0:	2000      	movs	r0, #0
}
 80034c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c6:	69e3      	ldr	r3, [r4, #28]
 80034c8:	ea36 0303 	bics.w	r3, r6, r3
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	42ab      	cmp	r3, r5
 80034d4:	d1f4      	bne.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fe fadf 	bl	8001a98 <HAL_GetTick>
 80034da:	eba0 0009 	sub.w	r0, r0, r9
 80034de:	4540      	cmp	r0, r8
 80034e0:	d833      	bhi.n	800354a <UART_WaitOnFlagUntilTimeout+0xb2>
 80034e2:	f1b8 0f00 	cmp.w	r8, #0
 80034e6:	d030      	beq.n	800354a <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034e8:	683c      	ldr	r4, [r7, #0]
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	0759      	lsls	r1, r3, #29
 80034ee:	4622      	mov	r2, r4
 80034f0:	d5db      	bpl.n	80034aa <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f2:	69e3      	ldr	r3, [r4, #28]
 80034f4:	051b      	lsls	r3, r3, #20
 80034f6:	d5d8      	bpl.n	80034aa <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034fc:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003502:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	e844 3100 	strex	r1, r3, [r4]
 800350a:	b139      	cbz	r1, 800351c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	e852 3f00 	ldrex	r3, [r2]
 8003510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	e842 3100 	strex	r1, r3, [r2]
 8003518:	2900      	cmp	r1, #0
 800351a:	d1f7      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	f102 0308 	add.w	r3, r2, #8
 8003520:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003524:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	f102 0008 	add.w	r0, r2, #8
 800352c:	e840 3100 	strex	r1, r3, [r0]
 8003530:	2900      	cmp	r1, #0
 8003532:	d1f3      	bne.n	800351c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8003534:	2320      	movs	r3, #32
 8003536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800353a:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800353e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8003542:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8003548:	e7bb      	b.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x2a>
 800354a:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	e842 3100 	strex	r1, r3, [r2]
 8003558:	2900      	cmp	r1, #0
 800355a:	d1f7      	bne.n	800354c <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	f102 0308 	add.w	r3, r2, #8
 8003560:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003564:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	f102 0008 	add.w	r0, r2, #8
 800356c:	e840 3100 	strex	r1, r3, [r0]
 8003570:	2900      	cmp	r1, #0
 8003572:	d1f3      	bne.n	800355c <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8003574:	2320      	movs	r3, #32
 8003576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800357a:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800357e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8003582:	2003      	movs	r0, #3
 8003584:	e79d      	b.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x2a>
 8003586:	bf00      	nop

08003588 <HAL_UART_Transmit>:
{
 8003588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800358c:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800358e:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8003592:	2820      	cmp	r0, #32
{
 8003594:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003596:	f040 8090 	bne.w	80036ba <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 800359a:	4689      	mov	r9, r1
 800359c:	2900      	cmp	r1, #0
 800359e:	d048      	beq.n	8003632 <HAL_UART_Transmit+0xaa>
 80035a0:	4614      	mov	r4, r2
 80035a2:	2a00      	cmp	r2, #0
 80035a4:	d045      	beq.n	8003632 <HAL_UART_Transmit+0xaa>
 80035a6:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80035a8:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	f000 8084 	beq.w	80036ba <HAL_UART_Transmit+0x132>
 80035b2:	2301      	movs	r3, #1
 80035b4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035bc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 80035c6:	f7fe fa67 	bl	8001a98 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ca:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80035cc:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80035d4:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 80035d8:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035da:	d072      	beq.n	80036c2 <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 80035dc:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 80035e0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80035e2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80035e4:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80035e8:	b1b3      	cbz	r3, 8003618 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	682c      	ldr	r4, [r5, #0]
 80035ec:	1c71      	adds	r1, r6, #1
 80035ee:	d124      	bne.n	800363a <HAL_UART_Transmit+0xb2>
 80035f0:	69e2      	ldr	r2, [r4, #28]
 80035f2:	0612      	lsls	r2, r2, #24
 80035f4:	d5fc      	bpl.n	80035f0 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 80035f6:	f1b9 0f00 	cmp.w	r9, #0
 80035fa:	d059      	beq.n	80036b0 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035fc:	f819 3b01 	ldrb.w	r3, [r9], #1
 8003600:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8003602:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003606:	3b01      	subs	r3, #1
 8003608:	b29b      	uxth	r3, r3
 800360a:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800360e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e9      	bne.n	80035ec <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003618:	9600      	str	r6, [sp, #0]
 800361a:	463b      	mov	r3, r7
 800361c:	2200      	movs	r2, #0
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	4628      	mov	r0, r5
 8003622:	f7ff ff39 	bl	8003498 <UART_WaitOnFlagUntilTimeout>
 8003626:	2800      	cmp	r0, #0
 8003628:	d171      	bne.n	800370e <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 800362a:	2320      	movs	r3, #32
 800362c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8003630:	e000      	b.n	8003634 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8003632:	2001      	movs	r0, #1
}
 8003634:	b003      	add	sp, #12
 8003636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363a:	69e3      	ldr	r3, [r4, #28]
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	d4da      	bmi.n	80035f6 <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003640:	f7fe fa2a 	bl	8001a98 <HAL_GetTick>
 8003644:	1bc0      	subs	r0, r0, r7
 8003646:	4286      	cmp	r6, r0
 8003648:	d341      	bcc.n	80036ce <HAL_UART_Transmit+0x146>
 800364a:	2e00      	cmp	r6, #0
 800364c:	d03f      	beq.n	80036ce <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800364e:	682c      	ldr	r4, [r5, #0]
 8003650:	6822      	ldr	r2, [r4, #0]
 8003652:	0752      	lsls	r2, r2, #29
 8003654:	4623      	mov	r3, r4
 8003656:	d5c9      	bpl.n	80035ec <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003658:	69e2      	ldr	r2, [r4, #28]
 800365a:	0510      	lsls	r0, r2, #20
 800365c:	d5c6      	bpl.n	80035ec <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800365e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003662:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003668:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	e844 2100 	strex	r1, r2, [r4]
 8003670:	b139      	cbz	r1, 8003682 <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	e853 2f00 	ldrex	r2, [r3]
 8003676:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	e843 2100 	strex	r1, r2, [r3]
 800367e:	2900      	cmp	r1, #0
 8003680:	d1f7      	bne.n	8003672 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	f103 0208 	add.w	r2, r3, #8
 8003686:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	f103 0008 	add.w	r0, r3, #8
 8003692:	e840 2100 	strex	r1, r2, [r0]
 8003696:	2900      	cmp	r1, #0
 8003698:	d1f3      	bne.n	8003682 <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 800369a:	2320      	movs	r3, #32
 800369c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80036a0:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80036a4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 80036a8:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036aa:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 80036ae:	e7c1      	b.n	8003634 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036b0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80036b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b8:	e7a2      	b.n	8003600 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 80036ba:	2002      	movs	r0, #2
}
 80036bc:	b003      	add	sp, #12
 80036be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c2:	692b      	ldr	r3, [r5, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d189      	bne.n	80035dc <HAL_UART_Transmit+0x54>
 80036c8:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80036ca:	4699      	mov	r9, r3
 80036cc:	e786      	b.n	80035dc <HAL_UART_Transmit+0x54>
 80036ce:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	e843 2100 	strex	r1, r2, [r3]
 80036dc:	2900      	cmp	r1, #0
 80036de:	d1f7      	bne.n	80036d0 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	f103 0208 	add.w	r2, r3, #8
 80036e4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	f103 0008 	add.w	r0, r3, #8
 80036f0:	e840 2100 	strex	r1, r2, [r0]
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d1f3      	bne.n	80036e0 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 80036f8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80036fa:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80036fc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8003700:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003704:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8003708:	b003      	add	sp, #12
 800370a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800370e:	2003      	movs	r0, #3
 8003710:	e790      	b.n	8003634 <HAL_UART_Transmit+0xac>
 8003712:	bf00      	nop

08003714 <HAL_UART_Init>:
  if (huart == NULL)
 8003714:	2800      	cmp	r0, #0
 8003716:	d066      	beq.n	80037e6 <HAL_UART_Init+0xd2>
{
 8003718:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800371a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800371e:	b082      	sub	sp, #8
 8003720:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04c      	beq.n	80037c0 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8003726:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003728:	2324      	movs	r3, #36	; 0x24
 800372a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003734:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003736:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003738:	f7ff fcca 	bl	80030d0 <UART_SetConfig>
 800373c:	2801      	cmp	r0, #1
 800373e:	d03c      	beq.n	80037ba <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d135      	bne.n	80037b2 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800374e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003750:	6899      	ldr	r1, [r3, #8]
 8003752:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8003756:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003758:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800375c:	f041 0101 	orr.w	r1, r1, #1
 8003760:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003762:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8003766:	f7fe f997 	bl	8001a98 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8003770:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003772:	d40e      	bmi.n	8003792 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	075b      	lsls	r3, r3, #29
 8003778:	d427      	bmi.n	80037ca <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800377c:	2220      	movs	r2, #32
 800377e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003782:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003786:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800378a:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800378e:	b002      	add	sp, #8
 8003790:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003792:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	462a      	mov	r2, r5
 800379a:	4603      	mov	r3, r0
 800379c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff fe79 	bl	8003498 <UART_WaitOnFlagUntilTimeout>
 80037a6:	b9e0      	cbnz	r0, 80037e2 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	075b      	lsls	r3, r3, #29
 80037ae:	d40c      	bmi.n	80037ca <HAL_UART_Init+0xb6>
 80037b0:	e7e3      	b.n	800377a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80037b2:	4620      	mov	r0, r4
 80037b4:	f7ff fe18 	bl	80033e8 <UART_AdvFeatureConfig>
 80037b8:	e7c5      	b.n	8003746 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80037ba:	2001      	movs	r0, #1
}
 80037bc:	b002      	add	sp, #8
 80037be:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80037c0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80037c4:	f7fd ffc0 	bl	8001748 <HAL_UART_MspInit>
 80037c8:	e7ad      	b.n	8003726 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	2200      	movs	r2, #0
 80037d2:	4633      	mov	r3, r6
 80037d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037d8:	4620      	mov	r0, r4
 80037da:	f7ff fe5d 	bl	8003498 <UART_WaitOnFlagUntilTimeout>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d0cb      	beq.n	800377a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80037e2:	2003      	movs	r0, #3
 80037e4:	e7d3      	b.n	800378e <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80037e6:	2001      	movs	r0, #1
}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop

080037ec <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037ec:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d017      	beq.n	8003824 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037f4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80037f6:	2324      	movs	r3, #36	; 0x24
{
 80037f8:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80037fa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037fe:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003800:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003802:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8003804:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003808:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800380c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800380e:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003810:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003812:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8003816:	2220      	movs	r2, #32
 8003818:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800381c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8003820:	4618      	mov	r0, r3
}
 8003822:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003824:	2002      	movs	r0, #2
}
 8003826:	4770      	bx	lr

08003828 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003828:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800382c:	2a01      	cmp	r2, #1
 800382e:	d037      	beq.n	80038a0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003832:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003834:	2024      	movs	r0, #36	; 0x24
{
 8003836:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800383c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800383e:	6810      	ldr	r0, [r2, #0]
 8003840:	f020 0001 	bic.w	r0, r0, #1
 8003844:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003846:	6890      	ldr	r0, [r2, #8]
 8003848:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800384c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800384e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003850:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003852:	b310      	cbz	r0, 800389a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003854:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003856:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8003858:	4d12      	ldr	r5, [pc, #72]	; (80038a4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800385a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800385e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003862:	4911      	ldr	r1, [pc, #68]	; (80038a8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8003864:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003868:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800386c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003870:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003874:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003876:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003878:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800387c:	fbb1 f1f5 	udiv	r1, r1, r5
 8003880:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8003884:	2100      	movs	r1, #0
 8003886:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800388a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800388c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800388e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8003892:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8003894:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8003898:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800389a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800389c:	4608      	mov	r0, r1
 800389e:	e7ef      	b.n	8003880 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80038a0:	2002      	movs	r0, #2
}
 80038a2:	4770      	bx	lr
 80038a4:	08049d50 	.word	0x08049d50
 80038a8:	08049d58 	.word	0x08049d58

080038ac <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80038ac:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80038b0:	2a01      	cmp	r2, #1
 80038b2:	d037      	beq.n	8003924 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80038b4:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038b6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80038b8:	2024      	movs	r0, #36	; 0x24
{
 80038ba:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80038bc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038c0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80038c2:	6810      	ldr	r0, [r2, #0]
 80038c4:	f020 0001 	bic.w	r0, r0, #1
 80038c8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038ca:	6890      	ldr	r0, [r2, #8]
 80038cc:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80038d0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038d2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038d4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038d6:	b310      	cbz	r0, 800391e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038d8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038da:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80038dc:	4d12      	ldr	r5, [pc, #72]	; (8003928 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038de:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038e2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038e6:	4911      	ldr	r1, [pc, #68]	; (800392c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80038e8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038ec:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80038f0:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80038f4:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038f8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038fa:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038fc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003900:	fbb1 f1f5 	udiv	r1, r1, r5
 8003904:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8003908:	2100      	movs	r1, #0
 800390a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800390e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003910:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8003912:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8003916:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8003918:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800391c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800391e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8003920:	4608      	mov	r0, r1
 8003922:	e7ef      	b.n	8003904 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8003924:	2002      	movs	r0, #2
}
 8003926:	4770      	bx	lr
 8003928:	08049d50 	.word	0x08049d50
 800392c:	08049d58 	.word	0x08049d58

08003930 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003930:	b084      	sub	sp, #16
 8003932:	4684      	mov	ip, r0
 8003934:	b082      	sub	sp, #8
 8003936:	a803      	add	r0, sp, #12
 8003938:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800393c:	f8dc 300c 	ldr.w	r3, [ip, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <USB_CoreInit+0x8c>)
  __IO uint32_t count = 0U;
 8003942:	2100      	movs	r1, #0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003948:	f8cc 300c 	str.w	r3, [ip, #12]
  __IO uint32_t count = 0U;
 800394c:	9101      	str	r1, [sp, #4]
 800394e:	e003      	b.n	8003958 <USB_CoreInit+0x28>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003950:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db1a      	blt.n	800398e <USB_CoreInit+0x5e>
    count++;
 8003958:	9b01      	ldr	r3, [sp, #4]
 800395a:	3301      	adds	r3, #1
 800395c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800395e:	9b01      	ldr	r3, [sp, #4]
 8003960:	4293      	cmp	r3, r2
 8003962:	d9f5      	bls.n	8003950 <USB_CoreInit+0x20>
      return HAL_TIMEOUT;
 8003964:	2003      	movs	r0, #3
  if (cfg.battery_charging_enable == 0U)
 8003966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003968:	b943      	cbnz	r3, 800397c <USB_CoreInit+0x4c>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800396a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800396e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003972:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 8003976:	b002      	add	sp, #8
 8003978:	b004      	add	sp, #16
 800397a:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800397c:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8003980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003984:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 8003988:	b002      	add	sp, #8
 800398a:	b004      	add	sp, #16
 800398c:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003992:	f8dc 3010 	ldr.w	r3, [ip, #16]

  do
  {
    count++;

    if (count > 200000U)
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <USB_CoreInit+0x8c>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	f8cc 3010 	str.w	r3, [ip, #16]
 80039a0:	e004      	b.n	80039ac <USB_CoreInit+0x7c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039a2:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80039a6:	f010 0001 	ands.w	r0, r0, #1
 80039aa:	d0dc      	beq.n	8003966 <USB_CoreInit+0x36>
    count++;
 80039ac:	9b01      	ldr	r3, [sp, #4]
 80039ae:	3301      	adds	r3, #1
 80039b0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80039b2:	9b01      	ldr	r3, [sp, #4]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d9f4      	bls.n	80039a2 <USB_CoreInit+0x72>
 80039b8:	e7d4      	b.n	8003964 <USB_CoreInit+0x34>
 80039ba:	bf00      	nop
 80039bc:	00030d40 	.word	0x00030d40

080039c0 <USB_DisableGlobalInt>:
{
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <USB_SetCurrentMode>:
{
 80039d0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039d2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80039d4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039d6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 80039da:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039dc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80039de:	d018      	beq.n	8003a12 <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 80039e0:	b9a9      	cbnz	r1, 8003a0e <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039e2:	68c3      	ldr	r3, [r0, #12]
 80039e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t ms = 0U;
 80039e8:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039ea:	60c3      	str	r3, [r0, #12]
 80039ec:	e001      	b.n	80039f2 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039ee:	2c32      	cmp	r4, #50	; 0x32
 80039f0:	d00d      	beq.n	8003a0e <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 80039f2:	2001      	movs	r0, #1
 80039f4:	f7fe f856 	bl	8001aa4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80039f8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039fa:	07db      	lsls	r3, r3, #31
      ms++;
 80039fc:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a00:	d4f5      	bmi.n	80039ee <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8003a02:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8003a06:	fab0 f080 	clz	r0, r0
 8003a0a:	0940      	lsrs	r0, r0, #5
}
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003a0e:	2001      	movs	r0, #1
}
 8003a10:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a12:	68c3      	ldr	r3, [r0, #12]
 8003a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  uint32_t ms = 0U;
 8003a18:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a1a:	60c3      	str	r3, [r0, #12]
 8003a1c:	e001      	b.n	8003a22 <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a1e:	2c32      	cmp	r4, #50	; 0x32
 8003a20:	d0f5      	beq.n	8003a0e <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7fe f83e 	bl	8001aa4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003a28:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a2a:	07da      	lsls	r2, r3, #31
      ms++;
 8003a2c:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a30:	d5f5      	bpl.n	8003a1e <USB_SetCurrentMode+0x4e>
    return HAL_ERROR;
 8003a32:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8003a36:	fab0 f080 	clz	r0, r0
 8003a3a:	0940      	lsrs	r0, r0, #5
 8003a3c:	e7e6      	b.n	8003a0c <USB_SetCurrentMode+0x3c>
 8003a3e:	bf00      	nop

08003a40 <USB_DevInit>:
{
 8003a40:	b084      	sub	sp, #16
 8003a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a46:	b083      	sub	sp, #12
 8003a48:	ac0b      	add	r4, sp, #44	; 0x2c
 8003a4a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003a4c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8003a56:	460c      	mov	r4, r1
 8003a58:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8003a5c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8003a60:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8003a64:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8003a68:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003a6c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8003a70:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8003a74:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8003a78:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8003a7c:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8003a80:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8003a84:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 8003a88:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8003a8c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8003a90:	2d00      	cmp	r5, #0
 8003a92:	f040 80a7 	bne.w	8003be4 <USB_DevInit+0x1a4>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a96:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003a9a:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003aa6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003aa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003aac:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003aae:	6803      	ldr	r3, [r0, #0]
 8003ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab4:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ab6:	6803      	ldr	r3, [r0, #0]
 8003ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abc:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c0 2e00 	str.w	r2, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ac4:	f8dc 3000 	ldr.w	r3, [ip]
 8003ac8:	f8cc 3000 	str.w	r3, [ip]
  USBx_DEVICE->DCFG |= speed;
 8003acc:	f8dc 3000 	ldr.w	r3, [ip]
 8003ad0:	f043 0303 	orr.w	r3, r3, #3
 8003ad4:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 8003ad8:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8003ada:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <USB_DevInit+0x1f8>)
 8003adc:	e003      	b.n	8003ae6 <USB_DevInit+0xa6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ade:	6903      	ldr	r3, [r0, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f2c0 8096 	blt.w	8003c12 <USB_DevInit+0x1d2>
    count++;
 8003ae6:	9b00      	ldr	r3, [sp, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8003aec:	9b00      	ldr	r3, [sp, #0]
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d9f5      	bls.n	8003ade <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 8003af2:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 8003af4:	2300      	movs	r3, #0
    if (count > 200000U)
 8003af6:	4a50      	ldr	r2, [pc, #320]	; (8003c38 <USB_DevInit+0x1f8>)
  __IO uint32_t count = 0U;
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	e002      	b.n	8003b02 <USB_DevInit+0xc2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003afc:	6903      	ldr	r3, [r0, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db77      	blt.n	8003bf2 <USB_DevInit+0x1b2>
    count++;
 8003b02:	9b01      	ldr	r3, [sp, #4]
 8003b04:	3301      	adds	r3, #1
 8003b06:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003b08:	9b01      	ldr	r3, [sp, #4]
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d9f6      	bls.n	8003afc <USB_DevInit+0xbc>
    ret = HAL_ERROR;
 8003b0e:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b16:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b1a:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b1e:	b1e4      	cbz	r4, 8003b5a <USB_DevInit+0x11a>
 8003b20:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b24:	4617      	mov	r7, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b26:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b2a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b2e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003b32:	e008      	b.n	8003b46 <USB_DevInit+0x106>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b34:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b36:	3201      	adds	r2, #1
 8003b38:	4294      	cmp	r4, r2
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b3a:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b3c:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b40:	f103 0320 	add.w	r3, r3, #32
 8003b44:	d030      	beq.n	8003ba8 <USB_DevInit+0x168>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b46:	681e      	ldr	r6, [r3, #0]
 8003b48:	2e00      	cmp	r6, #0
 8003b4a:	daf3      	bge.n	8003b34 <USB_DevInit+0xf4>
      if (i == 0U)
 8003b4c:	b112      	cbz	r2, 8003b54 <USB_DevInit+0x114>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b4e:	f8c3 8000 	str.w	r8, [r3]
 8003b52:	e7f0      	b.n	8003b36 <USB_DevInit+0xf6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b54:	f8c3 9000 	str.w	r9, [r3]
 8003b58:	e7ed      	b.n	8003b36 <USB_DevInit+0xf6>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b5a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8003b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b62:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8003b66:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b68:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8003b6c:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b6e:	6143      	str	r3, [r0, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b70:	6982      	ldr	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b72:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <USB_DevInit+0x1fc>)
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b74:	f042 0210 	orr.w	r2, r2, #16
 8003b78:	6182      	str	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b7a:	6982      	ldr	r2, [r0, #24]
 8003b7c:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8003b7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b80:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 8003b82:	b11a      	cbz	r2, 8003b8c <USB_DevInit+0x14c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b84:	6983      	ldr	r3, [r0, #24]
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003b8c:	2d01      	cmp	r5, #1
 8003b8e:	d105      	bne.n	8003b9c <USB_DevInit+0x15c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b90:	6983      	ldr	r3, [r0, #24]
 8003b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6183      	str	r3, [r0, #24]
}
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	b003      	add	sp, #12
 8003ba0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ba4:	b004      	add	sp, #16
 8003ba6:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bae:	4617      	mov	r7, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bb0:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bb4:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bb8:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003bbc:	e008      	b.n	8003bd0 <USB_DevInit+0x190>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bbe:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bc0:	3201      	adds	r2, #1
 8003bc2:	4294      	cmp	r4, r2
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bc4:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bc6:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bca:	f103 0320 	add.w	r3, r3, #32
 8003bce:	d0c4      	beq.n	8003b5a <USB_DevInit+0x11a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bd0:	681e      	ldr	r6, [r3, #0]
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	daf3      	bge.n	8003bbe <USB_DevInit+0x17e>
      if (i == 0U)
 8003bd6:	b112      	cbz	r2, 8003bde <USB_DevInit+0x19e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bd8:	f8c3 8000 	str.w	r8, [r3]
 8003bdc:	e7f0      	b.n	8003bc0 <USB_DevInit+0x180>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bde:	f8c3 9000 	str.w	r9, [r3]
 8003be2:	e7ed      	b.n	8003bc0 <USB_DevInit+0x180>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003be4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bea:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003bee:	6383      	str	r3, [r0, #56]	; 0x38
 8003bf0:	e765      	b.n	8003abe <USB_DevInit+0x7e>
  count = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bf6:	2310      	movs	r3, #16
    if (count > 200000U)
 8003bf8:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <USB_DevInit+0x1f8>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bfa:	6103      	str	r3, [r0, #16]
 8003bfc:	e002      	b.n	8003c04 <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bfe:	6903      	ldr	r3, [r0, #16]
 8003c00:	06db      	lsls	r3, r3, #27
 8003c02:	d585      	bpl.n	8003b10 <USB_DevInit+0xd0>
    count++;
 8003c04:	9b01      	ldr	r3, [sp, #4]
 8003c06:	3301      	adds	r3, #1
 8003c08:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003c0a:	9b01      	ldr	r3, [sp, #4]
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d9f6      	bls.n	8003bfe <USB_DevInit+0x1be>
 8003c10:	e77d      	b.n	8003b0e <USB_DevInit+0xce>
  count = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c16:	f44f 6384 	mov.w	r3, #1056	; 0x420
    if (count > 200000U)
 8003c1a:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <USB_DevInit+0x1f8>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c1c:	6103      	str	r3, [r0, #16]
 8003c1e:	e004      	b.n	8003c2a <USB_DevInit+0x1ea>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c20:	6901      	ldr	r1, [r0, #16]
 8003c22:	f011 0120 	ands.w	r1, r1, #32
 8003c26:	f43f af65 	beq.w	8003af4 <USB_DevInit+0xb4>
    count++;
 8003c2a:	9b00      	ldr	r3, [sp, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8003c30:	9b00      	ldr	r3, [sp, #0]
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d9f4      	bls.n	8003c20 <USB_DevInit+0x1e0>
 8003c36:	e75c      	b.n	8003af2 <USB_DevInit+0xb2>
 8003c38:	00030d40 	.word	0x00030d40
 8003c3c:	803c3800 	.word	0x803c3800

08003c40 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c40:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 8003c44:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c46:	f022 0203 	bic.w	r2, r2, #3
 8003c4a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c4e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003c52:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 8003c56:	f043 0302 	orr.w	r3, r3, #2
}
 8003c5a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c5c:	604b      	str	r3, [r1, #4]
}
 8003c5e:	4770      	bx	lr

08003c60 <__errno>:
 8003c60:	4b01      	ldr	r3, [pc, #4]	; (8003c68 <__errno+0x8>)
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000014 	.word	0x20000014

08003c6c <__libc_init_array>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	4d0d      	ldr	r5, [pc, #52]	; (8003ca4 <__libc_init_array+0x38>)
 8003c70:	4c0d      	ldr	r4, [pc, #52]	; (8003ca8 <__libc_init_array+0x3c>)
 8003c72:	1b64      	subs	r4, r4, r5
 8003c74:	10a4      	asrs	r4, r4, #2
 8003c76:	2600      	movs	r6, #0
 8003c78:	42a6      	cmp	r6, r4
 8003c7a:	d109      	bne.n	8003c90 <__libc_init_array+0x24>
 8003c7c:	4d0b      	ldr	r5, [pc, #44]	; (8003cac <__libc_init_array+0x40>)
 8003c7e:	4c0c      	ldr	r4, [pc, #48]	; (8003cb0 <__libc_init_array+0x44>)
 8003c80:	f000 fc8e 	bl	80045a0 <_init>
 8003c84:	1b64      	subs	r4, r4, r5
 8003c86:	10a4      	asrs	r4, r4, #2
 8003c88:	2600      	movs	r6, #0
 8003c8a:	42a6      	cmp	r6, r4
 8003c8c:	d105      	bne.n	8003c9a <__libc_init_array+0x2e>
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c94:	4798      	blx	r3
 8003c96:	3601      	adds	r6, #1
 8003c98:	e7ee      	b.n	8003c78 <__libc_init_array+0xc>
 8003c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9e:	4798      	blx	r3
 8003ca0:	3601      	adds	r6, #1
 8003ca2:	e7f2      	b.n	8003c8a <__libc_init_array+0x1e>
 8003ca4:	08049d9c 	.word	0x08049d9c
 8003ca8:	08049d9c 	.word	0x08049d9c
 8003cac:	08049d9c 	.word	0x08049d9c
 8003cb0:	08049da0 	.word	0x08049da0

08003cb4 <memcpy>:
 8003cb4:	440a      	add	r2, r1
 8003cb6:	4291      	cmp	r1, r2
 8003cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003cbc:	d100      	bne.n	8003cc0 <memcpy+0xc>
 8003cbe:	4770      	bx	lr
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cca:	4291      	cmp	r1, r2
 8003ccc:	d1f9      	bne.n	8003cc2 <memcpy+0xe>
 8003cce:	bd10      	pop	{r4, pc}

08003cd0 <memmove>:
 8003cd0:	4288      	cmp	r0, r1
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	eb01 0402 	add.w	r4, r1, r2
 8003cd8:	d902      	bls.n	8003ce0 <memmove+0x10>
 8003cda:	4284      	cmp	r4, r0
 8003cdc:	4623      	mov	r3, r4
 8003cde:	d807      	bhi.n	8003cf0 <memmove+0x20>
 8003ce0:	1e43      	subs	r3, r0, #1
 8003ce2:	42a1      	cmp	r1, r4
 8003ce4:	d008      	beq.n	8003cf8 <memmove+0x28>
 8003ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cee:	e7f8      	b.n	8003ce2 <memmove+0x12>
 8003cf0:	4402      	add	r2, r0
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	428a      	cmp	r2, r1
 8003cf6:	d100      	bne.n	8003cfa <memmove+0x2a>
 8003cf8:	bd10      	pop	{r4, pc}
 8003cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d02:	e7f7      	b.n	8003cf4 <memmove+0x24>

08003d04 <memset>:
 8003d04:	4402      	add	r2, r0
 8003d06:	4603      	mov	r3, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <siprintf>:
 8003d14:	b40e      	push	{r1, r2, r3}
 8003d16:	b500      	push	{lr}
 8003d18:	b09c      	sub	sp, #112	; 0x70
 8003d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d1c:	9002      	str	r0, [sp, #8]
 8003d1e:	9006      	str	r0, [sp, #24]
 8003d20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d24:	4809      	ldr	r0, [pc, #36]	; (8003d4c <siprintf+0x38>)
 8003d26:	9107      	str	r1, [sp, #28]
 8003d28:	9104      	str	r1, [sp, #16]
 8003d2a:	4909      	ldr	r1, [pc, #36]	; (8003d50 <siprintf+0x3c>)
 8003d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d30:	9105      	str	r1, [sp, #20]
 8003d32:	6800      	ldr	r0, [r0, #0]
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	a902      	add	r1, sp, #8
 8003d38:	f000 f868 	bl	8003e0c <_svfiprintf_r>
 8003d3c:	9b02      	ldr	r3, [sp, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	b01c      	add	sp, #112	; 0x70
 8003d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d48:	b003      	add	sp, #12
 8003d4a:	4770      	bx	lr
 8003d4c:	20000014 	.word	0x20000014
 8003d50:	ffff0208 	.word	0xffff0208

08003d54 <__ssputs_r>:
 8003d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d58:	688e      	ldr	r6, [r1, #8]
 8003d5a:	429e      	cmp	r6, r3
 8003d5c:	4682      	mov	sl, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	4690      	mov	r8, r2
 8003d62:	461f      	mov	r7, r3
 8003d64:	d838      	bhi.n	8003dd8 <__ssputs_r+0x84>
 8003d66:	898a      	ldrh	r2, [r1, #12]
 8003d68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d6c:	d032      	beq.n	8003dd4 <__ssputs_r+0x80>
 8003d6e:	6825      	ldr	r5, [r4, #0]
 8003d70:	6909      	ldr	r1, [r1, #16]
 8003d72:	eba5 0901 	sub.w	r9, r5, r1
 8003d76:	6965      	ldr	r5, [r4, #20]
 8003d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d80:	3301      	adds	r3, #1
 8003d82:	444b      	add	r3, r9
 8003d84:	106d      	asrs	r5, r5, #1
 8003d86:	429d      	cmp	r5, r3
 8003d88:	bf38      	it	cc
 8003d8a:	461d      	movcc	r5, r3
 8003d8c:	0553      	lsls	r3, r2, #21
 8003d8e:	d531      	bpl.n	8003df4 <__ssputs_r+0xa0>
 8003d90:	4629      	mov	r1, r5
 8003d92:	f000 fb3b 	bl	800440c <_malloc_r>
 8003d96:	4606      	mov	r6, r0
 8003d98:	b950      	cbnz	r0, 8003db0 <__ssputs_r+0x5c>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	f8ca 3000 	str.w	r3, [sl]
 8003da0:	89a3      	ldrh	r3, [r4, #12]
 8003da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da6:	81a3      	strh	r3, [r4, #12]
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db0:	6921      	ldr	r1, [r4, #16]
 8003db2:	464a      	mov	r2, r9
 8003db4:	f7ff ff7e 	bl	8003cb4 <memcpy>
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc2:	81a3      	strh	r3, [r4, #12]
 8003dc4:	6126      	str	r6, [r4, #16]
 8003dc6:	6165      	str	r5, [r4, #20]
 8003dc8:	444e      	add	r6, r9
 8003dca:	eba5 0509 	sub.w	r5, r5, r9
 8003dce:	6026      	str	r6, [r4, #0]
 8003dd0:	60a5      	str	r5, [r4, #8]
 8003dd2:	463e      	mov	r6, r7
 8003dd4:	42be      	cmp	r6, r7
 8003dd6:	d900      	bls.n	8003dda <__ssputs_r+0x86>
 8003dd8:	463e      	mov	r6, r7
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	4632      	mov	r2, r6
 8003dde:	4641      	mov	r1, r8
 8003de0:	f7ff ff76 	bl	8003cd0 <memmove>
 8003de4:	68a3      	ldr	r3, [r4, #8]
 8003de6:	1b9b      	subs	r3, r3, r6
 8003de8:	60a3      	str	r3, [r4, #8]
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	4433      	add	r3, r6
 8003dee:	6023      	str	r3, [r4, #0]
 8003df0:	2000      	movs	r0, #0
 8003df2:	e7db      	b.n	8003dac <__ssputs_r+0x58>
 8003df4:	462a      	mov	r2, r5
 8003df6:	f000 fb7d 	bl	80044f4 <_realloc_r>
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d1e1      	bne.n	8003dc4 <__ssputs_r+0x70>
 8003e00:	6921      	ldr	r1, [r4, #16]
 8003e02:	4650      	mov	r0, sl
 8003e04:	f000 fa96 	bl	8004334 <_free_r>
 8003e08:	e7c7      	b.n	8003d9a <__ssputs_r+0x46>
	...

08003e0c <_svfiprintf_r>:
 8003e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e10:	4698      	mov	r8, r3
 8003e12:	898b      	ldrh	r3, [r1, #12]
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	b09d      	sub	sp, #116	; 0x74
 8003e18:	4607      	mov	r7, r0
 8003e1a:	460d      	mov	r5, r1
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	d50e      	bpl.n	8003e3e <_svfiprintf_r+0x32>
 8003e20:	690b      	ldr	r3, [r1, #16]
 8003e22:	b963      	cbnz	r3, 8003e3e <_svfiprintf_r+0x32>
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	f000 faf1 	bl	800440c <_malloc_r>
 8003e2a:	6028      	str	r0, [r5, #0]
 8003e2c:	6128      	str	r0, [r5, #16]
 8003e2e:	b920      	cbnz	r0, 8003e3a <_svfiprintf_r+0x2e>
 8003e30:	230c      	movs	r3, #12
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e38:	e0d1      	b.n	8003fde <_svfiprintf_r+0x1d2>
 8003e3a:	2340      	movs	r3, #64	; 0x40
 8003e3c:	616b      	str	r3, [r5, #20]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9309      	str	r3, [sp, #36]	; 0x24
 8003e42:	2320      	movs	r3, #32
 8003e44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e4c:	2330      	movs	r3, #48	; 0x30
 8003e4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ff8 <_svfiprintf_r+0x1ec>
 8003e52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e56:	f04f 0901 	mov.w	r9, #1
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	469a      	mov	sl, r3
 8003e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e62:	b10a      	cbz	r2, 8003e68 <_svfiprintf_r+0x5c>
 8003e64:	2a25      	cmp	r2, #37	; 0x25
 8003e66:	d1f9      	bne.n	8003e5c <_svfiprintf_r+0x50>
 8003e68:	ebba 0b04 	subs.w	fp, sl, r4
 8003e6c:	d00b      	beq.n	8003e86 <_svfiprintf_r+0x7a>
 8003e6e:	465b      	mov	r3, fp
 8003e70:	4622      	mov	r2, r4
 8003e72:	4629      	mov	r1, r5
 8003e74:	4638      	mov	r0, r7
 8003e76:	f7ff ff6d 	bl	8003d54 <__ssputs_r>
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	f000 80aa 	beq.w	8003fd4 <_svfiprintf_r+0x1c8>
 8003e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e82:	445a      	add	r2, fp
 8003e84:	9209      	str	r2, [sp, #36]	; 0x24
 8003e86:	f89a 3000 	ldrb.w	r3, [sl]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80a2 	beq.w	8003fd4 <_svfiprintf_r+0x1c8>
 8003e90:	2300      	movs	r3, #0
 8003e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e9a:	f10a 0a01 	add.w	sl, sl, #1
 8003e9e:	9304      	str	r3, [sp, #16]
 8003ea0:	9307      	str	r3, [sp, #28]
 8003ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ea8:	4654      	mov	r4, sl
 8003eaa:	2205      	movs	r2, #5
 8003eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb0:	4851      	ldr	r0, [pc, #324]	; (8003ff8 <_svfiprintf_r+0x1ec>)
 8003eb2:	f7fc f9a5 	bl	8000200 <memchr>
 8003eb6:	9a04      	ldr	r2, [sp, #16]
 8003eb8:	b9d8      	cbnz	r0, 8003ef2 <_svfiprintf_r+0xe6>
 8003eba:	06d0      	lsls	r0, r2, #27
 8003ebc:	bf44      	itt	mi
 8003ebe:	2320      	movmi	r3, #32
 8003ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec4:	0711      	lsls	r1, r2, #28
 8003ec6:	bf44      	itt	mi
 8003ec8:	232b      	movmi	r3, #43	; 0x2b
 8003eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ece:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed4:	d015      	beq.n	8003f02 <_svfiprintf_r+0xf6>
 8003ed6:	9a07      	ldr	r2, [sp, #28]
 8003ed8:	4654      	mov	r4, sl
 8003eda:	2000      	movs	r0, #0
 8003edc:	f04f 0c0a 	mov.w	ip, #10
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ee6:	3b30      	subs	r3, #48	; 0x30
 8003ee8:	2b09      	cmp	r3, #9
 8003eea:	d94e      	bls.n	8003f8a <_svfiprintf_r+0x17e>
 8003eec:	b1b0      	cbz	r0, 8003f1c <_svfiprintf_r+0x110>
 8003eee:	9207      	str	r2, [sp, #28]
 8003ef0:	e014      	b.n	8003f1c <_svfiprintf_r+0x110>
 8003ef2:	eba0 0308 	sub.w	r3, r0, r8
 8003ef6:	fa09 f303 	lsl.w	r3, r9, r3
 8003efa:	4313      	orrs	r3, r2
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	46a2      	mov	sl, r4
 8003f00:	e7d2      	b.n	8003ea8 <_svfiprintf_r+0x9c>
 8003f02:	9b03      	ldr	r3, [sp, #12]
 8003f04:	1d19      	adds	r1, r3, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	9103      	str	r1, [sp, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bfbb      	ittet	lt
 8003f0e:	425b      	neglt	r3, r3
 8003f10:	f042 0202 	orrlt.w	r2, r2, #2
 8003f14:	9307      	strge	r3, [sp, #28]
 8003f16:	9307      	strlt	r3, [sp, #28]
 8003f18:	bfb8      	it	lt
 8003f1a:	9204      	strlt	r2, [sp, #16]
 8003f1c:	7823      	ldrb	r3, [r4, #0]
 8003f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f20:	d10c      	bne.n	8003f3c <_svfiprintf_r+0x130>
 8003f22:	7863      	ldrb	r3, [r4, #1]
 8003f24:	2b2a      	cmp	r3, #42	; 0x2a
 8003f26:	d135      	bne.n	8003f94 <_svfiprintf_r+0x188>
 8003f28:	9b03      	ldr	r3, [sp, #12]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	9203      	str	r2, [sp, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bfb8      	it	lt
 8003f34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f38:	3402      	adds	r4, #2
 8003f3a:	9305      	str	r3, [sp, #20]
 8003f3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004008 <_svfiprintf_r+0x1fc>
 8003f40:	7821      	ldrb	r1, [r4, #0]
 8003f42:	2203      	movs	r2, #3
 8003f44:	4650      	mov	r0, sl
 8003f46:	f7fc f95b 	bl	8000200 <memchr>
 8003f4a:	b140      	cbz	r0, 8003f5e <_svfiprintf_r+0x152>
 8003f4c:	2340      	movs	r3, #64	; 0x40
 8003f4e:	eba0 000a 	sub.w	r0, r0, sl
 8003f52:	fa03 f000 	lsl.w	r0, r3, r0
 8003f56:	9b04      	ldr	r3, [sp, #16]
 8003f58:	4303      	orrs	r3, r0
 8003f5a:	3401      	adds	r4, #1
 8003f5c:	9304      	str	r3, [sp, #16]
 8003f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f62:	4826      	ldr	r0, [pc, #152]	; (8003ffc <_svfiprintf_r+0x1f0>)
 8003f64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f68:	2206      	movs	r2, #6
 8003f6a:	f7fc f949 	bl	8000200 <memchr>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d038      	beq.n	8003fe4 <_svfiprintf_r+0x1d8>
 8003f72:	4b23      	ldr	r3, [pc, #140]	; (8004000 <_svfiprintf_r+0x1f4>)
 8003f74:	bb1b      	cbnz	r3, 8003fbe <_svfiprintf_r+0x1b2>
 8003f76:	9b03      	ldr	r3, [sp, #12]
 8003f78:	3307      	adds	r3, #7
 8003f7a:	f023 0307 	bic.w	r3, r3, #7
 8003f7e:	3308      	adds	r3, #8
 8003f80:	9303      	str	r3, [sp, #12]
 8003f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f84:	4433      	add	r3, r6
 8003f86:	9309      	str	r3, [sp, #36]	; 0x24
 8003f88:	e767      	b.n	8003e5a <_svfiprintf_r+0x4e>
 8003f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f8e:	460c      	mov	r4, r1
 8003f90:	2001      	movs	r0, #1
 8003f92:	e7a5      	b.n	8003ee0 <_svfiprintf_r+0xd4>
 8003f94:	2300      	movs	r3, #0
 8003f96:	3401      	adds	r4, #1
 8003f98:	9305      	str	r3, [sp, #20]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f04f 0c0a 	mov.w	ip, #10
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fa6:	3a30      	subs	r2, #48	; 0x30
 8003fa8:	2a09      	cmp	r2, #9
 8003faa:	d903      	bls.n	8003fb4 <_svfiprintf_r+0x1a8>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0c5      	beq.n	8003f3c <_svfiprintf_r+0x130>
 8003fb0:	9105      	str	r1, [sp, #20]
 8003fb2:	e7c3      	b.n	8003f3c <_svfiprintf_r+0x130>
 8003fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fb8:	4604      	mov	r4, r0
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e7f0      	b.n	8003fa0 <_svfiprintf_r+0x194>
 8003fbe:	ab03      	add	r3, sp, #12
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	462a      	mov	r2, r5
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <_svfiprintf_r+0x1f8>)
 8003fc6:	a904      	add	r1, sp, #16
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f3af 8000 	nop.w
 8003fce:	1c42      	adds	r2, r0, #1
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	d1d6      	bne.n	8003f82 <_svfiprintf_r+0x176>
 8003fd4:	89ab      	ldrh	r3, [r5, #12]
 8003fd6:	065b      	lsls	r3, r3, #25
 8003fd8:	f53f af2c 	bmi.w	8003e34 <_svfiprintf_r+0x28>
 8003fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fde:	b01d      	add	sp, #116	; 0x74
 8003fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe4:	ab03      	add	r3, sp, #12
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	462a      	mov	r2, r5
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <_svfiprintf_r+0x1f8>)
 8003fec:	a904      	add	r1, sp, #16
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f000 f87a 	bl	80040e8 <_printf_i>
 8003ff4:	e7eb      	b.n	8003fce <_svfiprintf_r+0x1c2>
 8003ff6:	bf00      	nop
 8003ff8:	08049d60 	.word	0x08049d60
 8003ffc:	08049d6a 	.word	0x08049d6a
 8004000:	00000000 	.word	0x00000000
 8004004:	08003d55 	.word	0x08003d55
 8004008:	08049d66 	.word	0x08049d66

0800400c <_printf_common>:
 800400c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	4616      	mov	r6, r2
 8004012:	4699      	mov	r9, r3
 8004014:	688a      	ldr	r2, [r1, #8]
 8004016:	690b      	ldr	r3, [r1, #16]
 8004018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800401c:	4293      	cmp	r3, r2
 800401e:	bfb8      	it	lt
 8004020:	4613      	movlt	r3, r2
 8004022:	6033      	str	r3, [r6, #0]
 8004024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004028:	4607      	mov	r7, r0
 800402a:	460c      	mov	r4, r1
 800402c:	b10a      	cbz	r2, 8004032 <_printf_common+0x26>
 800402e:	3301      	adds	r3, #1
 8004030:	6033      	str	r3, [r6, #0]
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	0699      	lsls	r1, r3, #26
 8004036:	bf42      	ittt	mi
 8004038:	6833      	ldrmi	r3, [r6, #0]
 800403a:	3302      	addmi	r3, #2
 800403c:	6033      	strmi	r3, [r6, #0]
 800403e:	6825      	ldr	r5, [r4, #0]
 8004040:	f015 0506 	ands.w	r5, r5, #6
 8004044:	d106      	bne.n	8004054 <_printf_common+0x48>
 8004046:	f104 0a19 	add.w	sl, r4, #25
 800404a:	68e3      	ldr	r3, [r4, #12]
 800404c:	6832      	ldr	r2, [r6, #0]
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	42ab      	cmp	r3, r5
 8004052:	dc26      	bgt.n	80040a2 <_printf_common+0x96>
 8004054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004058:	1e13      	subs	r3, r2, #0
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	bf18      	it	ne
 800405e:	2301      	movne	r3, #1
 8004060:	0692      	lsls	r2, r2, #26
 8004062:	d42b      	bmi.n	80040bc <_printf_common+0xb0>
 8004064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004068:	4649      	mov	r1, r9
 800406a:	4638      	mov	r0, r7
 800406c:	47c0      	blx	r8
 800406e:	3001      	adds	r0, #1
 8004070:	d01e      	beq.n	80040b0 <_printf_common+0xa4>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	68e5      	ldr	r5, [r4, #12]
 8004076:	6832      	ldr	r2, [r6, #0]
 8004078:	f003 0306 	and.w	r3, r3, #6
 800407c:	2b04      	cmp	r3, #4
 800407e:	bf08      	it	eq
 8004080:	1aad      	subeq	r5, r5, r2
 8004082:	68a3      	ldr	r3, [r4, #8]
 8004084:	6922      	ldr	r2, [r4, #16]
 8004086:	bf0c      	ite	eq
 8004088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800408c:	2500      	movne	r5, #0
 800408e:	4293      	cmp	r3, r2
 8004090:	bfc4      	itt	gt
 8004092:	1a9b      	subgt	r3, r3, r2
 8004094:	18ed      	addgt	r5, r5, r3
 8004096:	2600      	movs	r6, #0
 8004098:	341a      	adds	r4, #26
 800409a:	42b5      	cmp	r5, r6
 800409c:	d11a      	bne.n	80040d4 <_printf_common+0xc8>
 800409e:	2000      	movs	r0, #0
 80040a0:	e008      	b.n	80040b4 <_printf_common+0xa8>
 80040a2:	2301      	movs	r3, #1
 80040a4:	4652      	mov	r2, sl
 80040a6:	4649      	mov	r1, r9
 80040a8:	4638      	mov	r0, r7
 80040aa:	47c0      	blx	r8
 80040ac:	3001      	adds	r0, #1
 80040ae:	d103      	bne.n	80040b8 <_printf_common+0xac>
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b8:	3501      	adds	r5, #1
 80040ba:	e7c6      	b.n	800404a <_printf_common+0x3e>
 80040bc:	18e1      	adds	r1, r4, r3
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	2030      	movs	r0, #48	; 0x30
 80040c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c6:	4422      	add	r2, r4
 80040c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040d0:	3302      	adds	r3, #2
 80040d2:	e7c7      	b.n	8004064 <_printf_common+0x58>
 80040d4:	2301      	movs	r3, #1
 80040d6:	4622      	mov	r2, r4
 80040d8:	4649      	mov	r1, r9
 80040da:	4638      	mov	r0, r7
 80040dc:	47c0      	blx	r8
 80040de:	3001      	adds	r0, #1
 80040e0:	d0e6      	beq.n	80040b0 <_printf_common+0xa4>
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7d9      	b.n	800409a <_printf_common+0x8e>
	...

080040e8 <_printf_i>:
 80040e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	7e0f      	ldrb	r7, [r1, #24]
 80040ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040f0:	2f78      	cmp	r7, #120	; 0x78
 80040f2:	4691      	mov	r9, r2
 80040f4:	4680      	mov	r8, r0
 80040f6:	460c      	mov	r4, r1
 80040f8:	469a      	mov	sl, r3
 80040fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040fe:	d807      	bhi.n	8004110 <_printf_i+0x28>
 8004100:	2f62      	cmp	r7, #98	; 0x62
 8004102:	d80a      	bhi.n	800411a <_printf_i+0x32>
 8004104:	2f00      	cmp	r7, #0
 8004106:	f000 80d8 	beq.w	80042ba <_printf_i+0x1d2>
 800410a:	2f58      	cmp	r7, #88	; 0x58
 800410c:	f000 80a3 	beq.w	8004256 <_printf_i+0x16e>
 8004110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004118:	e03a      	b.n	8004190 <_printf_i+0xa8>
 800411a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800411e:	2b15      	cmp	r3, #21
 8004120:	d8f6      	bhi.n	8004110 <_printf_i+0x28>
 8004122:	a101      	add	r1, pc, #4	; (adr r1, 8004128 <_printf_i+0x40>)
 8004124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004128:	08004181 	.word	0x08004181
 800412c:	08004195 	.word	0x08004195
 8004130:	08004111 	.word	0x08004111
 8004134:	08004111 	.word	0x08004111
 8004138:	08004111 	.word	0x08004111
 800413c:	08004111 	.word	0x08004111
 8004140:	08004195 	.word	0x08004195
 8004144:	08004111 	.word	0x08004111
 8004148:	08004111 	.word	0x08004111
 800414c:	08004111 	.word	0x08004111
 8004150:	08004111 	.word	0x08004111
 8004154:	080042a1 	.word	0x080042a1
 8004158:	080041c5 	.word	0x080041c5
 800415c:	08004283 	.word	0x08004283
 8004160:	08004111 	.word	0x08004111
 8004164:	08004111 	.word	0x08004111
 8004168:	080042c3 	.word	0x080042c3
 800416c:	08004111 	.word	0x08004111
 8004170:	080041c5 	.word	0x080041c5
 8004174:	08004111 	.word	0x08004111
 8004178:	08004111 	.word	0x08004111
 800417c:	0800428b 	.word	0x0800428b
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	1d1a      	adds	r2, r3, #4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	602a      	str	r2, [r5, #0]
 8004188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800418c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004190:	2301      	movs	r3, #1
 8004192:	e0a3      	b.n	80042dc <_printf_i+0x1f4>
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	6829      	ldr	r1, [r5, #0]
 8004198:	0606      	lsls	r6, r0, #24
 800419a:	f101 0304 	add.w	r3, r1, #4
 800419e:	d50a      	bpl.n	80041b6 <_printf_i+0xce>
 80041a0:	680e      	ldr	r6, [r1, #0]
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	2e00      	cmp	r6, #0
 80041a6:	da03      	bge.n	80041b0 <_printf_i+0xc8>
 80041a8:	232d      	movs	r3, #45	; 0x2d
 80041aa:	4276      	negs	r6, r6
 80041ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b0:	485e      	ldr	r0, [pc, #376]	; (800432c <_printf_i+0x244>)
 80041b2:	230a      	movs	r3, #10
 80041b4:	e019      	b.n	80041ea <_printf_i+0x102>
 80041b6:	680e      	ldr	r6, [r1, #0]
 80041b8:	602b      	str	r3, [r5, #0]
 80041ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041be:	bf18      	it	ne
 80041c0:	b236      	sxthne	r6, r6
 80041c2:	e7ef      	b.n	80041a4 <_printf_i+0xbc>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	1d19      	adds	r1, r3, #4
 80041ca:	6029      	str	r1, [r5, #0]
 80041cc:	0601      	lsls	r1, r0, #24
 80041ce:	d501      	bpl.n	80041d4 <_printf_i+0xec>
 80041d0:	681e      	ldr	r6, [r3, #0]
 80041d2:	e002      	b.n	80041da <_printf_i+0xf2>
 80041d4:	0646      	lsls	r6, r0, #25
 80041d6:	d5fb      	bpl.n	80041d0 <_printf_i+0xe8>
 80041d8:	881e      	ldrh	r6, [r3, #0]
 80041da:	4854      	ldr	r0, [pc, #336]	; (800432c <_printf_i+0x244>)
 80041dc:	2f6f      	cmp	r7, #111	; 0x6f
 80041de:	bf0c      	ite	eq
 80041e0:	2308      	moveq	r3, #8
 80041e2:	230a      	movne	r3, #10
 80041e4:	2100      	movs	r1, #0
 80041e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ea:	6865      	ldr	r5, [r4, #4]
 80041ec:	60a5      	str	r5, [r4, #8]
 80041ee:	2d00      	cmp	r5, #0
 80041f0:	bfa2      	ittt	ge
 80041f2:	6821      	ldrge	r1, [r4, #0]
 80041f4:	f021 0104 	bicge.w	r1, r1, #4
 80041f8:	6021      	strge	r1, [r4, #0]
 80041fa:	b90e      	cbnz	r6, 8004200 <_printf_i+0x118>
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	d04d      	beq.n	800429c <_printf_i+0x1b4>
 8004200:	4615      	mov	r5, r2
 8004202:	fbb6 f1f3 	udiv	r1, r6, r3
 8004206:	fb03 6711 	mls	r7, r3, r1, r6
 800420a:	5dc7      	ldrb	r7, [r0, r7]
 800420c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004210:	4637      	mov	r7, r6
 8004212:	42bb      	cmp	r3, r7
 8004214:	460e      	mov	r6, r1
 8004216:	d9f4      	bls.n	8004202 <_printf_i+0x11a>
 8004218:	2b08      	cmp	r3, #8
 800421a:	d10b      	bne.n	8004234 <_printf_i+0x14c>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	07de      	lsls	r6, r3, #31
 8004220:	d508      	bpl.n	8004234 <_printf_i+0x14c>
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	6861      	ldr	r1, [r4, #4]
 8004226:	4299      	cmp	r1, r3
 8004228:	bfde      	ittt	le
 800422a:	2330      	movle	r3, #48	; 0x30
 800422c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004230:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004234:	1b52      	subs	r2, r2, r5
 8004236:	6122      	str	r2, [r4, #16]
 8004238:	f8cd a000 	str.w	sl, [sp]
 800423c:	464b      	mov	r3, r9
 800423e:	aa03      	add	r2, sp, #12
 8004240:	4621      	mov	r1, r4
 8004242:	4640      	mov	r0, r8
 8004244:	f7ff fee2 	bl	800400c <_printf_common>
 8004248:	3001      	adds	r0, #1
 800424a:	d14c      	bne.n	80042e6 <_printf_i+0x1fe>
 800424c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004250:	b004      	add	sp, #16
 8004252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004256:	4835      	ldr	r0, [pc, #212]	; (800432c <_printf_i+0x244>)
 8004258:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800425c:	6829      	ldr	r1, [r5, #0]
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	f851 6b04 	ldr.w	r6, [r1], #4
 8004264:	6029      	str	r1, [r5, #0]
 8004266:	061d      	lsls	r5, r3, #24
 8004268:	d514      	bpl.n	8004294 <_printf_i+0x1ac>
 800426a:	07df      	lsls	r7, r3, #31
 800426c:	bf44      	itt	mi
 800426e:	f043 0320 	orrmi.w	r3, r3, #32
 8004272:	6023      	strmi	r3, [r4, #0]
 8004274:	b91e      	cbnz	r6, 800427e <_printf_i+0x196>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f023 0320 	bic.w	r3, r3, #32
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	2310      	movs	r3, #16
 8004280:	e7b0      	b.n	80041e4 <_printf_i+0xfc>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	f043 0320 	orr.w	r3, r3, #32
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	2378      	movs	r3, #120	; 0x78
 800428c:	4828      	ldr	r0, [pc, #160]	; (8004330 <_printf_i+0x248>)
 800428e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004292:	e7e3      	b.n	800425c <_printf_i+0x174>
 8004294:	0659      	lsls	r1, r3, #25
 8004296:	bf48      	it	mi
 8004298:	b2b6      	uxthmi	r6, r6
 800429a:	e7e6      	b.n	800426a <_printf_i+0x182>
 800429c:	4615      	mov	r5, r2
 800429e:	e7bb      	b.n	8004218 <_printf_i+0x130>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	6826      	ldr	r6, [r4, #0]
 80042a4:	6961      	ldr	r1, [r4, #20]
 80042a6:	1d18      	adds	r0, r3, #4
 80042a8:	6028      	str	r0, [r5, #0]
 80042aa:	0635      	lsls	r5, r6, #24
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	d501      	bpl.n	80042b4 <_printf_i+0x1cc>
 80042b0:	6019      	str	r1, [r3, #0]
 80042b2:	e002      	b.n	80042ba <_printf_i+0x1d2>
 80042b4:	0670      	lsls	r0, r6, #25
 80042b6:	d5fb      	bpl.n	80042b0 <_printf_i+0x1c8>
 80042b8:	8019      	strh	r1, [r3, #0]
 80042ba:	2300      	movs	r3, #0
 80042bc:	6123      	str	r3, [r4, #16]
 80042be:	4615      	mov	r5, r2
 80042c0:	e7ba      	b.n	8004238 <_printf_i+0x150>
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	1d1a      	adds	r2, r3, #4
 80042c6:	602a      	str	r2, [r5, #0]
 80042c8:	681d      	ldr	r5, [r3, #0]
 80042ca:	6862      	ldr	r2, [r4, #4]
 80042cc:	2100      	movs	r1, #0
 80042ce:	4628      	mov	r0, r5
 80042d0:	f7fb ff96 	bl	8000200 <memchr>
 80042d4:	b108      	cbz	r0, 80042da <_printf_i+0x1f2>
 80042d6:	1b40      	subs	r0, r0, r5
 80042d8:	6060      	str	r0, [r4, #4]
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	2300      	movs	r3, #0
 80042e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042e4:	e7a8      	b.n	8004238 <_printf_i+0x150>
 80042e6:	6923      	ldr	r3, [r4, #16]
 80042e8:	462a      	mov	r2, r5
 80042ea:	4649      	mov	r1, r9
 80042ec:	4640      	mov	r0, r8
 80042ee:	47d0      	blx	sl
 80042f0:	3001      	adds	r0, #1
 80042f2:	d0ab      	beq.n	800424c <_printf_i+0x164>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	079b      	lsls	r3, r3, #30
 80042f8:	d413      	bmi.n	8004322 <_printf_i+0x23a>
 80042fa:	68e0      	ldr	r0, [r4, #12]
 80042fc:	9b03      	ldr	r3, [sp, #12]
 80042fe:	4298      	cmp	r0, r3
 8004300:	bfb8      	it	lt
 8004302:	4618      	movlt	r0, r3
 8004304:	e7a4      	b.n	8004250 <_printf_i+0x168>
 8004306:	2301      	movs	r3, #1
 8004308:	4632      	mov	r2, r6
 800430a:	4649      	mov	r1, r9
 800430c:	4640      	mov	r0, r8
 800430e:	47d0      	blx	sl
 8004310:	3001      	adds	r0, #1
 8004312:	d09b      	beq.n	800424c <_printf_i+0x164>
 8004314:	3501      	adds	r5, #1
 8004316:	68e3      	ldr	r3, [r4, #12]
 8004318:	9903      	ldr	r1, [sp, #12]
 800431a:	1a5b      	subs	r3, r3, r1
 800431c:	42ab      	cmp	r3, r5
 800431e:	dcf2      	bgt.n	8004306 <_printf_i+0x21e>
 8004320:	e7eb      	b.n	80042fa <_printf_i+0x212>
 8004322:	2500      	movs	r5, #0
 8004324:	f104 0619 	add.w	r6, r4, #25
 8004328:	e7f5      	b.n	8004316 <_printf_i+0x22e>
 800432a:	bf00      	nop
 800432c:	08049d71 	.word	0x08049d71
 8004330:	08049d82 	.word	0x08049d82

08004334 <_free_r>:
 8004334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004336:	2900      	cmp	r1, #0
 8004338:	d044      	beq.n	80043c4 <_free_r+0x90>
 800433a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800433e:	9001      	str	r0, [sp, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f1a1 0404 	sub.w	r4, r1, #4
 8004346:	bfb8      	it	lt
 8004348:	18e4      	addlt	r4, r4, r3
 800434a:	f000 f913 	bl	8004574 <__malloc_lock>
 800434e:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <_free_r+0x94>)
 8004350:	9801      	ldr	r0, [sp, #4]
 8004352:	6813      	ldr	r3, [r2, #0]
 8004354:	b933      	cbnz	r3, 8004364 <_free_r+0x30>
 8004356:	6063      	str	r3, [r4, #4]
 8004358:	6014      	str	r4, [r2, #0]
 800435a:	b003      	add	sp, #12
 800435c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004360:	f000 b90e 	b.w	8004580 <__malloc_unlock>
 8004364:	42a3      	cmp	r3, r4
 8004366:	d908      	bls.n	800437a <_free_r+0x46>
 8004368:	6825      	ldr	r5, [r4, #0]
 800436a:	1961      	adds	r1, r4, r5
 800436c:	428b      	cmp	r3, r1
 800436e:	bf01      	itttt	eq
 8004370:	6819      	ldreq	r1, [r3, #0]
 8004372:	685b      	ldreq	r3, [r3, #4]
 8004374:	1949      	addeq	r1, r1, r5
 8004376:	6021      	streq	r1, [r4, #0]
 8004378:	e7ed      	b.n	8004356 <_free_r+0x22>
 800437a:	461a      	mov	r2, r3
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	b10b      	cbz	r3, 8004384 <_free_r+0x50>
 8004380:	42a3      	cmp	r3, r4
 8004382:	d9fa      	bls.n	800437a <_free_r+0x46>
 8004384:	6811      	ldr	r1, [r2, #0]
 8004386:	1855      	adds	r5, r2, r1
 8004388:	42a5      	cmp	r5, r4
 800438a:	d10b      	bne.n	80043a4 <_free_r+0x70>
 800438c:	6824      	ldr	r4, [r4, #0]
 800438e:	4421      	add	r1, r4
 8004390:	1854      	adds	r4, r2, r1
 8004392:	42a3      	cmp	r3, r4
 8004394:	6011      	str	r1, [r2, #0]
 8004396:	d1e0      	bne.n	800435a <_free_r+0x26>
 8004398:	681c      	ldr	r4, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	6053      	str	r3, [r2, #4]
 800439e:	4421      	add	r1, r4
 80043a0:	6011      	str	r1, [r2, #0]
 80043a2:	e7da      	b.n	800435a <_free_r+0x26>
 80043a4:	d902      	bls.n	80043ac <_free_r+0x78>
 80043a6:	230c      	movs	r3, #12
 80043a8:	6003      	str	r3, [r0, #0]
 80043aa:	e7d6      	b.n	800435a <_free_r+0x26>
 80043ac:	6825      	ldr	r5, [r4, #0]
 80043ae:	1961      	adds	r1, r4, r5
 80043b0:	428b      	cmp	r3, r1
 80043b2:	bf04      	itt	eq
 80043b4:	6819      	ldreq	r1, [r3, #0]
 80043b6:	685b      	ldreq	r3, [r3, #4]
 80043b8:	6063      	str	r3, [r4, #4]
 80043ba:	bf04      	itt	eq
 80043bc:	1949      	addeq	r1, r1, r5
 80043be:	6021      	streq	r1, [r4, #0]
 80043c0:	6054      	str	r4, [r2, #4]
 80043c2:	e7ca      	b.n	800435a <_free_r+0x26>
 80043c4:	b003      	add	sp, #12
 80043c6:	bd30      	pop	{r4, r5, pc}
 80043c8:	20001514 	.word	0x20001514

080043cc <sbrk_aligned>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4e0e      	ldr	r6, [pc, #56]	; (8004408 <sbrk_aligned+0x3c>)
 80043d0:	460c      	mov	r4, r1
 80043d2:	6831      	ldr	r1, [r6, #0]
 80043d4:	4605      	mov	r5, r0
 80043d6:	b911      	cbnz	r1, 80043de <sbrk_aligned+0x12>
 80043d8:	f000 f8bc 	bl	8004554 <_sbrk_r>
 80043dc:	6030      	str	r0, [r6, #0]
 80043de:	4621      	mov	r1, r4
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 f8b7 	bl	8004554 <_sbrk_r>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	d00a      	beq.n	8004400 <sbrk_aligned+0x34>
 80043ea:	1cc4      	adds	r4, r0, #3
 80043ec:	f024 0403 	bic.w	r4, r4, #3
 80043f0:	42a0      	cmp	r0, r4
 80043f2:	d007      	beq.n	8004404 <sbrk_aligned+0x38>
 80043f4:	1a21      	subs	r1, r4, r0
 80043f6:	4628      	mov	r0, r5
 80043f8:	f000 f8ac 	bl	8004554 <_sbrk_r>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d101      	bne.n	8004404 <sbrk_aligned+0x38>
 8004400:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004404:	4620      	mov	r0, r4
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	20001518 	.word	0x20001518

0800440c <_malloc_r>:
 800440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004410:	1ccd      	adds	r5, r1, #3
 8004412:	f025 0503 	bic.w	r5, r5, #3
 8004416:	3508      	adds	r5, #8
 8004418:	2d0c      	cmp	r5, #12
 800441a:	bf38      	it	cc
 800441c:	250c      	movcc	r5, #12
 800441e:	2d00      	cmp	r5, #0
 8004420:	4607      	mov	r7, r0
 8004422:	db01      	blt.n	8004428 <_malloc_r+0x1c>
 8004424:	42a9      	cmp	r1, r5
 8004426:	d905      	bls.n	8004434 <_malloc_r+0x28>
 8004428:	230c      	movs	r3, #12
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	2600      	movs	r6, #0
 800442e:	4630      	mov	r0, r6
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004434:	4e2e      	ldr	r6, [pc, #184]	; (80044f0 <_malloc_r+0xe4>)
 8004436:	f000 f89d 	bl	8004574 <__malloc_lock>
 800443a:	6833      	ldr	r3, [r6, #0]
 800443c:	461c      	mov	r4, r3
 800443e:	bb34      	cbnz	r4, 800448e <_malloc_r+0x82>
 8004440:	4629      	mov	r1, r5
 8004442:	4638      	mov	r0, r7
 8004444:	f7ff ffc2 	bl	80043cc <sbrk_aligned>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	4604      	mov	r4, r0
 800444c:	d14d      	bne.n	80044ea <_malloc_r+0xde>
 800444e:	6834      	ldr	r4, [r6, #0]
 8004450:	4626      	mov	r6, r4
 8004452:	2e00      	cmp	r6, #0
 8004454:	d140      	bne.n	80044d8 <_malloc_r+0xcc>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	4631      	mov	r1, r6
 800445a:	4638      	mov	r0, r7
 800445c:	eb04 0803 	add.w	r8, r4, r3
 8004460:	f000 f878 	bl	8004554 <_sbrk_r>
 8004464:	4580      	cmp	r8, r0
 8004466:	d13a      	bne.n	80044de <_malloc_r+0xd2>
 8004468:	6821      	ldr	r1, [r4, #0]
 800446a:	3503      	adds	r5, #3
 800446c:	1a6d      	subs	r5, r5, r1
 800446e:	f025 0503 	bic.w	r5, r5, #3
 8004472:	3508      	adds	r5, #8
 8004474:	2d0c      	cmp	r5, #12
 8004476:	bf38      	it	cc
 8004478:	250c      	movcc	r5, #12
 800447a:	4629      	mov	r1, r5
 800447c:	4638      	mov	r0, r7
 800447e:	f7ff ffa5 	bl	80043cc <sbrk_aligned>
 8004482:	3001      	adds	r0, #1
 8004484:	d02b      	beq.n	80044de <_malloc_r+0xd2>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	442b      	add	r3, r5
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	e00e      	b.n	80044ac <_malloc_r+0xa0>
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	1b52      	subs	r2, r2, r5
 8004492:	d41e      	bmi.n	80044d2 <_malloc_r+0xc6>
 8004494:	2a0b      	cmp	r2, #11
 8004496:	d916      	bls.n	80044c6 <_malloc_r+0xba>
 8004498:	1961      	adds	r1, r4, r5
 800449a:	42a3      	cmp	r3, r4
 800449c:	6025      	str	r5, [r4, #0]
 800449e:	bf18      	it	ne
 80044a0:	6059      	strne	r1, [r3, #4]
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	bf08      	it	eq
 80044a6:	6031      	streq	r1, [r6, #0]
 80044a8:	5162      	str	r2, [r4, r5]
 80044aa:	604b      	str	r3, [r1, #4]
 80044ac:	4638      	mov	r0, r7
 80044ae:	f104 060b 	add.w	r6, r4, #11
 80044b2:	f000 f865 	bl	8004580 <__malloc_unlock>
 80044b6:	f026 0607 	bic.w	r6, r6, #7
 80044ba:	1d23      	adds	r3, r4, #4
 80044bc:	1af2      	subs	r2, r6, r3
 80044be:	d0b6      	beq.n	800442e <_malloc_r+0x22>
 80044c0:	1b9b      	subs	r3, r3, r6
 80044c2:	50a3      	str	r3, [r4, r2]
 80044c4:	e7b3      	b.n	800442e <_malloc_r+0x22>
 80044c6:	6862      	ldr	r2, [r4, #4]
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	bf0c      	ite	eq
 80044cc:	6032      	streq	r2, [r6, #0]
 80044ce:	605a      	strne	r2, [r3, #4]
 80044d0:	e7ec      	b.n	80044ac <_malloc_r+0xa0>
 80044d2:	4623      	mov	r3, r4
 80044d4:	6864      	ldr	r4, [r4, #4]
 80044d6:	e7b2      	b.n	800443e <_malloc_r+0x32>
 80044d8:	4634      	mov	r4, r6
 80044da:	6876      	ldr	r6, [r6, #4]
 80044dc:	e7b9      	b.n	8004452 <_malloc_r+0x46>
 80044de:	230c      	movs	r3, #12
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	4638      	mov	r0, r7
 80044e4:	f000 f84c 	bl	8004580 <__malloc_unlock>
 80044e8:	e7a1      	b.n	800442e <_malloc_r+0x22>
 80044ea:	6025      	str	r5, [r4, #0]
 80044ec:	e7de      	b.n	80044ac <_malloc_r+0xa0>
 80044ee:	bf00      	nop
 80044f0:	20001514 	.word	0x20001514

080044f4 <_realloc_r>:
 80044f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f8:	4680      	mov	r8, r0
 80044fa:	4614      	mov	r4, r2
 80044fc:	460e      	mov	r6, r1
 80044fe:	b921      	cbnz	r1, 800450a <_realloc_r+0x16>
 8004500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004504:	4611      	mov	r1, r2
 8004506:	f7ff bf81 	b.w	800440c <_malloc_r>
 800450a:	b92a      	cbnz	r2, 8004518 <_realloc_r+0x24>
 800450c:	f7ff ff12 	bl	8004334 <_free_r>
 8004510:	4625      	mov	r5, r4
 8004512:	4628      	mov	r0, r5
 8004514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004518:	f000 f838 	bl	800458c <_malloc_usable_size_r>
 800451c:	4284      	cmp	r4, r0
 800451e:	4607      	mov	r7, r0
 8004520:	d802      	bhi.n	8004528 <_realloc_r+0x34>
 8004522:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004526:	d812      	bhi.n	800454e <_realloc_r+0x5a>
 8004528:	4621      	mov	r1, r4
 800452a:	4640      	mov	r0, r8
 800452c:	f7ff ff6e 	bl	800440c <_malloc_r>
 8004530:	4605      	mov	r5, r0
 8004532:	2800      	cmp	r0, #0
 8004534:	d0ed      	beq.n	8004512 <_realloc_r+0x1e>
 8004536:	42bc      	cmp	r4, r7
 8004538:	4622      	mov	r2, r4
 800453a:	4631      	mov	r1, r6
 800453c:	bf28      	it	cs
 800453e:	463a      	movcs	r2, r7
 8004540:	f7ff fbb8 	bl	8003cb4 <memcpy>
 8004544:	4631      	mov	r1, r6
 8004546:	4640      	mov	r0, r8
 8004548:	f7ff fef4 	bl	8004334 <_free_r>
 800454c:	e7e1      	b.n	8004512 <_realloc_r+0x1e>
 800454e:	4635      	mov	r5, r6
 8004550:	e7df      	b.n	8004512 <_realloc_r+0x1e>
	...

08004554 <_sbrk_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4d06      	ldr	r5, [pc, #24]	; (8004570 <_sbrk_r+0x1c>)
 8004558:	2300      	movs	r3, #0
 800455a:	4604      	mov	r4, r0
 800455c:	4608      	mov	r0, r1
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	f7fd fa02 	bl	8001968 <_sbrk>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_sbrk_r+0x1a>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_sbrk_r+0x1a>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	2000151c 	.word	0x2000151c

08004574 <__malloc_lock>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__malloc_lock+0x8>)
 8004576:	f000 b811 	b.w	800459c <__retarget_lock_acquire_recursive>
 800457a:	bf00      	nop
 800457c:	20001520 	.word	0x20001520

08004580 <__malloc_unlock>:
 8004580:	4801      	ldr	r0, [pc, #4]	; (8004588 <__malloc_unlock+0x8>)
 8004582:	f000 b80c 	b.w	800459e <__retarget_lock_release_recursive>
 8004586:	bf00      	nop
 8004588:	20001520 	.word	0x20001520

0800458c <_malloc_usable_size_r>:
 800458c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004590:	1f18      	subs	r0, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	bfbc      	itt	lt
 8004596:	580b      	ldrlt	r3, [r1, r0]
 8004598:	18c0      	addlt	r0, r0, r3
 800459a:	4770      	bx	lr

0800459c <__retarget_lock_acquire_recursive>:
 800459c:	4770      	bx	lr

0800459e <__retarget_lock_release_recursive>:
 800459e:	4770      	bx	lr

080045a0 <_init>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr

080045ac <_fini>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr
