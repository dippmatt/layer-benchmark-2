
TinyEngineTemplateCleanR5Zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006594  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f7c  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a6d0  0801a6d0  00037870  2**0
                  CONTENTS
  4 .ARM          00000008  0801a6d0  0801a6d0  0002a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a6d8  0801a6d8  00037870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a6d8  0801a6d8  0002a6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a6dc  0801a6dc  0002a6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007870  20000000  0801a6e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ef64  20007870  08021f50  00037870  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200267d4  08021f50  000467d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035833  00000000  00000000  000378a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004558  00000000  00000000  0006d0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0003951c  00000000  00000000  0007162b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  000aab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006418  00000000  00000000  000ab878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf0e  00000000  00000000  000b1c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000294f2  00000000  00000000  000ddb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107cd2  00000000  00000000  00107090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0020ed62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c0c  00000000  00000000  0020edb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20007870 	.word	0x20007870
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800673c 	.word	0x0800673c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20007874 	.word	0x20007874
 80001fc:	0800673c 	.word	0x0800673c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <getInput>:
int32_t *int32ptr;
float *fptr,*fptr2,*fptr3;

signed char* getInput() {
    return &buffer0[16384];
}
 800096c:	4800      	ldr	r0, [pc, #0]	; (8000970 <getInput+0x4>)
 800096e:	4770      	bx	lr
 8000970:	2000b88c 	.word	0x2000b88c

08000974 <getOutput>:
signed char* getOutput() {
    return NNoutput;
}
 8000974:	4800      	ldr	r0, [pc, #0]	; (8000978 <getOutput+0x4>)
 8000976:	4770      	bx	lr
 8000978:	200078cc 	.word	0x200078cc

0800097c <invoke_inf>:
PROFILING_EVENT("Timestamp before layer 12:AVERAGE_POOL_2D 12");
avg_pooling(&buffer0[8192],8,8,64,8,8,1,1,-128,127,&buffer0[0]);
PROFILING_EVENT("Timestamp before layer 13:CONV_2D 13");
convolve_1x1_s8(&buffer0[64],1,1,64,(const q7_t*) weight9,bias9,shift9,multiplier9,24,128,-128,127,&buffer0[64],1,1,10,sbuf);
}
void invoke_inf(){
 800097c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
convolve_s8_kernel3_stride1_pad1(&buffer0[16384],32,32,3,(const q7_t*) weight0,bias0,shift0,multiplier0,-128,128,-128,127,&buffer0[0],32,32,16,sbuf,-128);
 8000980:	4ec3      	ldr	r6, [pc, #780]	; (8000c90 <invoke_inf+0x314>)
void invoke_inf(){
 8000982:	b093      	sub	sp, #76	; 0x4c
convolve_s8_kernel3_stride1_pad1(&buffer0[16384],32,32,3,(const q7_t*) weight0,bias0,shift0,multiplier0,-128,128,-128,127,&buffer0[0],32,32,16,sbuf,-128);
 8000984:	2710      	movs	r7, #16
 8000986:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 800098a:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
 800098e:	4bc1      	ldr	r3, [pc, #772]	; (8000c94 <invoke_inf+0x318>)
 8000990:	9303      	str	r3, [sp, #12]
 8000992:	4bc1      	ldr	r3, [pc, #772]	; (8000c98 <invoke_inf+0x31c>)
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	4bc1      	ldr	r3, [pc, #772]	; (8000c9c <invoke_inf+0x320>)
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 800099e:	2520      	movs	r5, #32
 80009a0:	f5a6 4880 	sub.w	r8, r6, #16384	; 0x4000
 80009a4:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
 80009a8:	4bbd      	ldr	r3, [pc, #756]	; (8000ca0 <invoke_inf+0x324>)
 80009aa:	940d      	str	r4, [sp, #52]	; 0x34
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 80009b2:	9406      	str	r4, [sp, #24]
 80009b4:	9404      	str	r4, [sp, #16]
 80009b6:	9205      	str	r2, [sp, #20]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	462a      	mov	r2, r5
 80009bc:	4629      	mov	r1, r5
 80009be:	f8cd 8020 	str.w	r8, [sp, #32]
 80009c2:	f8cd b01c 	str.w	fp, [sp, #28]
 80009c6:	2303      	movs	r3, #3
 80009c8:	4630      	mov	r0, r6
 80009ca:	f001 fbcf 	bl	800216c <convolve_s8_kernel3_stride1_pad1>
convolve_s8_kernel3_stride1_pad1(&buffer0[0],32,32,16,(const q7_t*) weight1,bias1,shift1,multiplier1,-128,128,-128,127,&buffer0[16384],32,32,16,sbuf,-128);
 80009ce:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 80009d2:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
 80009d6:	4bb3      	ldr	r3, [pc, #716]	; (8000ca4 <invoke_inf+0x328>)
 80009d8:	9303      	str	r3, [sp, #12]
 80009da:	4bb3      	ldr	r3, [pc, #716]	; (8000ca8 <invoke_inf+0x32c>)
 80009dc:	9302      	str	r3, [sp, #8]
 80009de:	4bb3      	ldr	r3, [pc, #716]	; (8000cac <invoke_inf+0x330>)
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	4bb2      	ldr	r3, [pc, #712]	; (8000cb0 <invoke_inf+0x334>)
 80009e6:	940d      	str	r4, [sp, #52]	; 0x34
 80009e8:	e9cd 4204 	strd	r4, r2, [sp, #16]
 80009ec:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 80009f0:	9406      	str	r4, [sp, #24]
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	462a      	mov	r2, r5
 80009f6:	463b      	mov	r3, r7
 80009f8:	4629      	mov	r1, r5
 80009fa:	e9cd b607 	strd	fp, r6, [sp, #28]
 80009fe:	4640      	mov	r0, r8
 8000a00:	f001 fbb4 	bl	800216c <convolve_s8_kernel3_stride1_pad1>
convolve_s8_kernel3_stride1_pad1(&buffer0[16384],32,32,16,(const q7_t*) weight2,bias2,shift2,multiplier2,4,128,-128,127,&buffer0[32768],32,32,16,sbuf,-128);
 8000a04:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8000a08:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
 8000a0c:	4ba9      	ldr	r3, [pc, #676]	; (8000cb4 <invoke_inf+0x338>)
 8000a0e:	9303      	str	r3, [sp, #12]
 8000a10:	4ba9      	ldr	r3, [pc, #676]	; (8000cb8 <invoke_inf+0x33c>)
 8000a12:	9302      	str	r3, [sp, #8]
 8000a14:	4ba9      	ldr	r3, [pc, #676]	; (8000cbc <invoke_inf+0x340>)
add_fpreq(16384, &buffer0[0],0.039393551647663116,-128,&buffer0[32768],0.10419496148824692,4,0.050945673137903214,-128,&buffer0[16384]);
 8000a16:	eddf 2aaa 	vldr	s5, [pc, #680]	; 8000cc0 <invoke_inf+0x344>
convolve_s8_kernel3_stride1_pad1(&buffer0[16384],32,32,16,(const q7_t*) weight2,bias2,shift2,multiplier2,4,128,-128,127,&buffer0[32768],32,32,16,sbuf,-128);
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	f506 4a80 	add.w	sl, r6, #16384	; 0x4000
 8000a20:	f04f 0904 	mov.w	r9, #4
 8000a24:	4ba7      	ldr	r3, [pc, #668]	; (8000cc4 <invoke_inf+0x348>)
 8000a26:	940d      	str	r4, [sp, #52]	; 0x34
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 8000a2e:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8000a32:	9205      	str	r2, [sp, #20]
 8000a34:	f8cd a020 	str.w	sl, [sp, #32]
 8000a38:	f8cd 9010 	str.w	r9, [sp, #16]
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	462a      	mov	r2, r5
 8000a40:	463b      	mov	r3, r7
 8000a42:	4629      	mov	r1, r5
 8000a44:	4630      	mov	r0, r6
add_fpreq(16384, &buffer0[0],0.039393551647663116,-128,&buffer0[32768],0.10419496148824692,4,0.050945673137903214,-128,&buffer0[16384]);
 8000a46:	edcd 2a11 	vstr	s5, [sp, #68]	; 0x44
convolve_s8_kernel3_stride1_pad1(&buffer0[16384],32,32,16,(const q7_t*) weight2,bias2,shift2,multiplier2,4,128,-128,127,&buffer0[32768],32,32,16,sbuf,-128);
 8000a4a:	f001 fb8f 	bl	800216c <convolve_s8_kernel3_stride1_pad1>
add_fpreq(16384, &buffer0[0],0.039393551647663116,-128,&buffer0[32768],0.10419496148824692,4,0.050945673137903214,-128,&buffer0[16384]);
 8000a4e:	eddd 2a11 	vldr	s5, [sp, #68]	; 0x44
 8000a52:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8000cc8 <invoke_inf+0x34c>
 8000a56:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 8000ccc <invoke_inf+0x350>
 8000a5a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8000cd0 <invoke_inf+0x354>
 8000a5e:	eef0 0a62 	vmov.f32	s1, s5
 8000a62:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8000a66:	4652      	mov	r2, sl
 8000a68:	4633      	mov	r3, r6
 8000a6a:	4641      	mov	r1, r8
 8000a6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a70:	f000 fb66 	bl	8001140 <add_fpreq>
convolve_s8_kernel3_inputch3_stride2_pad1(&buffer0[16384],32,32,16,(const q7_t*) weight3,bias3,shift3,multiplier3,-128,128,-128,127,&buffer0[0],16,16,32,sbuf,kbuf,-128);
 8000a74:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8000a78:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
 8000a7c:	4b95      	ldr	r3, [pc, #596]	; (8000cd4 <invoke_inf+0x358>)
 8000a7e:	9303      	str	r3, [sp, #12]
 8000a80:	4b95      	ldr	r3, [pc, #596]	; (8000cd8 <invoke_inf+0x35c>)
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	4b95      	ldr	r3, [pc, #596]	; (8000cdc <invoke_inf+0x360>)
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	f506 4a09 	add.w	sl, r6, #35072	; 0x8900
 8000a8c:	4b94      	ldr	r3, [pc, #592]	; (8000ce0 <invoke_inf+0x364>)
 8000a8e:	940e      	str	r4, [sp, #56]	; 0x38
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	e9cd 4204 	strd	r4, r2, [sp, #16]
 8000a96:	9406      	str	r4, [sp, #24]
 8000a98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	462a      	mov	r2, r5
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 8000aa8:	e9cd b807 	strd	fp, r8, [sp, #28]
 8000aac:	4630      	mov	r0, r6
 8000aae:	f000 ffcf 	bl	8001a50 <convolve_s8_kernel3_inputch3_stride2_pad1>
convolve_s8_kernel3_stride1_pad1(&buffer0[0],16,16,32,(const q7_t*) weight4,bias4,shift4,multiplier4,4,128,-128,127,&buffer0[8192],16,16,32,sbuf,-128);
 8000ab2:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8000ab6:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
 8000aba:	4b8a      	ldr	r3, [pc, #552]	; (8000ce4 <invoke_inf+0x368>)
 8000abc:	9303      	str	r3, [sp, #12]
 8000abe:	4b8a      	ldr	r3, [pc, #552]	; (8000ce8 <invoke_inf+0x36c>)
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	4b89      	ldr	r3, [pc, #548]	; (8000cec <invoke_inf+0x370>)
 8000ac6:	9205      	str	r2, [sp, #20]
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	f5a6 5200 	sub.w	r2, r6, #8192	; 0x2000
 8000ace:	4b88      	ldr	r3, [pc, #544]	; (8000cf0 <invoke_inf+0x374>)
 8000ad0:	f8cd 9010 	str.w	r9, [sp, #16]
 8000ad4:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8000ad8:	940d      	str	r4, [sp, #52]	; 0x34
 8000ada:	9208      	str	r2, [sp, #32]
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	463a      	mov	r2, r7
 8000ae0:	462b      	mov	r3, r5
 8000ae2:	4639      	mov	r1, r7
 8000ae4:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 8000ae8:	4640      	mov	r0, r8
 8000aea:	f001 fb3f 	bl	800216c <convolve_s8_kernel3_stride1_pad1>
convolve_1x1_s8_ch16(&buffer0[16384],32,32,16,(const q7_t*) weight5,bias5,shift5,multiplier5,-17,128,-128,127,&buffer0[0],16,16,32,sbuf);
 8000aee:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8000af2:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
 8000af6:	4b7f      	ldr	r3, [pc, #508]	; (8000cf4 <invoke_inf+0x378>)
 8000af8:	9303      	str	r3, [sp, #12]
 8000afa:	4b7f      	ldr	r3, [pc, #508]	; (8000cf8 <invoke_inf+0x37c>)
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	4b7f      	ldr	r3, [pc, #508]	; (8000cfc <invoke_inf+0x380>)
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	4b7f      	ldr	r3, [pc, #508]	; (8000d00 <invoke_inf+0x384>)
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	f06f 0310 	mvn.w	r3, #16
 8000b0c:	9406      	str	r4, [sp, #24]
 8000b0e:	9205      	str	r2, [sp, #20]
 8000b10:	9304      	str	r3, [sp, #16]
 8000b12:	462a      	mov	r2, r5
 8000b14:	4629      	mov	r1, r5
 8000b16:	463b      	mov	r3, r7
 8000b18:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 8000b1c:	e9cd b807 	strd	fp, r8, [sp, #28]
 8000b20:	4630      	mov	r0, r6
 8000b22:	f000 fea5 	bl	8001870 <convolve_1x1_s8_ch16>
add_fpreq(8192, &buffer0[0],0.044761426746845245,-17,&buffer0[8192],0.11311884224414825,4,0.0532362163066864,-128,&buffer0[16384]);
 8000b26:	eddd 2a11 	vldr	s5, [sp, #68]	; 0x44
 8000b2a:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8000d04 <invoke_inf+0x388>
 8000b2e:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8000d08 <invoke_inf+0x38c>
 8000b32:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8000d0c <invoke_inf+0x390>
 8000b36:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8000b3a:	eefb 0a01 	vmov.f32	s1, #177	; 0xc1880000 -17.0
 8000b3e:	4633      	mov	r3, r6
 8000b40:	f5a6 5200 	sub.w	r2, r6, #8192	; 0x2000
 8000b44:	4641      	mov	r1, r8
 8000b46:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b4a:	f000 faf9 	bl	8001140 <add_fpreq>
convolve_s8_kernel3_inputch3_stride2_pad1(&buffer0[16384],16,16,32,(const q7_t*) weight6,bias6,shift6,multiplier6,-128,128,-128,127,&buffer0[0],8,8,64,sbuf,kbuf,-128);
 8000b4e:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8000b52:	930c      	str	r3, [sp, #48]	; 0x30
 8000b54:	4b6e      	ldr	r3, [pc, #440]	; (8000d10 <invoke_inf+0x394>)
 8000b56:	9303      	str	r3, [sp, #12]
 8000b58:	4b6e      	ldr	r3, [pc, #440]	; (8000d14 <invoke_inf+0x398>)
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	4b6e      	ldr	r3, [pc, #440]	; (8000d18 <invoke_inf+0x39c>)
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	f04f 0908 	mov.w	r9, #8
 8000b64:	e9cd a40d 	strd	sl, r4, [sp, #52]	; 0x34
 8000b68:	4b6c      	ldr	r3, [pc, #432]	; (8000d1c <invoke_inf+0x3a0>)
 8000b6a:	9406      	str	r4, [sp, #24]
 8000b6c:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	e9cd 4204 	strd	r4, r2, [sp, #16]
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	463a      	mov	r2, r7
 8000b7a:	462b      	mov	r3, r5
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e9cd b807 	strd	fp, r8, [sp, #28]
 8000b82:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
 8000b86:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 ff60 	bl	8001a50 <convolve_s8_kernel3_inputch3_stride2_pad1>
convolve_s8_kernel3_stride1_pad1(&buffer0[0],8,8,64,(const q7_t*) weight7,bias7,shift7,multiplier7,-2,128,-128,127,&buffer0[4096],8,8,64,sbuf,-128);
 8000b90:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8000b94:	e9cd a30b 	strd	sl, r3, [sp, #44]	; 0x2c
 8000b98:	4b61      	ldr	r3, [pc, #388]	; (8000d20 <invoke_inf+0x3a4>)
 8000b9a:	9303      	str	r3, [sp, #12]
 8000b9c:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <invoke_inf+0x3a8>)
 8000b9e:	9302      	str	r3, [sp, #8]
 8000ba0:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <invoke_inf+0x3ac>)
 8000ba2:	9301      	str	r3, [sp, #4]
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	4b61      	ldr	r3, [pc, #388]	; (8000d2c <invoke_inf+0x3b0>)
 8000ba8:	9205      	str	r2, [sp, #20]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	f5a6 5240 	sub.w	r2, r6, #12288	; 0x3000
 8000bb0:	f06f 0301 	mvn.w	r3, #1
 8000bb4:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8000bb8:	940d      	str	r4, [sp, #52]	; 0x34
 8000bba:	9208      	str	r2, [sp, #32]
 8000bbc:	9304      	str	r3, [sp, #16]
 8000bbe:	464a      	mov	r2, r9
 8000bc0:	4653      	mov	r3, sl
 8000bc2:	4649      	mov	r1, r9
 8000bc4:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
 8000bc8:	4640      	mov	r0, r8
 8000bca:	f001 facf 	bl	800216c <convolve_s8_kernel3_stride1_pad1>
convolve_1x1_s8(&buffer0[16384],16,16,32,(const q7_t*) weight8,bias8,shift8,multiplier8,38,128,-128,127,&buffer0[0],8,8,64,sbuf);
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	9205      	str	r2, [sp, #20]
 8000bd2:	4a57      	ldr	r2, [pc, #348]	; (8000d30 <invoke_inf+0x3b4>)
 8000bd4:	9203      	str	r2, [sp, #12]
 8000bd6:	4a57      	ldr	r2, [pc, #348]	; (8000d34 <invoke_inf+0x3b8>)
 8000bd8:	9202      	str	r2, [sp, #8]
 8000bda:	4a57      	ldr	r2, [pc, #348]	; (8000d38 <invoke_inf+0x3bc>)
 8000bdc:	9201      	str	r2, [sp, #4]
 8000bde:	4a57      	ldr	r2, [pc, #348]	; (8000d3c <invoke_inf+0x3c0>)
 8000be0:	9200      	str	r2, [sp, #0]
 8000be2:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8000be6:	2226      	movs	r2, #38	; 0x26
 8000be8:	e9cd a30b 	strd	sl, r3, [sp, #44]	; 0x2c
 8000bec:	9406      	str	r4, [sp, #24]
 8000bee:	462b      	mov	r3, r5
 8000bf0:	9204      	str	r2, [sp, #16]
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	463a      	mov	r2, r7
 8000bf6:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
 8000bfa:	e9cd b807 	strd	fp, r8, [sp, #28]
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f000 fd3a 	bl	8001678 <convolve_1x1_s8>
add_fpreq(4096, &buffer0[0],0.08385830372571945,38,&buffer0[4096],0.21724364161491394,-2,0.1270691454410553,-128,&buffer0[8192]);
 8000c04:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
avg_pooling(&buffer0[8192],8,8,64,8,8,1,1,-128,127,&buffer0[0]);
 8000c08:	2501      	movs	r5, #1
add_fpreq(4096, &buffer0[0],0.08385830372571945,38,&buffer0[4096],0.21724364161491394,-2,0.1270691454410553,-128,&buffer0[8192]);
 8000c0a:	eddd 2a11 	vldr	s5, [sp, #68]	; 0x44
 8000c0e:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 8000d40 <invoke_inf+0x3c4>
 8000c12:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8000d44 <invoke_inf+0x3c8>
 8000c16:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8000d48 <invoke_inf+0x3cc>
 8000c1a:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8000d4c <invoke_inf+0x3d0>
 8000c1e:	eef8 1a00 	vmov.f32	s3, #128	; 0xc0000000 -2.0
 8000c22:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 8000c26:	4641      	mov	r1, r8
 8000c28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c2c:	f000 fa88 	bl	8001140 <add_fpreq>
avg_pooling(&buffer0[8192],8,8,64,8,8,1,1,-128,127,&buffer0[0]);
 8000c30:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8000c34:	4653      	mov	r3, sl
 8000c36:	464a      	mov	r2, r9
 8000c38:	4649      	mov	r1, r9
 8000c3a:	e9cd b805 	strd	fp, r8, [sp, #20]
 8000c3e:	e9cd 9501 	strd	r9, r5, [sp, #4]
 8000c42:	f8cd 9000 	str.w	r9, [sp]
 8000c46:	f5a6 5000 	sub.w	r0, r6, #8192	; 0x2000
 8000c4a:	f000 fca7 	bl	800159c <avg_pooling>
convolve_1x1_s8(&buffer0[64],1,1,64,(const q7_t*) weight9,bias9,shift9,multiplier9,24,128,-128,127,&buffer0[64],1,1,10,sbuf);
 8000c4e:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8000c52:	930c      	str	r3, [sp, #48]	; 0x30
 8000c54:	2118      	movs	r1, #24
 8000c56:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <invoke_inf+0x3d4>)
 8000c58:	9303      	str	r3, [sp, #12]
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8000c60:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <invoke_inf+0x3d8>)
 8000c62:	4a3d      	ldr	r2, [pc, #244]	; (8000d58 <invoke_inf+0x3dc>)
 8000c64:	9406      	str	r4, [sp, #24]
 8000c66:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000c6a:	f5a6 507f 	sub.w	r0, r6, #16320	; 0x3fc0
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	; (8000d5c <invoke_inf+0x3e0>)
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	240a      	movs	r4, #10
 8000c74:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 8000c78:	f8cd b01c 	str.w	fp, [sp, #28]
 8000c7c:	9008      	str	r0, [sp, #32]
 8000c7e:	4653      	mov	r3, sl
 8000c80:	462a      	mov	r2, r5
 8000c82:	4629      	mov	r1, r5
 8000c84:	940b      	str	r4, [sp, #44]	; 0x2c
 8000c86:	f000 fcf7 	bl	8001678 <convolve_1x1_s8>
}
 8000c8a:	b013      	add	sp, #76	; 0x4c
 8000c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c90:	2000b88c 	.word	0x2000b88c
 8000c94:	08006cbc 	.word	0x08006cbc
 8000c98:	08007224 	.word	0x08007224
 8000c9c:	08006754 	.word	0x08006754
 8000ca0:	0800778c 	.word	0x0800778c
 8000ca4:	08006cfc 	.word	0x08006cfc
 8000ca8:	08007264 	.word	0x08007264
 8000cac:	08006794 	.word	0x08006794
 8000cb0:	0800793c 	.word	0x0800793c
 8000cb4:	08006d3c 	.word	0x08006d3c
 8000cb8:	080072a4 	.word	0x080072a4
 8000cbc:	080067d4 	.word	0x080067d4
 8000cc0:	c3000000 	.word	0xc3000000
 8000cc4:	0800823c 	.word	0x0800823c
 8000cc8:	3d50ac69 	.word	0x3d50ac69
 8000ccc:	3dd5642b 	.word	0x3dd5642b
 8000cd0:	3d215b22 	.word	0x3d215b22
 8000cd4:	08006d7c 	.word	0x08006d7c
 8000cd8:	080072e4 	.word	0x080072e4
 8000cdc:	08006814 	.word	0x08006814
 8000ce0:	08008b3c 	.word	0x08008b3c
 8000ce4:	08006dfc 	.word	0x08006dfc
 8000ce8:	08007364 	.word	0x08007364
 8000cec:	08006894 	.word	0x08006894
 8000cf0:	08009d3c 	.word	0x08009d3c
 8000cf4:	08006e7c 	.word	0x08006e7c
 8000cf8:	080073e4 	.word	0x080073e4
 8000cfc:	08006914 	.word	0x08006914
 8000d00:	0800c13c 	.word	0x0800c13c
 8000d04:	3d5a0e38 	.word	0x3d5a0e38
 8000d08:	3de7aada 	.word	0x3de7aada
 8000d0c:	3d3757c2 	.word	0x3d3757c2
 8000d10:	08006efc 	.word	0x08006efc
 8000d14:	08007464 	.word	0x08007464
 8000d18:	08006994 	.word	0x08006994
 8000d1c:	0800c33c 	.word	0x0800c33c
 8000d20:	08006ffc 	.word	0x08006ffc
 8000d24:	08007564 	.word	0x08007564
 8000d28:	08006a94 	.word	0x08006a94
 8000d2c:	08010b3c 	.word	0x08010b3c
 8000d30:	080070fc 	.word	0x080070fc
 8000d34:	08007664 	.word	0x08007664
 8000d38:	08006b94 	.word	0x08006b94
 8000d3c:	08019b3c 	.word	0x08019b3c
 8000d40:	3e021e6a 	.word	0x3e021e6a
 8000d44:	3e5e751e 	.word	0x3e5e751e
 8000d48:	42180000 	.word	0x42180000
 8000d4c:	3dabbde7 	.word	0x3dabbde7
 8000d50:	080071fc 	.word	0x080071fc
 8000d54:	08006c94 	.word	0x08006c94
 8000d58:	08007764 	.word	0x08007764
 8000d5c:	0801a33c 	.word	0x0801a33c

08000d60 <arm_nn_mat_mult_kernel_s8_s16_reordered>:
                                              const int16_t activation_min,
                                              const int16_t activation_max,
                                              const uint16_t num_col_a,
                                              const int32_t *const output_bias,
                                              q7_t *out_0)
{
 8000d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d64:	b095      	sub	sp, #84	; 0x54
#if defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 8000d66:	9c24      	ldr	r4, [sp, #144]	; 0x90
{
 8000d68:	9008      	str	r0, [sp, #32]
 8000d6a:	f9bd 0080 	ldrsh.w	r0, [sp, #128]	; 0x80
 8000d6e:	9003      	str	r0, [sp, #12]
 8000d70:	f9bd 0084 	ldrsh.w	r0, [sp, #132]	; 0x84
 8000d74:	9212      	str	r2, [sp, #72]	; 0x48
    q7_t *out_1 = out_0 + output_ch;
 8000d76:	4414      	add	r4, r2
{
 8000d78:	9004      	str	r0, [sp, #16]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
 8000d7a:	0852      	lsrs	r2, r2, #1
{
 8000d7c:	f8bd 0088 	ldrh.w	r0, [sp, #136]	; 0x88
 8000d80:	910c      	str	r1, [sp, #48]	; 0x30
 8000d82:	9310      	str	r3, [sp, #64]	; 0x40
 8000d84:	9009      	str	r0, [sp, #36]	; 0x24
    q7_t *out_1 = out_0 + output_ch;
 8000d86:	9411      	str	r4, [sp, #68]	; 0x44
    while (row_count)
 8000d88:	9213      	str	r2, [sp, #76]	; 0x4c
 8000d8a:	f000 8148 	beq.w	800101e <arm_nn_mat_mult_kernel_s8_s16_reordered+0x2be>
        q31_t ch_0_out_0 = *bias;
        q31_t ch_0_out_1 = *bias++;
        q31_t ch_1_out_0 = *bias;
        q31_t ch_1_out_1 = *bias++;

        uint16_t col_count = num_col_a / 4;
 8000d8e:	0885      	lsrs	r5, r0, #2
 8000d90:	461e      	mov	r6, r3
 8000d92:	950a      	str	r5, [sp, #40]	; 0x28
 8000d94:	1e6b      	subs	r3, r5, #1
 8000d96:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	460f      	mov	r7, r1
 8000d9c:	b292      	uxth	r2, r2
 8000d9e:	f105 0110 	add.w	r1, r5, #16
 8000da2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8000da6:	eb07 0140 	add.w	r1, r7, r0, lsl #1
 8000daa:	910d      	str	r1, [sp, #52]	; 0x34
 8000dac:	4629      	mov	r1, r5
 8000dae:	3108      	adds	r1, #8
 8000db0:	9107      	str	r1, [sp, #28]
 8000db2:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000db4:	920b      	str	r2, [sp, #44]	; 0x2c
 8000db6:	3102      	adds	r1, #2
 8000db8:	9105      	str	r1, [sp, #20]
 8000dba:	1ca1      	adds	r1, r4, #2
 8000dbc:	9106      	str	r1, [sp, #24]
 8000dbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8000dc0:	3108      	adds	r1, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	9102      	str	r1, [sp, #8]
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	3301      	adds	r3, #1
 8000dca:	3108      	adds	r1, #8
 8000dcc:	9101      	str	r1, [sp, #4]
 8000dce:	0099      	lsls	r1, r3, #2
        *out_1++ = (q7_t)ch_1_out_1;
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
 8000dd0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000dd4:	910e      	str	r1, [sp, #56]	; 0x38
 8000dd6:	930f      	str	r3, [sp, #60]	; 0x3c
        q31_t ch_0_out_0 = *bias;
 8000dd8:	9a07      	ldr	r2, [sp, #28]
        q31_t ch_1_out_0 = *bias;
 8000dda:	e952 3b02 	ldrd	r3, fp, [r2, #-8]
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8000dde:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8000de2:	eb01 0c02 	add.w	ip, r1, r2
        while (col_count)
 8000de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f000 81a4 	beq.w	8001136 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x3d6>
 8000dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        const q15_t *ip_b0 = input_b;
 8000df0:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8000df4:	4462      	add	r2, ip
 8000df6:	9200      	str	r2, [sp, #0]
        q31_t ch_1_out_1 = *bias++;
 8000df8:	46da      	mov	sl, fp
        q31_t ch_0_out_1 = *bias++;
 8000dfa:	461a      	mov	r2, r3
        while (col_count)
 8000dfc:	4689      	mov	r9, r1
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
{
    q31_t val;

    memcpy(&val, *in_q15, 4);
 8000dfe:	f859 0b04 	ldr.w	r0, [r9], #4
 8000e02:	f85c 1b04 	ldr.w	r1, [ip], #4
 8000e06:	f8d6 8000 	ldr.w	r8, [r6]
 8000e0a:	f8d7 e000 	ldr.w	lr, [r7]
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8000e0e:	ea4f 2530 	mov.w	r5, r0, ror #8
 8000e12:	ea4f 2431 	mov.w	r4, r1, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000e16:	fa2f f080 	sxtb16	r0, r0
 8000e1a:	fa2f f585 	sxtb16	r5, r5
 8000e1e:	fa2f f181 	sxtb16	r1, r1
 8000e22:	fa2f f484 	sxtb16	r4, r4

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000e26:	fb20 3308 	smlad	r3, r0, r8, r3
 8000e2a:	fb20 220e 	smlad	r2, r0, lr, r2
 8000e2e:	fb21 bb08 	smlad	fp, r1, r8, fp
 8000e32:	fb21 aa0e 	smlad	sl, r1, lr, sl
 8000e36:	6871      	ldr	r1, [r6, #4]
    *in_q15 += 2;
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	3608      	adds	r6, #8
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	fb25 3301 	smlad	r3, r5, r1, r3
 8000e42:	fb25 2200 	smlad	r2, r5, r0, r2
 8000e46:	fb24 bb01 	smlad	fp, r4, r1, fp
 8000e4a:	fb24 aa00 	smlad	sl, r4, r0, sl
 8000e4e:	9900      	ldr	r1, [sp, #0]
 8000e50:	458c      	cmp	ip, r1
 8000e52:	d1d4      	bne.n	8000dfe <arm_nn_mat_mult_kernel_s8_s16_reordered+0x9e>
        ip_a0 += num_col_a;
 8000e54:	9908      	ldr	r1, [sp, #32]
 8000e56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000e58:	4401      	add	r1, r0
 8000e5a:	9108      	str	r1, [sp, #32]
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8000e5c:	9901      	ldr	r1, [sp, #4]
 8000e5e:	f851 4c08 	ldr.w	r4, [r1, #-8]
    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
    mult.word.high = 0;

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000e62:	9902      	ldr	r1, [sp, #8]
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000e64:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000e68:	f851 1c08 	ldr.w	r1, [r1, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000e6c:	4083      	lsls	r3, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000e6e:	2500      	movs	r5, #0
 8000e70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e74:	fbc3 0501 	smlal	r0, r5, r3, r1
    result = (int32_t)(mult.long_long >> 31);
 8000e78:	0fc0      	lsrs	r0, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000e7a:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 8000e7c:	ea40 0545 	orr.w	r5, r0, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000e80:	dc0d      	bgt.n	8000e9e <arm_nn_mat_mult_kernel_s8_s16_reordered+0x13e>
 8000e82:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	40a3      	lsls	r3, r4
 8000e88:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000e8a:	ea05 0103 	and.w	r1, r5, r3
    if (result < 0)
 8000e8e:	4125      	asrs	r5, r4
    q31_t threshold = remainder_mask >> 1;
 8000e90:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000e94:	bf48      	it	mi
 8000e96:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000e98:	4299      	cmp	r1, r3
        result++;
 8000e9a:	bfc8      	it	gt
 8000e9c:	3501      	addgt	r5, #1
        ch_0_out_0 += out_offset;
 8000e9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000ea0:	441d      	add	r5, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8000ea2:	9b03      	ldr	r3, [sp, #12]
 8000ea4:	429d      	cmp	r5, r3
 8000ea6:	bfb8      	it	lt
 8000ea8:	461d      	movlt	r5, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8000eaa:	9b04      	ldr	r3, [sp, #16]
 8000eac:	429d      	cmp	r5, r3
 8000eae:	bfa8      	it	ge
 8000eb0:	461d      	movge	r5, r3
        *out_0++ = (q7_t)ch_0_out_0;
 8000eb2:	9b05      	ldr	r3, [sp, #20]
 8000eb4:	f803 5c02 	strb.w	r5, [r3, #-2]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8000eb8:	9b01      	ldr	r3, [sp, #4]
 8000eba:	f853 0c08 	ldr.w	r0, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000ebe:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000ec0:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000ec4:	f853 3c08 	ldr.w	r3, [r3, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000ec8:	408a      	lsls	r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000eca:	2400      	movs	r4, #0
 8000ecc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ed0:	fbc2 1403 	smlal	r1, r4, r2, r3
    result = (int32_t)(mult.long_long >> 31);
 8000ed4:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000ed6:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 8000ed8:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000edc:	dc0d      	bgt.n	8000efa <arm_nn_mat_mult_kernel_s8_s16_reordered+0x19a>
 8000ede:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4083      	lsls	r3, r0
 8000ee4:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000ee6:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 8000eea:	4104      	asrs	r4, r0
    q31_t threshold = remainder_mask >> 1;
 8000eec:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000ef0:	bf48      	it	mi
 8000ef2:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000ef4:	429a      	cmp	r2, r3
        result++;
 8000ef6:	bfc8      	it	gt
 8000ef8:	3401      	addgt	r4, #1
        ch_0_out_1 += out_offset;
 8000efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000efc:	441c      	add	r4, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8000efe:	9b03      	ldr	r3, [sp, #12]
 8000f00:	429c      	cmp	r4, r3
 8000f02:	bfb8      	it	lt
 8000f04:	461c      	movlt	r4, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8000f06:	9b04      	ldr	r3, [sp, #16]
 8000f08:	429c      	cmp	r4, r3
 8000f0a:	bfa8      	it	ge
 8000f0c:	461c      	movge	r4, r3
        *out_1++ = (q7_t)ch_0_out_1;
 8000f0e:	9b06      	ldr	r3, [sp, #24]
 8000f10:	f803 4c02 	strb.w	r4, [r3, #-2]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8000f14:	9b01      	ldr	r3, [sp, #4]
 8000f16:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000f1a:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000f1c:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000f20:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000f24:	fa0b f404 	lsl.w	r4, fp, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	fbc4 2003 	smlal	r2, r0, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 8000f32:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000f34:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8000f36:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000f3a:	dc0d      	bgt.n	8000f58 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x1f8>
 8000f3c:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	408b      	lsls	r3, r1
 8000f42:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000f44:	ea00 0203 	and.w	r2, r0, r3
    if (result < 0)
 8000f48:	4108      	asrs	r0, r1
    q31_t threshold = remainder_mask >> 1;
 8000f4a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000f4e:	bf48      	it	mi
 8000f50:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000f52:	429a      	cmp	r2, r3
        result++;
 8000f54:	bfc8      	it	gt
 8000f56:	3001      	addgt	r0, #1
        ch_1_out_0 += out_offset;
 8000f58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000f5a:	4418      	add	r0, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8000f5c:	9b03      	ldr	r3, [sp, #12]
 8000f5e:	4298      	cmp	r0, r3
 8000f60:	bfb8      	it	lt
 8000f62:	4618      	movlt	r0, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8000f64:	9b04      	ldr	r3, [sp, #16]
 8000f66:	4298      	cmp	r0, r3
 8000f68:	bfa8      	it	ge
 8000f6a:	4618      	movge	r0, r3
        *out_0++ = (q7_t)ch_1_out_0;
 8000f6c:	9b05      	ldr	r3, [sp, #20]
 8000f6e:	f803 0c01 	strb.w	r0, [r3, #-1]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 8000f72:	9b01      	ldr	r3, [sp, #4]
 8000f74:	f853 0c04 	ldr.w	r0, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000f78:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000f7a:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000f7e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000f82:	fa0a f101 	lsl.w	r1, sl, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8000f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 8000f90:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000f92:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 8000f94:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8000f98:	dc0d      	bgt.n	8000fb6 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x256>
 8000f9a:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	4083      	lsls	r3, r0
 8000fa0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8000fa2:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 8000fa6:	4104      	asrs	r4, r0
    q31_t threshold = remainder_mask >> 1;
 8000fa8:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8000fac:	bf48      	it	mi
 8000fae:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8000fb0:	429a      	cmp	r2, r3
        result++;
 8000fb2:	bfc8      	it	gt
 8000fb4:	3401      	addgt	r4, #1
        ch_1_out_1 += out_offset;
 8000fb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        *out_1++ = (q7_t)ch_1_out_1;
 8000fb8:	9a06      	ldr	r2, [sp, #24]
    while (row_count)
 8000fba:	9905      	ldr	r1, [sp, #20]
        ch_1_out_1 += out_offset;
 8000fbc:	441c      	add	r4, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8000fbe:	9b03      	ldr	r3, [sp, #12]
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	bfb8      	it	lt
 8000fc4:	461c      	movlt	r4, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8000fc6:	9b04      	ldr	r3, [sp, #16]
 8000fc8:	429c      	cmp	r4, r3
 8000fca:	bfa8      	it	ge
 8000fcc:	461c      	movge	r4, r3
        *out_1++ = (q7_t)ch_1_out_1;
 8000fce:	f802 4c01 	strb.w	r4, [r2, #-1]
    while (row_count)
 8000fd2:	3202      	adds	r2, #2
 8000fd4:	9206      	str	r2, [sp, #24]
 8000fd6:	9a02      	ldr	r2, [sp, #8]
 8000fd8:	9b07      	ldr	r3, [sp, #28]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	9202      	str	r2, [sp, #8]
 8000fde:	9a01      	ldr	r2, [sp, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	9201      	str	r2, [sp, #4]
 8000fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	3102      	adds	r1, #2
 8000fea:	429a      	cmp	r2, r3
 8000fec:	9307      	str	r3, [sp, #28]
 8000fee:	9105      	str	r1, [sp, #20]
 8000ff0:	f47f aef2 	bne.w	8000dd8 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x78>
        out_shift++;
 8000ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000ff8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000ffc:	9210      	str	r2, [sp, #64]	; 0x40
        out_mult++;
 8000ffe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001000:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001004:	921e      	str	r2, [sp, #120]	; 0x78
        *out_0++ = (q7_t)ch_1_out_0;
 8001006:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001008:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800100c:	9224      	str	r2, [sp, #144]	; 0x90
        *out_1++ = (q7_t)ch_1_out_1;
 800100e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001010:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001014:	9211      	str	r2, [sp, #68]	; 0x44
        q31_t ch_1_out_1 = *bias++;
 8001016:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800101c:	9323      	str	r3, [sp, #140]	; 0x8c
        row_count--;
    }

    if (output_ch & 1)
 800101e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001020:	07db      	lsls	r3, r3, #31
 8001022:	f140 8082 	bpl.w	800112a <arm_nn_mat_mult_kernel_s8_s16_reordered+0x3ca>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* Init accumulator with bias for channel N + 1 */
        q31_t ch_0_out_0 = *bias;
 8001026:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8001028:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        q31_t ch_0_out_0 = *bias;
 800102a:	681a      	ldr	r2, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800102c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        q31_t ch_0_out_1 = ch_0_out_0;

        int32_t col_count = num_col_a / 4;
        while (col_count)
 800102e:	089d      	lsrs	r5, r3, #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8001030:	eb06 0443 	add.w	r4, r6, r3, lsl #1
        q31_t ch_0_out_1 = ch_0_out_0;
 8001034:	4613      	mov	r3, r2
        while (col_count)
 8001036:	d01b      	beq.n	8001070 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x310>
        q31_t ch_0_out_1 = ch_0_out_0;
 8001038:	9f08      	ldr	r7, [sp, #32]
    memcpy(&val, *in_q7, 4);
 800103a:	f857 1b04 	ldr.w	r1, [r7], #4
 800103e:	f8d6 c000 	ldr.w	ip, [r6]
  return (op1 >> op2) | (op1 << (32U - op2));
 8001042:	ea4f 2031 	mov.w	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001046:	fa2f f181 	sxtb16	r1, r1
 800104a:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800104e:	fb21 220c 	smlad	r2, r1, ip, r2
 8001052:	f8d4 c000 	ldr.w	ip, [r4]
 8001056:	fb21 330c 	smlad	r3, r1, ip, r3
    memcpy(&val, *in_q15, 4);
 800105a:	f8d6 c004 	ldr.w	ip, [r6, #4]
    *in_q15 += 2;
 800105e:	6861      	ldr	r1, [r4, #4]
 8001060:	3608      	adds	r6, #8
 8001062:	3408      	adds	r4, #8
 8001064:	fb20 220c 	smlad	r2, r0, ip, r2
 8001068:	fb20 3301 	smlad	r3, r0, r1, r3
        while (col_count)
 800106c:	3d01      	subs	r5, #1
 800106e:	d1e4      	bne.n	800103a <arm_nn_mat_mult_kernel_s8_s16_reordered+0x2da>
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8001070:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001072:	680c      	ldr	r4, [r1, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001074:	991e      	ldr	r1, [sp, #120]	; 0x78
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001076:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800107a:	6809      	ldr	r1, [r1, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800107c:	fa02 f505 	lsl.w	r5, r2, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001080:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001084:	2200      	movs	r2, #0
 8001086:	fbc5 0201 	smlal	r0, r2, r5, r1
 800108a:	4616      	mov	r6, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800108c:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 800108e:	ea4f 72d0 	mov.w	r2, r0, lsr #31
 8001092:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001096:	dc0d      	bgt.n	80010b4 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x354>
 8001098:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 800109a:	2101      	movs	r1, #1
 800109c:	40a1      	lsls	r1, r4
 800109e:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 80010a0:	ea02 0001 	and.w	r0, r2, r1
    if (result < 0)
 80010a4:	4122      	asrs	r2, r4
    q31_t threshold = remainder_mask >> 1;
 80010a6:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 80010aa:	bf48      	it	mi
 80010ac:	3101      	addmi	r1, #1
    if (remainder > threshold)
 80010ae:	4288      	cmp	r0, r1
        result++;
 80010b0:	bfc8      	it	gt
 80010b2:	3201      	addgt	r2, #1
        ch_0_out_0 += out_offset;
 80010b4:	991f      	ldr	r1, [sp, #124]	; 0x7c
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q7_t)ch_0_out_0;
 80010b6:	9824      	ldr	r0, [sp, #144]	; 0x90
        ch_0_out_0 += out_offset;
 80010b8:	440a      	add	r2, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80010ba:	9903      	ldr	r1, [sp, #12]
 80010bc:	428a      	cmp	r2, r1
 80010be:	bfb8      	it	lt
 80010c0:	460a      	movlt	r2, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80010c2:	9904      	ldr	r1, [sp, #16]
 80010c4:	428a      	cmp	r2, r1
 80010c6:	bfa8      	it	ge
 80010c8:	460a      	movge	r2, r1
        *out_0++ = (q7_t)ch_0_out_0;
 80010ca:	f800 2b01 	strb.w	r2, [r0], #1

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 80010ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80010d0:	6811      	ldr	r1, [r2, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80010d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80010d4:	6815      	ldr	r5, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80010d6:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 80010da:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80010dc:	2400      	movs	r4, #0
 80010de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e2:	fbc3 2405 	smlal	r2, r4, r3, r5
    result = (int32_t)(mult.long_long >> 31);
 80010e6:	0fd3      	lsrs	r3, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80010e8:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 80010ea:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80010ee:	dc0d      	bgt.n	800110c <arm_nn_mat_mult_kernel_s8_s16_reordered+0x3ac>
 80010f0:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 80010f2:	2201      	movs	r2, #1
 80010f4:	408a      	lsls	r2, r1
 80010f6:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 80010f8:	ea03 0402 	and.w	r4, r3, r2
    if (result < 0)
 80010fc:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 80010fe:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8001102:	bf48      	it	mi
 8001104:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8001106:	4294      	cmp	r4, r2
        result++;
 8001108:	bfc8      	it	gt
 800110a:	3301      	addgt	r3, #1
        ch_0_out_1 += out_offset;
 800110c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
        *out_0++ = (q7_t)ch_0_out_0;
 800110e:	9024      	str	r0, [sp, #144]	; 0x90
        ch_0_out_1 += out_offset;
 8001110:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8001112:	9a03      	ldr	r2, [sp, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	bfb8      	it	lt
 8001118:	461a      	movlt	r2, r3
 800111a:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800111c:	9a04      	ldr	r2, [sp, #16]
 800111e:	429a      	cmp	r2, r3
 8001120:	bfa8      	it	ge
 8001122:	461a      	movge	r2, r3
 8001124:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
 8001126:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001128:	7013      	strb	r3, [r2, #0]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 800112a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800112c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800112e:	4418      	add	r0, r3
 8001130:	b015      	add	sp, #84	; 0x54
 8001132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (col_count)
 8001136:	f8cd c020 	str.w	ip, [sp, #32]
        q31_t ch_1_out_1 = *bias++;
 800113a:	46da      	mov	sl, fp
        q31_t ch_0_out_1 = *bias++;
 800113c:	461a      	mov	r2, r3
 800113e:	e68d      	b.n	8000e5c <arm_nn_mat_mult_kernel_s8_s16_reordered+0xfc>

08001140 <add_fpreq>:
#include "tinyengine_function.h"

tinyengine_status add_fpreq(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data) {
  for (int i = 0; i < size; ++i) {
 8001140:	2800      	cmp	r0, #0
 8001142:	dd47      	ble.n	80011d4 <add_fpreq+0x94>
			const float zero_y, int8_t* output_data) {
 8001144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001148:	460c      	mov	r4, r1
 800114a:	ed2d 8b06 	vpush	{d8-d10}
 800114e:	4690      	mov	r8, r2
 8001150:	eeb0 8a40 	vmov.f32	s16, s0
 8001154:	eef0 8a60 	vmov.f32	s17, s1
 8001158:	eeb0 9a41 	vmov.f32	s18, s2
 800115c:	eef0 9a61 	vmov.f32	s19, s3
 8001160:	eeb0 aa42 	vmov.f32	s20, s4
 8001164:	eef0 aa62 	vmov.f32	s21, s5
 8001168:	1e5f      	subs	r7, r3, #1
 800116a:	180d      	adds	r5, r1, r0
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
      clamped_output = TN_MAX(clamped_output, -128);
 800116c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8001170:	f918 3b01 	ldrsb.w	r3, [r8], #1
 8001174:	ee07 3a90 	vmov	s15, r3
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8001178:	f914 3b01 	ldrsb.w	r3, [r4], #1
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8001180:	ee07 3a10 	vmov	s14, r3
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8001184:	ee77 7ae9 	vsub.f32	s15, s15, s19
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8001188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 800118c:	ee67 7a89 	vmul.f32	s15, s15, s18
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8001190:	ee37 7a68 	vsub.f32	s14, s14, s17
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 8001194:	eee7 7a08 	vfma.f32	s15, s14, s16
 8001198:	ee87 7a8a 	vdiv.f32	s14, s15, s20
 800119c:	ee77 7a2a 	vadd.f32	s15, s14, s21
 80011a0:	ee17 0a90 	vmov	r0, s15
 80011a4:	f7ff f9e0 	bl	8000568 <__aeabi_f2d>
 80011a8:	ec41 0b10 	vmov	d0, r0, r1
 80011ac:	f005 fa80 	bl	80066b0 <round>
 80011b0:	ec51 0b10 	vmov	r0, r1, d0
 80011b4:	f7ff fa30 	bl	8000618 <__aeabi_d2iz>
      clamped_output = TN_MAX(clamped_output, -128);
 80011b8:	42b0      	cmp	r0, r6
 80011ba:	bfb8      	it	lt
 80011bc:	4630      	movlt	r0, r6
      clamped_output = TN_MIN(clamped_output, 127);
 80011be:	287f      	cmp	r0, #127	; 0x7f
 80011c0:	bfa8      	it	ge
 80011c2:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
 80011c4:	42ac      	cmp	r4, r5
      output_data[i] = (int8_t)(clamped_output);
 80011c6:	f807 0f01 	strb.w	r0, [r7, #1]!
  for (int i = 0; i < size; ++i) {
 80011ca:	d1d1      	bne.n	8001170 <add_fpreq+0x30>
  }
}
 80011cc:	ecbd 8b06 	vpop	{d8-d10}
 80011d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop

080011d8 <arm_nn_mat_mult_kernel3_input3_s8_s16>:
        const int16_t activation_max,
        const uint16_t num_col_a,
        const int32_t *const output_bias,
        q7_t *out_0,
		q15_t *kbuf)
{
 80011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011dc:	b08b      	sub	sp, #44	; 0x2c
 80011de:	4614      	mov	r4, r2
 80011e0:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 80011e4:	9002      	str	r0, [sp, #8]
 80011e6:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
 80011ea:	9209      	str	r2, [sp, #36]	; 0x24
 80011ec:	9003      	str	r0, [sp, #12]
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 80011ee:	e9dd 2019 	ldrd	r2, r0, [sp, #100]	; 0x64
 80011f2:	4420      	add	r0, r4
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q15_t *ksrc = &kbuf[0];
    /* this loop over rows in A */
    while (row_count)
 80011f4:	0864      	lsrs	r4, r4, #1
{
 80011f6:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
    while (row_count)
 80011fa:	9408      	str	r4, [sp, #32]
 80011fc:	f000 81ca 	beq.w	8001594 <arm_nn_mat_mult_kernel3_input3_s8_s16+0x3bc>
 8001200:	3308      	adds	r3, #8
 8001202:	3002      	adds	r0, #2
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	1e63      	subs	r3, r4, #1
 8001208:	9005      	str	r0, [sp, #20]
 800120a:	b29b      	uxth	r3, r3
 800120c:	f102 0010 	add.w	r0, r2, #16
 8001210:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001214:	9307      	str	r3, [sp, #28]
 8001216:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001218:	3302      	adds	r3, #2
 800121a:	9304      	str	r3, [sp, #16]
 800121c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800121e:	f103 0408 	add.w	r4, r3, #8
 8001222:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001224:	f102 0b08 	add.w	fp, r2, #8
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8001228:	eb01 0c4c 	add.w	ip, r1, ip, lsl #1
 800122c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001230:	46da      	mov	sl, fp
    memcpy(&val, *in_q15, 4);
 8001232:	680e      	ldr	r6, [r1, #0]
 8001234:	f8dc 7000 	ldr.w	r7, [ip]
		//------------------4
		q31_t a01, a02, a11, a12;
		q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[0], b0, ch_0_out_0);
 8001238:	f852 0c6c 	ldr.w	r0, [r2, #-108]
 800123c:	f85a 5c08 	ldr.w	r5, [sl, #-8]
 8001240:	fb20 5306 	smlad	r3, r0, r6, r5
 8001244:	fb20 5e07 	smlad	lr, r0, r7, r5
		ch_0_out_1 = __SMLAD(ksrc_31[0], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[0], b0, ch_1_out_0);
 8001248:	f852 0c36 	ldr.w	r0, [r2, #-54]
 800124c:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8001250:	fb20 5606 	smlad	r6, r0, r6, r5
 8001254:	fb20 5707 	smlad	r7, r0, r7, r5
 8001258:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800125c:	f8dc 0004 	ldr.w	r0, [ip, #4]
		ch_1_out_1 = __SMLAD(ksrc2_31[0], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[1], b0, ch_0_out_0);
 8001260:	f852 5c68 	ldr.w	r5, [r2, #-104]
 8001264:	fb25 3308 	smlad	r3, r5, r8, r3
 8001268:	fb25 ee00 	smlad	lr, r5, r0, lr
		ch_0_out_1 = __SMLAD(ksrc_31[1], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[1], b0, ch_1_out_0);
 800126c:	f852 5c32 	ldr.w	r5, [r2, #-50]
 8001270:	fb25 6608 	smlad	r6, r5, r8, r6
 8001274:	fb25 7000 	smlad	r0, r5, r0, r7
 8001278:	688f      	ldr	r7, [r1, #8]
 800127a:	f8dc 9008 	ldr.w	r9, [ip, #8]

		//------------------8
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[2], b0, ch_0_out_0);
 800127e:	f852 5c64 	ldr.w	r5, [r2, #-100]
 8001282:	fb25 3307 	smlad	r3, r5, r7, r3
 8001286:	fb25 ee09 	smlad	lr, r5, r9, lr
		ch_0_out_1 = __SMLAD(ksrc_31[2], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[2], b0, ch_1_out_0);
 800128a:	f852 5c2e 	ldr.w	r5, [r2, #-46]
 800128e:	fb25 6607 	smlad	r6, r5, r7, r6
 8001292:	fb25 0509 	smlad	r5, r5, r9, r0
 8001296:	68c8      	ldr	r0, [r1, #12]
 8001298:	f8dc 800c 	ldr.w	r8, [ip, #12]
		ch_1_out_1 = __SMLAD(ksrc2_31[2], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[3], b0, ch_0_out_0);
 800129c:	f852 7c60 	ldr.w	r7, [r2, #-96]
 80012a0:	fb27 3300 	smlad	r3, r7, r0, r3
 80012a4:	fb27 ee08 	smlad	lr, r7, r8, lr
		ch_0_out_1 = __SMLAD(ksrc_31[3], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[3], b0, ch_1_out_0);
 80012a8:	f852 7c2a 	ldr.w	r7, [r2, #-42]
 80012ac:	fb27 6600 	smlad	r6, r7, r0, r6
 80012b0:	fb27 5908 	smlad	r9, r7, r8, r5
 80012b4:	6908      	ldr	r0, [r1, #16]
 80012b6:	f8dc 8010 	ldr.w	r8, [ip, #16]

		//------------------12
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[4], b0, ch_0_out_0);
 80012ba:	f852 5c5c 	ldr.w	r5, [r2, #-92]
 80012be:	fb25 3300 	smlad	r3, r5, r0, r3
 80012c2:	fb25 ee08 	smlad	lr, r5, r8, lr
		ch_0_out_1 = __SMLAD(ksrc_31[4], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[4], b0, ch_1_out_0);
 80012c6:	f852 7c26 	ldr.w	r7, [r2, #-38]
 80012ca:	fb27 6600 	smlad	r6, r7, r0, r6
 80012ce:	fb27 9808 	smlad	r8, r7, r8, r9
 80012d2:	694d      	ldr	r5, [r1, #20]
 80012d4:	f8dc 7014 	ldr.w	r7, [ip, #20]
		ch_1_out_1 = __SMLAD(ksrc2_31[4], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[5], b0, ch_0_out_0);
 80012d8:	f852 0c58 	ldr.w	r0, [r2, #-88]
 80012dc:	fb20 3305 	smlad	r3, r0, r5, r3
 80012e0:	fb20 ee07 	smlad	lr, r0, r7, lr
		ch_0_out_1 = __SMLAD(ksrc_31[5], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[5], b0, ch_1_out_0);
 80012e4:	f852 0c22 	ldr.w	r0, [r2, #-34]
 80012e8:	fb20 6605 	smlad	r6, r0, r5, r6
 80012ec:	fb20 8707 	smlad	r7, r0, r7, r8
 80012f0:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80012f4:	f8dc 0018 	ldr.w	r0, [ip, #24]
		ch_1_out_1 = __SMLAD(ksrc2_31[5], b1, ch_1_out_1);

		//------------------16
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[6], b0, ch_0_out_0);
 80012f8:	f852 5c54 	ldr.w	r5, [r2, #-84]
 80012fc:	fb25 3308 	smlad	r3, r5, r8, r3
 8001300:	fb25 ee00 	smlad	lr, r5, r0, lr
		ch_0_out_1 = __SMLAD(ksrc_31[6], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[6], b0, ch_1_out_0);
 8001304:	f852 5c1e 	ldr.w	r5, [r2, #-30]
 8001308:	fb25 6608 	smlad	r6, r5, r8, r6
 800130c:	fb25 7000 	smlad	r0, r5, r0, r7
 8001310:	69cf      	ldr	r7, [r1, #28]
 8001312:	f8dc b01c 	ldr.w	fp, [ip, #28]
		ch_1_out_1 = __SMLAD(ksrc2_31[6], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[7], b0, ch_0_out_0);
 8001316:	f852 5c50 	ldr.w	r5, [r2, #-80]
 800131a:	fb25 3307 	smlad	r3, r5, r7, r3
 800131e:	fb25 ee0b 	smlad	lr, r5, fp, lr
		ch_0_out_1 = __SMLAD(ksrc_31[7], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[7], b0, ch_1_out_0);
 8001322:	f852 5c1a 	ldr.w	r5, [r2, #-26]
 8001326:	fb25 6607 	smlad	r6, r5, r7, r6
 800132a:	fb25 050b 	smlad	r5, r5, fp, r0
 800132e:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8001332:	f8dc 8020 	ldr.w	r8, [ip, #32]
		ch_1_out_1 = __SMLAD(ksrc2_31[7], b1, ch_1_out_1);

		//------------------20
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[8], b0, ch_0_out_0);
 8001336:	f852 0c4c 	ldr.w	r0, [r2, #-76]
 800133a:	fb20 3309 	smlad	r3, r0, r9, r3
 800133e:	fb20 ee08 	smlad	lr, r0, r8, lr
		ch_0_out_1 = __SMLAD(ksrc_31[8], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[8], b0, ch_1_out_0);
 8001342:	f852 7c16 	ldr.w	r7, [r2, #-22]
 8001346:	fb27 6609 	smlad	r6, r7, r9, r6
 800134a:	fb27 5b08 	smlad	fp, r7, r8, r5
 800134e:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8001352:	f8dc 8024 	ldr.w	r8, [ip, #36]	; 0x24
		ch_1_out_1 = __SMLAD(ksrc2_31[8], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[9], b0, ch_0_out_0);
 8001356:	f852 0c48 	ldr.w	r0, [r2, #-72]
 800135a:	fb20 3309 	smlad	r3, r0, r9, r3
 800135e:	fb20 ee08 	smlad	lr, r0, r8, lr
		ch_0_out_1 = __SMLAD(ksrc_31[9], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[9], b0, ch_1_out_0);
 8001362:	f852 7c12 	ldr.w	r7, [r2, #-18]
 8001366:	fb27 6609 	smlad	r6, r7, r9, r6
 800136a:	fb27 b808 	smlad	r8, r7, r8, fp
 800136e:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
 8001372:	f8dc 7028 	ldr.w	r7, [ip, #40]	; 0x28
		ch_1_out_1 = __SMLAD(ksrc2_31[9], b1, ch_1_out_1);

		//------------------24
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[10], b0, ch_0_out_0);
 8001376:	f852 0c44 	ldr.w	r0, [r2, #-68]
 800137a:	fb20 3309 	smlad	r3, r0, r9, r3
 800137e:	fb20 ee07 	smlad	lr, r0, r7, lr
		ch_0_out_1 = __SMLAD(ksrc_31[10], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[10], b0, ch_1_out_0);
 8001382:	f852 0c0e 	ldr.w	r0, [r2, #-14]
 8001386:	fb20 6609 	smlad	r6, r0, r9, r6
 800138a:	fb20 8707 	smlad	r7, r0, r7, r8
 800138e:	f8d1 902c 	ldr.w	r9, [r1, #44]	; 0x2c
 8001392:	f8dc 002c 	ldr.w	r0, [ip, #44]	; 0x2c
		ch_1_out_1 = __SMLAD(ksrc2_31[10], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[11], b0, ch_0_out_0);
 8001396:	f852 5c40 	ldr.w	r5, [r2, #-64]
 800139a:	fb25 3309 	smlad	r3, r5, r9, r3
 800139e:	fb25 ee00 	smlad	lr, r5, r0, lr
		ch_0_out_1 = __SMLAD(ksrc_31[11], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[11], b0, ch_1_out_0);
 80013a2:	f852 5c0a 	ldr.w	r5, [r2, #-10]
 80013a6:	fb25 6609 	smlad	r6, r5, r9, r6
 80013aa:	fb25 7000 	smlad	r0, r5, r0, r7
 80013ae:	f8d1 9030 	ldr.w	r9, [r1, #48]	; 0x30
 80013b2:	f8dc 7030 	ldr.w	r7, [ip, #48]	; 0x30
		ch_1_out_1 = __SMLAD(ksrc2_31[11], b1, ch_1_out_1);

		//------------------25,26,27
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[12], b0, ch_0_out_0);
 80013b6:	f852 5c3c 	ldr.w	r5, [r2, #-60]
 80013ba:	fb25 3309 	smlad	r3, r5, r9, r3
 80013be:	fb25 e507 	smlad	r5, r5, r7, lr
 80013c2:	9506      	str	r5, [sp, #24]
		ch_0_out_1 = __SMLAD(ksrc_31[12], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[12], b0, ch_1_out_0);
 80013c4:	f852 5c06 	ldr.w	r5, [r2, #-6]
 80013c8:	fb25 6909 	smlad	r9, r5, r9, r6
 80013cc:	fb25 0507 	smlad	r5, r5, r7, r0
		ch_0_out_0 += ksrc[26] * _b0;
		ch_0_out_1 += ksrc[26] * _b1;
		ch_1_out_0 += ksrc2[26] * _b0;
		ch_1_out_1 += ksrc2[26] * _b1;

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 80013d0:	9e01      	ldr	r6, [sp, #4]
		q15_t _b0 = *ip_b0++;
 80013d2:	f9b1 e034 	ldrsh.w	lr, [r1, #52]	; 0x34
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 80013d6:	f856 7c08 	ldr.w	r7, [r6, #-8]
		ch_0_out_0 += ksrc[26] * _b0;
 80013da:	f932 8c38 	ldrsh.w	r8, [r2, #-56]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80013de:	f854 6c08 	ldr.w	r6, [r4, #-8]
 80013e2:	fb08 330e 	mla	r3, r8, lr, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80013e6:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 80013ea:	4083      	lsls	r3, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80013ec:	f04f 0b00 	mov.w	fp, #0
 80013f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013f4:	fbc3 0b06 	smlal	r0, fp, r3, r6
    result = (int32_t)(mult.long_long >> 31);
 80013f8:	0fc0      	lsrs	r0, r0, #31
		q15_t _b1 = *ip_b1++;
 80013fa:	f9bc 3034 	ldrsh.w	r3, [ip, #52]	; 0x34
 80013fe:	ea40 0b4b 	orr.w	fp, r0, fp, lsl #1
		ch_0_out_1 += ksrc[26] * _b1;
 8001402:	9806      	ldr	r0, [sp, #24]
 8001404:	fb08 0803 	mla	r8, r8, r3, r0
		ch_1_out_0 += ksrc2[26] * _b0;
 8001408:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800140c:	2f00      	cmp	r7, #0
 800140e:	fb0e 9e00 	mla	lr, lr, r0, r9
		ch_1_out_1 += ksrc2[26] * _b1;
 8001412:	fb03 5500 	mla	r5, r3, r0, r5
 8001416:	dc0f      	bgt.n	8001438 <arm_nn_mat_mult_kernel3_input3_s8_s16+0x260>
 8001418:	427f      	negs	r7, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
 800141a:	2301      	movs	r3, #1
 800141c:	40bb      	lsls	r3, r7
 800141e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8001420:	ea0b 0003 	and.w	r0, fp, r3
    if (result < 0)
 8001424:	fa5b fb07 	asrs.w	fp, fp, r7
    q31_t threshold = remainder_mask >> 1;
 8001428:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800142c:	bf48      	it	mi
 800142e:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8001430:	4298      	cmp	r0, r3
        result++;
 8001432:	bfc8      	it	gt
 8001434:	f10b 0b01 	addgt.w	fp, fp, #1
        ch_0_out_0 += out_offset;
 8001438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800143a:	449b      	add	fp, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800143c:	9b02      	ldr	r3, [sp, #8]
 800143e:	459b      	cmp	fp, r3
 8001440:	bfb8      	it	lt
 8001442:	469b      	movlt	fp, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8001444:	9b03      	ldr	r3, [sp, #12]
 8001446:	459b      	cmp	fp, r3
 8001448:	bfa8      	it	ge
 800144a:	469b      	movge	fp, r3
        *out_0++ = (q7_t)ch_0_out_0;
 800144c:	9b04      	ldr	r3, [sp, #16]
 800144e:	f803 bc02 	strb.w	fp, [r3, #-2]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8001452:	9b01      	ldr	r3, [sp, #4]
 8001454:	f853 6c08 	ldr.w	r6, [r3, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001458:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 800145c:	fa08 f803 	lsl.w	r8, r8, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001460:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8001464:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001468:	2700      	movs	r7, #0
 800146a:	fbc8 0703 	smlal	r0, r7, r8, r3
    result = (int32_t)(mult.long_long >> 31);
 800146e:	0fc0      	lsrs	r0, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001470:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
 8001472:	ea40 0747 	orr.w	r7, r0, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001476:	dc0d      	bgt.n	8001494 <arm_nn_mat_mult_kernel3_input3_s8_s16+0x2bc>
 8001478:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 800147a:	2301      	movs	r3, #1
 800147c:	40b3      	lsls	r3, r6
 800147e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8001480:	ea07 0003 	and.w	r0, r7, r3
    if (result < 0)
 8001484:	4137      	asrs	r7, r6
    q31_t threshold = remainder_mask >> 1;
 8001486:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800148a:	bf48      	it	mi
 800148c:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800148e:	4298      	cmp	r0, r3
        result++;
 8001490:	bfc8      	it	gt
 8001492:	3701      	addgt	r7, #1
        ch_0_out_1 += out_offset;
 8001494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001496:	441f      	add	r7, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8001498:	9b02      	ldr	r3, [sp, #8]
 800149a:	429f      	cmp	r7, r3
 800149c:	bfb8      	it	lt
 800149e:	461f      	movlt	r7, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80014a0:	9b03      	ldr	r3, [sp, #12]
 80014a2:	429f      	cmp	r7, r3
 80014a4:	bfa8      	it	ge
 80014a6:	461f      	movge	r7, r3
        *out_1++ = (q7_t)ch_0_out_1;
 80014a8:	9b05      	ldr	r3, [sp, #20]
 80014aa:	f803 7c02 	strb.w	r7, [r3, #-2]
        out_mult++;
        out_shift++;

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 80014ae:	9b01      	ldr	r3, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80014b0:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80014b4:	f853 0c04 	ldr.w	r0, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80014b8:	ea20 79e0 	bic.w	r9, r0, r0, asr #31
 80014bc:	fa0e fe09 	lsl.w	lr, lr, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80014c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c4:	2700      	movs	r7, #0
 80014c6:	fbce 3706 	smlal	r3, r7, lr, r6
    result = (int32_t)(mult.long_long >> 31);
 80014ca:	0fdb      	lsrs	r3, r3, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80014cc:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 80014ce:	ea43 0747 	orr.w	r7, r3, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80014d2:	dc0d      	bgt.n	80014f0 <arm_nn_mat_mult_kernel3_input3_s8_s16+0x318>
 80014d4:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	4083      	lsls	r3, r0
 80014da:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 80014dc:	ea07 0603 	and.w	r6, r7, r3
    if (result < 0)
 80014e0:	4107      	asrs	r7, r0
    q31_t threshold = remainder_mask >> 1;
 80014e2:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 80014e6:	bf48      	it	mi
 80014e8:	3301      	addmi	r3, #1
    if (remainder > threshold)
 80014ea:	429e      	cmp	r6, r3
        result++;
 80014ec:	bfc8      	it	gt
 80014ee:	3701      	addgt	r7, #1
        ch_1_out_0 += out_offset;
 80014f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80014f2:	441f      	add	r7, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 80014f4:	9b02      	ldr	r3, [sp, #8]
 80014f6:	429f      	cmp	r7, r3
 80014f8:	bfb8      	it	lt
 80014fa:	461f      	movlt	r7, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80014fc:	9b03      	ldr	r3, [sp, #12]
 80014fe:	429f      	cmp	r7, r3
 8001500:	bfa8      	it	ge
 8001502:	461f      	movge	r7, r3
        *out_0++ = (q7_t)ch_1_out_0;
 8001504:	9b04      	ldr	r3, [sp, #16]
 8001506:	f803 7c01 	strb.w	r7, [r3, #-1]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 800150a:	9b01      	ldr	r3, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800150c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8001510:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001514:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8001518:	4085      	lsls	r5, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800151a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800151e:	2000      	movs	r0, #0
 8001520:	fbc6 7005 	smlal	r7, r0, r6, r5
    result = (int32_t)(mult.long_long >> 31);
 8001524:	0fff      	lsrs	r7, r7, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001526:	2b00      	cmp	r3, #0
    result = (int32_t)(mult.long_long >> 31);
 8001528:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800152c:	dc0d      	bgt.n	800154a <arm_nn_mat_mult_kernel3_input3_s8_s16+0x372>
 800152e:	425b      	negs	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001530:	2501      	movs	r5, #1
 8001532:	409d      	lsls	r5, r3
 8001534:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
 8001536:	ea00 0605 	and.w	r6, r0, r5
    if (result < 0)
 800153a:	4118      	asrs	r0, r3
    q31_t threshold = remainder_mask >> 1;
 800153c:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
 8001540:	bf48      	it	mi
 8001542:	3501      	addmi	r5, #1
    if (remainder > threshold)
 8001544:	42ae      	cmp	r6, r5
        result++;
 8001546:	bfc8      	it	gt
 8001548:	3001      	addgt	r0, #1
        ch_1_out_1 += out_offset;
 800154a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800154c:	4418      	add	r0, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800154e:	9b02      	ldr	r3, [sp, #8]
 8001550:	4298      	cmp	r0, r3
 8001552:	bfb8      	it	lt
 8001554:	4618      	movlt	r0, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8001556:	9b03      	ldr	r3, [sp, #12]
 8001558:	4298      	cmp	r0, r3
 800155a:	bfa8      	it	ge
 800155c:	4618      	movge	r0, r3
        *out_1++ = (q7_t)ch_1_out_1;
 800155e:	9b05      	ldr	r3, [sp, #20]
 8001560:	f803 0c01 	strb.w	r0, [r3, #-1]
    while (row_count)
 8001564:	3302      	adds	r3, #2
 8001566:	9305      	str	r3, [sp, #20]
 8001568:	9b01      	ldr	r3, [sp, #4]
 800156a:	9804      	ldr	r0, [sp, #16]
 800156c:	3308      	adds	r3, #8
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	9b07      	ldr	r3, [sp, #28]
 8001572:	f10a 0a08 	add.w	sl, sl, #8
 8001576:	3002      	adds	r0, #2
 8001578:	4553      	cmp	r3, sl
 800157a:	9004      	str	r0, [sp, #16]
 800157c:	f104 0408 	add.w	r4, r4, #8
 8001580:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8001584:	f47f ae55 	bne.w	8001232 <arm_nn_mat_mult_kernel3_input3_s8_s16+0x5a>
        /* skip row */
        ksrc += 54;
        row_count--;
    }

    out_0 += output_ch;
 8001588:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800158c:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8001590:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001592:	4418      	add	r0, r3

    /* return the new output pointer with offset */
    return out_0;
}
 8001594:	b00b      	add	sp, #44	; 0x2c
 8001596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800159a:	bf00      	nop

0800159c <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 800159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a0:	b087      	sub	sp, #28
 80015a2:	4692      	mov	sl, r2
 80015a4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80015a8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80015ac:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80015b0:	9105      	str	r1, [sp, #20]
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
 80015b2:	fb04 f205 	mul.w	r2, r4, r5
{
 80015b6:	4683      	mov	fp, r0
	const int divider_half = ((sample_h * sample_w) / 2);
 80015b8:	9202      	str	r2, [sp, #8]
{
 80015ba:	f8bd 004c 	ldrh.w	r0, [sp, #76]	; 0x4c
 80015be:	9001      	str	r0, [sp, #4]
	const int divider_half = ((sample_h * sample_w) / 2);
 80015c0:	1052      	asrs	r2, r2, #1
 80015c2:	9203      	str	r2, [sp, #12]
	for(c = 0; c < input_c; c++){
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d050      	beq.n	800166a <avg_pooling+0xce>
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d04e      	beq.n	800166a <avg_pooling+0xce>
 80015cc:	f04f 0800 	mov.w	r8, #0
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d04a      	beq.n	800166a <avg_pooling+0xce>
		for(h = 0; h < output_h; h++){
 80015d4:	2200      	movs	r2, #0
 80015d6:	9204      	str	r2, [sp, #16]
					avg -= divider_half;

				int out = avg / (sample_h * sample_w);
				out = TN_MAX(out, out_activation_min);
				out = TN_MIN(out, out_activation_max);
				output[(w + h * output_w) * input_c + c] = out;
 80015d8:	9901      	ldr	r1, [sp, #4]
 80015da:	9a04      	ldr	r2, [sp, #16]
 80015dc:	fb02 f901 	mul.w	r9, r2, r1
 80015e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80015e2:	fb03 8909 	mla	r9, r3, r9, r8
 80015e6:	f04f 0c00 	mov.w	ip, #0
 80015ea:	4489      	add	r9, r1
					int height = sh + h * sample_h;
 80015ec:	fb02 fe05 	mul.w	lr, r2, r5
			for(w = 0; w < output_w; w++){
 80015f0:	f8cd c000 	str.w	ip, [sp]
				int avg = 0;
 80015f4:	4628      	mov	r0, r5
				for(sh = 0; sh < sample_h; sh++){
 80015f6:	2d00      	cmp	r5, #0
 80015f8:	d03a      	beq.n	8001670 <avg_pooling+0xd4>
				int avg = 0;
 80015fa:	2000      	movs	r0, #0
				for(sh = 0; sh < sample_h; sh++){
 80015fc:	4607      	mov	r7, r0
					int height = sh + h * sample_h;
 80015fe:	eb0e 0207 	add.w	r2, lr, r7
					for(sw = 0; sw < sample_w; sw++){
 8001602:	b164      	cbz	r4, 800161e <avg_pooling+0x82>
 8001604:	fb02 c20a 	mla	r2, r2, sl, ip
 8001608:	fb03 8202 	mla	r2, r3, r2, r8
 800160c:	445a      	add	r2, fp
 800160e:	2100      	movs	r1, #0
						avg += input[(width + height * input_w) * input_c + c];
 8001610:	f992 6000 	ldrsb.w	r6, [r2]
					for(sw = 0; sw < sample_w; sw++){
 8001614:	3101      	adds	r1, #1
 8001616:	428c      	cmp	r4, r1
						avg += input[(width + height * input_w) * input_c + c];
 8001618:	4430      	add	r0, r6
					for(sw = 0; sw < sample_w; sw++){
 800161a:	441a      	add	r2, r3
 800161c:	d1f8      	bne.n	8001610 <avg_pooling+0x74>
				for(sh = 0; sh < sample_h; sh++){
 800161e:	3701      	adds	r7, #1
 8001620:	42bd      	cmp	r5, r7
 8001622:	dcec      	bgt.n	80015fe <avg_pooling+0x62>
				if (avg > 0)
 8001624:	2800      	cmp	r0, #0
 8001626:	dd23      	ble.n	8001670 <avg_pooling+0xd4>
					avg += divider_half;
 8001628:	9a03      	ldr	r2, [sp, #12]
 800162a:	4402      	add	r2, r0
				int out = avg / (sample_h * sample_w);
 800162c:	9902      	ldr	r1, [sp, #8]
 800162e:	fb92 f2f1 	sdiv	r2, r2, r1
				out = TN_MAX(out, out_activation_min);
 8001632:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001634:	428a      	cmp	r2, r1
 8001636:	bfb8      	it	lt
 8001638:	460a      	movlt	r2, r1
				out = TN_MIN(out, out_activation_max);
 800163a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800163c:	428a      	cmp	r2, r1
 800163e:	bfa8      	it	ge
 8001640:	460a      	movge	r2, r1
				output[(w + h * output_w) * input_c + c] = out;
 8001642:	f889 2000 	strb.w	r2, [r9]
			for(w = 0; w < output_w; w++){
 8001646:	9a00      	ldr	r2, [sp, #0]
 8001648:	9901      	ldr	r1, [sp, #4]
 800164a:	3201      	adds	r2, #1
 800164c:	428a      	cmp	r2, r1
 800164e:	9200      	str	r2, [sp, #0]
 8001650:	4499      	add	r9, r3
 8001652:	44a4      	add	ip, r4
 8001654:	d1ce      	bne.n	80015f4 <avg_pooling+0x58>
		for(h = 0; h < output_h; h++){
 8001656:	9a04      	ldr	r2, [sp, #16]
 8001658:	9905      	ldr	r1, [sp, #20]
 800165a:	3201      	adds	r2, #1
 800165c:	428a      	cmp	r2, r1
 800165e:	9204      	str	r2, [sp, #16]
 8001660:	dbba      	blt.n	80015d8 <avg_pooling+0x3c>
	for(c = 0; c < input_c; c++){
 8001662:	f108 0801 	add.w	r8, r8, #1
 8001666:	4598      	cmp	r8, r3
 8001668:	d1b4      	bne.n	80015d4 <avg_pooling+0x38>
			}
		}
	}
}
 800166a:	b007      	add	sp, #28
 800166c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					avg -= divider_half;
 8001670:	9a03      	ldr	r2, [sp, #12]
 8001672:	1a82      	subs	r2, r0, r2
 8001674:	e7da      	b.n	800162c <avg_pooling+0x90>
 8001676:	bf00      	nop

08001678 <convolve_1x1_s8>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8001678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800167c:	4699      	mov	r9, r3
 800167e:	b093      	sub	sp, #76	; 0x4c
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8001680:	f019 0603 	ands.w	r6, r9, #3
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8001684:	4607      	mov	r7, r0
 8001686:	9010      	str	r0, [sp, #64]	; 0x40
 8001688:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800168a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800168c:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8001690:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8001694:	f8bd b09c 	ldrh.w	fp, [sp, #156]	; 0x9c
 8001698:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 800169c:	f040 80e4 	bne.w	8001868 <convolve_1x1_s8+0x1f0>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
	const int channel_div4 = (input_ch >> 2);

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80016a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
	const int32_t num_elements = output_x * output_y;
 80016a6:	930f      	str	r3, [sp, #60]	; 0x3c
	const int channel_div4 = (input_ch >> 2);
 80016a8:	ea4f 0a99 	mov.w	sl, r9, lsr #2

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80016ac:	105b      	asrs	r3, r3, #1
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80016ae:	b214      	sxth	r4, r2
	const int channel_div4 = (input_ch >> 2);
 80016b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80016b4:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80016b8:	9309      	str	r3, [sp, #36]	; 0x24
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80016ba:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80016be:	d058      	beq.n	8001772 <convolve_1x1_s8+0xfa>
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 80016c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80016c2:	f8cd 9020 	str.w	r9, [sp, #32]
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80016ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	930c      	str	r3, [sp, #48]	; 0x30
 80016d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	930d      	str	r3, [sp, #52]	; 0x34
 80016d6:	4655      	mov	r5, sl
 80016d8:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80016dc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80016e0:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80016e4:	930a      	str	r3, [sp, #40]	; 0x28
		q7_t *src = &input[i_element * input_ch * 2];
 80016e6:	4639      	mov	r1, r7
		while (cnt > 0) {
 80016e8:	b325      	cbz	r5, 8001734 <convolve_1x1_s8+0xbc>
		q15_t *dst = two_column_buffer;
 80016ea:	4642      	mov	r2, r8
		while (cnt > 0) {
 80016ec:	46ae      	mov	lr, r5
    memcpy(&val, *in_q7, 4);
 80016ee:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016f0:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80016f4:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016f8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016fc:	fa93 f304 	sadd16	r3, r3, r4
 8001700:	fa9c fc04 	sadd16	ip, ip, r4
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8001704:	6053      	str	r3, [r2, #4]
 8001706:	f8c2 c000 	str.w	ip, [r2]
 800170a:	f8d1 c004 	ldr.w	ip, [r1, #4]
    *in_q7 += 4;
 800170e:	3108      	adds	r1, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8001710:	ea4f 233c 	mov.w	r3, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001714:	fa2f fc8c 	sxtb16	ip, ip
 8001718:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800171c:	fa93 f304 	sadd16	r3, r3, r4
 8001720:	fa9c fc04 	sadd16	ip, ip, r4
 8001724:	f1be 0e01 	subs.w	lr, lr, #1
 8001728:	f8c2 c008 	str.w	ip, [r2, #8]
 800172c:	60d3      	str	r3, [r2, #12]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 800172e:	f102 0210 	add.w	r2, r2, #16
 8001732:	d1dc      	bne.n	80016ee <convolve_1x1_s8+0x76>
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8001734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001736:	9305      	str	r3, [sp, #20]
 8001738:	9b08      	ldr	r3, [sp, #32]
 800173a:	9304      	str	r3, [sp, #16]
 800173c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800173e:	9303      	str	r3, [sp, #12]
 8001740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800174a:	9300      	str	r3, [sp, #0]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800174c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 800174e:	9006      	str	r0, [sp, #24]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8001750:	441f      	add	r7, r3
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8001752:	465a      	mov	r2, fp
 8001754:	464b      	mov	r3, r9
 8001756:	4641      	mov	r1, r8
 8001758:	4650      	mov	r0, sl
 800175a:	f7ff fb01 	bl	8000d60 <arm_nn_mat_mult_kernel_s8_s16_reordered>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	3601      	adds	r6, #1
 8001762:	429e      	cmp	r6, r3
 8001764:	d1bf      	bne.n	80016e6 <convolve_1x1_s8+0x6e>
 8001766:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 800176a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800176e:	46aa      	mov	sl, r5
 8001770:	9d1c      	ldr	r5, [sp, #112]	; 0x70
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8001772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001774:	07da      	lsls	r2, r3, #31
 8001776:	d573      	bpl.n	8001860 <convolve_1x1_s8+0x1e8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8001778:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800177a:	3b01      	subs	r3, #1
 800177c:	fb09 2903 	mla	r9, r9, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8001780:	f1ba 0f00 	cmp.w	sl, #0
 8001784:	d013      	beq.n	80017ae <convolve_1x1_s8+0x136>
		q15_t *dst = two_column_buffer;
 8001786:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001788:	4642      	mov	r2, r8
    memcpy(&val, *in_q7, 4);
 800178a:	f859 3b04 	ldr.w	r3, [r9], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800178e:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8001792:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001796:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800179a:	fa93 f304 	sadd16	r3, r3, r4
 800179e:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 80017a2:	3e01      	subs	r6, #1
  memcpy (*pQ15, &val, 4);
 80017a4:	6011      	str	r1, [r2, #0]
 80017a6:	6053      	str	r3, [r2, #4]
 *pQ15 += 2;
 80017a8:	f102 0208 	add.w	r2, r2, #8
 80017ac:	d1ed      	bne.n	800178a <convolve_1x1_s8+0x112>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80017ae:	f1bb 0f00 	cmp.w	fp, #0
 80017b2:	d055      	beq.n	8001860 <convolve_1x1_s8+0x1e8>
 80017b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80017b6:	f1a3 0904 	sub.w	r9, r3, #4
 80017ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80017bc:	f1a3 0e04 	sub.w	lr, r3, #4
 80017c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80017c2:	f1a3 0a04 	sub.w	sl, r3, #4
 80017c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4483      	add	fp, r0
 80017d2:	9308      	str	r3, [sp, #32]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80017d4:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 80017d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			q31_t sum = bias[i_ch_out];
 80017da:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 80017de:	b19a      	cbz	r2, 8001808 <convolve_1x1_s8+0x190>
 80017e0:	9a08      	ldr	r2, [sp, #32]
			const q15_t *ip_as_col = runtime_buf;
 80017e2:	4641      	mov	r1, r8
 80017e4:	18af      	adds	r7, r5, r2
    memcpy(&val, *in_q7, 4);
 80017e6:	f855 2b04 	ldr.w	r2, [r5], #4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80017ea:	680e      	ldr	r6, [r1, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 80017ec:	ea4f 2432 	mov.w	r4, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80017f0:	fa2f f282 	sxtb16	r2, r2
 80017f4:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80017f8:	fb22 3306 	smlad	r3, r2, r6, r3
    memcpy(&val, *in_q15, 4);
 80017fc:	684a      	ldr	r2, [r1, #4]
    *in_q15 += 2;
 80017fe:	3108      	adds	r1, #8
 8001800:	fb24 3302 	smlad	r3, r4, r2, r3
			while (col_count) {
 8001804:	42bd      	cmp	r5, r7
 8001806:	d1ee      	bne.n	80017e6 <convolve_1x1_s8+0x16e>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8001808:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800180c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001810:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 8001814:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001816:	2600      	movs	r6, #0
 8001818:	4662      	mov	r2, ip
 800181a:	fbc3 2604 	smlal	r2, r6, r3, r4
    result = (int32_t)(mult.long_long >> 31);
 800181e:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001820:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8001822:	ea42 0646 	orr.w	r6, r2, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001826:	dc0d      	bgt.n	8001844 <convolve_1x1_s8+0x1cc>
 8001828:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800182a:	2301      	movs	r3, #1
 800182c:	408b      	lsls	r3, r1
 800182e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8001830:	ea06 0203 	and.w	r2, r6, r3
    if (result < 0)
 8001834:	410e      	asrs	r6, r1
    q31_t threshold = remainder_mask >> 1;
 8001836:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800183a:	bf48      	it	mi
 800183c:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800183e:	429a      	cmp	r2, r3
        result++;
 8001840:	bfc8      	it	gt
 8001842:	3601      	addgt	r6, #1
					output_shift[i_ch_out]);
			sum += out_offset;
 8001844:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001846:	441e      	add	r6, r3
			sum = MAX(sum, out_activation_min);
 8001848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800184a:	429e      	cmp	r6, r3
 800184c:	bfb8      	it	lt
 800184e:	461e      	movlt	r6, r3
			sum = MIN(sum, out_activation_max);
 8001850:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001852:	429e      	cmp	r6, r3
 8001854:	bfa8      	it	ge
 8001856:	461e      	movge	r6, r3
			*out++ = (q7_t) sum;
 8001858:	f800 6b01 	strb.w	r6, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 800185c:	4558      	cmp	r0, fp
 800185e:	d1bb      	bne.n	80017d8 <convolve_1x1_s8+0x160>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8001860:	2000      	movs	r0, #0
}
 8001862:	b013      	add	sp, #76	; 0x4c
 8001864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 8001868:	2001      	movs	r0, #1
}
 800186a:	b013      	add	sp, #76	; 0x4c
 800186c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001870 <convolve_1x1_s8_ch16>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8001870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001874:	b091      	sub	sp, #68	; 0x44
 8001876:	469a      	mov	sl, r3
 8001878:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 800187c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8001880:	f9bd 407c 	ldrsh.w	r4, [sp, #124]	; 0x7c
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8001884:	900f      	str	r0, [sp, #60]	; 0x3c
	const int32_t num_elements = output_x * output_y;
 8001886:	fb02 f303 	mul.w	r3, r2, r3
	const int channel_div4 = (input_ch >> 2);
 800188a:	ea4f 099a 	mov.w	r9, sl, lsr #2
	const int32_t num_elements = output_x * output_y;
 800188e:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8001890:	105b      	asrs	r3, r3, #1
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8001892:	4607      	mov	r7, r0
 8001894:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001896:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001898:	f8bd b094 	ldrh.w	fp, [sp, #148]	; 0x94
 800189c:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
	const int channel_div4 = (input_ch >> 2);
 80018a0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80018a4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80018a8:	9309      	str	r3, [sp, #36]	; 0x24
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80018aa:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80018ae:	d053      	beq.n	8001958 <convolve_1x1_s8_ch16+0xe8>
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 80018b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80018b2:	f8cd a020 	str.w	sl, [sp, #32]
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	930b      	str	r3, [sp, #44]	; 0x2c
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80018ba:	464d      	mov	r5, r9
 80018bc:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80018c0:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80018c4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80018c8:	930a      	str	r3, [sp, #40]	; 0x28
 80018ca:	2600      	movs	r6, #0
		q7_t *src = &input[i_element * input_ch * 2];
 80018cc:	4639      	mov	r1, r7
		while (cnt > 0) {
 80018ce:	b325      	cbz	r5, 800191a <convolve_1x1_s8_ch16+0xaa>
		q15_t *dst = two_column_buffer;
 80018d0:	4642      	mov	r2, r8
		while (cnt > 0) {
 80018d2:	46ae      	mov	lr, r5
    memcpy(&val, *in_q7, 4);
 80018d4:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80018d6:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80018da:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80018de:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80018e2:	fa93 f304 	sadd16	r3, r3, r4
 80018e6:	fa9c fc04 	sadd16	ip, ip, r4
  memcpy (*pQ15, &val, 4);
 80018ea:	6053      	str	r3, [r2, #4]
 80018ec:	f8c2 c000 	str.w	ip, [r2]
 80018f0:	f8d1 c004 	ldr.w	ip, [r1, #4]
    *in_q7 += 4;
 80018f4:	3108      	adds	r1, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 80018f6:	ea4f 233c 	mov.w	r3, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80018fa:	fa2f fc8c 	sxtb16	ip, ip
 80018fe:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001902:	fa93 f304 	sadd16	r3, r3, r4
 8001906:	fa9c fc04 	sadd16	ip, ip, r4
 800190a:	f1be 0e01 	subs.w	lr, lr, #1
 800190e:	f8c2 c008 	str.w	ip, [r2, #8]
 8001912:	60d3      	str	r3, [r2, #12]
 *pQ15 += 2;
 8001914:	f102 0210 	add.w	r2, r2, #16
 8001918:	d1dc      	bne.n	80018d4 <convolve_1x1_s8_ch16+0x64>
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 800191a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800191c:	9305      	str	r3, [sp, #20]
 800191e:	9b08      	ldr	r3, [sp, #32]
 8001920:	9304      	str	r3, [sp, #16]
 8001922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001924:	9303      	str	r3, [sp, #12]
 8001926:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001930:	9300      	str	r3, [sp, #0]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8001932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 8001934:	9006      	str	r0, [sp, #24]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8001936:	441f      	add	r7, r3
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 8001938:	465a      	mov	r2, fp
 800193a:	4653      	mov	r3, sl
 800193c:	4641      	mov	r1, r8
 800193e:	4648      	mov	r0, r9
 8001940:	f001 fbd8 	bl	80030f4 <mat_mult_kernel_s8_s16_reordered_ch16>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8001944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001946:	3601      	adds	r6, #1
 8001948:	429e      	cmp	r6, r3
 800194a:	d1bf      	bne.n	80018cc <convolve_1x1_s8_ch16+0x5c>
 800194c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8001950:	f8dd a020 	ldr.w	sl, [sp, #32]
 8001954:	46a9      	mov	r9, r5
 8001956:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8001958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800195a:	07da      	lsls	r2, r3, #31
 800195c:	d573      	bpl.n	8001a46 <convolve_1x1_s8_ch16+0x1d6>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 800195e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001960:	3b01      	subs	r3, #1
 8001962:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8001966:	f1b9 0f00 	cmp.w	r9, #0
 800196a:	d013      	beq.n	8001994 <convolve_1x1_s8_ch16+0x124>
		q15_t *dst = two_column_buffer;
 800196c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800196e:	4642      	mov	r2, r8
    memcpy(&val, *in_q7, 4);
 8001970:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001974:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8001978:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800197c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001980:	fa93 f304 	sadd16	r3, r3, r4
 8001984:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8001988:	3e01      	subs	r6, #1
  memcpy (*pQ15, &val, 4);
 800198a:	6011      	str	r1, [r2, #0]
 800198c:	6053      	str	r3, [r2, #4]
 *pQ15 += 2;
 800198e:	f102 0208 	add.w	r2, r2, #8
 8001992:	d1ed      	bne.n	8001970 <convolve_1x1_s8_ch16+0x100>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8001994:	f1bb 0f00 	cmp.w	fp, #0
 8001998:	d055      	beq.n	8001a46 <convolve_1x1_s8_ch16+0x1d6>
 800199a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800199c:	1f1f      	subs	r7, r3, #4
 800199e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80019a0:	f1a3 0c04 	sub.w	ip, r3, #4
 80019a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80019a6:	f1a3 0e04 	sub.w	lr, r3, #4
 80019aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4483      	add	fp, r0
 80019b6:	9308      	str	r3, [sp, #32]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80019b8:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 80019bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 80019be:	f857 3f04 	ldr.w	r3, [r7, #4]!
			while (col_count) {
 80019c2:	b1a2      	cbz	r2, 80019ee <convolve_1x1_s8_ch16+0x17e>
 80019c4:	9a08      	ldr	r2, [sp, #32]
			const q15_t *ip_as_col = runtime_buf;
 80019c6:	4641      	mov	r1, r8
 80019c8:	eb05 0902 	add.w	r9, r5, r2
    memcpy(&val, *in_q7, 4);
 80019cc:	f855 2b04 	ldr.w	r2, [r5], #4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80019d0:	680e      	ldr	r6, [r1, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 80019d2:	ea4f 2432 	mov.w	r4, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80019d6:	fa2f f282 	sxtb16	r2, r2
 80019da:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80019de:	fb22 3306 	smlad	r3, r2, r6, r3
    memcpy(&val, *in_q15, 4);
 80019e2:	684a      	ldr	r2, [r1, #4]
    *in_q15 += 2;
 80019e4:	3108      	adds	r1, #8
 80019e6:	fb24 3302 	smlad	r3, r4, r2, r3
			while (col_count) {
 80019ea:	454d      	cmp	r5, r9
 80019ec:	d1ee      	bne.n	80019cc <convolve_1x1_s8_ch16+0x15c>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 80019ee:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80019f2:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80019f6:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 80019fa:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80019fc:	2600      	movs	r6, #0
 80019fe:	4652      	mov	r2, sl
 8001a00:	fbc3 2604 	smlal	r2, r6, r3, r4
    result = (int32_t)(mult.long_long >> 31);
 8001a04:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001a06:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8001a08:	ea42 0646 	orr.w	r6, r2, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001a0c:	dc0d      	bgt.n	8001a2a <convolve_1x1_s8_ch16+0x1ba>
 8001a0e:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	408b      	lsls	r3, r1
 8001a14:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8001a16:	ea06 0203 	and.w	r2, r6, r3
    if (result < 0)
 8001a1a:	410e      	asrs	r6, r1
    q31_t threshold = remainder_mask >> 1;
 8001a1c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8001a20:	bf48      	it	mi
 8001a22:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8001a24:	429a      	cmp	r2, r3
        result++;
 8001a26:	bfc8      	it	gt
 8001a28:	3601      	addgt	r6, #1
					output_shift[i_ch_out]);
			sum += out_offset;
 8001a2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001a2c:	441e      	add	r6, r3
			sum = MAX(sum, out_activation_min);
 8001a2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001a30:	429e      	cmp	r6, r3
 8001a32:	bfb8      	it	lt
 8001a34:	461e      	movlt	r6, r3
			sum = MIN(sum, out_activation_max);
 8001a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001a38:	429e      	cmp	r6, r3
 8001a3a:	bfa8      	it	ge
 8001a3c:	461e      	movge	r6, r3
			*out++ = (q7_t) sum;
 8001a3e:	f800 6b01 	strb.w	r6, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8001a42:	4558      	cmp	r0, fp
 8001a44:	d1ba      	bne.n	80019bc <convolve_1x1_s8_ch16+0x14c>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8001a46:	2000      	movs	r0, #0
 8001a48:	b011      	add	sp, #68	; 0x44
 8001a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a4e:	bf00      	nop

08001a50 <convolve_s8_kernel3_inputch3_stride2_pad1>:
		const int32_t *output_shift, const int32_t *output_mult,
		const int32_t output_offset, const int32_t input_offset,
		const int32_t output_activation_min,
		const int32_t output_activation_max, q7_t *output,
		const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf, q7_t pad_value) {
 8001a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a54:	ed2d 8b02 	vpush	{d8}
 8001a58:	b099      	sub	sp, #100	; 0x64
 8001a5a:	4607      	mov	r7, r0
	q15_t *two_column_buf = runtime_buf;
	q7_t *out = output;

	q15_t pad16 = pad_value;
	const int16_t inoff16 = input_offset;
	q15_t pad_out = pad16 + inoff16;
 8001a5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf, q7_t pad_value) {
 8001a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a60:	f99d 30c8 	ldrsb.w	r3, [sp, #200]	; 0xc8
 8001a64:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8001a68:	9116      	str	r1, [sp, #88]	; 0x58
	q15_t pad_out = pad16 + inoff16;
 8001a6a:	b296      	uxth	r6, r2
 8001a6c:	4433      	add	r3, r6
 8001a6e:	fa0f f883 	sxth.w	r8, r3
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8001a72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf, q7_t pad_value) {
 8001a74:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	eac3 4503 	pkhbt	r5, r3, r3, lsl #16
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf, q7_t pad_value) {
 8001a7e:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8001a82:	9309      	str	r3, [sp, #36]	; 0x24
 8001a84:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
 8001a88:	9315      	str	r3, [sp, #84]	; 0x54
 8001a8a:	ee08 2a10 	vmov	s16, r2
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
 8001a8e:	eac8 4308 	pkhbt	r3, r8, r8, lsl #16
 8001a92:	9311      	str	r3, [sp, #68]	; 0x44

	const q7_t *ip_a0 = kernel;

	for (int i = 0; i < output_ch; i += 2) {
 8001a94:	2a00      	cmp	r2, #0
 8001a96:	f000 80ba 	beq.w	8001c0e <convolve_s8_kernel3_inputch3_stride2_pad1+0x1be>
 8001a9a:	1e53      	subs	r3, r2, #1
 8001a9c:	085b      	lsrs	r3, r3, #1
 8001a9e:	2236      	movs	r2, #54	; 0x36
 8001aa0:	fb03 2302 	mla	r3, r3, r2, r2
 8001aa4:	eb09 0c03 	add.w	ip, r9, r3
 8001aa8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
	const q7_t *ip_a0 = kernel;
 8001aaa:	464a      	mov	r2, r9
    memcpy(&val, *in_q7, 4);
 8001aac:	6811      	ldr	r1, [r2, #0]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001aae:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001ab2:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001ab6:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001aba:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8001abe:	e9c3 1400 	strd	r1, r4, [r3]
    memcpy(&val, *in_q7, 4);
 8001ac2:	f8d2 101b 	ldr.w	r1, [r2, #27]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001ac6:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001aca:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001ace:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001ad2:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001ad6:	f8c3 403a 	str.w	r4, [r3, #58]	; 0x3a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001ada:	f8c3 1036 	str.w	r1, [r3, #54]	; 0x36
    memcpy(&val, *in_q7, 4);
 8001ade:	6851      	ldr	r1, [r2, #4]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001ae0:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001ae4:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001ae8:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001aec:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8001af0:	e9c3 1402 	strd	r1, r4, [r3, #8]
    memcpy(&val, *in_q7, 4);
 8001af4:	f8d2 101f 	ldr.w	r1, [r2, #31]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001af8:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001afc:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b00:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b04:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b08:	f8c3 4042 	str.w	r4, [r3, #66]	; 0x42
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b0c:	f8c3 103e 	str.w	r1, [r3, #62]	; 0x3e
    memcpy(&val, *in_q7, 4);
 8001b10:	6891      	ldr	r1, [r2, #8]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001b12:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001b16:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b1a:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b1e:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8001b22:	e9c3 1404 	strd	r1, r4, [r3, #16]
    memcpy(&val, *in_q7, 4);
 8001b26:	f8d2 1023 	ldr.w	r1, [r2, #35]	; 0x23
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001b2a:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001b2e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b32:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b36:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b3a:	f8c3 404a 	str.w	r4, [r3, #74]	; 0x4a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b3e:	f8c3 1046 	str.w	r1, [r3, #70]	; 0x46
    memcpy(&val, *in_q7, 4);
 8001b42:	68d1      	ldr	r1, [r2, #12]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001b44:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001b48:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b4c:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b50:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8001b54:	e9c3 1406 	strd	r1, r4, [r3, #24]
    memcpy(&val, *in_q7, 4);
 8001b58:	f8d2 1027 	ldr.w	r1, [r2, #39]	; 0x27
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001b5c:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001b60:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b64:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b68:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b6c:	f8c3 4052 	str.w	r4, [r3, #82]	; 0x52
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b70:	f8c3 104e 	str.w	r1, [r3, #78]	; 0x4e
    memcpy(&val, *in_q7, 4);
 8001b74:	6911      	ldr	r1, [r2, #16]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001b76:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001b7a:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b7e:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b82:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8001b86:	e9c3 1408 	strd	r1, r4, [r3, #32]
    memcpy(&val, *in_q7, 4);
 8001b8a:	f8d2 102b 	ldr.w	r1, [r2, #43]	; 0x2b
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001b8e:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001b92:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b96:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001b9a:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001b9e:	f8c3 405a 	str.w	r4, [r3, #90]	; 0x5a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001ba2:	f8c3 1056 	str.w	r1, [r3, #86]	; 0x56
    memcpy(&val, *in_q7, 4);
 8001ba6:	6951      	ldr	r1, [r2, #20]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001ba8:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001bac:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001bb0:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001bb4:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8001bb8:	e9c3 140a 	strd	r1, r4, [r3, #40]	; 0x28
    memcpy(&val, *in_q7, 4);
 8001bbc:	f8d2 102f 	ldr.w	r1, [r2, #47]	; 0x2f
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001bc0:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001bc4:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001bc8:	eac0 4421 	pkhtb	r4, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001bcc:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001bd0:	f8c3 4062 	str.w	r4, [r3, #98]	; 0x62
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001bd4:	f8c3 105e 	str.w	r1, [r3, #94]	; 0x5e
		dst1_31 += 2;
		dst2_31 += 2;
		//25, 26, 27
		dst1 = dst1_31;
		dst2 = dst2_31;
		dst1[0] = *ip_a0++;
 8001bd8:	f992 1018 	ldrsb.w	r1, [r2, #24]
 8001bdc:	8619      	strh	r1, [r3, #48]	; 0x30
		dst1[1] = *ip_a0++;
 8001bde:	f992 1019 	ldrsb.w	r1, [r2, #25]
 8001be2:	8659      	strh	r1, [r3, #50]	; 0x32
		dst1[2] = *ip_a0++;
 8001be4:	f992 101a 	ldrsb.w	r1, [r2, #26]
 8001be8:	8699      	strh	r1, [r3, #52]	; 0x34
		dst2[0] = *ip_a1++;
 8001bea:	f992 1033 	ldrsb.w	r1, [r2, #51]	; 0x33
 8001bee:	f8a3 1066 	strh.w	r1, [r3, #102]	; 0x66
		dst2[1] = *ip_a1++;
 8001bf2:	f992 1034 	ldrsb.w	r1, [r2, #52]	; 0x34
 8001bf6:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
		dst2[2] = *ip_a1++;
 8001bfa:	f992 1035 	ldrsb.w	r1, [r2, #53]	; 0x35
 8001bfe:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a

		/* skip row */
		ip_a0 += 27;
 8001c02:	3236      	adds	r2, #54	; 0x36
	for (int i = 0; i < output_ch; i += 2) {
 8001c04:	4562      	cmp	r2, ip
 8001c06:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001c0a:	f47f af4f 	bne.w	8001aac <convolve_s8_kernel3_inputch3_stride2_pad1+0x5c>
	}

	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8001c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 816e 	beq.w	8001ef2 <convolve_s8_kernel3_inputch3_stride2_pad1+0x4a2>
			/* buffer for load:16bit */
			q15_t *dst;
			q15_t *dst2;
			q15_t *dst3;

			int input_row_offset = 3 * input_x;
 8001c16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001c18:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 8001c1c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
					q7_q15_offset_ele(src3, dst3)
					*dst3++ = *src3++ + input_offset;
				} else {						//first element is pad
												//3x3 = 9 elements
					src2 = input;
					src3 = src2 + input_row_offset;
 8001c20:	eb07 030a 	add.w	r3, r7, sl
 8001c24:	9313      	str	r3, [sp, #76]	; 0x4c

			two_column_buf += 27;
			/* Computation is filed for every 2 columns */
			if (two_column_buf == runtime_buf + 2 * 27) {

				out = arm_nn_mat_mult_kernel3_input3_s8_s16(kernel,
 8001c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001c28:	00da      	lsls	r2, r3, #3
 8001c2a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001c2e:	9314      	str	r3, [sp, #80]	; 0x50
 8001c30:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8001c32:	9217      	str	r2, [sp, #92]	; 0x5c
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	9210      	str	r2, [sp, #64]	; 0x40
			if (two_column_buf == runtime_buf + 2 * 27) {
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	326c      	adds	r2, #108	; 0x6c
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8001c3e:	2100      	movs	r1, #0
			if (two_column_buf == runtime_buf + 2 * 27) {
 8001c40:	920a      	str	r2, [sp, #40]	; 0x28
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8001c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	f000 828a 	beq.w	800215e <convolve_s8_kernel3_inputch3_stride2_pad1+0x70e>
 8001c4a:	b28a      	uxth	r2, r1
			const int16_t base_idx_y = (i_out_y * 2) - 1;
 8001c4c:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8001c50:	9212      	str	r2, [sp, #72]	; 0x48
					src = input + (base_idx_y * input_x) * input_ch;
 8001c52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001c56:	fb02 f209 	mul.w	r2, r2, r9
 8001c5a:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c5c:	fb01 7202 	mla	r2, r1, r2, r7
					src2 = src + input_row_offset;
 8001c60:	eb02 010a 	add.w	r1, r2, sl
					src = input + (base_idx_y * input_x) * input_ch;
 8001c64:	920c      	str	r2, [sp, #48]	; 0x30
					src3 = src2 + input_row_offset;
 8001c66:	eb02 024a 	add.w	r2, r2, sl, lsl #1
					src2 = src + input_row_offset;
 8001c6a:	910d      	str	r1, [sp, #52]	; 0x34
					src3 = src2 + input_row_offset;
 8001c6c:	920e      	str	r2, [sp, #56]	; 0x38
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8001c6e:	2400      	movs	r4, #0
			const int16_t base_idx_x = (i_out_x * 2) - 1;
 8001c70:	b2a4      	uxth	r4, r4
 8001c72:	0062      	lsls	r2, r4, #1
 8001c74:	3a01      	subs	r2, #1
			if (base_idx_y != -1) {
 8001c76:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8001c7a:	b212      	sxth	r2, r2
 8001c7c:	f000 813f 	beq.w	8001efe <convolve_s8_kernel3_inputch3_stride2_pad1+0x4ae>
				if (base_idx_x != -1) { //load all for now and unroll all
 8001c80:	1c50      	adds	r0, r2, #1
 8001c82:	f000 81ca 	beq.w	800201a <convolve_s8_kernel3_inputch3_stride2_pad1+0x5ca>
					src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8001c86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001c88:	440a      	add	r2, r1
 8001c8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001c8c:	fb01 f202 	mul.w	r2, r1, r2
 8001c90:	18b9      	adds	r1, r7, r2
					src2 = src + input_row_offset;
 8001c92:	58ba      	ldr	r2, [r7, r2]
 8001c94:	eb01 0c0a 	add.w	ip, r1, sl
  return (op1 >> op2) | (op1 << (32U - op2));
 8001c98:	ea4f 2e32 	mov.w	lr, r2, ror #8
					src3 = src2 + input_row_offset;
 8001c9c:	eb01 004a 	add.w	r0, r1, sl, lsl #1
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001ca0:	fa2f f282 	sxtb16	r2, r2
 8001ca4:	fa2f fe8e 	sxtb16	lr, lr
					q7_q15_offset_ele(src, dst)
 8001ca8:	eace 4b22 	pkhtb	fp, lr, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001cac:	fa9b fb05 	sadd16	fp, fp, r5
 8001cb0:	eac2 420e 	pkhbt	r2, r2, lr, lsl #16
 8001cb4:	fa92 f205 	sadd16	r2, r2, r5
  memcpy (*pQ15, &val, 4);
 8001cb8:	f8c3 b004 	str.w	fp, [r3, #4]
 8001cbc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8001cbe:	684a      	ldr	r2, [r1, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001cc0:	fa2f fe82 	sxtb16	lr, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8001cc4:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001cc8:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src, dst)
 8001ccc:	eac2 4b2e 	pkhtb	fp, r2, lr, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001cd0:	fa9b fb05 	sadd16	fp, fp, r5
 8001cd4:	eace 4e02 	pkhbt	lr, lr, r2, lsl #16
 8001cd8:	fa9e fe05 	sadd16	lr, lr, r5
 8001cdc:	f8c3 e008 	str.w	lr, [r3, #8]
 8001ce0:	f8c3 b00c 	str.w	fp, [r3, #12]
					*dst++ = *src++ + input_offset;
 8001ce4:	f991 2008 	ldrsb.w	r2, [r1, #8]
 8001ce8:	4432      	add	r2, r6
 8001cea:	821a      	strh	r2, [r3, #16]
 8001cec:	f851 200a 	ldr.w	r2, [r1, sl]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001cf0:	fa2f fe82 	sxtb16	lr, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8001cf4:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001cf8:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8001cfc:	eac2 4b2e 	pkhtb	fp, r2, lr, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001d00:	fa9b fb05 	sadd16	fp, fp, r5
 8001d04:	eace 4e02 	pkhbt	lr, lr, r2, lsl #16
 8001d08:	fa9e fe05 	sadd16	lr, lr, r5
 8001d0c:	f8c3 e012 	str.w	lr, [r3, #18]
 8001d10:	f8c3 b016 	str.w	fp, [r3, #22]
 8001d14:	f8dc 2004 	ldr.w	r2, [ip, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d18:	fa2f fe82 	sxtb16	lr, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8001d1c:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d20:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8001d24:	eac2 4b2e 	pkhtb	fp, r2, lr, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001d28:	fa9b fb05 	sadd16	fp, fp, r5
 8001d2c:	eace 4e02 	pkhbt	lr, lr, r2, lsl #16
 8001d30:	fa9e fe05 	sadd16	lr, lr, r5
 8001d34:	f8c3 e01a 	str.w	lr, [r3, #26]
 8001d38:	f8c3 b01e 	str.w	fp, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 8001d3c:	f99c 2008 	ldrsb.w	r2, [ip, #8]
 8001d40:	4432      	add	r2, r6
 8001d42:	845a      	strh	r2, [r3, #34]	; 0x22
 8001d44:	f851 201a 	ldr.w	r2, [r1, sl, lsl #1]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d48:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8001d4c:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d50:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8001d54:	eac2 4c21 	pkhtb	ip, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001d58:	fa9c fc05 	sadd16	ip, ip, r5
 8001d5c:	eac1 4102 	pkhbt	r1, r1, r2, lsl #16
 8001d60:	fa91 f105 	sadd16	r1, r1, r5
 8001d64:	6259      	str	r1, [r3, #36]	; 0x24
 8001d66:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8001d6a:	6842      	ldr	r2, [r0, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d6c:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8001d70:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d74:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8001d78:	eac2 4c21 	pkhtb	ip, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001d7c:	fa9c fc05 	sadd16	ip, ip, r5
 8001d80:	eac1 4102 	pkhbt	r1, r1, r2, lsl #16
 8001d84:	fa91 f105 	sadd16	r1, r1, r5
 8001d88:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001d8a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
					*dst3++ = *src3++ + input_offset;
 8001d8e:	f990 2008 	ldrsb.w	r2, [r0, #8]
 8001d92:	4432      	add	r2, r6
 8001d94:	869a      	strh	r2, [r3, #52]	; 0x34
			if (two_column_buf == runtime_buf + 2 * 27) {
 8001d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			two_column_buf += 27;
 8001d98:	3336      	adds	r3, #54	; 0x36
			if (two_column_buf == runtime_buf + 2 * 27) {
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	f000 811d 	beq.w	8001fda <convolve_s8_kernel3_inputch3_stride2_pad1+0x58a>
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8001da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001da2:	3401      	adds	r4, #1
 8001da4:	b224      	sxth	r4, r4
 8001da6:	4294      	cmp	r4, r2
 8001da8:	f6ff af62 	blt.w	8001c70 <convolve_s8_kernel3_inputch3_stride2_pad1+0x220>
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8001dac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001dae:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001db0:	3202      	adds	r2, #2
 8001db2:	b292      	uxth	r2, r2
 8001db4:	3101      	adds	r1, #1
 8001db6:	9210      	str	r2, [sp, #64]	; 0x40
 8001db8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001dba:	b209      	sxth	r1, r1
 8001dbc:	4291      	cmp	r1, r2
 8001dbe:	f6ff af40 	blt.w	8001c42 <convolve_s8_kernel3_inputch3_stride2_pad1+0x1f2>
			}
		}
	}

	/* left-over because odd number of output pixels */
	if (two_column_buf != runtime_buf) {
 8001dc2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8001dc4:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f000 8092 	beq.w	8001ef2 <convolve_s8_kernel3_inputch3_stride2_pad1+0x4a2>
		const q7_t *ker_a = kernel;
		int i;

		for (i = 0; i < output_ch; i++) {
 8001dce:	ee18 3a10 	vmov	r3, s16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 808d 	beq.w	8001ef2 <convolve_s8_kernel3_inputch3_stride2_pad1+0x4a2>

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;

			/* 4 multiply and accumulates are done in one loop. */
			uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8001dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001dda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001ddc:	440a      	add	r2, r1
 8001dde:	4690      	mov	r8, r2
 8001de0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001de2:	f1a2 0e04 	sub.w	lr, r2, #4
 8001de6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8001de8:	f1a2 0c04 	sub.w	ip, r2, #4
 8001dec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001dee:	1f17      	subs	r7, r2, #4
 8001df0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8001df2:	4413      	add	r3, r2
 8001df4:	469a      	mov	sl, r3
 8001df6:	f3c8 038f 	ubfx	r3, r8, #2, #16
 8001dfa:	9309      	str	r3, [sp, #36]	; 0x24
				sum = __SMLAD(ker_a2, ip_b2, sum);

				col_count--;
			}
			/* Handle left over mac */
			col_count = input_ch * kernel_y * kernel_x & 0x3;
 8001dfc:	f008 0803 	and.w	r8, r8, #3
 8001e00:	3b01      	subs	r3, #1
			while (col_count) {
				q7_t ker_a1 = *ker_a++;
				q15_t ip_b1 = *ip_as_col++;
				sum += ker_a1 * ip_b1;
				col_count--;
 8001e02:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b292      	uxth	r2, r2
 8001e0c:	920d      	str	r2, [sp, #52]	; 0x34
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	920b      	str	r2, [sp, #44]	; 0x2c
    *in_q15 += 2;
 8001e12:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001e14:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    *in_q15 += 2;
 8001e18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001e1c:	930c      	str	r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001e1e:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 8001e22:	463b      	mov	r3, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001e24:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001e28:	4647      	mov	r7, r8
 8001e2a:	4698      	mov	r8, r3
			while (col_count) {
 8001e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
			q31_t sum = bias[i];
 8001e2e:	f85e 2f04 	ldr.w	r2, [lr, #4]!
			while (col_count) {
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8196 	beq.w	8002164 <convolve_s8_kernel3_inputch3_stride2_pad1+0x714>
 8001e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e3a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8001e3c:	eb09 0603 	add.w	r6, r9, r3
    memcpy(&val, *in_q7, 4);
 8001e40:	f859 3b04 	ldr.w	r3, [r9], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8001e44:	fa2f f093 	sxtb16	r0, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001e48:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e4c:	680d      	ldr	r5, [r1, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8001e4e:	eac0 4423 	pkhtb	r4, r0, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8001e52:	eac3 4300 	pkhbt	r3, r3, r0, lsl #16
 8001e56:	fb23 2305 	smlad	r3, r3, r5, r2
    memcpy(&val, *in_q15, 4);
 8001e5a:	684a      	ldr	r2, [r1, #4]
    *in_q15 += 2;
 8001e5c:	3108      	adds	r1, #8
 8001e5e:	fb24 3202 	smlad	r2, r4, r2, r3
 8001e62:	454e      	cmp	r6, r9
 8001e64:	d1ec      	bne.n	8001e40 <convolve_s8_kernel3_inputch3_stride2_pad1+0x3f0>
 8001e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			while (col_count) {
 8001e68:	2f00      	cmp	r7, #0
 8001e6a:	f000 8176 	beq.w	800215a <convolve_s8_kernel3_inputch3_stride2_pad1+0x70a>
				sum += ker_a1 * ip_b1;
 8001e6e:	f996 1000 	ldrsb.w	r1, [r6]
 8001e72:	8818      	ldrh	r0, [r3, #0]
 8001e74:	fb10 2201 	smlabb	r2, r0, r1, r2
			while (col_count) {
 8001e78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001e7a:	b159      	cbz	r1, 8001e94 <convolve_s8_kernel3_inputch3_stride2_pad1+0x444>
				sum += ker_a1 * ip_b1;
 8001e7c:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8001e80:	8858      	ldrh	r0, [r3, #2]
			while (col_count) {
 8001e82:	2f02      	cmp	r7, #2
				sum += ker_a1 * ip_b1;
 8001e84:	fb10 2201 	smlabb	r2, r0, r1, r2
			while (col_count) {
 8001e88:	d004      	beq.n	8001e94 <convolve_s8_kernel3_inputch3_stride2_pad1+0x444>
				sum += ker_a1 * ip_b1;
 8001e8a:	8899      	ldrh	r1, [r3, #4]
 8001e8c:	f996 3002 	ldrsb.w	r3, [r6, #2]
 8001e90:	fb11 2203 	smlabb	r2, r1, r3, r2
				q7_t ker_a1 = *ker_a++;
 8001e94:	eb06 0907 	add.w	r9, r6, r7
			}

			sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 8001e98:	f858 1f04 	ldr.w	r1, [r8, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001e9c:	f85c 0f04 	ldr.w	r0, [ip, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001ea0:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8001ea4:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	465b      	mov	r3, fp
 8001eaa:	fbc2 3400 	smlal	r3, r4, r2, r0
    result = (int32_t)(mult.long_long >> 31);
 8001eae:	0fdb      	lsrs	r3, r3, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001eb0:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8001eb2:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001eb6:	dc0d      	bgt.n	8001ed4 <convolve_s8_kernel3_inputch3_stride2_pad1+0x484>
 8001eb8:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	408b      	lsls	r3, r1
 8001ebe:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8001ec0:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 8001ec4:	410c      	asrs	r4, r1
    q31_t threshold = remainder_mask >> 1;
 8001ec6:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8001eca:	bf48      	it	mi
 8001ecc:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8001ece:	429a      	cmp	r2, r3
        result++;
 8001ed0:	bfc8      	it	gt
 8001ed2:	3401      	addgt	r4, #1
			sum += output_offset;
 8001ed4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001ed6:	441c      	add	r4, r3
			sum = MAX(sum, output_activation_min);
 8001ed8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001eda:	429c      	cmp	r4, r3
 8001edc:	bfb8      	it	lt
 8001ede:	461c      	movlt	r4, r3
			sum = MIN(sum, output_activation_max);
 8001ee0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001ee2:	429c      	cmp	r4, r3
 8001ee4:	bfa8      	it	ge
 8001ee6:	461c      	movge	r4, r3
			*out++ = (q7_t) sum;
 8001ee8:	f80a 4b01 	strb.w	r4, [sl], #1
		for (i = 0; i < output_ch; i++) {
 8001eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001eee:	459a      	cmp	sl, r3
 8001ef0:	d19c      	bne.n	8001e2c <convolve_s8_kernel3_inputch3_stride2_pad1+0x3dc>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	b019      	add	sp, #100	; 0x64
 8001ef6:	ecbd 8b02 	vpop	{d8}
 8001efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				*dst_31++ = pad_out_q15x2;
 8001efe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001f00:	f8c3 1002 	str.w	r1, [r3, #2]
				*dst_31++ = pad_out_q15x2;
 8001f04:	f8c3 1006 	str.w	r1, [r3, #6]
				*dst_31++ = pad_out_q15x2;
 8001f08:	f8c3 100a 	str.w	r1, [r3, #10]
				*dst_31++ = pad_out_q15x2;
 8001f0c:	f8c3 100e 	str.w	r1, [r3, #14]
				if (base_idx_x != -1) {	//load all for now and unroll all
 8001f10:	1c51      	adds	r1, r2, #1
				*dst++ = pad_out;
 8001f12:	f8a3 8000 	strh.w	r8, [r3]
				if (base_idx_x != -1) {	//load all for now and unroll all
 8001f16:	f000 80e5 	beq.w	80020e4 <convolve_s8_kernel3_inputch3_stride2_pad1+0x694>
					src2 = input + (base_idx_x) * input_ch;
 8001f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001f1c:	fb01 f202 	mul.w	r2, r1, r2
 8001f20:	18b8      	adds	r0, r7, r2
					src3 = src2 + input_row_offset;
 8001f22:	f857 c002 	ldr.w	ip, [r7, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001f26:	fa2f f28c 	sxtb16	r2, ip
  return (op1 >> op2) | (op1 << (32U - op2));
 8001f2a:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8001f2e:	eb00 010a 	add.w	r1, r0, sl
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001f32:	fa2f fe8e 	sxtb16	lr, lr
					q7_q15_offset_ele(src2, dst2)
 8001f36:	eace 4c22 	pkhtb	ip, lr, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001f3a:	fa9c fc05 	sadd16	ip, ip, r5
 8001f3e:	eac2 420e 	pkhbt	r2, r2, lr, lsl #16
 8001f42:	fa92 f205 	sadd16	r2, r2, r5
 8001f46:	f8c3 2012 	str.w	r2, [r3, #18]
 8001f4a:	f8c3 c016 	str.w	ip, [r3, #22]
    memcpy(&val, *in_q7, 4);
 8001f4e:	f8d0 c004 	ldr.w	ip, [r0, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001f52:	fa2f f28c 	sxtb16	r2, ip
  return (op1 >> op2) | (op1 << (32U - op2));
 8001f56:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001f5a:	fa2f fc8c 	sxtb16	ip, ip
					q7_q15_offset_ele(src2, dst2)
 8001f5e:	eacc 4e22 	pkhtb	lr, ip, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001f62:	fa9e fe05 	sadd16	lr, lr, r5
 8001f66:	eac2 420c 	pkhbt	r2, r2, ip, lsl #16
 8001f6a:	fa92 f205 	sadd16	r2, r2, r5
 8001f6e:	f8c3 201a 	str.w	r2, [r3, #26]
 8001f72:	f8c3 e01e 	str.w	lr, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 8001f76:	f990 2008 	ldrsb.w	r2, [r0, #8]
 8001f7a:	4432      	add	r2, r6
 8001f7c:	845a      	strh	r2, [r3, #34]	; 0x22
 8001f7e:	f850 200a 	ldr.w	r2, [r0, sl]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001f82:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8001f86:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001f8a:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8001f8e:	eac2 4c20 	pkhtb	ip, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001f92:	fa9c fc05 	sadd16	ip, ip, r5
 8001f96:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8001f9a:	fa92 f205 	sadd16	r2, r2, r5
 8001f9e:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8001fa4:	684a      	ldr	r2, [r1, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001fa6:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8001faa:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001fae:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8001fb2:	eac2 4c20 	pkhtb	ip, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001fb6:	fa9c fc05 	sadd16	ip, ip, r5
 8001fba:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8001fbe:	fa92 f205 	sadd16	r2, r2, r5
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc4:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
					*dst3++ = *src3++ + input_offset;
 8001fc8:	f991 2008 	ldrsb.w	r2, [r1, #8]
 8001fcc:	4432      	add	r2, r6
 8001fce:	869a      	strh	r2, [r3, #52]	; 0x34
			if (two_column_buf == runtime_buf + 2 * 27) {
 8001fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			two_column_buf += 27;
 8001fd2:	3336      	adds	r3, #54	; 0x36
			if (two_column_buf == runtime_buf + 2 * 27) {
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	f47f aee3 	bne.w	8001da0 <convolve_s8_kernel3_inputch3_stride2_pad1+0x350>
				out = arm_nn_mat_mult_kernel3_input3_s8_s16(kernel,
 8001fda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001fdc:	9306      	str	r3, [sp, #24]
 8001fde:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8001fe0:	9307      	str	r3, [sp, #28]
 8001fe2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001fe4:	9305      	str	r3, [sp, #20]
 8001fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001fe8:	9304      	str	r3, [sp, #16]
 8001fea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001fec:	9303      	str	r3, [sp, #12]
 8001fee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	ee18 2a10 	vmov	r2, s16
 8001ffe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002000:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8002002:	9824      	ldr	r0, [sp, #144]	; 0x90
 8002004:	f7ff f8e8 	bl	80011d8 <arm_nn_mat_mult_kernel3_input3_s8_s16>
 8002008:	3401      	adds	r4, #1
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 800200a:	9b09      	ldr	r3, [sp, #36]	; 0x24
				out = arm_nn_mat_mult_kernel3_input3_s8_s16(kernel,
 800200c:	902c      	str	r0, [sp, #176]	; 0xb0
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 800200e:	b224      	sxth	r4, r4
 8002010:	429c      	cmp	r4, r3
 8002012:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8002014:	f6ff ae2c 	blt.w	8001c70 <convolve_s8_kernel3_inputch3_stride2_pad1+0x220>
 8002018:	e6c8      	b.n	8001dac <convolve_s8_kernel3_inputch3_stride2_pad1+0x35c>
 800201a:	2200      	movs	r2, #0
 800201c:	f368 020f 	bfi	r2, r8, #0, #16
 8002020:	f368 421f 	bfi	r2, r8, #16, #16
					*dst++ = pad_out;
 8002024:	990c      	ldr	r1, [sp, #48]	; 0x30
					*dst++ = pad_out;
 8002026:	f8a3 8004 	strh.w	r8, [r3, #4]
					*dst2++ = pad_out;
 800202a:	f8a3 8016 	strh.w	r8, [r3, #22]
					*dst3++ = pad_out;
 800202e:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
					*dst++ = pad_out;
 8002032:	601a      	str	r2, [r3, #0]
					*dst2++ = pad_out;
 8002034:	f8c3 2012 	str.w	r2, [r3, #18]
					*dst3++ = pad_out;
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
 800203a:	680a      	ldr	r2, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800203c:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8002040:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002044:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src, dst)
 8002048:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800204c:	fa90 f005 	sadd16	r0, r0, r5
 8002050:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8002054:	fa92 f205 	sadd16	r2, r2, r5
					*dst++ = *src++ + input_offset;
 8002058:	990c      	ldr	r1, [sp, #48]	; 0x30
 800205a:	f8c3 000a 	str.w	r0, [r3, #10]
 800205e:	f8c3 2006 	str.w	r2, [r3, #6]
 8002062:	f991 2004 	ldrsb.w	r2, [r1, #4]
 8002066:	4432      	add	r2, r6
 8002068:	81da      	strh	r2, [r3, #14]
					*dst++ = *src++ + input_offset;
 800206a:	f991 2005 	ldrsb.w	r2, [r1, #5]
 800206e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002070:	4432      	add	r2, r6
 8002072:	821a      	strh	r2, [r3, #16]
 8002074:	680a      	ldr	r2, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002076:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 800207a:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800207e:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8002082:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002086:	fa90 f005 	sadd16	r0, r0, r5
 800208a:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 800208e:	fa92 f205 	sadd16	r2, r2, r5
					*dst2++ = *src2++ + input_offset;
 8002092:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002094:	61d8      	str	r0, [r3, #28]
 8002096:	619a      	str	r2, [r3, #24]
 8002098:	f991 2004 	ldrsb.w	r2, [r1, #4]
 800209c:	4432      	add	r2, r6
 800209e:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 80020a0:	f991 2005 	ldrsb.w	r2, [r1, #5]
 80020a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80020a6:	4432      	add	r2, r6
 80020a8:	845a      	strh	r2, [r3, #34]	; 0x22
 80020aa:	680a      	ldr	r2, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80020ac:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80020b0:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80020b4:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 80020b8:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80020bc:	fa90 f005 	sadd16	r0, r0, r5
 80020c0:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 80020c4:	fa92 f205 	sadd16	r2, r2, r5
					*dst3++ = *src3++ + input_offset;
 80020c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80020ca:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 80020ce:	f8c3 002e 	str.w	r0, [r3, #46]	; 0x2e
					*dst3++ = *src3++ + input_offset;
 80020d2:	f991 2004 	ldrsb.w	r2, [r1, #4]
 80020d6:	4432      	add	r2, r6
 80020d8:	865a      	strh	r2, [r3, #50]	; 0x32
					*dst3++ = *src3++ + input_offset;
 80020da:	f991 2005 	ldrsb.w	r2, [r1, #5]
 80020de:	4432      	add	r2, r6
 80020e0:	869a      	strh	r2, [r3, #52]	; 0x34
 80020e2:	e658      	b.n	8001d96 <convolve_s8_kernel3_inputch3_stride2_pad1+0x346>
 80020e4:	2200      	movs	r2, #0
 80020e6:	f368 020f 	bfi	r2, r8, #0, #16
 80020ea:	f368 421f 	bfi	r2, r8, #16, #16
					*dst2++ = pad_out;
 80020ee:	f8a3 8016 	strh.w	r8, [r3, #22]
					*dst3++ = pad_out;
 80020f2:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
					*dst2++ = pad_out;
 80020f6:	f8c3 2012 	str.w	r2, [r3, #18]
					*dst3++ = pad_out;
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
 80020fc:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80020fe:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8002102:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002106:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 800210a:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800210e:	fa90 f005 	sadd16	r0, r0, r5
 8002112:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8002116:	fa92 f205 	sadd16	r2, r2, r5
 800211a:	61d8      	str	r0, [r3, #28]
 800211c:	619a      	str	r2, [r3, #24]
					*dst2++ = *src2++ + input_offset;
 800211e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8002122:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002124:	4432      	add	r2, r6
 8002126:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 8002128:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800212c:	4432      	add	r2, r6
 800212e:	845a      	strh	r2, [r3, #34]	; 0x22
 8002130:	680a      	ldr	r2, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002132:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8002136:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800213a:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 800213e:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002142:	fa90 f005 	sadd16	r0, r0, r5
 8002146:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 800214a:	fa92 f205 	sadd16	r2, r2, r5
					*dst3++ = *src3++ + input_offset;
 800214e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002150:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 8002154:	f8c3 002e 	str.w	r0, [r3, #46]	; 0x2e
 8002158:	e7bb      	b.n	80020d2 <convolve_s8_kernel3_inputch3_stride2_pad1+0x682>
			while (col_count) {
 800215a:	46b1      	mov	r9, r6
 800215c:	e69c      	b.n	8001e98 <convolve_s8_kernel3_inputch3_stride2_pad1+0x448>
 800215e:	b28a      	uxth	r2, r1
 8002160:	9212      	str	r2, [sp, #72]	; 0x48
 8002162:	e623      	b.n	8001dac <convolve_s8_kernel3_inputch3_stride2_pad1+0x35c>
			while (col_count) {
 8002164:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8002166:	464e      	mov	r6, r9
 8002168:	e67e      	b.n	8001e68 <convolve_s8_kernel3_inputch3_stride2_pad1+0x418>
 800216a:	bf00      	nop

0800216c <convolve_s8_kernel3_stride1_pad1>:
		const int32_t *output_shift, const int32_t *output_mult,
		const int32_t output_offset, const int32_t input_offset,
		const int32_t output_activation_min,
		const int32_t output_activation_max, q7_t *output,
		const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value) {
 800216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002170:	ed2d 8b02 	vpush	{d8}
 8002174:	b0a7      	sub	sp, #156	; 0x9c
 8002176:	461c      	mov	r4, r3
 8002178:	9213      	str	r2, [sp, #76]	; 0x4c
 800217a:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
 800217e:	920a      	str	r2, [sp, #40]	; 0x28
 8002180:	f8bd 20f4 	ldrh.w	r2, [sp, #244]	; 0xf4
 8002184:	f8bd 60f0 	ldrh.w	r6, [sp, #240]	; 0xf0
 8002188:	9111      	str	r1, [sp, #68]	; 0x44
 800218a:	ee08 2a10 	vmov	s16, r2
	if (input_ch % 4 != 0) {
 800218e:	f014 0203 	ands.w	r2, r4, #3
		const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value) {
 8002192:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
 8002196:	9623      	str	r6, [sp, #140]	; 0x8c
 8002198:	f99d 30fc 	ldrsb.w	r3, [sp, #252]	; 0xfc
	if (input_ch % 4 != 0) {
 800219c:	f040 84f0 	bne.w	8002b80 <convolve_s8_kernel3_stride1_pad1+0xa14>
	q7_t *out = output;
	const int channel_div4 = (input_ch >> 2);

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
	q31_t pad_q15x2 = __PKHBT(pad_value, pad_value, 16);
 80021a0:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
 80021a4:	4620      	mov	r0, r4
 80021a6:	460f      	mov	r7, r1
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80021a8:	9937      	ldr	r1, [sp, #220]	; 0xdc
	const int channel_div4 = (input_ch >> 2);
 80021aa:	0885      	lsrs	r5, r0, #2
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80021ac:	b209      	sxth	r1, r1
	const int channel_div4 = (input_ch >> 2);
 80021ae:	9516      	str	r5, [sp, #88]	; 0x58
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80021b0:	eac1 4401 	pkhbt	r4, r1, r1, lsl #16
 80021b4:	fa93 f504 	sadd16	r5, r3, r4
	q31_t pad_out_q15x2 = __SADD16(pad_q15x2, offset_q15x2);
	int in_row_offset = input_ch * input_x;
 80021b8:	fb07 f300 	mul.w	r3, r7, r0
 80021bc:	9310      	str	r3, [sp, #64]	; 0x40

	for (int i_out_y = 0; i_out_y < output_y; i_out_y++) {
 80021be:	2e00      	cmp	r6, #0
 80021c0:	f000 8162 	beq.w	8002488 <convolve_s8_kernel3_stride1_pad1+0x31c>
					/* load 3 col */
					const q7_t *src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
					const q7_t *src2 = src + in_row_offset;
					const q7_t *src3 = src2 + in_row_offset;
					q15_t *dst = (q31_t*) &col_buffer[0];;
					q15_t *dst2 = (q31_t*) &col_buffer[input_ch * 3];
 80021c4:	990e      	ldr	r1, [sp, #56]	; 0x38
	for (int i_out_y = 0; i_out_y < output_y; i_out_y++) {
 80021c6:	921e      	str	r2, [sp, #120]	; 0x78
				q31_t *dst_31 = (q31_t*) &col_buffer[input_ch * 6];
 80021c8:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
					q15_t *dst3 = (q31_t*) &col_buffer[input_ch * 6];;

					load_3row_3col(src, src2, src3, dst, dst2, dst3)
 80021cc:	9816      	ldr	r0, [sp, #88]	; 0x58
					q15_t *dst2 = (q31_t*) &col_buffer[input_ch * 3];
 80021ce:	eb01 0341 	add.w	r3, r1, r1, lsl #1
				q31_t *dst_31 = (q31_t*) &col_buffer[input_ch * 6];
 80021d2:	0052      	lsls	r2, r2, #1
 80021d4:	921a      	str	r2, [sp, #104]	; 0x68
					q15_t *dst2 = (q31_t*) &col_buffer[input_ch * 3];
 80021d6:	005a      	lsls	r2, r3, #1
 80021d8:	9215      	str	r2, [sp, #84]	; 0x54
					load_3row_3col(src, src2, src3, dst, dst2, dst3)
 80021da:	0042      	lsls	r2, r0, #1

					load_2row_3col(src, src2, dst, dst2)
				}
			}

			two_column_buffer += input_ch * 9;
 80021dc:	eb01 06c1 	add.w	r6, r1, r1, lsl #3
					load_3row_3col(src, src2, src3, dst, dst2, dst3)
 80021e0:	9219      	str	r2, [sp, #100]	; 0x64
			two_column_buffer += input_ch * 9;
 80021e2:	00ca      	lsls	r2, r1, #3
					q15_t *dst3 = (q31_t*) &col_buffer[input_ch * 6];;
 80021e4:	009b      	lsls	r3, r3, #2
			two_column_buffer += input_ch * 9;
 80021e6:	9225      	str	r2, [sp, #148]	; 0x94
 80021e8:	0072      	lsls	r2, r6, #1
					load_3row_3col(src, src2, src3, dst, dst2, dst3)
 80021ea:	eb00 0740 	add.w	r7, r0, r0, lsl #1
					q15_t *dst3 = (q31_t*) &col_buffer[input_ch * 6];;
 80021ee:	9324      	str	r3, [sp, #144]	; 0x90
			two_column_buffer += input_ch * 9;
 80021f0:	920d      	str	r2, [sp, #52]	; 0x34
 80021f2:	00c3      	lsls	r3, r0, #3

			/* Computation is filed for every 2 columns */
			if (two_column_buffer == runtime_buf + 2 * input_ch * 9)
 80021f4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80021f6:	9318      	str	r3, [sp, #96]	; 0x60
 80021f8:	00fb      	lsls	r3, r7, #3
 80021fa:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80021fe:	931c      	str	r3, [sp, #112]	; 0x70
			{
				out = mat_mult_kernel_s8_s16(kernel,
 8002200:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
			if (two_column_buffer == runtime_buf + 2 * input_ch * 9)
 8002202:	920c      	str	r2, [sp, #48]	; 0x30
				out = mat_mult_kernel_s8_s16(kernel,
 8002204:	9308      	str	r3, [sp, #32]
 8002206:	0102      	lsls	r2, r0, #4
 8002208:	f64f 73ff 	movw	r3, #65535	; 0xffff
			two_column_buffer += input_ch * 9;
 800220c:	9622      	str	r6, [sp, #136]	; 0x88
					load_3row_3col(src, src2, src3, dst, dst2, dst3)
 800220e:	9717      	str	r7, [sp, #92]	; 0x5c
 8002210:	921d      	str	r2, [sp, #116]	; 0x74
				out = mat_mult_kernel_s8_s16(kernel,
 8002212:	931b      	str	r3, [sp, #108]	; 0x6c
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8002214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		const int16_t base_idx_y = i_out_y - 1;
 8002216:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800221a:	930b      	str	r3, [sp, #44]	; 0x2c
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 800221c:	2a00      	cmp	r2, #0
 800221e:	f000 808a 	beq.w	8002336 <convolve_s8_kernel3_stride1_pad1+0x1ca>
					const q7_t *src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8002222:	9a11      	ldr	r2, [sp, #68]	; 0x44
					const q7_t *src = input + base_idx_y * input_x * input_ch;
 8002224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
					const q7_t *src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8002228:	fb03 f202 	mul.w	r2, r3, r2
			else if (base_idx_y + 2 == input_y) { //pad the third row
 800222c:	3302      	adds	r3, #2
 800222e:	9312      	str	r3, [sp, #72]	; 0x48
					const q7_t *src2 = src + in_row_offset;
 8002230:	9b10      	ldr	r3, [sp, #64]	; 0x40
					const q7_t *src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8002232:	9214      	str	r2, [sp, #80]	; 0x50
					const q7_t *src = input + base_idx_y * input_x * input_ch;
 8002234:	fb02 1200 	mla	r2, r2, r0, r1
					const q7_t *src2 = src + in_row_offset;
 8002238:	18d1      	adds	r1, r2, r3
					const q7_t *src3 = src2 + in_row_offset;
 800223a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800223e:	9321      	str	r3, [sp, #132]	; 0x84
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8002240:	2300      	movs	r3, #0
					const q7_t *src = input + base_idx_y * input_x * input_ch;
 8002242:	9220      	str	r2, [sp, #128]	; 0x80
					const q7_t *src2 = src + in_row_offset;
 8002244:	911f      	str	r1, [sp, #124]	; 0x7c
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8002246:	9309      	str	r3, [sp, #36]	; 0x24
			const int16_t base_idx_x = i_out_x - 1;
 8002248:	9b09      	ldr	r3, [sp, #36]	; 0x24
			if (base_idx_y == -1) { //pad the first row
 800224a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800224c:	3b01      	subs	r3, #1
 800224e:	3201      	adds	r2, #1
 8002250:	b21b      	sxth	r3, r3
 8002252:	f000 81b9 	beq.w	80025c8 <convolve_s8_kernel3_stride1_pad1+0x45c>
			else if (base_idx_y + 2 == input_y) { //pad the third row
 8002256:	e9dd 2112 	ldrd	r2, r1, [sp, #72]	; 0x48
 800225a:	428a      	cmp	r2, r1
 800225c:	f000 8211 	beq.w	8002682 <convolve_s8_kernel3_stride1_pad1+0x516>
				if (base_idx_x == -1) {
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	f000 8277 	beq.w	8002754 <convolve_s8_kernel3_stride1_pad1+0x5e8>
				} else if (base_idx_x + 2 == input_x) {
 8002266:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002268:	1c9a      	adds	r2, r3, #2
 800226a:	4291      	cmp	r1, r2
					const q7_t *src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
 800226c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800226e:	4413      	add	r3, r2
 8002270:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
				} else if (base_idx_x + 2 == input_x) {
 8002274:	f000 810e 	beq.w	8002494 <convolve_s8_kernel3_stride1_pad1+0x328>
					const q7_t *src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8002278:	fb01 2203 	mla	r2, r1, r3, r2
					const q7_t *src2 = src + in_row_offset;
 800227c:	9b10      	ldr	r3, [sp, #64]	; 0x40
					q15_t *dst2 = (q31_t*) &col_buffer[input_ch * 3];
 800227e:	9e08      	ldr	r6, [sp, #32]
					load_3row_3col(src, src2, src3, dst, dst2, dst3)
 8002280:	9f17      	ldr	r7, [sp, #92]	; 0x5c
					const q7_t *src2 = src + in_row_offset;
 8002282:	eb02 0e03 	add.w	lr, r2, r3
					const q7_t *src3 = src2 + in_row_offset;
 8002286:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
					q15_t *dst2 = (q31_t*) &col_buffer[input_ch * 3];
 800228a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800228c:	18f1      	adds	r1, r6, r3
					q15_t *dst3 = (q31_t*) &col_buffer[input_ch * 6];;
 800228e:	eb06 0043 	add.w	r0, r6, r3, lsl #1
					load_3row_3col(src, src2, src3, dst, dst2, dst3)
 8002292:	2f00      	cmp	r7, #0
 8002294:	d041      	beq.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 8002296:	f852 3b04 	ldr.w	r3, [r2], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800229a:	fa2f f883 	sxtb16	r8, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800229e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80022a2:	fa2f f383 	sxtb16	r3, r3
 80022a6:	eac3 4928 	pkhtb	r9, r3, r8, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80022aa:	fa99 f904 	sadd16	r9, r9, r4
 80022ae:	eac8 4803 	pkhbt	r8, r8, r3, lsl #16
 80022b2:	fa98 f804 	sadd16	r8, r8, r4
 80022b6:	f8c6 8000 	str.w	r8, [r6]
 80022ba:	f8c6 9004 	str.w	r9, [r6, #4]
 *pQ15 += 2;
 80022be:	f85e 3b04 	ldr.w	r3, [lr], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80022c2:	fa2f f883 	sxtb16	r8, r3
 80022c6:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 80022c8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80022cc:	fa2f f383 	sxtb16	r3, r3
 80022d0:	eac3 4928 	pkhtb	r9, r3, r8, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80022d4:	fa99 f904 	sadd16	r9, r9, r4
 80022d8:	eac8 4803 	pkhbt	r8, r8, r3, lsl #16
 80022dc:	fa98 f804 	sadd16	r8, r8, r4
  memcpy (*pQ15, &val, 4);
 80022e0:	f8c1 8000 	str.w	r8, [r1]
 80022e4:	f8c1 9004 	str.w	r9, [r1, #4]
 *pQ15 += 2;
 80022e8:	f85c 3b04 	ldr.w	r3, [ip], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80022ec:	fa2f f883 	sxtb16	r8, r3
 80022f0:	3108      	adds	r1, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 80022f2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80022f6:	fa2f f383 	sxtb16	r3, r3
 80022fa:	eac3 4928 	pkhtb	r9, r3, r8, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80022fe:	fa99 f904 	sadd16	r9, r9, r4
 8002302:	eac8 4803 	pkhbt	r8, r8, r3, lsl #16
 8002306:	fa98 f804 	sadd16	r8, r8, r4
 800230a:	3f01      	subs	r7, #1
  memcpy (*pQ15, &val, 4);
 800230c:	f8c0 8000 	str.w	r8, [r0]
 8002310:	f8c0 9004 	str.w	r9, [r0, #4]
 *pQ15 += 2;
 8002314:	f100 0008 	add.w	r0, r0, #8
 8002318:	d1bd      	bne.n	8002296 <convolve_s8_kernel3_stride1_pad1+0x12a>
			two_column_buffer += input_ch * 9;
 800231a:	9b08      	ldr	r3, [sp, #32]
 800231c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800231e:	4413      	add	r3, r2
			if (two_column_buffer == runtime_buf + 2 * input_ch * 9)
 8002320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			two_column_buffer += input_ch * 9;
 8002322:	9308      	str	r3, [sp, #32]
			if (two_column_buffer == runtime_buf + 2 * input_ch * 9)
 8002324:	429a      	cmp	r2, r3
 8002326:	f000 812f 	beq.w	8002588 <convolve_s8_kernel3_stride1_pad1+0x41c>
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 800232a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800232c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800232e:	3301      	adds	r3, #1
 8002330:	4293      	cmp	r3, r2
 8002332:	9309      	str	r3, [sp, #36]	; 0x24
 8002334:	d188      	bne.n	8002248 <convolve_s8_kernel3_stride1_pad1+0xdc>
	for (int i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8002336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002338:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800233a:	3301      	adds	r3, #1
 800233c:	b29b      	uxth	r3, r3
 800233e:	931b      	str	r3, [sp, #108]	; 0x6c
 8002340:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002342:	3201      	adds	r2, #1
 8002344:	4293      	cmp	r3, r2
 8002346:	921e      	str	r2, [sp, #120]	; 0x78
 8002348:	f47f af64 	bne.w	8002214 <convolve_s8_kernel3_stride1_pad1+0xa8>
			}
		}
	}

	/* left-over because odd number of output pixels */
	if (two_column_buffer != runtime_buf)
 800234c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800234e:	9a08      	ldr	r2, [sp, #32]
 8002350:	4293      	cmp	r3, r2
 8002352:	f000 8099 	beq.w	8002488 <convolve_s8_kernel3_stride1_pad1+0x31c>
	{
		const q7_t *ker_a = kernel;
		int i;

		for (i = 0; i < output_ch; i++)
 8002356:	ee18 3a10 	vmov	r3, s16
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8094 	beq.w	8002488 <convolve_s8_kernel3_stride1_pad1+0x31c>

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;

			/* 4 multiply and accumulates are done in one loop. */
			uint16_t col_count = (input_ch * 9) >> 2;
 8002360:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002362:	990e      	ldr	r1, [sp, #56]	; 0x38
    const q31_t remainder_mask = (1 << exponent) - 1;
 8002364:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8002366:	440a      	add	r2, r1
 8002368:	4691      	mov	r9, r2
 800236a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800236c:	f1a2 0e04 	sub.w	lr, r2, #4
 8002370:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8002372:	f1a2 0c04 	sub.w	ip, r2, #4
 8002376:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8002378:	f8cd c020 	str.w	ip, [sp, #32]
 800237c:	1f17      	subs	r7, r2, #4
 800237e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8002380:	4413      	add	r3, r2
 8002382:	4698      	mov	r8, r3
 8002384:	f3c9 038f 	ubfx	r3, r9, #2, #16
 8002388:	9309      	str	r3, [sp, #36]	; 0x24
				sum = __SMLAD(ker_a2, ip_b2, sum);

				col_count--;
			}
			/* Handle left over mac */
			col_count = input_ch * 3 * 3 & 0x3;
 800238a:	f009 0903 	and.w	r9, r9, #3
 800238e:	3b01      	subs	r3, #1
			while (col_count)
			{
				q7_t ker_a1 = *ker_a++;
				q15_t ip_b1 = *ip_as_col++;
				sum += ker_a1 * ip_b1;
				col_count--;
 8002390:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8002394:	b29b      	uxth	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	b292      	uxth	r2, r2
 800239a:	920d      	str	r2, [sp, #52]	; 0x34
 800239c:	009a      	lsls	r2, r3, #2
 800239e:	920b      	str	r2, [sp, #44]	; 0x2c
    *in_q15 += 2;
 80023a0:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    const q31_t remainder_mask = (1 << exponent) - 1;
 80023a2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    *in_q15 += 2;
 80023a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80023aa:	930c      	str	r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
 80023ac:	f8dd 80e8 	ldr.w	r8, [sp, #232]	; 0xe8
 80023b0:	463b      	mov	r3, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80023b2:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    const q31_t remainder_mask = (1 << exponent) - 1;
 80023b6:	464f      	mov	r7, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80023b8:	f04f 0a00 	mov.w	sl, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80023bc:	4699      	mov	r9, r3
			while (col_count)
 80023be:	9b09      	ldr	r3, [sp, #36]	; 0x24
			q31_t sum = bias[i];
 80023c0:	f85e 2f04 	ldr.w	r2, [lr, #4]!
			while (col_count)
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 83d8 	beq.w	8002b7a <convolve_s8_kernel3_stride1_pad1+0xa0e>
 80023ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80023cc:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80023ce:	eb00 0c03 	add.w	ip, r0, r3
    memcpy(&val, *in_q7, 4);
 80023d2:	f850 3b04 	ldr.w	r3, [r0], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80023d6:	fa2f f493 	sxtb16	r4, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80023da:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80023de:	680e      	ldr	r6, [r1, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80023e0:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80023e4:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 80023e8:	fb23 2306 	smlad	r3, r3, r6, r2
    memcpy(&val, *in_q15, 4);
 80023ec:	684a      	ldr	r2, [r1, #4]
    *in_q15 += 2;
 80023ee:	3108      	adds	r1, #8
 80023f0:	fb25 3202 	smlad	r2, r5, r2, r3
 80023f4:	4584      	cmp	ip, r0
 80023f6:	d1ec      	bne.n	80023d2 <convolve_s8_kernel3_stride1_pad1+0x266>
 80023f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			while (col_count)
 80023fa:	2f00      	cmp	r7, #0
 80023fc:	f000 83ab 	beq.w	8002b56 <convolve_s8_kernel3_stride1_pad1+0x9ea>
				sum += ker_a1 * ip_b1;
 8002400:	f99c 1000 	ldrsb.w	r1, [ip]
 8002404:	8818      	ldrh	r0, [r3, #0]
 8002406:	fb10 2201 	smlabb	r2, r0, r1, r2
			while (col_count)
 800240a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800240c:	b159      	cbz	r1, 8002426 <convolve_s8_kernel3_stride1_pad1+0x2ba>
				sum += ker_a1 * ip_b1;
 800240e:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 8002412:	8858      	ldrh	r0, [r3, #2]
			while (col_count)
 8002414:	2f02      	cmp	r7, #2
				sum += ker_a1 * ip_b1;
 8002416:	fb10 2201 	smlabb	r2, r0, r1, r2
			while (col_count)
 800241a:	d004      	beq.n	8002426 <convolve_s8_kernel3_stride1_pad1+0x2ba>
				sum += ker_a1 * ip_b1;
 800241c:	8899      	ldrh	r1, [r3, #4]
 800241e:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8002422:	fb11 2203 	smlabb	r2, r1, r3, r2
				q7_t ker_a1 = *ker_a++;
 8002426:	eb0c 0007 	add.w	r0, ip, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800242a:	9b08      	ldr	r3, [sp, #32]
			}

			sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 800242c:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8002430:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8002434:	9308      	str	r3, [sp, #32]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002436:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 800243a:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800243c:	4655      	mov	r5, sl
 800243e:	465b      	mov	r3, fp
 8002440:	fbc2 3504 	smlal	r3, r5, r2, r4
    result = (int32_t)(mult.long_long >> 31);
 8002444:	0fdb      	lsrs	r3, r3, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002446:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8002448:	ea43 0545 	orr.w	r5, r3, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800244c:	dc0d      	bgt.n	800246a <convolve_s8_kernel3_stride1_pad1+0x2fe>
 800244e:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8002450:	2301      	movs	r3, #1
 8002452:	408b      	lsls	r3, r1
 8002454:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8002456:	ea05 0203 	and.w	r2, r5, r3
    if (result < 0)
 800245a:	410d      	asrs	r5, r1
    q31_t threshold = remainder_mask >> 1;
 800245c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8002460:	bf48      	it	mi
 8002462:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8002464:	429a      	cmp	r2, r3
        result++;
 8002466:	bfc8      	it	gt
 8002468:	3501      	addgt	r5, #1
			sum += output_offset;
 800246a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800246c:	441d      	add	r5, r3
			sum = MAX(sum, output_activation_min);
 800246e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8002470:	429d      	cmp	r5, r3
 8002472:	bfb8      	it	lt
 8002474:	461d      	movlt	r5, r3
			sum = MIN(sum, output_activation_max);
 8002476:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8002478:	429d      	cmp	r5, r3
 800247a:	bfa8      	it	ge
 800247c:	461d      	movge	r5, r3
			*out++ = (q7_t)sum;
 800247e:	f808 5b01 	strb.w	r5, [r8], #1
		for (i = 0; i < output_ch; i++)
 8002482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002484:	4598      	cmp	r8, r3
 8002486:	d19a      	bne.n	80023be <convolve_s8_kernel3_stride1_pad1+0x252>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8002488:	2000      	movs	r0, #0
}
 800248a:	b027      	add	sp, #156	; 0x9c
 800248c:	ecbd 8b02 	vpop	{d8}
 8002490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					const q7_t *src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8002494:	fb01 2303 	mla	r3, r1, r3, r2
					const q7_t *src2 = src + in_row_offset;
 8002498:	9a10      	ldr	r2, [sp, #64]	; 0x40
					q15_t *dst2 = (q31_t*) &col_buffer[input_ch * 3];
 800249a:	9808      	ldr	r0, [sp, #32]
					const q7_t *src2 = src + in_row_offset;
 800249c:	eb03 0902 	add.w	r9, r3, r2
					const q7_t *src3 = src2 + in_row_offset;
 80024a0:	eb03 0842 	add.w	r8, r3, r2, lsl #1
					q15_t *dst2 = (q31_t*) &col_buffer[input_ch * 3];
 80024a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80024a6:	eb00 0c02 	add.w	ip, r0, r2
					q15_t *dst3 = (q31_t*) &col_buffer[input_ch * 6];;
 80024aa:	eb00 0142 	add.w	r1, r0, r2, lsl #1
					load_3row_2col(src, src2, src3, dst, dst2, dst3)
 80024ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	f000 8331 	beq.w	8002b18 <convolve_s8_kernel3_stride1_pad1+0x9ac>
					q15_t *dst3 = (q31_t*) &col_buffer[input_ch * 6];;
 80024b6:	460f      	mov	r7, r1
					q15_t *dst2 = (q31_t*) &col_buffer[input_ch * 3];
 80024b8:	4666      	mov	r6, ip
					load_3row_2col(src, src2, src3, dst, dst2, dst3)
 80024ba:	4696      	mov	lr, r2
    memcpy(&val, *in_q7, 4);
 80024bc:	f853 2b04 	ldr.w	r2, [r3], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80024c0:	fa2f fb82 	sxtb16	fp, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80024c4:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80024c8:	fa2f f282 	sxtb16	r2, r2
 80024cc:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80024d0:	fa9a fa04 	sadd16	sl, sl, r4
 80024d4:	eacb 4202 	pkhbt	r2, fp, r2, lsl #16
 80024d8:	fa92 f204 	sadd16	r2, r2, r4
  memcpy (*pQ15, &val, 4);
 80024dc:	f8c0 a004 	str.w	sl, [r0, #4]
 80024e0:	6002      	str	r2, [r0, #0]
 *pQ15 += 2;
 80024e2:	f859 2b04 	ldr.w	r2, [r9], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80024e6:	fa2f fb82 	sxtb16	fp, r2
 80024ea:	3008      	adds	r0, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 80024ec:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80024f0:	fa2f f282 	sxtb16	r2, r2
 80024f4:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80024f8:	fa9a fa04 	sadd16	sl, sl, r4
 80024fc:	eacb 4202 	pkhbt	r2, fp, r2, lsl #16
 8002500:	fa92 f204 	sadd16	r2, r2, r4
  memcpy (*pQ15, &val, 4);
 8002504:	f8c6 a004 	str.w	sl, [r6, #4]
 8002508:	6032      	str	r2, [r6, #0]
 *pQ15 += 2;
 800250a:	f858 2b04 	ldr.w	r2, [r8], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800250e:	fa2f fa82 	sxtb16	sl, r2
 8002512:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8002514:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002518:	fa2f f282 	sxtb16	r2, r2
 800251c:	eac2 4b2a 	pkhtb	fp, r2, sl, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002520:	fa9b fb04 	sadd16	fp, fp, r4
 8002524:	eaca 4a02 	pkhbt	sl, sl, r2, lsl #16
 8002528:	fa9a fa04 	sadd16	sl, sl, r4
 800252c:	f1be 0e01 	subs.w	lr, lr, #1
  memcpy (*pQ15, &val, 4);
 8002530:	f8c7 a000 	str.w	sl, [r7]
 8002534:	f8c7 b004 	str.w	fp, [r7, #4]
 *pQ15 += 2;
 8002538:	f107 0708 	add.w	r7, r7, #8
 800253c:	d1be      	bne.n	80024bc <convolve_s8_kernel3_stride1_pad1+0x350>
 800253e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002540:	9a08      	ldr	r2, [sp, #32]
 8002542:	449c      	add	ip, r3
 8002544:	4419      	add	r1, r3
 8002546:	18d3      	adds	r3, r2, r3
					pad_3row_1col(dst_31,dst2_31,dst3_31,pad_out_q15x2)
 8002548:	9816      	ldr	r0, [sp, #88]	; 0x58
 800254a:	2800      	cmp	r0, #0
 800254c:	f43f aee5 	beq.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 8002550:	ea43 020c 	orr.w	r2, r3, ip
 8002554:	430a      	orrs	r2, r1
 8002556:	0752      	lsls	r2, r2, #29
 8002558:	f040 81c7 	bne.w	80028ea <convolve_s8_kernel3_stride1_pad1+0x77e>
 800255c:	1e42      	subs	r2, r0, #1
 800255e:	2a03      	cmp	r2, #3
 8002560:	f240 81c3 	bls.w	80028ea <convolve_s8_kernel3_stride1_pad1+0x77e>
 8002564:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002566:	3b08      	subs	r3, #8
 8002568:	f1ac 0c08 	sub.w	ip, ip, #8
 800256c:	188a      	adds	r2, r1, r2
 800256e:	f843 5f08 	str.w	r5, [r3, #8]!
 8002572:	605d      	str	r5, [r3, #4]
 8002574:	f84c 5f08 	str.w	r5, [ip, #8]!
 8002578:	f8cc 5004 	str.w	r5, [ip, #4]
 800257c:	e9c1 5500 	strd	r5, r5, [r1]
 8002580:	3108      	adds	r1, #8
 8002582:	4291      	cmp	r1, r2
 8002584:	d1f3      	bne.n	800256e <convolve_s8_kernel3_stride1_pad1+0x402>
 8002586:	e6c8      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
				out = mat_mult_kernel_s8_s16(kernel,
 8002588:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800258a:	9306      	str	r3, [sp, #24]
 800258c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800258e:	9305      	str	r3, [sp, #20]
 8002590:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002592:	9304      	str	r3, [sp, #16]
 8002594:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8002596:	9303      	str	r3, [sp, #12]
 8002598:	9b38      	ldr	r3, [sp, #224]	; 0xe0
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 800259a:	9e09      	ldr	r6, [sp, #36]	; 0x24
				out = mat_mult_kernel_s8_s16(kernel,
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80025a4:	9300      	str	r3, [sp, #0]
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80025a6:	3601      	adds	r6, #1
				out = mat_mult_kernel_s8_s16(kernel,
 80025a8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80025aa:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80025ac:	9832      	ldr	r0, [sp, #200]	; 0xc8
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80025ae:	9609      	str	r6, [sp, #36]	; 0x24
				out = mat_mult_kernel_s8_s16(kernel,
 80025b0:	ee18 2a10 	vmov	r2, s16
 80025b4:	f000 fb24 	bl	8002c00 <mat_mult_kernel_s8_s16>
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80025b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				out = mat_mult_kernel_s8_s16(kernel,
 80025ba:	903a      	str	r0, [sp, #232]	; 0xe8
		for (int i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80025bc:	42b3      	cmp	r3, r6
 80025be:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80025c0:	9308      	str	r3, [sp, #32]
 80025c2:	f47f ae41 	bne.w	8002248 <convolve_s8_kernel3_stride1_pad1+0xdc>
 80025c6:	e6b6      	b.n	8002336 <convolve_s8_kernel3_stride1_pad1+0x1ca>
				while (block_cnt > 0) {//total: 16bit * input_ch * 3
 80025c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	f000 82be 	beq.w	8002b4c <convolve_s8_kernel3_stride1_pad1+0x9e0>
 80025d0:	9908      	ldr	r1, [sp, #32]
 80025d2:	0748      	lsls	r0, r1, #29
 80025d4:	f040 819e 	bne.w	8002914 <convolve_s8_kernel3_stride1_pad1+0x7a8>
 80025d8:	3a01      	subs	r2, #1
 80025da:	2a03      	cmp	r2, #3
 80025dc:	f240 819a 	bls.w	8002914 <convolve_s8_kernel3_stride1_pad1+0x7a8>
 80025e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80025e2:	3218      	adds	r2, #24
 80025e4:	440a      	add	r2, r1
 80025e6:	3118      	adds	r1, #24
					*dst_31++ = pad_out_q15x2;
 80025e8:	e941 5506 	strd	r5, r5, [r1, #-24]
 80025ec:	e941 5504 	strd	r5, r5, [r1, #-16]
 80025f0:	e941 5502 	strd	r5, r5, [r1, #-8]
				while (block_cnt > 0) {//total: 16bit * input_ch * 3
 80025f4:	3118      	adds	r1, #24
 80025f6:	4291      	cmp	r1, r2
 80025f8:	d1f6      	bne.n	80025e8 <convolve_s8_kernel3_stride1_pad1+0x47c>
				if (base_idx_x == -1){
 80025fa:	1c58      	adds	r0, r3, #1
 80025fc:	f000 819c 	beq.w	8002938 <convolve_s8_kernel3_stride1_pad1+0x7cc>
				} else if (base_idx_x + 2 == input_x) {
 8002600:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002602:	1c9a      	adds	r2, r3, #2
 8002604:	4291      	cmp	r1, r2
					const q7_t *src = input + base_idx_x * input_ch;
 8002606:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800260a:	fb03 2301 	mla	r3, r3, r1, r2
					q31_t *dst = &col_buffer[input_ch * 3];
 800260e:	9a08      	ldr	r2, [sp, #32]
 8002610:	9915      	ldr	r1, [sp, #84]	; 0x54
				} else if (base_idx_x + 2 == input_x) {
 8002612:	f000 81e5 	beq.w	80029e0 <convolve_s8_kernel3_stride1_pad1+0x874>
					q15_t *dst = &col_buffer[input_ch * 3];
 8002616:	1850      	adds	r0, r2, r1
					q15_t *dst2 = &col_buffer[input_ch * 6];
 8002618:	eb02 0641 	add.w	r6, r2, r1, lsl #1
					load_2row_3col(src, src2, dst, dst2)
 800261c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
					const q7_t *src2 = src + in_row_offset;
 800261e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002620:	eb03 0c02 	add.w	ip, r3, r2
					load_2row_3col(src, src2, dst, dst2)
 8002624:	2f00      	cmp	r7, #0
 8002626:	f43f ae78 	beq.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 800262a:	f853 2b04 	ldr.w	r2, [r3], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800262e:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8002632:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002636:	fa2f f282 	sxtb16	r2, r2
 800263a:	eac2 4e21 	pkhtb	lr, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800263e:	fa9e fe04 	sadd16	lr, lr, r4
 8002642:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8002646:	fa92 f204 	sadd16	r2, r2, r4
  memcpy (*pQ15, &val, 4);
 800264a:	f8c0 e004 	str.w	lr, [r0, #4]
 800264e:	6002      	str	r2, [r0, #0]
 *pQ15 += 2;
 8002650:	f85c 2b04 	ldr.w	r2, [ip], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002654:	fa2f f182 	sxtb16	r1, r2
 8002658:	3008      	adds	r0, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 800265a:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800265e:	fa2f f282 	sxtb16	r2, r2
 8002662:	eac2 4e21 	pkhtb	lr, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002666:	fa9e fe04 	sadd16	lr, lr, r4
 800266a:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 800266e:	fa92 f204 	sadd16	r2, r2, r4
 8002672:	3f01      	subs	r7, #1
  memcpy (*pQ15, &val, 4);
 8002674:	6032      	str	r2, [r6, #0]
 8002676:	f8c6 e004 	str.w	lr, [r6, #4]
 *pQ15 += 2;
 800267a:	f106 0608 	add.w	r6, r6, #8
 800267e:	d1d4      	bne.n	800262a <convolve_s8_kernel3_stride1_pad1+0x4be>
 8002680:	e64b      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
				q31_t *dst_31 = (q31_t*) &col_buffer[input_ch * 6];
 8002682:	9924      	ldr	r1, [sp, #144]	; 0x90
 8002684:	9a08      	ldr	r2, [sp, #32]
 8002686:	440a      	add	r2, r1
				while (block_cnt > 0) {//total: 16bit * input_ch * 3
 8002688:	9916      	ldr	r1, [sp, #88]	; 0x58
 800268a:	2900      	cmp	r1, #0
 800268c:	f000 80d7 	beq.w	800283e <convolve_s8_kernel3_stride1_pad1+0x6d2>
 8002690:	1e4e      	subs	r6, r1, #1
 8002692:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002694:	0757      	lsls	r7, r2, #29
 8002696:	f101 0018 	add.w	r0, r1, #24
 800269a:	4410      	add	r0, r2
 800269c:	f102 0118 	add.w	r1, r2, #24
 80026a0:	d14e      	bne.n	8002740 <convolve_s8_kernel3_stride1_pad1+0x5d4>
 80026a2:	2e03      	cmp	r6, #3
 80026a4:	d94c      	bls.n	8002740 <convolve_s8_kernel3_stride1_pad1+0x5d4>
					*dst_31++ = pad_out_q15x2;
 80026a6:	e941 5506 	strd	r5, r5, [r1, #-24]
 80026aa:	e941 5504 	strd	r5, r5, [r1, #-16]
 80026ae:	e941 5502 	strd	r5, r5, [r1, #-8]
				while (block_cnt > 0) {//total: 16bit * input_ch * 3
 80026b2:	3118      	adds	r1, #24
 80026b4:	4281      	cmp	r1, r0
 80026b6:	d1f6      	bne.n	80026a6 <convolve_s8_kernel3_stride1_pad1+0x53a>
				if (base_idx_x == -1) {
 80026b8:	1c58      	adds	r0, r3, #1
 80026ba:	f000 81e7 	beq.w	8002a8c <convolve_s8_kernel3_stride1_pad1+0x920>
				} else if (base_idx_x + 2 == input_x) {
 80026be:	9811      	ldr	r0, [sp, #68]	; 0x44
 80026c0:	1c99      	adds	r1, r3, #2
 80026c2:	4288      	cmp	r0, r1
					const q7_t *src = input	+ (base_idx_y * input_x + base_idx_x) * input_ch;
 80026c4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80026c6:	440b      	add	r3, r1
 80026c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80026cc:	fb00 1303 	mla	r3, r0, r3, r1
					q15_t *dst2  = &col_buffer[input_ch * 3];
 80026d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80026d2:	440a      	add	r2, r1
					const q7_t *src2 = src + in_row_offset;
 80026d4:	9910      	ldr	r1, [sp, #64]	; 0x40
				} else if (base_idx_x + 2 == input_x) {
 80026d6:	f000 80b6 	beq.w	8002846 <convolve_s8_kernel3_stride1_pad1+0x6da>
					load_2row_3col(src, src2, dst, dst2)
 80026da:	9f17      	ldr	r7, [sp, #92]	; 0x5c
					const q7_t *src2 = src + in_row_offset;
 80026dc:	eb03 0c01 	add.w	ip, r3, r1
					load_2row_3col(src, src2, dst, dst2)
 80026e0:	2f00      	cmp	r7, #0
 80026e2:	f43f ae1a 	beq.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 80026e6:	9e08      	ldr	r6, [sp, #32]
 80026e8:	f853 1b04 	ldr.w	r1, [r3], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80026ec:	fa2f f081 	sxtb16	r0, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 80026f0:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80026f4:	fa2f f181 	sxtb16	r1, r1
 80026f8:	eac1 4e20 	pkhtb	lr, r1, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80026fc:	fa9e fe04 	sadd16	lr, lr, r4
 8002700:	eac0 4101 	pkhbt	r1, r0, r1, lsl #16
 8002704:	fa91 f104 	sadd16	r1, r1, r4
  memcpy (*pQ15, &val, 4);
 8002708:	f8c6 e004 	str.w	lr, [r6, #4]
 800270c:	6031      	str	r1, [r6, #0]
 *pQ15 += 2;
 800270e:	f85c 1b04 	ldr.w	r1, [ip], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002712:	fa2f f081 	sxtb16	r0, r1
 8002716:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8002718:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800271c:	fa2f f181 	sxtb16	r1, r1
 8002720:	eac1 4e20 	pkhtb	lr, r1, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002724:	fa9e fe04 	sadd16	lr, lr, r4
 8002728:	eac0 4101 	pkhbt	r1, r0, r1, lsl #16
 800272c:	fa91 f104 	sadd16	r1, r1, r4
 8002730:	3f01      	subs	r7, #1
  memcpy (*pQ15, &val, 4);
 8002732:	6011      	str	r1, [r2, #0]
 8002734:	f8c2 e004 	str.w	lr, [r2, #4]
 *pQ15 += 2;
 8002738:	f102 0208 	add.w	r2, r2, #8
 800273c:	d1d4      	bne.n	80026e8 <convolve_s8_kernel3_stride1_pad1+0x57c>
 800273e:	e5ec      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
					*dst_31++ = pad_out_q15x2;
 8002740:	e941 5506 	strd	r5, r5, [r1, #-24]
					*dst_31++ = pad_out_q15x2;
 8002744:	e941 5504 	strd	r5, r5, [r1, #-16]
					*dst_31++ = pad_out_q15x2;
 8002748:	e941 5502 	strd	r5, r5, [r1, #-8]
				while (block_cnt > 0) {//total: 16bit * input_ch * 3
 800274c:	3118      	adds	r1, #24
 800274e:	4281      	cmp	r1, r0
 8002750:	d1f6      	bne.n	8002740 <convolve_s8_kernel3_stride1_pad1+0x5d4>
 8002752:	e7b1      	b.n	80026b8 <convolve_s8_kernel3_stride1_pad1+0x54c>
					q31_t *dst2_31 = (q31_t*) &col_buffer[input_ch * 3];
 8002754:	9e08      	ldr	r6, [sp, #32]
 8002756:	9f15      	ldr	r7, [sp, #84]	; 0x54
					pad_3row_1col(dst_31, dst2_31, dst3_31, pad_out_q15x2)
 8002758:	9b16      	ldr	r3, [sp, #88]	; 0x58
					q31_t *dst2_31 = (q31_t*) &col_buffer[input_ch * 3];
 800275a:	19f1      	adds	r1, r6, r7
					q31_t *dst3_31 = (q31_t*) &col_buffer[input_ch * 6];
 800275c:	eb06 0247 	add.w	r2, r6, r7, lsl #1
					pad_3row_1col(dst_31, dst2_31, dst3_31, pad_out_q15x2)
 8002760:	2b00      	cmp	r3, #0
 8002762:	f43f adda 	beq.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 8002766:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002768:	1813      	adds	r3, r2, r0
 800276a:	19d8      	adds	r0, r3, r7
 800276c:	4303      	orrs	r3, r0
 800276e:	4333      	orrs	r3, r6
 8002770:	075b      	lsls	r3, r3, #29
 8002772:	f040 81d3 	bne.w	8002b1c <convolve_s8_kernel3_stride1_pad1+0x9b0>
 8002776:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002778:	3b01      	subs	r3, #1
 800277a:	2b03      	cmp	r3, #3
 800277c:	f240 81ce 	bls.w	8002b1c <convolve_s8_kernel3_stride1_pad1+0x9b0>
 8002780:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002782:	4418      	add	r0, r3
 8002784:	19c3      	adds	r3, r0, r7
 8002786:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8002788:	3808      	subs	r0, #8
 800278a:	3e08      	subs	r6, #8
 800278c:	19df      	adds	r7, r3, r7
 800278e:	f846 5f08 	str.w	r5, [r6, #8]!
 8002792:	6075      	str	r5, [r6, #4]
 8002794:	f840 5f08 	str.w	r5, [r0, #8]!
 8002798:	6045      	str	r5, [r0, #4]
 800279a:	e9c3 5500 	strd	r5, r5, [r3]
 800279e:	3308      	adds	r3, #8
 80027a0:	42bb      	cmp	r3, r7
 80027a2:	d1f4      	bne.n	800278e <convolve_s8_kernel3_stride1_pad1+0x622>
 80027a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80027a6:	9808      	ldr	r0, [sp, #32]
 80027a8:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 80027ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80027ae:	e9dd c71f 	ldrd	ip, r7, [sp, #124]	; 0x7c
 80027b2:	4419      	add	r1, r3
 80027b4:	441a      	add	r2, r3
 80027b6:	4418      	add	r0, r3
 80027b8:	f857 3b04 	ldr.w	r3, [r7], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80027bc:	fa2f f883 	sxtb16	r8, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80027c0:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80027c4:	fa2f f383 	sxtb16	r3, r3
					load_3row_2col(src, src2, src3, dst, dst2, dst3)
 80027c8:	eac3 4928 	pkhtb	r9, r3, r8, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80027cc:	fa99 f904 	sadd16	r9, r9, r4
 80027d0:	eac8 4803 	pkhbt	r8, r8, r3, lsl #16
 80027d4:	fa98 f804 	sadd16	r8, r8, r4
  memcpy (*pQ15, &val, 4);
 80027d8:	f8c0 8000 	str.w	r8, [r0]
 80027dc:	f8c0 9004 	str.w	r9, [r0, #4]
 *pQ15 += 2;
 80027e0:	f85c 3b04 	ldr.w	r3, [ip], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80027e4:	fa2f f883 	sxtb16	r8, r3
 80027e8:	3008      	adds	r0, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 80027ea:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80027ee:	fa2f f383 	sxtb16	r3, r3
 80027f2:	eac3 4928 	pkhtb	r9, r3, r8, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80027f6:	fa99 f904 	sadd16	r9, r9, r4
 80027fa:	eac8 4803 	pkhbt	r8, r8, r3, lsl #16
 80027fe:	fa98 f804 	sadd16	r8, r8, r4
  memcpy (*pQ15, &val, 4);
 8002802:	f8c1 8000 	str.w	r8, [r1]
 8002806:	f8c1 9004 	str.w	r9, [r1, #4]
 *pQ15 += 2;
 800280a:	f85e 3b04 	ldr.w	r3, [lr], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800280e:	fa2f f883 	sxtb16	r8, r3
 8002812:	3108      	adds	r1, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8002814:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002818:	fa2f f383 	sxtb16	r3, r3
 800281c:	eac3 4928 	pkhtb	r9, r3, r8, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002820:	fa99 f904 	sadd16	r9, r9, r4
 8002824:	eac8 4803 	pkhbt	r8, r8, r3, lsl #16
 8002828:	fa98 f804 	sadd16	r8, r8, r4
 800282c:	3e01      	subs	r6, #1
  memcpy (*pQ15, &val, 4);
 800282e:	f8c2 8000 	str.w	r8, [r2]
 8002832:	f8c2 9004 	str.w	r9, [r2, #4]
 *pQ15 += 2;
 8002836:	f102 0208 	add.w	r2, r2, #8
 800283a:	d1bd      	bne.n	80027b8 <convolve_s8_kernel3_stride1_pad1+0x64c>
 800283c:	e56d      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
				if (base_idx_x == -1) {
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	f47f af3d 	bne.w	80026be <convolve_s8_kernel3_stride1_pad1+0x552>
 8002844:	e569      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
					const q7_t *src2 = src + in_row_offset;
 8002846:	eb03 0e01 	add.w	lr, r3, r1
					load_2row_2col(src, src2, dst, dst2)
 800284a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800284c:	2900      	cmp	r1, #0
 800284e:	f000 819d 	beq.w	8002b8c <convolve_s8_kernel3_stride1_pad1+0xa20>
 8002852:	9e08      	ldr	r6, [sp, #32]
					q15_t *dst2  = &col_buffer[input_ch * 3];
 8002854:	4617      	mov	r7, r2
					load_2row_2col(src, src2, dst, dst2)
 8002856:	468c      	mov	ip, r1
 8002858:	f853 1b04 	ldr.w	r1, [r3], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800285c:	fa2f f081 	sxtb16	r0, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8002860:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002864:	fa2f f181 	sxtb16	r1, r1
 8002868:	eac1 4820 	pkhtb	r8, r1, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800286c:	fa98 f804 	sadd16	r8, r8, r4
 8002870:	eac0 4101 	pkhbt	r1, r0, r1, lsl #16
 8002874:	fa91 f104 	sadd16	r1, r1, r4
  memcpy (*pQ15, &val, 4);
 8002878:	f8c6 8004 	str.w	r8, [r6, #4]
 800287c:	6031      	str	r1, [r6, #0]
 *pQ15 += 2;
 800287e:	f85e 1b04 	ldr.w	r1, [lr], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002882:	fa2f f081 	sxtb16	r0, r1
 8002886:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8002888:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800288c:	fa2f f181 	sxtb16	r1, r1
 8002890:	eac1 4820 	pkhtb	r8, r1, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002894:	fa98 f804 	sadd16	r8, r8, r4
 8002898:	eac0 4101 	pkhbt	r1, r0, r1, lsl #16
 800289c:	fa91 f104 	sadd16	r1, r1, r4
 80028a0:	f1bc 0c01 	subs.w	ip, ip, #1
  memcpy (*pQ15, &val, 4);
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	f8c7 8004 	str.w	r8, [r7, #4]
 *pQ15 += 2;
 80028aa:	f107 0708 	add.w	r7, r7, #8
 80028ae:	d1d3      	bne.n	8002858 <convolve_s8_kernel3_stride1_pad1+0x6ec>
 80028b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80028b2:	9908      	ldr	r1, [sp, #32]
 80028b4:	441a      	add	r2, r3
 80028b6:	18cb      	adds	r3, r1, r3
					pad_2row_1col(dst_31,dst2_31,pad_out_q15x2)
 80028b8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80028ba:	2800      	cmp	r0, #0
 80028bc:	f43f ad2d 	beq.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 80028c0:	ea42 0103 	orr.w	r1, r2, r3
 80028c4:	074e      	lsls	r6, r1, #29
 80028c6:	f040 8148 	bne.w	8002b5a <convolve_s8_kernel3_stride1_pad1+0x9ee>
 80028ca:	1e41      	subs	r1, r0, #1
 80028cc:	2905      	cmp	r1, #5
 80028ce:	f240 8144 	bls.w	8002b5a <convolve_s8_kernel3_stride1_pad1+0x9ee>
 80028d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80028d4:	3b08      	subs	r3, #8
 80028d6:	1851      	adds	r1, r2, r1
 80028d8:	f843 5f08 	str.w	r5, [r3, #8]!
 80028dc:	605d      	str	r5, [r3, #4]
 80028de:	e9c2 5500 	strd	r5, r5, [r2]
 80028e2:	3208      	adds	r2, #8
 80028e4:	428a      	cmp	r2, r1
 80028e6:	d1f7      	bne.n	80028d8 <convolve_s8_kernel3_stride1_pad1+0x76c>
 80028e8:	e517      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 80028ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80028ec:	3208      	adds	r2, #8
 80028ee:	441a      	add	r2, r3
 80028f0:	f10c 0c08 	add.w	ip, ip, #8
 80028f4:	3108      	adds	r1, #8
 80028f6:	3308      	adds	r3, #8
					pad_3row_1col(dst_31,dst2_31,dst3_31,pad_out_q15x2)
 80028f8:	e943 5502 	strd	r5, r5, [r3, #-8]
 80028fc:	3308      	adds	r3, #8
 80028fe:	4293      	cmp	r3, r2
 8002900:	e94c 5502 	strd	r5, r5, [ip, #-8]
 8002904:	e941 5502 	strd	r5, r5, [r1, #-8]
 8002908:	f10c 0c08 	add.w	ip, ip, #8
 800290c:	f101 0108 	add.w	r1, r1, #8
 8002910:	d1f2      	bne.n	80028f8 <convolve_s8_kernel3_stride1_pad1+0x78c>
 8002912:	e502      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 8002914:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002916:	f102 0118 	add.w	r1, r2, #24
 800291a:	9a08      	ldr	r2, [sp, #32]
 800291c:	4411      	add	r1, r2
 800291e:	3218      	adds	r2, #24
					*dst_31++ = pad_out_q15x2;
 8002920:	e942 5506 	strd	r5, r5, [r2, #-24]
					*dst_31++ = pad_out_q15x2;
 8002924:	e942 5504 	strd	r5, r5, [r2, #-16]
					*dst_31++ = pad_out_q15x2;
 8002928:	e942 5502 	strd	r5, r5, [r2, #-8]
				while (block_cnt > 0) {//total: 16bit * input_ch * 3
 800292c:	3218      	adds	r2, #24
 800292e:	428a      	cmp	r2, r1
 8002930:	d1f6      	bne.n	8002920 <convolve_s8_kernel3_stride1_pad1+0x7b4>
				if (base_idx_x == -1){
 8002932:	1c58      	adds	r0, r3, #1
 8002934:	f47f ae64 	bne.w	8002600 <convolve_s8_kernel3_stride1_pad1+0x494>
					q31_t *dst2_31 = &col_buffer[input_ch * 6];
 8002938:	9815      	ldr	r0, [sp, #84]	; 0x54
 800293a:	9e08      	ldr	r6, [sp, #32]
 800293c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800293e:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 8002942:	18ca      	adds	r2, r1, r3
 8002944:	1813      	adds	r3, r2, r0
 8002946:	431a      	orrs	r2, r3
 8002948:	0752      	lsls	r2, r2, #29
					q31_t *dst_31 = &col_buffer[input_ch * 3];
 800294a:	4430      	add	r0, r6
					pad_2row_1col(dst_31, dst2_31, pad_out_q15x2)
 800294c:	f040 8145 	bne.w	8002bda <convolve_s8_kernel3_stride1_pad1+0xa6e>
 8002950:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002952:	3a01      	subs	r2, #1
 8002954:	2a05      	cmp	r2, #5
 8002956:	f240 8140 	bls.w	8002bda <convolve_s8_kernel3_stride1_pad1+0xa6e>
 800295a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800295c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800295e:	189a      	adds	r2, r3, r2
 8002960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002962:	18d3      	adds	r3, r2, r3
 8002964:	199e      	adds	r6, r3, r6
 8002966:	3a08      	subs	r2, #8
 8002968:	f842 5f08 	str.w	r5, [r2, #8]!
 800296c:	6055      	str	r5, [r2, #4]
 800296e:	e9c3 5500 	strd	r5, r5, [r3]
 8002972:	3308      	adds	r3, #8
 8002974:	429e      	cmp	r6, r3
 8002976:	d1f7      	bne.n	8002968 <convolve_s8_kernel3_stride1_pad1+0x7fc>
 8002978:	9b18      	ldr	r3, [sp, #96]	; 0x60
					const q7_t *src2 = src + in_row_offset;
 800297a:	9e19      	ldr	r6, [sp, #100]	; 0x64
					pad_2row_1col(dst_31, dst2_31, pad_out_q15x2)
 800297c:	4418      	add	r0, r3
 800297e:	4419      	add	r1, r3
					const q7_t *src2 = src + in_row_offset;
 8002980:	e9dd 730f 	ldrd	r7, r3, [sp, #60]	; 0x3c
 8002984:	eb07 0c03 	add.w	ip, r7, r3
 8002988:	f857 3b04 	ldr.w	r3, [r7], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800298c:	fa2f f283 	sxtb16	r2, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8002990:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002994:	fa2f f383 	sxtb16	r3, r3
					load_2row_2col(src, src2, dst, dst2)
 8002998:	eac3 4e22 	pkhtb	lr, r3, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800299c:	fa9e fe04 	sadd16	lr, lr, r4
 80029a0:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 80029a4:	fa93 f304 	sadd16	r3, r3, r4
  memcpy (*pQ15, &val, 4);
 80029a8:	f8c0 e004 	str.w	lr, [r0, #4]
 80029ac:	6003      	str	r3, [r0, #0]
 *pQ15 += 2;
 80029ae:	f85c 3b04 	ldr.w	r3, [ip], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029b2:	fa2f f283 	sxtb16	r2, r3
 80029b6:	3008      	adds	r0, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 80029b8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029bc:	fa2f f383 	sxtb16	r3, r3
 80029c0:	eac3 4e22 	pkhtb	lr, r3, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80029c4:	fa9e fe04 	sadd16	lr, lr, r4
 80029c8:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 80029cc:	fa93 f304 	sadd16	r3, r3, r4
 80029d0:	3e01      	subs	r6, #1
  memcpy (*pQ15, &val, 4);
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	f8c1 e004 	str.w	lr, [r1, #4]
 *pQ15 += 2;
 80029d8:	f101 0108 	add.w	r1, r1, #8
 80029dc:	d1d4      	bne.n	8002988 <convolve_s8_kernel3_stride1_pad1+0x81c>
 80029de:	e49c      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
					q31_t *dst = &col_buffer[input_ch * 3];
 80029e0:	eb02 0c01 	add.w	ip, r2, r1
					q31_t *dst2 = &col_buffer[input_ch * 6];
 80029e4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
					const q7_t *src2 = src + in_row_offset;
 80029e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80029ea:	eb03 0802 	add.w	r8, r3, r2
					load_2row_2col(src, src2, dst, dst2)
 80029ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80029f0:	b38a      	cbz	r2, 8002a56 <convolve_s8_kernel3_stride1_pad1+0x8ea>
					q31_t *dst2 = &col_buffer[input_ch * 6];
 80029f2:	4607      	mov	r7, r0
					q31_t *dst = &col_buffer[input_ch * 3];
 80029f4:	4666      	mov	r6, ip
					load_2row_2col(src, src2, dst, dst2)
 80029f6:	4696      	mov	lr, r2
 80029f8:	f853 2b04 	ldr.w	r2, [r3], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029fc:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8002a00:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002a04:	fa2f f282 	sxtb16	r2, r2
 8002a08:	eac2 4921 	pkhtb	r9, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002a0c:	fa99 f904 	sadd16	r9, r9, r4
 8002a10:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8002a14:	fa92 f204 	sadd16	r2, r2, r4
  memcpy (*pQ15, &val, 4);
 8002a18:	f8c6 9004 	str.w	r9, [r6, #4]
 8002a1c:	6032      	str	r2, [r6, #0]
 *pQ15 += 2;
 8002a1e:	f858 2b04 	ldr.w	r2, [r8], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002a22:	fa2f f182 	sxtb16	r1, r2
 8002a26:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8002a28:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002a2c:	fa2f f282 	sxtb16	r2, r2
 8002a30:	eac2 4921 	pkhtb	r9, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002a34:	fa99 f904 	sadd16	r9, r9, r4
 8002a38:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8002a3c:	fa92 f204 	sadd16	r2, r2, r4
 8002a40:	f1be 0e01 	subs.w	lr, lr, #1
  memcpy (*pQ15, &val, 4);
 8002a44:	603a      	str	r2, [r7, #0]
 8002a46:	f8c7 9004 	str.w	r9, [r7, #4]
 *pQ15 += 2;
 8002a4a:	f107 0708 	add.w	r7, r7, #8
 8002a4e:	d1d3      	bne.n	80029f8 <convolve_s8_kernel3_stride1_pad1+0x88c>
 8002a50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002a52:	449c      	add	ip, r3
 8002a54:	4418      	add	r0, r3
					pad_2row_1col(dst_31,dst2_31,pad_out_q15x2)
 8002a56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	f43f ac5e 	beq.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 8002a5e:	ea40 030c 	orr.w	r3, r0, ip
 8002a62:	075f      	lsls	r7, r3, #29
 8002a64:	f040 80a8 	bne.w	8002bb8 <convolve_s8_kernel3_stride1_pad1+0xa4c>
 8002a68:	1e53      	subs	r3, r2, #1
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	f240 80a4 	bls.w	8002bb8 <convolve_s8_kernel3_stride1_pad1+0xa4c>
 8002a70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8002a76:	18c3      	adds	r3, r0, r3
 8002a78:	f84c 5f08 	str.w	r5, [ip, #8]!
 8002a7c:	f8cc 5004 	str.w	r5, [ip, #4]
 8002a80:	e9c0 5500 	strd	r5, r5, [r0]
 8002a84:	3008      	adds	r0, #8
 8002a86:	4283      	cmp	r3, r0
 8002a88:	d1f6      	bne.n	8002a78 <convolve_s8_kernel3_stride1_pad1+0x90c>
 8002a8a:	e446      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
					q31_t *dst2_31 = (q31_t*) &col_buffer[input_ch * 3];
 8002a8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002a8e:	441a      	add	r2, r3
					pad_2row_1col(dst_31, dst2_31, pad_out_q15x2)
 8002a90:	9b08      	ldr	r3, [sp, #32]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	075f      	lsls	r7, r3, #29
 8002a96:	d17b      	bne.n	8002b90 <convolve_s8_kernel3_stride1_pad1+0xa24>
 8002a98:	2e05      	cmp	r6, #5
 8002a9a:	d979      	bls.n	8002b90 <convolve_s8_kernel3_stride1_pad1+0xa24>
 8002a9c:	9b08      	ldr	r3, [sp, #32]
 8002a9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8002aa0:	3b08      	subs	r3, #8
 8002aa2:	1851      	adds	r1, r2, r1
 8002aa4:	f843 5f08 	str.w	r5, [r3, #8]!
 8002aa8:	605d      	str	r5, [r3, #4]
 8002aaa:	e9c2 5500 	strd	r5, r5, [r2]
 8002aae:	3208      	adds	r2, #8
 8002ab0:	428a      	cmp	r2, r1
 8002ab2:	d1f7      	bne.n	8002aa4 <convolve_s8_kernel3_stride1_pad1+0x938>
 8002ab4:	9b08      	ldr	r3, [sp, #32]
 8002ab6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002ab8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8002aba:	e9dd c71f 	ldrd	ip, r7, [sp, #124]	; 0x7c
 8002abe:	1898      	adds	r0, r3, r2
 8002ac0:	f857 3b04 	ldr.w	r3, [r7], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002ac4:	fa2f f283 	sxtb16	r2, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8002ac8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002acc:	fa2f f383 	sxtb16	r3, r3
					load_2row_2col(src, src2, dst, dst2)
 8002ad0:	eac3 4e22 	pkhtb	lr, r3, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002ad4:	fa9e fe04 	sadd16	lr, lr, r4
 8002ad8:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8002adc:	fa93 f304 	sadd16	r3, r3, r4
  memcpy (*pQ15, &val, 4);
 8002ae0:	f8c0 e004 	str.w	lr, [r0, #4]
 8002ae4:	6003      	str	r3, [r0, #0]
 *pQ15 += 2;
 8002ae6:	f85c 3b04 	ldr.w	r3, [ip], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002aea:	fa2f f283 	sxtb16	r2, r3
 8002aee:	3008      	adds	r0, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 8002af0:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002af4:	fa2f f383 	sxtb16	r3, r3
 8002af8:	eac3 4e22 	pkhtb	lr, r3, r2, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002afc:	fa9e fe04 	sadd16	lr, lr, r4
 8002b00:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8002b04:	fa93 f304 	sadd16	r3, r3, r4
 8002b08:	3e01      	subs	r6, #1
  memcpy (*pQ15, &val, 4);
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	f8c1 e004 	str.w	lr, [r1, #4]
 *pQ15 += 2;
 8002b10:	f101 0108 	add.w	r1, r1, #8
 8002b14:	d1d4      	bne.n	8002ac0 <convolve_s8_kernel3_stride1_pad1+0x954>
 8002b16:	e400      	b.n	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	e515      	b.n	8002548 <convolve_s8_kernel3_stride1_pad1+0x3dc>
 8002b1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002b1e:	9808      	ldr	r0, [sp, #32]
 8002b20:	f103 0708 	add.w	r7, r3, #8
 8002b24:	440f      	add	r7, r1
 8002b26:	f101 0308 	add.w	r3, r1, #8
 8002b2a:	f102 0608 	add.w	r6, r2, #8
 8002b2e:	3008      	adds	r0, #8
					pad_3row_1col(dst_31, dst2_31, dst3_31, pad_out_q15x2)
 8002b30:	e940 5502 	strd	r5, r5, [r0, #-8]
 8002b34:	e943 5502 	strd	r5, r5, [r3, #-8]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	42bb      	cmp	r3, r7
 8002b3c:	e946 5502 	strd	r5, r5, [r6, #-8]
 8002b40:	f100 0008 	add.w	r0, r0, #8
 8002b44:	f106 0608 	add.w	r6, r6, #8
 8002b48:	d1f2      	bne.n	8002b30 <convolve_s8_kernel3_stride1_pad1+0x9c4>
 8002b4a:	e62b      	b.n	80027a4 <convolve_s8_kernel3_stride1_pad1+0x638>
				if (base_idx_x == -1){
 8002b4c:	1c59      	adds	r1, r3, #1
 8002b4e:	f47f ad57 	bne.w	8002600 <convolve_s8_kernel3_stride1_pad1+0x494>
 8002b52:	f7ff bbe2 	b.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
			while (col_count)
 8002b56:	4660      	mov	r0, ip
 8002b58:	e467      	b.n	800242a <convolve_s8_kernel3_stride1_pad1+0x2be>
 8002b5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8002b5c:	3108      	adds	r1, #8
 8002b5e:	4411      	add	r1, r2
 8002b60:	3308      	adds	r3, #8
 8002b62:	3208      	adds	r2, #8
					pad_2row_1col(dst_31,dst2_31,pad_out_q15x2)
 8002b64:	e943 5502 	strd	r5, r5, [r3, #-8]
 8002b68:	e942 5502 	strd	r5, r5, [r2, #-8]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	428a      	cmp	r2, r1
 8002b70:	f103 0308 	add.w	r3, r3, #8
 8002b74:	d1f6      	bne.n	8002b64 <convolve_s8_kernel3_stride1_pad1+0x9f8>
 8002b76:	f7ff bbd0 	b.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
			while (col_count)
 8002b7a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8002b7c:	4684      	mov	ip, r0
 8002b7e:	e43c      	b.n	80023fa <convolve_s8_kernel3_stride1_pad1+0x28e>
		return PARAM_NO_SUPPORT;
 8002b80:	2001      	movs	r0, #1
}
 8002b82:	b027      	add	sp, #156	; 0x9c
 8002b84:	ecbd 8b02 	vpop	{d8}
 8002b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					load_2row_2col(src, src2, dst, dst2)
 8002b8c:	9b08      	ldr	r3, [sp, #32]
 8002b8e:	e693      	b.n	80028b8 <convolve_s8_kernel3_stride1_pad1+0x74c>
 8002b90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002b92:	9908      	ldr	r1, [sp, #32]
 8002b94:	f103 0008 	add.w	r0, r3, #8
 8002b98:	4410      	add	r0, r2
 8002b9a:	f102 0308 	add.w	r3, r2, #8
 8002b9e:	3108      	adds	r1, #8
					pad_2row_1col(dst_31, dst2_31, pad_out_q15x2)
 8002ba0:	e941 5502 	strd	r5, r5, [r1, #-8]
 8002ba4:	e943 5502 	strd	r5, r5, [r3, #-8]
 8002ba8:	3308      	adds	r3, #8
 8002baa:	4283      	cmp	r3, r0
 8002bac:	f101 0108 	add.w	r1, r1, #8
 8002bb0:	d1f6      	bne.n	8002ba0 <convolve_s8_kernel3_stride1_pad1+0xa34>
 8002bb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002bb4:	18d1      	adds	r1, r2, r3
 8002bb6:	e77d      	b.n	8002ab4 <convolve_s8_kernel3_stride1_pad1+0x948>
 8002bb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002bba:	3308      	adds	r3, #8
 8002bbc:	4403      	add	r3, r0
 8002bbe:	f10c 0c08 	add.w	ip, ip, #8
 8002bc2:	3008      	adds	r0, #8
					pad_2row_1col(dst_31,dst2_31,pad_out_q15x2)
 8002bc4:	e94c 5502 	strd	r5, r5, [ip, #-8]
 8002bc8:	e940 5502 	strd	r5, r5, [r0, #-8]
 8002bcc:	3008      	adds	r0, #8
 8002bce:	4298      	cmp	r0, r3
 8002bd0:	f10c 0c08 	add.w	ip, ip, #8
 8002bd4:	d1f6      	bne.n	8002bc4 <convolve_s8_kernel3_stride1_pad1+0xa58>
 8002bd6:	f7ff bba0 	b.w	800231a <convolve_s8_kernel3_stride1_pad1+0x1ae>
 8002bda:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002bdc:	f103 0608 	add.w	r6, r3, #8
 8002be0:	440e      	add	r6, r1
 8002be2:	f101 0308 	add.w	r3, r1, #8
 8002be6:	f100 0208 	add.w	r2, r0, #8
					pad_2row_1col(dst_31, dst2_31, pad_out_q15x2)
 8002bea:	e942 5502 	strd	r5, r5, [r2, #-8]
 8002bee:	e943 5502 	strd	r5, r5, [r3, #-8]
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	429e      	cmp	r6, r3
 8002bf6:	f102 0208 	add.w	r2, r2, #8
 8002bfa:	d1f6      	bne.n	8002bea <convolve_s8_kernel3_stride1_pad1+0xa7e>
 8002bfc:	e6bc      	b.n	8002978 <convolve_s8_kernel3_stride1_pad1+0x80c>
 8002bfe:	bf00      	nop

08002c00 <mat_mult_kernel_s8_s16>:
							const int16_t activation_min,
							const int16_t activation_max,
							const uint16_t num_col_a,
							const int32_t *const output_bias,
							q7_t *out_0)
{
 8002c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c04:	b09b      	sub	sp, #108	; 0x6c
 8002c06:	4683      	mov	fp, r0
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 8002c08:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
{
 8002c0a:	f9bd 0098 	ldrsh.w	r0, [sp, #152]	; 0x98
 8002c0e:	9007      	str	r0, [sp, #28]
 8002c10:	f9bd 009c 	ldrsh.w	r0, [sp, #156]	; 0x9c
 8002c14:	9218      	str	r2, [sp, #96]	; 0x60
    q7_t *out_1 = out_0 + output_ch;
 8002c16:	4414      	add	r4, r2
{
 8002c18:	9008      	str	r0, [sp, #32]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
 8002c1a:	0852      	lsrs	r2, r2, #1
{
 8002c1c:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8002c20:	910f      	str	r1, [sp, #60]	; 0x3c
 8002c22:	9316      	str	r3, [sp, #88]	; 0x58
 8002c24:	900d      	str	r0, [sp, #52]	; 0x34
    q7_t *out_1 = out_0 + output_ch;
 8002c26:	9417      	str	r4, [sp, #92]	; 0x5c
    while (row_count)
 8002c28:	9219      	str	r2, [sp, #100]	; 0x64
 8002c2a:	f000 819f 	beq.w	8002f6c <mat_mult_kernel_s8_s16+0x36c>
        q31_t ch_0_out_0 = *bias;
        q31_t ch_0_out_1 = *bias++;
        q31_t ch_1_out_0 = *bias;
        q31_t ch_1_out_1 = *bias++;

        uint16_t col_count = num_col_a / 4;
 8002c2e:	0885      	lsrs	r5, r0, #2
 8002c30:	460e      	mov	r6, r1
 8002c32:	461f      	mov	r7, r3
 8002c34:	9510      	str	r5, [sp, #64]	; 0x40
 8002c36:	1e6b      	subs	r3, r5, #1
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

            col_count--;
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 8002c38:	f000 0503 	and.w	r5, r0, #3
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8002c3c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c40:	9929      	ldr	r1, [sp, #164]	; 0xa4
        col_count = num_col_a & 0x3;
 8002c42:	950c      	str	r5, [sp, #48]	; 0x30
 8002c44:	3a01      	subs	r2, #1
 8002c46:	b292      	uxth	r2, r2
 8002c48:	3110      	adds	r1, #16
 8002c4a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002c4e:	9211      	str	r2, [sp, #68]	; 0x44

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            ch_1_out_0 += a1 * b0;
            ch_1_out_1 += a1 * b1;
            col_count--;
 8002c50:	1e6a      	subs	r2, r5, #1
 8002c52:	b292      	uxth	r2, r2
 8002c54:	9215      	str	r2, [sp, #84]	; 0x54
 8002c56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8002c58:	9012      	str	r0, [sp, #72]	; 0x48
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8002c5e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002c60:	3202      	adds	r2, #2
 8002c62:	9209      	str	r2, [sp, #36]	; 0x24
 8002c64:	1ca2      	adds	r2, r4, #2
 8002c66:	920a      	str	r2, [sp, #40]	; 0x28
 8002c68:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002c6a:	3208      	adds	r2, #8
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	9204      	str	r2, [sp, #16]
 8002c70:	463a      	mov	r2, r7
 8002c72:	3301      	adds	r3, #1
 8002c74:	3208      	adds	r2, #8
 8002c76:	9205      	str	r2, [sp, #20]
 8002c78:	009a      	lsls	r2, r3, #2
 8002c7a:	920e      	str	r2, [sp, #56]	; 0x38
    *in_q15 += 2;
 8002c7c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8002c80:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002c84:	9214      	str	r2, [sp, #80]	; 0x50
 8002c86:	9313      	str	r3, [sp, #76]	; 0x4c
        q31_t ch_0_out_0 = *bias;
 8002c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        while (col_count)
 8002c8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
        q31_t ch_1_out_0 = *bias;
 8002c8c:	e953 5402 	ldrd	r5, r4, [r3, #-8]
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8002c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c92:	445b      	add	r3, fp
 8002c94:	9306      	str	r3, [sp, #24]
        while (col_count)
 8002c96:	2a00      	cmp	r2, #0
 8002c98:	f000 8222 	beq.w	80030e0 <mat_mult_kernel_s8_s16+0x4e0>
 8002c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8002c9e:	9f12      	ldr	r7, [sp, #72]	; 0x48
        const q15_t *ip_b0 = input_b;
 8002ca0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8002ca2:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8002ca6:	445a      	add	r2, fp
 8002ca8:	9203      	str	r2, [sp, #12]
        q31_t ch_1_out_1 = *bias++;
 8002caa:	46a2      	mov	sl, r4
    memcpy(&val, *in_q15, 4);
 8002cac:	f8d6 8000 	ldr.w	r8, [r6]
 8002cb0:	f8d7 e000 	ldr.w	lr, [r7]
    memcpy(&val, *in_q7, 4);
 8002cb4:	f85b 1b04 	ldr.w	r1, [fp], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8002cb8:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002cbc:	9a02      	ldr	r2, [sp, #8]
 8002cbe:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8002cc2:	f852 3b04 	ldr.w	r3, [r2], #4
 8002cc6:	eac0 4c21 	pkhtb	ip, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8002cca:	9202      	str	r2, [sp, #8]
 8002ccc:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8002cd0:	fa2f f993 	sxtb16	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002cd4:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8002cd8:	eac9 4023 	pkhtb	r0, r9, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8002cdc:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002ce0:	fb21 5508 	smlad	r5, r1, r8, r5
 8002ce4:	9a01      	ldr	r2, [sp, #4]
 8002ce6:	fb21 220e 	smlad	r2, r1, lr, r2
 8002cea:	fb23 4408 	smlad	r4, r3, r8, r4
 8002cee:	fb23 a30e 	smlad	r3, r3, lr, sl
    memcpy(&val, *in_q15, 4);
 8002cf2:	6871      	ldr	r1, [r6, #4]
    *in_q15 += 2;
 8002cf4:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8002cf8:	3608      	adds	r6, #8
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	fb2c 5501 	smlad	r5, ip, r1, r5
 8002d00:	fb2c 220a 	smlad	r2, ip, sl, r2
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	fb20 4401 	smlad	r4, r0, r1, r4
 8002d0a:	fb20 3a0a 	smlad	sl, r0, sl, r3
        while (col_count)
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	459b      	cmp	fp, r3
 8002d12:	d1cb      	bne.n	8002cac <mat_mult_kernel_s8_s16+0xac>
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 8002d14:	9b06      	ldr	r3, [sp, #24]
 8002d16:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002d18:	440b      	add	r3, r1
 8002d1a:	9306      	str	r3, [sp, #24]
 8002d1c:	e9dd 3113 	ldrd	r3, r1, [sp, #76]	; 0x4c
        while (col_count)
 8002d20:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d03e      	beq.n	8002da4 <mat_mult_kernel_s8_s16+0x1a4>
            q7_t a0 = *ip_a0++;
 8002d26:	9e03      	ldr	r6, [sp, #12]
            q7_t a1 = *ip_a1++;
 8002d28:	9806      	ldr	r0, [sp, #24]
            q7_t a0 = *ip_a0++;
 8002d2a:	f996 7000 	ldrsb.w	r7, [r6]
            q7_t a1 = *ip_a1++;
 8002d2e:	f990 0000 	ldrsb.w	r0, [r0]
            q15_t b0 = *ip_b0++;
 8002d32:	f9b1 6000 	ldrsh.w	r6, [r1]
            ch_0_out_0 += a0 * b0;
 8002d36:	fb16 5507 	smlabb	r5, r6, r7, r5
            ch_1_out_0 += a1 * b0;
 8002d3a:	fb16 4400 	smlabb	r4, r6, r0, r4
            q15_t b1 = *ip_b1++;
 8002d3e:	f9b3 6000 	ldrsh.w	r6, [r3]
            ch_0_out_1 += a0 * b1;
 8002d42:	fb16 2207 	smlabb	r2, r6, r7, r2
        while (col_count)
 8002d46:	9f15      	ldr	r7, [sp, #84]	; 0x54
            ch_1_out_1 += a1 * b1;
 8002d48:	fb16 aa00 	smlabb	sl, r6, r0, sl
        while (col_count)
 8002d4c:	b337      	cbz	r7, 8002d9c <mat_mult_kernel_s8_s16+0x19c>
            q7_t a0 = *ip_a0++;
 8002d4e:	9e03      	ldr	r6, [sp, #12]
            q7_t a1 = *ip_a1++;
 8002d50:	9806      	ldr	r0, [sp, #24]
            q7_t a0 = *ip_a0++;
 8002d52:	f996 7001 	ldrsb.w	r7, [r6, #1]
            q7_t a1 = *ip_a1++;
 8002d56:	f990 0001 	ldrsb.w	r0, [r0, #1]
            q15_t b0 = *ip_b0++;
 8002d5a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
            ch_1_out_0 += a1 * b0;
 8002d5e:	fb16 4400 	smlabb	r4, r6, r0, r4
            ch_0_out_0 += a0 * b0;
 8002d62:	fb16 5507 	smlabb	r5, r6, r7, r5
            q15_t b1 = *ip_b1++;
 8002d66:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
            ch_1_out_1 += a1 * b1;
 8002d6a:	fb16 aa00 	smlabb	sl, r6, r0, sl
        while (col_count)
 8002d6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d70:	2802      	cmp	r0, #2
            ch_0_out_1 += a0 * b1;
 8002d72:	fb16 2207 	smlabb	r2, r6, r7, r2
        while (col_count)
 8002d76:	d011      	beq.n	8002d9c <mat_mult_kernel_s8_s16+0x19c>
            q7_t a1 = *ip_a1++;
 8002d78:	9806      	ldr	r0, [sp, #24]
            q15_t b0 = *ip_b0++;
 8002d7a:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
            q7_t a1 = *ip_a1++;
 8002d7e:	f990 0002 	ldrsb.w	r0, [r0, #2]
            q15_t b1 = *ip_b1++;
 8002d82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            q7_t a0 = *ip_a0++;
 8002d86:	9e03      	ldr	r6, [sp, #12]
            ch_1_out_0 += a1 * b0;
 8002d88:	fb11 4400 	smlabb	r4, r1, r0, r4
            ch_1_out_1 += a1 * b1;
 8002d8c:	fb13 aa00 	smlabb	sl, r3, r0, sl
            q7_t a0 = *ip_a0++;
 8002d90:	f996 0002 	ldrsb.w	r0, [r6, #2]
            ch_0_out_0 += a0 * b0;
 8002d94:	fb11 5500 	smlabb	r5, r1, r0, r5
            ch_0_out_1 += a0 * b1;
 8002d98:	fb13 2200 	smlabb	r2, r3, r0, r2
            q7_t a0 = *ip_a0++;
 8002d9c:	9b03      	ldr	r3, [sp, #12]
 8002d9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002da0:	440b      	add	r3, r1
 8002da2:	9303      	str	r3, [sp, #12]
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8002da4:	9b05      	ldr	r3, [sp, #20]
 8002da6:	f853 0c08 	ldr.w	r0, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002daa:	9b04      	ldr	r3, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002dac:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002db0:	f853 3c08 	ldr.w	r3, [r3, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002db4:	408d      	lsls	r5, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002db6:	2600      	movs	r6, #0
 8002db8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002dbc:	fbc5 1603 	smlal	r1, r6, r5, r3
    result = (int32_t)(mult.long_long >> 31);
 8002dc0:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002dc2:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 8002dc4:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002dc8:	dc0d      	bgt.n	8002de6 <mat_mult_kernel_s8_s16+0x1e6>
 8002dca:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	4083      	lsls	r3, r0
 8002dd0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8002dd2:	ea06 0103 	and.w	r1, r6, r3
    if (result < 0)
 8002dd6:	4106      	asrs	r6, r0
    q31_t threshold = remainder_mask >> 1;
 8002dd8:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8002ddc:	bf48      	it	mi
 8002dde:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8002de0:	4299      	cmp	r1, r3
        result++;
 8002de2:	bfc8      	it	gt
 8002de4:	3601      	addgt	r6, #1
        ch_0_out_0 += out_offset;
 8002de6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002de8:	441e      	add	r6, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8002dea:	9b07      	ldr	r3, [sp, #28]
 8002dec:	429e      	cmp	r6, r3
 8002dee:	bfb8      	it	lt
 8002df0:	461e      	movlt	r6, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8002df2:	9b08      	ldr	r3, [sp, #32]
 8002df4:	429e      	cmp	r6, r3
 8002df6:	bfa8      	it	ge
 8002df8:	461e      	movge	r6, r3
        *out_0++ = (q7_t)ch_0_out_0;
 8002dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dfc:	f803 6c02 	strb.w	r6, [r3, #-2]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8002e00:	9b05      	ldr	r3, [sp, #20]
 8002e02:	f853 0c08 	ldr.w	r0, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002e06:	9b04      	ldr	r3, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002e08:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002e0c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002e10:	408a      	lsls	r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002e12:	2500      	movs	r5, #0
 8002e14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e18:	fbc2 1503 	smlal	r1, r5, r2, r3
    result = (int32_t)(mult.long_long >> 31);
 8002e1c:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002e1e:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 8002e20:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002e24:	dc0d      	bgt.n	8002e42 <mat_mult_kernel_s8_s16+0x242>
 8002e26:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	4083      	lsls	r3, r0
 8002e2c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8002e2e:	ea05 0203 	and.w	r2, r5, r3
    if (result < 0)
 8002e32:	4105      	asrs	r5, r0
    q31_t threshold = remainder_mask >> 1;
 8002e34:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8002e38:	bf48      	it	mi
 8002e3a:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8002e3c:	429a      	cmp	r2, r3
        result++;
 8002e3e:	bfc8      	it	gt
 8002e40:	3501      	addgt	r5, #1
        ch_0_out_1 += out_offset;
 8002e42:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002e44:	441d      	add	r5, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8002e46:	9b07      	ldr	r3, [sp, #28]
 8002e48:	429d      	cmp	r5, r3
 8002e4a:	bfb8      	it	lt
 8002e4c:	461d      	movlt	r5, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8002e4e:	9b08      	ldr	r3, [sp, #32]
 8002e50:	429d      	cmp	r5, r3
 8002e52:	bfa8      	it	ge
 8002e54:	461d      	movge	r5, r3
        *out_1++ = (q7_t)ch_0_out_1;
 8002e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e58:	f803 5c02 	strb.w	r5, [r3, #-2]
        out_mult++;
        out_shift++;

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8002e5c:	9b05      	ldr	r3, [sp, #20]
 8002e5e:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002e62:	9b04      	ldr	r3, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002e64:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002e68:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002e6c:	4094      	lsls	r4, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e74:	fbc4 2003 	smlal	r2, r0, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 8002e78:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002e7a:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8002e7c:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002e80:	dc0d      	bgt.n	8002e9e <mat_mult_kernel_s8_s16+0x29e>
 8002e82:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8002e84:	2301      	movs	r3, #1
 8002e86:	408b      	lsls	r3, r1
 8002e88:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8002e8a:	ea00 0203 	and.w	r2, r0, r3
    if (result < 0)
 8002e8e:	4108      	asrs	r0, r1
    q31_t threshold = remainder_mask >> 1;
 8002e90:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8002e94:	bf48      	it	mi
 8002e96:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8002e98:	429a      	cmp	r2, r3
        result++;
 8002e9a:	bfc8      	it	gt
 8002e9c:	3001      	addgt	r0, #1
        ch_1_out_0 += out_offset;
 8002e9e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002ea0:	4418      	add	r0, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8002ea2:	9b07      	ldr	r3, [sp, #28]
 8002ea4:	4298      	cmp	r0, r3
 8002ea6:	bfb8      	it	lt
 8002ea8:	4618      	movlt	r0, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8002eaa:	9b08      	ldr	r3, [sp, #32]
 8002eac:	4298      	cmp	r0, r3
 8002eae:	bfa8      	it	ge
 8002eb0:	4618      	movge	r0, r3
        *out_0++ = (q7_t)ch_1_out_0;
 8002eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eb4:	f803 0c01 	strb.w	r0, [r3, #-1]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 8002eb8:	9b05      	ldr	r3, [sp, #20]
 8002eba:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002ebe:	9b04      	ldr	r3, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002ec0:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002ec4:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002ec8:	fa0a f000 	lsl.w	r0, sl, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ed0:	2400      	movs	r4, #0
 8002ed2:	fbc0 2403 	smlal	r2, r4, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 8002ed6:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002ed8:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 8002eda:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002ede:	dc0d      	bgt.n	8002efc <mat_mult_kernel_s8_s16+0x2fc>
 8002ee0:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	408b      	lsls	r3, r1
 8002ee6:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8002ee8:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 8002eec:	410c      	asrs	r4, r1
    q31_t threshold = remainder_mask >> 1;
 8002eee:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8002ef2:	bf48      	it	mi
 8002ef4:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8002ef6:	429a      	cmp	r2, r3
        result++;
 8002ef8:	bfc8      	it	gt
 8002efa:	3401      	addgt	r4, #1
        ch_1_out_1 += out_offset;
 8002efc:	9b25      	ldr	r3, [sp, #148]	; 0x94
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
        *out_1++ = (q7_t)ch_1_out_1;
 8002efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
 8002f00:	9903      	ldr	r1, [sp, #12]
 8002f02:	980d      	ldr	r0, [sp, #52]	; 0x34
        ch_1_out_1 += out_offset;
 8002f04:	441c      	add	r4, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8002f06:	9b07      	ldr	r3, [sp, #28]
 8002f08:	429c      	cmp	r4, r3
 8002f0a:	bfb8      	it	lt
 8002f0c:	461c      	movlt	r4, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8002f0e:	9b08      	ldr	r3, [sp, #32]
 8002f10:	429c      	cmp	r4, r3
 8002f12:	bfa8      	it	ge
 8002f14:	461c      	movge	r4, r3
        *out_1++ = (q7_t)ch_1_out_1;
 8002f16:	f802 4c01 	strb.w	r4, [r2, #-1]
    while (row_count)
 8002f1a:	3202      	adds	r2, #2
 8002f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8002f1e:	9a04      	ldr	r2, [sp, #16]
 8002f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f22:	3208      	adds	r2, #8
 8002f24:	9204      	str	r2, [sp, #16]
 8002f26:	9a05      	ldr	r2, [sp, #20]
        ip_a0 += num_col_a;
 8002f28:	4401      	add	r1, r0
    while (row_count)
 8002f2a:	3208      	adds	r2, #8
        ip_a0 += num_col_a;
 8002f2c:	468b      	mov	fp, r1
    while (row_count)
 8002f2e:	9205      	str	r2, [sp, #20]
 8002f30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002f34:	3308      	adds	r3, #8
 8002f36:	3102      	adds	r1, #2
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f3c:	9109      	str	r1, [sp, #36]	; 0x24
 8002f3e:	f47f aea3 	bne.w	8002c88 <mat_mult_kernel_s8_s16+0x88>
        out_shift++;
 8002f42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002f44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002f46:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002f4a:	9216      	str	r2, [sp, #88]	; 0x58
        out_mult++;
 8002f4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002f4e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002f52:	9224      	str	r2, [sp, #144]	; 0x90
        *out_0++ = (q7_t)ch_1_out_0;
 8002f54:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002f56:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002f5a:	922a      	str	r2, [sp, #168]	; 0xa8
        *out_1++ = (q7_t)ch_1_out_1;
 8002f5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002f5e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002f62:	9217      	str	r2, [sp, #92]	; 0x5c
        q31_t ch_1_out_1 = *bias++;
 8002f64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002f66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002f6a:	9329      	str	r3, [sp, #164]	; 0xa4
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 8002f6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002f6e:	07db      	lsls	r3, r3, #31
 8002f70:	f140 80b0 	bpl.w	80030d4 <mat_mult_kernel_s8_s16+0x4d4>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 8002f74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8002f76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
        q31_t ch_0_out_0 = *bias;
 8002f78:	6819      	ldr	r1, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8002f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
 8002f7c:	ea5f 0893 	movs.w	r8, r3, lsr #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8002f80:	eb04 0e43 	add.w	lr, r4, r3, lsl #1
        while (col_count)
 8002f84:	f000 80b3 	beq.w	80030ee <mat_mult_kernel_s8_s16+0x4ee>
 8002f88:	eb0b 0c88 	add.w	ip, fp, r8, lsl #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8002f8c:	4675      	mov	r5, lr
        q31_t ch_0_out_1 = *bias++;
 8002f8e:	460a      	mov	r2, r1
    memcpy(&val, *in_q7, 4);
 8002f90:	f85b 3b04 	ldr.w	r3, [fp], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8002f94:	fa2f f793 	sxtb16	r7, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002f98:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002f9c:	6820      	ldr	r0, [r4, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8002f9e:	eac7 4623 	pkhtb	r6, r7, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8002fa2:	eac3 4307 	pkhbt	r3, r3, r7, lsl #16
 8002fa6:	fb23 1100 	smlad	r1, r3, r0, r1
 8002faa:	6828      	ldr	r0, [r5, #0]
 8002fac:	fb23 2300 	smlad	r3, r3, r0, r2
    memcpy(&val, *in_q15, 4);
 8002fb0:	6860      	ldr	r0, [r4, #4]
    *in_q15 += 2;
 8002fb2:	686a      	ldr	r2, [r5, #4]
 8002fb4:	3408      	adds	r4, #8
 8002fb6:	3508      	adds	r5, #8
 8002fb8:	fb26 1100 	smlad	r1, r6, r0, r1
 8002fbc:	fb26 3202 	smlad	r2, r6, r2, r3
        while (col_count)
 8002fc0:	45e3      	cmp	fp, ip
 8002fc2:	d1e5      	bne.n	8002f90 <mat_mult_kernel_s8_s16+0x390>
 8002fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8002fca:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fcc:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
 8002fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fd2:	f013 0303 	ands.w	r3, r3, #3
 8002fd6:	d020      	beq.n	800301a <mat_mult_kernel_s8_s16+0x41a>
        {
            q7_t a0 = *ip_a0++;
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
 8002fd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
            q7_t a0 = *ip_a0++;
 8002fda:	f99c 0000 	ldrsb.w	r0, [ip]
            ch_0_out_0 += a0 * b0;
 8002fde:	882c      	ldrh	r4, [r5, #0]
            ch_0_out_1 += a0 * b1;
            col_count--;
 8002fe0:	3b01      	subs	r3, #1
            ch_0_out_0 += a0 * b0;
 8002fe2:	fb14 1100 	smlabb	r1, r4, r0, r1
            ch_0_out_1 += a0 * b1;
 8002fe6:	f8be 4000 	ldrh.w	r4, [lr]
            col_count--;
 8002fea:	b29b      	uxth	r3, r3
            ch_0_out_1 += a0 * b1;
 8002fec:	fb14 2200 	smlabb	r2, r4, r0, r2
        while (col_count)
 8002ff0:	b19b      	cbz	r3, 800301a <mat_mult_kernel_s8_s16+0x41a>
            q7_t a0 = *ip_a0++;
 8002ff2:	f99c 0001 	ldrsb.w	r0, [ip, #1]
            ch_0_out_0 += a0 * b0;
 8002ff6:	886c      	ldrh	r4, [r5, #2]
 8002ff8:	fb14 1100 	smlabb	r1, r4, r0, r1
            ch_0_out_1 += a0 * b1;
 8002ffc:	f8be 4002 	ldrh.w	r4, [lr, #2]
        while (col_count)
 8003000:	2b01      	cmp	r3, #1
            ch_0_out_1 += a0 * b1;
 8003002:	fb14 2200 	smlabb	r2, r4, r0, r2
        while (col_count)
 8003006:	d008      	beq.n	800301a <mat_mult_kernel_s8_s16+0x41a>
            q7_t a0 = *ip_a0++;
 8003008:	f99c 3002 	ldrsb.w	r3, [ip, #2]
            ch_0_out_0 += a0 * b0;
 800300c:	88a8      	ldrh	r0, [r5, #4]
 800300e:	fb10 1103 	smlabb	r1, r0, r3, r1
            ch_0_out_1 += a0 * b1;
 8003012:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8003016:	fb10 2203 	smlabb	r2, r0, r3, r2
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800301a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800301c:	6818      	ldr	r0, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800301e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003020:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8003024:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003026:	fa01 f404 	lsl.w	r4, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800302a:	2500      	movs	r5, #0
 800302c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003030:	fbc4 1503 	smlal	r1, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 8003034:	0fcb      	lsrs	r3, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003036:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 8003038:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800303c:	dc0d      	bgt.n	800305a <mat_mult_kernel_s8_s16+0x45a>
 800303e:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8003040:	2101      	movs	r1, #1
 8003042:	4081      	lsls	r1, r0
 8003044:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 8003046:	ea03 0401 	and.w	r4, r3, r1
    if (result < 0)
 800304a:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 800304c:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 8003050:	bf48      	it	mi
 8003052:	3101      	addmi	r1, #1
    if (remainder > threshold)
 8003054:	428c      	cmp	r4, r1
        result++;
 8003056:	bfc8      	it	gt
 8003058:	3301      	addgt	r3, #1
        ch_0_out_0 += out_offset;
 800305a:	9925      	ldr	r1, [sp, #148]	; 0x94
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q7_t)ch_0_out_0;
 800305c:	982a      	ldr	r0, [sp, #168]	; 0xa8
        ch_0_out_0 += out_offset;
 800305e:	440b      	add	r3, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8003060:	9907      	ldr	r1, [sp, #28]
 8003062:	428b      	cmp	r3, r1
 8003064:	bfb8      	it	lt
 8003066:	460b      	movlt	r3, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8003068:	9908      	ldr	r1, [sp, #32]
 800306a:	428b      	cmp	r3, r1
 800306c:	bfa8      	it	ge
 800306e:	460b      	movge	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
 8003070:	f800 3b01 	strb.w	r3, [r0], #1

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8003074:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003076:	681c      	ldr	r4, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8003078:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800307a:	681e      	ldr	r6, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800307c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8003080:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8003082:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003086:	2300      	movs	r3, #0
 8003088:	fbc2 1306 	smlal	r1, r3, r2, r6
 800308c:	461d      	mov	r5, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800308e:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 8003090:	ea4f 73d1 	mov.w	r3, r1, lsr #31
 8003094:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003098:	dc0d      	bgt.n	80030b6 <mat_mult_kernel_s8_s16+0x4b6>
 800309a:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 800309c:	2201      	movs	r2, #1
 800309e:	40a2      	lsls	r2, r4
 80030a0:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 80030a2:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
 80030a6:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 80030a8:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 80030ac:	bf48      	it	mi
 80030ae:	3201      	addmi	r2, #1
    if (remainder > threshold)
 80030b0:	4291      	cmp	r1, r2
        result++;
 80030b2:	bfc8      	it	gt
 80030b4:	3301      	addgt	r3, #1
        ch_0_out_1 += out_offset;
 80030b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
        *out_0++ = (q7_t)ch_0_out_0;
 80030b8:	902a      	str	r0, [sp, #168]	; 0xa8
        ch_0_out_1 += out_offset;
 80030ba:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80030bc:	9a07      	ldr	r2, [sp, #28]
 80030be:	429a      	cmp	r2, r3
 80030c0:	bfb8      	it	lt
 80030c2:	461a      	movlt	r2, r3
 80030c4:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80030c6:	9a08      	ldr	r2, [sp, #32]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	bfa8      	it	ge
 80030cc:	461a      	movge	r2, r3
 80030ce:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
 80030d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80030d2:	7013      	strb	r3, [r2, #0]

    out_0 += output_ch;

    /* return the new output pointer with offset */
    return out_0;
}
 80030d4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80030d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80030d8:	4418      	add	r0, r3
 80030da:	b01b      	add	sp, #108	; 0x6c
 80030dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 80030e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
        const q15_t *ip_b0 = input_b;
 80030e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
        while (col_count)
 80030e4:	f8cd b00c 	str.w	fp, [sp, #12]
        q31_t ch_1_out_1 = *bias++;
 80030e8:	46a2      	mov	sl, r4
        q31_t ch_0_out_1 = *bias++;
 80030ea:	462a      	mov	r2, r5
 80030ec:	e618      	b.n	8002d20 <mat_mult_kernel_s8_s16+0x120>
        while (col_count)
 80030ee:	46dc      	mov	ip, fp
        q31_t ch_0_out_1 = *bias++;
 80030f0:	460a      	mov	r2, r1
 80030f2:	e76d      	b.n	8002fd0 <mat_mult_kernel_s8_s16+0x3d0>

080030f4 <mat_mult_kernel_s8_s16_reordered_ch16>:
										  const int16_t activation_min,
										  const int16_t activation_max,
										  const uint16_t num_col_a,
										  const int32_t *const output_bias,
										  q7_t *out_0)
{
 80030f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f8:	b08f      	sub	sp, #60	; 0x3c
 80030fa:	4684      	mov	ip, r0
 80030fc:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8003100:	9003      	str	r0, [sp, #12]
 8003102:	f9bd 006c 	ldrsh.w	r0, [sp, #108]	; 0x6c
 8003106:	920d      	str	r2, [sp, #52]	; 0x34
 8003108:	4615      	mov	r5, r2
 800310a:	9004      	str	r0, [sp, #16]
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 800310c:	e9dd 201d 	ldrd	r2, r0, [sp, #116]	; 0x74
{
 8003110:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8003114:	9409      	str	r4, [sp, #36]	; 0x24
    q7_t *out_1 = out_0 + output_ch;
 8003116:	4428      	add	r0, r5
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
 8003118:	086d      	lsrs	r5, r5, #1
 800311a:	950c      	str	r5, [sp, #48]	; 0x30
 800311c:	f000 8193 	beq.w	8003446 <mat_mult_kernel_s8_s16_reordered_ch16+0x352>
 8003120:	3308      	adds	r3, #8
 8003122:	3002      	adds	r0, #2
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	1e6b      	subs	r3, r5, #1
 8003128:	9006      	str	r0, [sp, #24]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f102 0010 	add.w	r0, r2, #16
 8003130:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003134:	930a      	str	r3, [sp, #40]	; 0x28
 8003136:	f102 0308 	add.w	r3, r2, #8
 800313a:	9307      	str	r3, [sp, #28]
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800313c:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8003140:	9308      	str	r3, [sp, #32]
 8003142:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003144:	3302      	adds	r3, #2
 8003146:	9305      	str	r3, [sp, #20]
 8003148:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800314a:	f103 0508 	add.w	r5, r3, #8
 800314e:	f104 0310 	add.w	r3, r4, #16
 8003152:	930b      	str	r3, [sp, #44]	; 0x2c
    const q31_t remainder_mask = (1 << exponent) - 1;
 8003154:	9502      	str	r5, [sp, #8]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8003156:	f8dc 6000 	ldr.w	r6, [ip]
 800315a:	9b08      	ldr	r3, [sp, #32]
        q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

        //4
        ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

        ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 800315c:	9d07      	ldr	r5, [sp, #28]
 800315e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003160:	f8d1 a000 	ldr.w	sl, [r1]
 8003164:	f8d3 9000 	ldr.w	r9, [r3]
 8003168:	f855 ec08 	ldr.w	lr, [r5, #-8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800316c:	ea4f 2436 	mov.w	r4, r6, ror #8
 8003170:	eb0c 0702 	add.w	r7, ip, r2
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003174:	fa2f f686 	sxtb16	r6, r6
 8003178:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800317c:	fb26 e30a 	smlad	r3, r6, sl, lr
    memcpy(&val, *in_q7, 4);
 8003180:	f85c 2002 	ldr.w	r2, [ip, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003184:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8003188:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800318c:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003190:	fb26 e609 	smlad	r6, r6, r9, lr
        ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
        ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
        ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8003194:	f855 bc04 	ldr.w	fp, [r5, #-4]
 8003198:	fb20 b80a 	smlad	r8, r0, sl, fp
    memcpy(&val, *in_q15, 4);
 800319c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80031a0:	fb20 b009 	smlad	r0, r0, r9, fp
 80031a4:	9d08      	ldr	r5, [sp, #32]
 80031a6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80031aa:	fb24 330a 	smlad	r3, r4, sl, r3
 80031ae:	fb24 6e09 	smlad	lr, r4, r9, r6
 80031b2:	fb22 8a0a 	smlad	sl, r2, sl, r8
 80031b6:	688e      	ldr	r6, [r1, #8]
 80031b8:	fb22 0209 	smlad	r2, r2, r9, r0
 80031bc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80031c0:	f8d5 b008 	ldr.w	fp, [r5, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80031c4:	ea4f 2834 	mov.w	r8, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80031c8:	fa2f f484 	sxtb16	r4, r4
 80031cc:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80031d0:	fb24 3306 	smlad	r3, r4, r6, r3
    memcpy(&val, *in_q7, 4);
 80031d4:	6878      	ldr	r0, [r7, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80031d6:	fa2f f980 	sxtb16	r9, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 80031da:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80031de:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80031e2:	fb24 e40b 	smlad	r4, r4, fp, lr
 80031e6:	fb29 ae06 	smlad	lr, r9, r6, sl
    memcpy(&val, *in_q15, 4);
 80031ea:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 80031ee:	fb29 220b 	smlad	r2, r9, fp, r2
 80031f2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80031f6:	fb28 330a 	smlad	r3, r8, sl, r3
 80031fa:	fb28 4609 	smlad	r6, r8, r9, r4
 80031fe:	fb20 ea0a 	smlad	sl, r0, sl, lr
 8003202:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8003206:	fb20 2009 	smlad	r0, r0, r9, r2
 800320a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800320e:	f8d5 b010 	ldr.w	fp, [r5, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8003212:	ea4f 2932 	mov.w	r9, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003216:	fa2f f282 	sxtb16	r2, r2
 800321a:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800321e:	fb22 3308 	smlad	r3, r2, r8, r3
    memcpy(&val, *in_q7, 4);
 8003222:	68bc      	ldr	r4, [r7, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003224:	fa2f fe84 	sxtb16	lr, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 8003228:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800322c:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003230:	fb22 620b 	smlad	r2, r2, fp, r6
 8003234:	fb2e a808 	smlad	r8, lr, r8, sl
    memcpy(&val, *in_q15, 4);
 8003238:	f8d1 a014 	ldr.w	sl, [r1, #20]
 800323c:	fb2e 0e0b 	smlad	lr, lr, fp, r0
 8003240:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8003244:	fb29 330a 	smlad	r3, r9, sl, r3
 8003248:	fb29 220b 	smlad	r2, r9, fp, r2
 800324c:	fb24 8a0a 	smlad	sl, r4, sl, r8
 8003250:	698e      	ldr	r6, [r1, #24]
 8003252:	fb24 ee0b 	smlad	lr, r4, fp, lr
 8003256:	f8dc 000c 	ldr.w	r0, [ip, #12]
 800325a:	69ac      	ldr	r4, [r5, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 800325c:	ea4f 2930 	mov.w	r9, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003260:	fa2f f080 	sxtb16	r0, r0
 8003264:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003268:	fb20 3306 	smlad	r3, r0, r6, r3
    memcpy(&val, *in_q7, 4);
 800326c:	68ff      	ldr	r7, [r7, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800326e:	fa2f fb87 	sxtb16	fp, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8003272:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003276:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800327a:	fb20 2204 	smlad	r2, r0, r4, r2
 800327e:	fb2b aa06 	smlad	sl, fp, r6, sl
    memcpy(&val, *in_q15, 4);
 8003282:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8003286:	fb2b eb04 	smlad	fp, fp, r4, lr
 800328a:	69ee      	ldr	r6, [r5, #28]
 800328c:	fb29 3308 	smlad	r3, r9, r8, r3
 8003290:	fb29 2206 	smlad	r2, r9, r6, r2
 8003294:	fb27 aa08 	smlad	sl, r7, r8, sl
 8003298:	fb27 bb06 	smlad	fp, r7, r6, fp
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800329c:	9801      	ldr	r0, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800329e:	9d02      	ldr	r5, [sp, #8]
 80032a0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80032a4:	f855 5c08 	ldr.w	r5, [r5, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80032a8:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 80032ac:	40a3      	lsls	r3, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80032ae:	2600      	movs	r6, #0
 80032b0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80032b4:	fbc3 4605 	smlal	r4, r6, r3, r5
    result = (int32_t)(mult.long_long >> 31);
 80032b8:	0fe3      	lsrs	r3, r4, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80032ba:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 80032bc:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80032c0:	dc0d      	bgt.n	80032de <mat_mult_kernel_s8_s16_reordered_ch16+0x1ea>
 80032c2:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80032c4:	2401      	movs	r4, #1
 80032c6:	4084      	lsls	r4, r0
 80032c8:	3c01      	subs	r4, #1
    int32_t remainder = remainder_mask & dividend;
 80032ca:	ea03 0604 	and.w	r6, r3, r4
    if (result < 0)
 80032ce:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 80032d0:	ea4f 0464 	mov.w	r4, r4, asr #1
        threshold++;
 80032d4:	bf48      	it	mi
 80032d6:	3401      	addmi	r4, #1
    if (remainder > threshold)
 80032d8:	42a6      	cmp	r6, r4
        result++;
 80032da:	bfc8      	it	gt
 80032dc:	3301      	addgt	r3, #1
        ch_0_out_0 += out_offset;
 80032de:	9819      	ldr	r0, [sp, #100]	; 0x64
 80032e0:	4403      	add	r3, r0
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80032e2:	9803      	ldr	r0, [sp, #12]
 80032e4:	4283      	cmp	r3, r0
 80032e6:	bfb8      	it	lt
 80032e8:	4603      	movlt	r3, r0
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80032ea:	9804      	ldr	r0, [sp, #16]
 80032ec:	4283      	cmp	r3, r0
 80032ee:	bfa8      	it	ge
 80032f0:	4603      	movge	r3, r0
        *out_0++ = (q7_t)ch_0_out_0;
 80032f2:	9805      	ldr	r0, [sp, #20]
 80032f4:	f800 3c02 	strb.w	r3, [r0, #-2]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 80032f8:	9b01      	ldr	r3, [sp, #4]
 80032fa:	f853 6c08 	ldr.w	r6, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80032fe:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003300:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8003304:	f853 3c08 	ldr.w	r3, [r3, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003308:	fa02 f209 	lsl.w	r2, r2, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800330c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003310:	2000      	movs	r0, #0
 8003312:	fbc2 4003 	smlal	r4, r0, r2, r3
    result = (int32_t)(mult.long_long >> 31);
 8003316:	0fe4      	lsrs	r4, r4, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003318:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
 800331a:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800331e:	dc0d      	bgt.n	800333c <mat_mult_kernel_s8_s16_reordered_ch16+0x248>
 8003320:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 8003322:	2301      	movs	r3, #1
 8003324:	40b3      	lsls	r3, r6
 8003326:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8003328:	ea00 0203 	and.w	r2, r0, r3
    if (result < 0)
 800332c:	4130      	asrs	r0, r6
    q31_t threshold = remainder_mask >> 1;
 800332e:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8003332:	bf48      	it	mi
 8003334:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8003336:	429a      	cmp	r2, r3
        result++;
 8003338:	bfc8      	it	gt
 800333a:	3001      	addgt	r0, #1
        ch_0_out_1 += out_offset;
 800333c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800333e:	4418      	add	r0, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8003340:	9b03      	ldr	r3, [sp, #12]
 8003342:	4298      	cmp	r0, r3
 8003344:	bfb8      	it	lt
 8003346:	4618      	movlt	r0, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8003348:	9b04      	ldr	r3, [sp, #16]
 800334a:	4298      	cmp	r0, r3
 800334c:	bfa8      	it	ge
 800334e:	4618      	movge	r0, r3
        *out_1++ = (q7_t)ch_0_out_1;
 8003350:	9b06      	ldr	r3, [sp, #24]
 8003352:	f803 0c02 	strb.w	r0, [r3, #-2]
        out_mult++;
        out_shift++;

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8003356:	9b01      	ldr	r3, [sp, #4]
 8003358:	f853 0c04 	ldr.w	r0, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800335c:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800335e:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8003362:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003366:	fa0a fa08 	lsl.w	sl, sl, r8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800336a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800336e:	2400      	movs	r4, #0
 8003370:	fbca 2403 	smlal	r2, r4, sl, r3
    result = (int32_t)(mult.long_long >> 31);
 8003374:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003376:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 8003378:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800337c:	dc0d      	bgt.n	800339a <mat_mult_kernel_s8_s16_reordered_ch16+0x2a6>
 800337e:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8003380:	2301      	movs	r3, #1
 8003382:	4083      	lsls	r3, r0
 8003384:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8003386:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 800338a:	4104      	asrs	r4, r0
    q31_t threshold = remainder_mask >> 1;
 800338c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8003390:	bf48      	it	mi
 8003392:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8003394:	429a      	cmp	r2, r3
        result++;
 8003396:	bfc8      	it	gt
 8003398:	3401      	addgt	r4, #1
        ch_1_out_0 += out_offset;
 800339a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800339c:	441c      	add	r4, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	429c      	cmp	r4, r3
 80033a2:	bfb8      	it	lt
 80033a4:	461c      	movlt	r4, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80033a6:	9b04      	ldr	r3, [sp, #16]
 80033a8:	429c      	cmp	r4, r3
 80033aa:	bfa8      	it	ge
 80033ac:	461c      	movge	r4, r3
        *out_0++ = (q7_t)ch_1_out_0;
 80033ae:	9b05      	ldr	r3, [sp, #20]
 80033b0:	f803 4c01 	strb.w	r4, [r3, #-1]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 80033b4:	9b01      	ldr	r3, [sp, #4]
 80033b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80033ba:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80033bc:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80033c0:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80033c4:	fa0b fb06 	lsl.w	fp, fp, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80033c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033cc:	2400      	movs	r4, #0
 80033ce:	fbc3 240b 	smlal	r2, r4, r3, fp
    result = (int32_t)(mult.long_long >> 31);
 80033d2:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80033d4:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 80033d6:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80033da:	dc0d      	bgt.n	80033f8 <mat_mult_kernel_s8_s16_reordered_ch16+0x304>
 80033dc:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	4083      	lsls	r3, r0
 80033e2:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 80033e4:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
 80033e8:	4104      	asrs	r4, r0
    q31_t threshold = remainder_mask >> 1;
 80033ea:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 80033ee:	bf48      	it	mi
 80033f0:	3301      	addmi	r3, #1
    if (remainder > threshold)
 80033f2:	429a      	cmp	r2, r3
        result++;
 80033f4:	bfc8      	it	gt
 80033f6:	3401      	addgt	r4, #1
        ch_1_out_1 += out_offset;
 80033f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
        *out_1++ = (q7_t)ch_1_out_1;
 80033fa:	9a06      	ldr	r2, [sp, #24]
 80033fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
        ch_1_out_1 += out_offset;
 80033fe:	441c      	add	r4, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8003400:	9b03      	ldr	r3, [sp, #12]
 8003402:	429c      	cmp	r4, r3
 8003404:	bfb8      	it	lt
 8003406:	461c      	movlt	r4, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8003408:	9b04      	ldr	r3, [sp, #16]
 800340a:	429c      	cmp	r4, r3
 800340c:	bfa8      	it	ge
 800340e:	461c      	movge	r4, r3
        *out_1++ = (q7_t)ch_1_out_1;
 8003410:	f802 4c01 	strb.w	r4, [r2, #-1]
    while (row_count)
 8003414:	3202      	adds	r2, #2
 8003416:	9206      	str	r2, [sp, #24]
 8003418:	9a02      	ldr	r2, [sp, #8]
 800341a:	9b07      	ldr	r3, [sp, #28]
 800341c:	3208      	adds	r2, #8
 800341e:	9202      	str	r2, [sp, #8]
 8003420:	9a01      	ldr	r2, [sp, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	4484      	add	ip, r0
 8003426:	9201      	str	r2, [sp, #4]
 8003428:	9805      	ldr	r0, [sp, #20]
 800342a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800342c:	3308      	adds	r3, #8
 800342e:	3002      	adds	r0, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	9307      	str	r3, [sp, #28]
 8003434:	9005      	str	r0, [sp, #20]
 8003436:	f47f ae8e 	bne.w	8003156 <mat_mult_kernel_s8_s16_reordered_ch16+0x62>
        /* skip row */
        ip_a0 += num_col_a;
        row_count--;
    }

    out_0 += output_ch;
 800343a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800343e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8003442:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003444:	4418      	add	r0, r3

    /* return the new output pointer with offset */
    return out_0;
}
 8003446:	b00f      	add	sp, #60	; 0x3c
 8003448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344c:	0000      	movs	r0, r0
	...

08003450 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003450:	b500      	push	{lr}
 8003452:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003454:	2244      	movs	r2, #68	; 0x44
 8003456:	2100      	movs	r1, #0
 8003458:	a805      	add	r0, sp, #20
 800345a:	f002 fcc7 	bl	8005dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800345e:	2000      	movs	r0, #0
 8003460:	e9cd 0000 	strd	r0, r0, [sp]
 8003464:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8003468:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800346a:	f000 fdd7 	bl	800401c <HAL_PWREx_ControlVoltageScaling>
 800346e:	b108      	cbz	r0, 8003474 <SystemClock_Config+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 8003470:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003472:	e7fe      	b.n	8003472 <SystemClock_Config+0x22>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003474:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI;
 8003478:	2122      	movs	r1, #34	; 0x22
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800347a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800347c:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800347e:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI;
 8003480:	9105      	str	r1, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003482:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003484:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 30;
 8003486:	221e      	movs	r2, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003488:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800348a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 30;
 800348e:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003492:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003496:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003498:	910e      	str	r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800349a:	f000 fee9 	bl	8004270 <HAL_RCC_OscConfig>
 800349e:	4603      	mov	r3, r0
 80034a0:	b108      	cbz	r0, 80034a6 <SystemClock_Config+0x56>
 80034a2:	b672      	cpsid	i
  while (1)
 80034a4:	e7fe      	b.n	80034a4 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034a6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80034d0 <SystemClock_Config+0x80>
 80034aa:	ed8d 7b00 	vstr	d7, [sp]
 80034ae:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80034d8 <SystemClock_Config+0x88>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034b2:	2105      	movs	r1, #5
 80034b4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034b6:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ba:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034bc:	f001 f9ea 	bl	8004894 <HAL_RCC_ClockConfig>
 80034c0:	b108      	cbz	r0, 80034c6 <SystemClock_Config+0x76>
 80034c2:	b672      	cpsid	i
  while (1)
 80034c4:	e7fe      	b.n	80034c4 <SystemClock_Config+0x74>
}
 80034c6:	b017      	add	sp, #92	; 0x5c
 80034c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80034cc:	f3af 8000 	nop.w
 80034d0:	0000000f 	.word	0x0000000f
 80034d4:	00000003 	.word	0x00000003
 80034d8:	00000000 	.word	0x00000000
 80034dc:	00000400 	.word	0x00000400

080034e0 <main>:
{
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	2500      	movs	r5, #0
{
 80034e6:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 80034e8:	f000 fb2e 	bl	8003b48 <HAL_Init>
  SystemClock_Config();
 80034ec:	f7ff ffb0 	bl	8003450 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
 80034f4:	e9cd 551e 	strd	r5, r5, [sp, #120]	; 0x78
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f8:	4cb4      	ldr	r4, [pc, #720]	; (80037cc <main+0x2ec>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fa:	9520      	str	r5, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003504:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	9303      	str	r3, [sp, #12]
 800350c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800350e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003514:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003516:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	9304      	str	r3, [sp, #16]
 800351e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003520:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003522:	f043 0302 	orr.w	r3, r3, #2
 8003526:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003528:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	9305      	str	r3, [sp, #20]
 8003530:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003532:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003534:	f043 0308 	orr.w	r3, r3, #8
 8003538:	64e3      	str	r3, [r4, #76]	; 0x4c
 800353a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	9306      	str	r3, [sp, #24]
 8003542:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003544:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800354c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	9307      	str	r3, [sp, #28]
 8003554:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8003556:	f000 fde7 	bl	8004128 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800355c:	489c      	ldr	r0, [pc, #624]	; (80037d0 <main+0x2f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003564:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  hlpuart1.Instance = LPUART1;
 8003566:	4c9b      	ldr	r4, [pc, #620]	; (80037d4 <main+0x2f4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003568:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800356c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003570:	462a      	mov	r2, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003572:	9308      	str	r3, [sp, #32]
 8003574:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8003576:	f000 fc8d 	bl	8003e94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800357a:	4897      	ldr	r0, [pc, #604]	; (80037d8 <main+0x2f8>)
 800357c:	462a      	mov	r2, r5
 800357e:	2140      	movs	r1, #64	; 0x40
 8003580:	f000 fc88 	bl	8003e94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8003584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003588:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800358c:	4893      	ldr	r0, [pc, #588]	; (80037dc <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	951e      	str	r5, [sp, #120]	; 0x78
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003590:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = B1_Pin;
 8003592:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8003596:	2600      	movs	r6, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003598:	f000 fb74 	bl	8003c84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 800359c:	2700      	movs	r7, #0
 800359e:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 80035a2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a4:	488a      	ldr	r0, [pc, #552]	; (80037d0 <main+0x2f0>)
 80035a6:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80035a8:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80035ac:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b0:	f000 fb68 	bl	8003c84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80035b4:	2220      	movs	r2, #32
 80035b6:	2300      	movs	r3, #0
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80035b8:	4887      	ldr	r0, [pc, #540]	; (80037d8 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	951e      	str	r5, [sp, #120]	; 0x78
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80035bc:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80035be:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80035c2:	f000 fb5f 	bl	8003c84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80035c6:	2301      	movs	r3, #1
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035c8:	4883      	ldr	r0, [pc, #524]	; (80037d8 <main+0x2f8>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80035ca:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035cc:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80035ce:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80035d2:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
  hlpuart1.Init.BaudRate = 115200;
 80035d6:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035da:	f000 fb53 	bl	8003c84 <HAL_GPIO_Init>
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80035de:	f04f 080c 	mov.w	r8, #12
  hlpuart1.Instance = LPUART1;
 80035e2:	4b7f      	ldr	r3, [pc, #508]	; (80037e0 <main+0x300>)
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035e4:	62a5      	str	r5, [r4, #40]	; 0x28
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035e6:	e9c4 6708 	strd	r6, r7, [r4, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80035ea:	4620      	mov	r0, r4
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035ec:	e9c4 9501 	strd	r9, r5, [r4, #4]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80035f0:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035f4:	e9c4 8505 	strd	r8, r5, [r4, #20]
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80035f8:	6665      	str	r5, [r4, #100]	; 0x64
  hlpuart1.Instance = LPUART1;
 80035fa:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80035fc:	f002 f8fe 	bl	80057fc <HAL_UART_Init>
 8003600:	b108      	cbz	r0, 8003606 <main+0x126>
 8003602:	b672      	cpsid	i
  while (1)
 8003604:	e7fe      	b.n	8003604 <main+0x124>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003606:	4601      	mov	r1, r0
 8003608:	4620      	mov	r0, r4
 800360a:	f002 f981 	bl	8005910 <HAL_UARTEx_SetTxFifoThreshold>
 800360e:	b108      	cbz	r0, 8003614 <main+0x134>
 8003610:	b672      	cpsid	i
  while (1)
 8003612:	e7fe      	b.n	8003612 <main+0x132>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003614:	4601      	mov	r1, r0
 8003616:	4620      	mov	r0, r4
 8003618:	f002 f9bc 	bl	8005994 <HAL_UARTEx_SetRxFifoThreshold>
 800361c:	b108      	cbz	r0, 8003622 <main+0x142>
 800361e:	b672      	cpsid	i
  while (1)
 8003620:	e7fe      	b.n	8003620 <main+0x140>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003622:	4620      	mov	r0, r4
 8003624:	f002 f956 	bl	80058d4 <HAL_UARTEx_DisableFifoMode>
 8003628:	b108      	cbz	r0, 800362e <main+0x14e>
 800362a:	b672      	cpsid	i
  while (1)
 800362c:	e7fe      	b.n	800362c <main+0x14c>
  huart3.Instance = USART3;
 800362e:	4d6d      	ldr	r5, [pc, #436]	; (80037e4 <main+0x304>)
 8003630:	4b6d      	ldr	r3, [pc, #436]	; (80037e8 <main+0x308>)
  huart3.Init.Parity = UART_PARITY_NONE;
 8003632:	6128      	str	r0, [r5, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003634:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003638:	e9c5 0006 	strd	r0, r0, [r5, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800363c:	e9c5 0008 	strd	r0, r0, [r5, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003640:	62a8      	str	r0, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003642:	4628      	mov	r0, r5
  huart3.Init.BaudRate = 115200;
 8003644:	f8c5 9004 	str.w	r9, [r5, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003648:	f8c5 8014 	str.w	r8, [r5, #20]
  huart3.Instance = USART3;
 800364c:	602b      	str	r3, [r5, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800364e:	f002 f8d5 	bl	80057fc <HAL_UART_Init>
 8003652:	4601      	mov	r1, r0
 8003654:	b108      	cbz	r0, 800365a <main+0x17a>
 8003656:	b672      	cpsid	i
  while (1)
 8003658:	e7fe      	b.n	8003658 <main+0x178>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800365a:	4628      	mov	r0, r5
 800365c:	f002 f958 	bl	8005910 <HAL_UARTEx_SetTxFifoThreshold>
 8003660:	4601      	mov	r1, r0
 8003662:	b108      	cbz	r0, 8003668 <main+0x188>
 8003664:	b672      	cpsid	i
  while (1)
 8003666:	e7fe      	b.n	8003666 <main+0x186>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003668:	4628      	mov	r0, r5
 800366a:	f002 f993 	bl	8005994 <HAL_UARTEx_SetRxFifoThreshold>
 800366e:	b108      	cbz	r0, 8003674 <main+0x194>
 8003670:	b672      	cpsid	i
  while (1)
 8003672:	e7fe      	b.n	8003672 <main+0x192>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003674:	4628      	mov	r0, r5
 8003676:	f002 f92d 	bl	80058d4 <HAL_UARTEx_DisableFifoMode>
 800367a:	b108      	cbz	r0, 8003680 <main+0x1a0>
 800367c:	b672      	cpsid	i
  while (1)
 800367e:	e7fe      	b.n	800367e <main+0x19e>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003680:	4b5a      	ldr	r3, [pc, #360]	; (80037ec <main+0x30c>)
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003682:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003684:	6318      	str	r0, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003686:	2002      	movs	r0, #2
 8003688:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800368c:	2001      	movs	r0, #1
 800368e:	2101      	movs	r1, #1
 8003690:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 8003694:	e9c3 6708 	strd	r6, r7, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003698:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800369c:	2206      	movs	r2, #6
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800369e:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80036a0:	e9c3 1200 	strd	r1, r2, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80036a4:	f000 fbfc 	bl	8003ea0 <HAL_PCD_Init>
 80036a8:	4606      	mov	r6, r0
 80036aa:	b108      	cbz	r0, 80036b0 <main+0x1d0>
 80036ac:	b672      	cpsid	i
  while (1)
 80036ae:	e7fe      	b.n	80036ae <main+0x1ce>
  signed char *input = getInput();
 80036b0:	f7fd f95c 	bl	800096c <getInput>
 80036b4:	4605      	mov	r5, r0
  signed char *output = getOutput();
 80036b6:	f7fd f95d 	bl	8000974 <getOutput>
  uint8_t start_message[] = "Start of benchmark.\r\n";
 80036ba:	f8df e144 	ldr.w	lr, [pc, #324]	; 8003800 <main+0x320>
 80036be:	4f4c      	ldr	r7, [pc, #304]	; (80037f0 <main+0x310>)
  return snprintf(buffer, bufferSize, "%d ", value);
 80036c0:	f8df a140 	ldr.w	sl, [pc, #320]	; 8003804 <main+0x324>
  signed char *output = getOutput();
 80036c4:	4603      	mov	r3, r0
  uint8_t start_message[] = "Start of benchmark.\r\n";
 80036c6:	1e42      	subs	r2, r0, #1
 80036c8:	3309      	adds	r3, #9
 80036ca:	9200      	str	r2, [sp, #0]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80036d2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80036d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80036da:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80036de:	f84c 0b04 	str.w	r0, [ip], #4
  HAL_UART_Transmit(&hlpuart1, start_message, sizeof(start_message), HAL_MAX_DELAY);
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint8_t start_message[] = "Start of benchmark.\r\n";
 80036e6:	f8ac 1000 	strh.w	r1, [ip]
  HAL_UART_Transmit(&hlpuart1, start_message, sizeof(start_message), HAL_MAX_DELAY);
 80036ea:	2216      	movs	r2, #22
 80036ec:	a90e      	add	r1, sp, #56	; 0x38
 80036ee:	4620      	mov	r0, r4
 80036f0:	f001 ffbe 	bl	8005670 <HAL_UART_Transmit>
    uint8_t end_message[] = "Finished timing measurements!\r\n";
 80036f4:	f8df e110 	ldr.w	lr, [pc, #272]	; 8003808 <main+0x328>
 80036f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80036fc:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 8003700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003704:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003708:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_UART_Transmit(&hlpuart1, end_message, sizeof(end_message), HAL_MAX_DELAY);
 800370c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003710:	2220      	movs	r2, #32
 8003712:	a914      	add	r1, sp, #80	; 0x50
 8003714:	4620      	mov	r0, r4
 8003716:	f105 0b09 	add.w	fp, r5, #9
 800371a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800371e:	f605 35ff 	addw	r5, r5, #3071	; 0xbff
 8003722:	f001 ffa5 	bl	8005670 <HAL_UART_Transmit>
      for (k = 0; k < COLS; k++)
 8003726:	46c8      	mov	r8, r9
{
 8003728:	464b      	mov	r3, r9
 800372a:	463a      	mov	r2, r7
        inputAddr[k] = array[i][k];
 800372c:	f912 1b01 	ldrsb.w	r1, [r2], #1
 8003730:	f803 1f01 	strb.w	r1, [r3, #1]!
      for (k = 0; k < COLS; k++)
 8003734:	42ab      	cmp	r3, r5
 8003736:	d1f9      	bne.n	800372c <main+0x24c>
  return snprintf(buffer, bufferSize, "%d ", value);
 8003738:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 800373c:	4652      	mov	r2, sl
 800373e:	2140      	movs	r1, #64	; 0x40
 8003740:	a81c      	add	r0, sp, #112	; 0x70
 8003742:	f002 fb5b 	bl	8005dfc <sniprintf>
        HAL_UART_Transmit(&hlpuart1, txbuf, length, HAL_MAX_DELAY);
 8003746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800374a:	b282      	uxth	r2, r0
 800374c:	a91c      	add	r1, sp, #112	; 0x70
 800374e:	4620      	mov	r0, r4
 8003750:	f001 ff8e 	bl	8005670 <HAL_UART_Transmit>
      for (k = 0; k < OUT_COLS; k++)
 8003754:	45c3      	cmp	fp, r8
 8003756:	d1ef      	bne.n	8003738 <main+0x258>
      HAL_UART_Transmit(&hlpuart1, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 8003758:	4926      	ldr	r1, [pc, #152]	; (80037f4 <main+0x314>)
 800375a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800375e:	2203      	movs	r2, #3
 8003760:	4620      	mov	r0, r4
 8003762:	f001 ff85 	bl	8005670 <HAL_UART_Transmit>
      invoke_inf();
 8003766:	f7fd f909 	bl	800097c <invoke_inf>
      for (k = 0; k < OUT_COLS; k++)
 800376a:	f8dd 8000 	ldr.w	r8, [sp]
  return snprintf(buffer, bufferSize, "%d ", value);
 800376e:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 8003772:	4652      	mov	r2, sl
 8003774:	2140      	movs	r1, #64	; 0x40
 8003776:	a81c      	add	r0, sp, #112	; 0x70
 8003778:	f002 fb40 	bl	8005dfc <sniprintf>
        HAL_UART_Transmit(&hlpuart1, txbuf, length, HAL_MAX_DELAY);
 800377c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003780:	b282      	uxth	r2, r0
 8003782:	a91c      	add	r1, sp, #112	; 0x70
 8003784:	4620      	mov	r0, r4
 8003786:	f001 ff73 	bl	8005670 <HAL_UART_Transmit>
      for (k = 0; k < OUT_COLS; k++)
 800378a:	9b01      	ldr	r3, [sp, #4]
 800378c:	4543      	cmp	r3, r8
 800378e:	d1ee      	bne.n	800376e <main+0x28e>
      HAL_UART_Transmit(&hlpuart1, "\r\n\r\n", sizeof("\r\n\r\n"), HAL_MAX_DELAY);
 8003790:	4919      	ldr	r1, [pc, #100]	; (80037f8 <main+0x318>)
    for (i = 0; i < ROWS; i++)
 8003792:	3601      	adds	r6, #1
      HAL_UART_Transmit(&hlpuart1, "\r\n\r\n", sizeof("\r\n\r\n"), HAL_MAX_DELAY);
 8003794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003798:	2205      	movs	r2, #5
 800379a:	4620      	mov	r0, r4
 800379c:	f001 ff68 	bl	8005670 <HAL_UART_Transmit>
    for (i = 0; i < ROWS; i++)
 80037a0:	2e0a      	cmp	r6, #10
 80037a2:	f507 6740 	add.w	r7, r7, #3072	; 0xc00
 80037a6:	d1be      	bne.n	8003726 <main+0x246>
    uint8_t final_message[] = "End of benchmark.\r\n";
 80037a8:	4d14      	ldr	r5, [pc, #80]	; (80037fc <main+0x31c>)
 80037aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ac:	ac09      	add	r4, sp, #36	; 0x24
 80037ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b0:	6829      	ldr	r1, [r5, #0]
 80037b2:	6021      	str	r1, [r4, #0]
    HAL_UART_Transmit(&hlpuart1, final_message, strlen(final_message), HAL_MAX_DELAY);
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037b8:	2213      	movs	r2, #19
 80037ba:	a909      	add	r1, sp, #36	; 0x24
 80037bc:	4805      	ldr	r0, [pc, #20]	; (80037d4 <main+0x2f4>)
 80037be:	f001 ff57 	bl	8005670 <HAL_UART_Transmit>
}
 80037c2:	2000      	movs	r0, #0
 80037c4:	b02d      	add	sp, #180	; 0xb4
 80037c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	48000400 	.word	0x48000400
 80037d4:	20026190 	.word	0x20026190
 80037d8:	48001800 	.word	0x48001800
 80037dc:	48000800 	.word	0x48000800
 80037e0:	40008000 	.word	0x40008000
 80037e4:	2002672c 	.word	0x2002672c
 80037e8:	40004800 	.word	0x40004800
 80037ec:	20026220 	.word	0x20026220
 80037f0:	20000000 	.word	0x20000000
 80037f4:	0801a5c0 	.word	0x0801a5c0
 80037f8:	0801a5c4 	.word	0x0801a5c4
 80037fc:	0801a5cc 	.word	0x0801a5cc
 8003800:	0801a5e0 	.word	0x0801a5e0
 8003804:	0801a5bc 	.word	0x0801a5bc
 8003808:	0801a5f8 	.word	0x0801a5f8

0800380c <Error_Handler>:
 800380c:	b672      	cpsid	i
  while (1)
 800380e:	e7fe      	b.n	800380e <Error_Handler+0x2>

08003810 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_MspInit+0x2c>)
 8003812:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	661a      	str	r2, [r3, #96]	; 0x60
 800381a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800381c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381e:	f002 0201 	and.w	r2, r2, #1
 8003822:	9200      	str	r2, [sp, #0]
 8003824:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003826:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003828:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800382c:	659a      	str	r2, [r3, #88]	; 0x58
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003838:	b002      	add	sp, #8
 800383a:	4770      	bx	lr
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003840:	b510      	push	{r4, lr}
 8003842:	4604      	mov	r4, r0
 8003844:	b0ae      	sub	sp, #184	; 0xb8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003846:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003848:	2294      	movs	r2, #148	; 0x94
 800384a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003850:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003854:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003856:	f002 fac9 	bl	8005dec <memset>
  if(huart->Instance==LPUART1)
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	4a38      	ldr	r2, [pc, #224]	; (8003940 <HAL_UART_MspInit+0x100>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8003862:	4a38      	ldr	r2, [pc, #224]	; (8003944 <HAL_UART_MspInit+0x104>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d02d      	beq.n	80038c4 <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003868:	b02e      	add	sp, #184	; 0xb8
 800386a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800386c:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800386e:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003870:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003872:	f001 fa5b 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 8003876:	2800      	cmp	r0, #0
 8003878:	d14d      	bne.n	8003916 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <HAL_UART_MspInit+0x108>)
 800387c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	65da      	str	r2, [r3, #92]	; 0x5c
 8003884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003886:	f002 0201 	and.w	r2, r2, #1
 800388a:	9200      	str	r2, [sp, #0]
 800388c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800388e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003894:	64da      	str	r2, [r3, #76]	; 0x4c
 8003896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 80038a0:	f000 fc42 	bl	8004128 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80038a4:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8003928 <HAL_UART_MspInit+0xe8>
 80038a8:	2200      	movs	r2, #0
 80038aa:	2303      	movs	r3, #3
 80038ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038b0:	4826      	ldr	r0, [pc, #152]	; (800394c <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80038b2:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038b4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80038b6:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80038ba:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038bc:	f000 f9e2 	bl	8003c84 <HAL_GPIO_Init>
}
 80038c0:	b02e      	add	sp, #184	; 0xb8
 80038c2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80038c4:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038c6:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80038c8:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ca:	f001 fa2f 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 80038ce:	bb28      	cbnz	r0, 800391c <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038d2:	481f      	ldr	r0, [pc, #124]	; (8003950 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80038d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038da:	659a      	str	r2, [r3, #88]	; 0x58
 80038dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038de:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80038e2:	9202      	str	r2, [sp, #8]
 80038e4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038e8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8003930 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ec:	f042 0208 	orr.w	r2, r2, #8
 80038f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80038f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80038f8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8003938 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003902:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003904:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003906:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800390a:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800390c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800390e:	f000 f9b9 	bl	8003c84 <HAL_GPIO_Init>
}
 8003912:	b02e      	add	sp, #184	; 0xb8
 8003914:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003916:	f7ff ff79 	bl	800380c <Error_Handler>
 800391a:	e7ae      	b.n	800387a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800391c:	f7ff ff76 	bl	800380c <Error_Handler>
 8003920:	e7d6      	b.n	80038d0 <HAL_UART_MspInit+0x90>
 8003922:	bf00      	nop
 8003924:	f3af 8000 	nop.w
 8003928:	00000180 	.word	0x00000180
 800392c:	00000002 	.word	0x00000002
 8003930:	00000300 	.word	0x00000300
 8003934:	00000002 	.word	0x00000002
 8003938:	00000000 	.word	0x00000000
 800393c:	00000003 	.word	0x00000003
 8003940:	40008000 	.word	0x40008000
 8003944:	40004800 	.word	0x40004800
 8003948:	40021000 	.word	0x40021000
 800394c:	48001800 	.word	0x48001800
 8003950:	48000c00 	.word	0x48000c00
 8003954:	00000000 	.word	0x00000000

08003958 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003958:	b510      	push	{r4, lr}
 800395a:	4604      	mov	r4, r0
 800395c:	b0ae      	sub	sp, #184	; 0xb8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003960:	2294      	movs	r2, #148	; 0x94
 8003962:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003964:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003968:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800396c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800396e:	f002 fa3d 	bl	8005dec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003978:	d001      	beq.n	800397e <HAL_PCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800397a:	b02e      	add	sp, #184	; 0xb8
 800397c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800397e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003982:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003984:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003986:	f001 f9d1 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 800398a:	2800      	cmp	r0, #0
 800398c:	d143      	bne.n	8003a16 <HAL_PCD_MspInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	4c26      	ldr	r4, [pc, #152]	; (8003a28 <HAL_PCD_MspInit+0xd0>)
 8003990:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003998:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80039a0:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
 80039a4:	2302      	movs	r3, #2
 80039a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039aa:	2200      	movs	r2, #0
 80039ac:	2303      	movs	r3, #3
 80039ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039b4:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ba:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039bc:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039be:	f000 f961 	bl	8003c84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80039c2:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8003a20 <HAL_PCD_MspInit+0xc8>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80039c8:	a904      	add	r1, sp, #16
 80039ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80039d0:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80039d4:	f000 f956 	bl	8003c84 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80039d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039de:	64e3      	str	r3, [r4, #76]	; 0x4c
 80039e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e6:	9302      	str	r3, [sp, #8]
 80039e8:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	d40f      	bmi.n	8003a10 <HAL_PCD_MspInit+0xb8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80039f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	9303      	str	r3, [sp, #12]
 8003a00:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 8003a02:	f000 fb89 	bl	8004118 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a0e:	e7b4      	b.n	800397a <HAL_PCD_MspInit+0x22>
      HAL_PWREx_EnableVddUSB();
 8003a10:	f000 fb82 	bl	8004118 <HAL_PWREx_EnableVddUSB>
}
 8003a14:	e7b1      	b.n	800397a <HAL_PCD_MspInit+0x22>
      Error_Handler();
 8003a16:	f7ff fef9 	bl	800380c <Error_Handler>
 8003a1a:	e7b8      	b.n	800398e <HAL_PCD_MspInit+0x36>
 8003a1c:	f3af 8000 	nop.w
 8003a20:	00000200 	.word	0x00000200
 8003a24:	00000000 	.word	0x00000000
 8003a28:	40021000 	.word	0x40021000

08003a2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a2c:	e7fe      	b.n	8003a2c <NMI_Handler>
 8003a2e:	bf00      	nop

08003a30 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a30:	e7fe      	b.n	8003a30 <HardFault_Handler>
 8003a32:	bf00      	nop

08003a34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <MemManage_Handler>
 8003a36:	bf00      	nop

08003a38 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a38:	e7fe      	b.n	8003a38 <BusFault_Handler>
 8003a3a:	bf00      	nop

08003a3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <UsageFault_Handler>
 8003a3e:	bf00      	nop

08003a40 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop

08003a44 <DebugMon_Handler>:
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop

08003a48 <PendSV_Handler>:
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop

08003a4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a4c:	f000 b88c 	b.w	8003b68 <HAL_IncTick>

08003a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a50:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a52:	4c0c      	ldr	r4, [pc, #48]	; (8003a84 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <_sbrk+0x38>)
 8003a56:	490d      	ldr	r1, [pc, #52]	; (8003a8c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003a58:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a5a:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8003a5c:	b12a      	cbz	r2, 8003a6a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a5e:	4410      	add	r0, r2
 8003a60:	4288      	cmp	r0, r1
 8003a62:	d807      	bhi.n	8003a74 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003a64:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8003a66:	4610      	mov	r0, r2
 8003a68:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003a6a:	4a09      	ldr	r2, [pc, #36]	; (8003a90 <_sbrk+0x40>)
 8003a6c:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003a6e:	4410      	add	r0, r2
 8003a70:	4288      	cmp	r0, r1
 8003a72:	d9f7      	bls.n	8003a64 <_sbrk+0x14>
    errno = ENOMEM;
 8003a74:	f002 f968 	bl	8005d48 <__errno>
 8003a78:	230c      	movs	r3, #12
    return (void *)-1;
 8003a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8003a7e:	6003      	str	r3, [r0, #0]
}
 8003a80:	4610      	mov	r0, r2
 8003a82:	bd10      	pop	{r4, pc}
 8003a84:	200267bc 	.word	0x200267bc
 8003a88:	200a0000 	.word	0x200a0000
 8003a8c:	00000400 	.word	0x00000400
 8003a90:	200267d8 	.word	0x200267d8

08003a94 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a94:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <SystemInit+0x10>)
 8003a96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003aa2:	4770      	bx	lr
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003aac:	f7ff fff2 	bl	8003a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ab0:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ab2:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <LoopForever+0xe>)
  movs r3, #0
 8003ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab8:	e002      	b.n	8003ac0 <LoopCopyDataInit>

08003aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003abe:	3304      	adds	r3, #4

08003ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac4:	d3f9      	bcc.n	8003aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ac8:	4c0a      	ldr	r4, [pc, #40]	; (8003af4 <LoopForever+0x16>)
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003acc:	e001      	b.n	8003ad2 <LoopFillZerobss>

08003ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad0:	3204      	adds	r2, #4

08003ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad4:	d3fb      	bcc.n	8003ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ad6:	f002 f93d 	bl	8005d54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ada:	f7ff fd01 	bl	80034e0 <main>

08003ade <LoopForever>:

LoopForever:
    b LoopForever
 8003ade:	e7fe      	b.n	8003ade <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ae0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae8:	20007870 	.word	0x20007870
  ldr r2, =_sidata
 8003aec:	0801a6e0 	.word	0x0801a6e0
  ldr r2, =_sbss
 8003af0:	20007870 	.word	0x20007870
  ldr r4, =_ebss
 8003af4:	200267d4 	.word	0x200267d4

08003af8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003af8:	e7fe      	b.n	8003af8 <ADC1_IRQHandler>
	...

08003afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003afc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <HAL_InitTick+0x40>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b90b      	cbnz	r3, 8003b08 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b04:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b08:	490d      	ldr	r1, [pc, #52]	; (8003b40 <HAL_InitTick+0x44>)
 8003b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b0e:	4605      	mov	r5, r0
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	6808      	ldr	r0, [r1, #0]
 8003b16:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b1a:	f000 f899 	bl	8003c50 <HAL_SYSTICK_Config>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d1ef      	bne.n	8003b04 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b24:	2d0f      	cmp	r5, #15
 8003b26:	d8ed      	bhi.n	8003b04 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b30:	f000 f850 	bl	8003bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <HAL_InitTick+0x48>)
 8003b36:	4620      	mov	r0, r4
 8003b38:	601d      	str	r5, [r3, #0]
}
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	20007804 	.word	0x20007804
 8003b40:	20007800 	.word	0x20007800
 8003b44:	20007808 	.word	0x20007808

08003b48 <HAL_Init>:
{
 8003b48:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4a:	2003      	movs	r0, #3
 8003b4c:	f000 f830 	bl	8003bb0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7ff ffd3 	bl	8003afc <HAL_InitTick>
 8003b56:	b110      	cbz	r0, 8003b5e <HAL_Init+0x16>
    status = HAL_ERROR;
 8003b58:	2401      	movs	r4, #1
}
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003b60:	f7ff fe56 	bl	8003810 <HAL_MspInit>
}
 8003b64:	4620      	mov	r0, r4
 8003b66:	bd10      	pop	{r4, pc}

08003b68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003b68:	4a03      	ldr	r2, [pc, #12]	; (8003b78 <HAL_IncTick+0x10>)
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <HAL_IncTick+0x14>)
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	440b      	add	r3, r1
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	200267c0 	.word	0x200267c0
 8003b7c:	20007804 	.word	0x20007804

08003b80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003b80:	4b01      	ldr	r3, [pc, #4]	; (8003b88 <HAL_GetTick+0x8>)
 8003b82:	6818      	ldr	r0, [r3, #0]
}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	200267c0 	.word	0x200267c0

08003b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b90:	f7ff fff6 	bl	8003b80 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b94:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003b96:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003b98:	d002      	beq.n	8003ba0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8003b9a:	4b04      	ldr	r3, [pc, #16]	; (8003bac <HAL_Delay+0x20>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ba0:	f7ff ffee 	bl	8003b80 <HAL_GetTick>
 8003ba4:	1b43      	subs	r3, r0, r5
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	d3fa      	bcc.n	8003ba0 <HAL_Delay+0x14>
  {
  }
}
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	20007804 	.word	0x20007804

08003bb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb0:	4907      	ldr	r1, [pc, #28]	; (8003bd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003bb2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bbe:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003bca:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <HAL_NVIC_SetPriority+0x74>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bdc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bde:	f1c3 0e07 	rsb	lr, r3, #7
 8003be2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bea:	bf28      	it	cs
 8003bec:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf0:	f1bc 0f06 	cmp.w	ip, #6
 8003bf4:	d91b      	bls.n	8003c2e <HAL_NVIC_SetPriority+0x5a>
 8003bf6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003bfc:	fa0c fc03 	lsl.w	ip, ip, r3
 8003c00:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003c08:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003c0c:	ea21 010c 	bic.w	r1, r1, ip
 8003c10:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003c12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003c18:	db0c      	blt.n	8003c34 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003c1e:	0109      	lsls	r1, r1, #4
 8003c20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003c24:	b2c9      	uxtb	r1, r1
 8003c26:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c2e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c30:	4613      	mov	r3, r2
 8003c32:	e7e7      	b.n	8003c04 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_NVIC_SetPriority+0x78>)
 8003c36:	f000 000f 	and.w	r0, r0, #15
 8003c3a:	0109      	lsls	r1, r1, #4
 8003c3c:	4403      	add	r3, r0
 8003c3e:	b2c9      	uxtb	r1, r1
 8003c40:	7619      	strb	r1, [r3, #24]
 8003c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c46:	bf00      	nop
 8003c48:	e000ed00 	.word	0xe000ed00
 8003c4c:	e000ecfc 	.word	0xe000ecfc

08003c50 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c50:	3801      	subs	r0, #1
 8003c52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003c56:	d210      	bcs.n	8003c7a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c58:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5e:	4c08      	ldr	r4, [pc, #32]	; (8003c80 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c60:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c62:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003c66:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c6a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c6e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c70:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003c72:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c76:	6119      	str	r1, [r3, #16]
 8003c78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c88:	680c      	ldr	r4, [r1, #0]
{
 8003c8a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8c:	2c00      	cmp	r4, #0
 8003c8e:	f000 808c 	beq.w	8003daa <HAL_GPIO_Init+0x126>
 8003c92:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8003e8c <HAL_GPIO_Init+0x208>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c9a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8003e90 <HAL_GPIO_Init+0x20c>
  uint32_t position = 0x00u;
 8003c9e:	4663      	mov	r3, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ca0:	4688      	mov	r8, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ca2:	2601      	movs	r6, #1
 8003ca4:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8003ca6:	ea16 0904 	ands.w	r9, r6, r4
 8003caa:	d077      	beq.n	8003d9c <HAL_GPIO_Init+0x118>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8003cb0:	f005 0203 	and.w	r2, r5, #3
 8003cb4:	1e51      	subs	r1, r2, #1
 8003cb6:	2901      	cmp	r1, #1
 8003cb8:	d97a      	bls.n	8003db0 <HAL_GPIO_Init+0x12c>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cba:	2a03      	cmp	r2, #3
 8003cbc:	f040 80b5 	bne.w	8003e2a <HAL_GPIO_Init+0x1a6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cc0:	fa02 f20c 	lsl.w	r2, r2, ip
 8003cc4:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8003cc6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cc8:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cca:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ccc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003cd0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd2:	d063      	beq.n	8003d9c <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd4:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	f8cb 2060 	str.w	r2, [fp, #96]	; 0x60
 8003ce0:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8003ce4:	f002 0201 	and.w	r2, r2, #1
 8003ce8:	9203      	str	r2, [sp, #12]
 8003cea:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cec:	f023 0203 	bic.w	r2, r3, #3
 8003cf0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003cf4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cf8:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cfc:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cfe:	00b6      	lsls	r6, r6, #2
 8003d00:	210f      	movs	r1, #15
 8003d02:	40b1      	lsls	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d04:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d08:	ea27 0101 	bic.w	r1, r7, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d0c:	d01f      	beq.n	8003d4e <HAL_GPIO_Init+0xca>
 8003d0e:	4f58      	ldr	r7, [pc, #352]	; (8003e70 <HAL_GPIO_Init+0x1ec>)
 8003d10:	42b8      	cmp	r0, r7
 8003d12:	f000 8094 	beq.w	8003e3e <HAL_GPIO_Init+0x1ba>
 8003d16:	4f57      	ldr	r7, [pc, #348]	; (8003e74 <HAL_GPIO_Init+0x1f0>)
 8003d18:	42b8      	cmp	r0, r7
 8003d1a:	f000 8095 	beq.w	8003e48 <HAL_GPIO_Init+0x1c4>
 8003d1e:	4f56      	ldr	r7, [pc, #344]	; (8003e78 <HAL_GPIO_Init+0x1f4>)
 8003d20:	42b8      	cmp	r0, r7
 8003d22:	f000 8087 	beq.w	8003e34 <HAL_GPIO_Init+0x1b0>
 8003d26:	4f55      	ldr	r7, [pc, #340]	; (8003e7c <HAL_GPIO_Init+0x1f8>)
 8003d28:	42b8      	cmp	r0, r7
 8003d2a:	f000 8097 	beq.w	8003e5c <HAL_GPIO_Init+0x1d8>
 8003d2e:	4f54      	ldr	r7, [pc, #336]	; (8003e80 <HAL_GPIO_Init+0x1fc>)
 8003d30:	42b8      	cmp	r0, r7
 8003d32:	f000 8098 	beq.w	8003e66 <HAL_GPIO_Init+0x1e2>
 8003d36:	4f53      	ldr	r7, [pc, #332]	; (8003e84 <HAL_GPIO_Init+0x200>)
 8003d38:	42b8      	cmp	r0, r7
 8003d3a:	f000 808a 	beq.w	8003e52 <HAL_GPIO_Init+0x1ce>
 8003d3e:	4f52      	ldr	r7, [pc, #328]	; (8003e88 <HAL_GPIO_Init+0x204>)
 8003d40:	42b8      	cmp	r0, r7
 8003d42:	bf0c      	ite	eq
 8003d44:	2707      	moveq	r7, #7
 8003d46:	2708      	movne	r7, #8
 8003d48:	fa07 f606 	lsl.w	r6, r7, r6
 8003d4c:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d4e:	6091      	str	r1, [r2, #8]
        temp = EXTI->RTSR1;
 8003d50:	f8da 2008 	ldr.w	r2, [sl, #8]
        temp &= ~(iocurrent);
 8003d54:	ea6f 0609 	mvn.w	r6, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d58:	02e9      	lsls	r1, r5, #11
        temp &= ~(iocurrent);
 8003d5a:	bf54      	ite	pl
 8003d5c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003d5e:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8003d62:	f8ca 2008 	str.w	r2, [sl, #8]

        temp = EXTI->FTSR1;
 8003d66:	f8da 100c 	ldr.w	r1, [sl, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d6a:	02aa      	lsls	r2, r5, #10
        temp &= ~(iocurrent);
 8003d6c:	bf54      	ite	pl
 8003d6e:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8003d70:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->FTSR1 = temp;
 8003d74:	f8ca 100c 	str.w	r1, [sl, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d78:	f8da 1004 	ldr.w	r1, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d7c:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8003d7e:	bf54      	ite	pl
 8003d80:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8003d82:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->EMR1 = temp;
 8003d86:	f8ca 1004 	str.w	r1, [sl, #4]

        temp = EXTI->IMR1;
 8003d8a:	f8da 2000 	ldr.w	r2, [sl]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d8e:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8003d90:	bf54      	ite	pl
 8003d92:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003d94:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8003d98:	f8ca 2000 	str.w	r2, [sl]
      }
    }

    position++;
 8003d9c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d9e:	fa34 f203 	lsrs.w	r2, r4, r3
 8003da2:	f10c 0c02 	add.w	ip, ip, #2
 8003da6:	f47f af7c 	bne.w	8003ca2 <HAL_GPIO_Init+0x1e>
  }
}
 8003daa:	b005      	add	sp, #20
 8003dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003db0:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003db4:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003db8:	2703      	movs	r7, #3
 8003dba:	fa07 f70c 	lsl.w	r7, r7, ip
 8003dbe:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dc2:	fa01 f10c 	lsl.w	r1, r1, ip
 8003dc6:	ea41 010e 	orr.w	r1, r1, lr
        GPIOx->OSPEEDR = temp;
 8003dca:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dcc:	43f9      	mvns	r1, r7
        temp = GPIOx->OTYPER;
 8003dce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dd0:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd4:	f3c5 1600 	ubfx	r6, r5, #4, #1
 8003dd8:	409e      	lsls	r6, r3
 8003dda:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8003ddc:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8003dde:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de0:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003de4:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de6:	fa06 f60c 	lsl.w	r6, r6, ip
 8003dea:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dec:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003dee:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df0:	fa02 f20c 	lsl.w	r2, r2, ip
 8003df4:	f47f af67 	bne.w	8003cc6 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3u];
 8003df8:	08df      	lsrs	r7, r3, #3
 8003dfa:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dfe:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003e02:	6a3e      	ldr	r6, [r7, #32]
 8003e04:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e06:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e0a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e0e:	fa06 f60e 	lsl.w	r6, r6, lr
 8003e12:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e14:	260f      	movs	r6, #15
 8003e16:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003e1a:	9e00      	ldr	r6, [sp, #0]
 8003e1c:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e20:	9e01      	ldr	r6, [sp, #4]
 8003e22:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003e26:	623e      	str	r6, [r7, #32]
 8003e28:	e74d      	b.n	8003cc6 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	fa01 f10c 	lsl.w	r1, r1, ip
 8003e30:	43c9      	mvns	r1, r1
 8003e32:	e7d4      	b.n	8003dde <HAL_GPIO_Init+0x15a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e34:	2703      	movs	r7, #3
 8003e36:	fa07 f606 	lsl.w	r6, r7, r6
 8003e3a:	4331      	orrs	r1, r6
 8003e3c:	e787      	b.n	8003d4e <HAL_GPIO_Init+0xca>
 8003e3e:	2701      	movs	r7, #1
 8003e40:	fa07 f606 	lsl.w	r6, r7, r6
 8003e44:	4331      	orrs	r1, r6
 8003e46:	e782      	b.n	8003d4e <HAL_GPIO_Init+0xca>
 8003e48:	2702      	movs	r7, #2
 8003e4a:	fa07 f606 	lsl.w	r6, r7, r6
 8003e4e:	4331      	orrs	r1, r6
 8003e50:	e77d      	b.n	8003d4e <HAL_GPIO_Init+0xca>
 8003e52:	2706      	movs	r7, #6
 8003e54:	fa07 f606 	lsl.w	r6, r7, r6
 8003e58:	4331      	orrs	r1, r6
 8003e5a:	e778      	b.n	8003d4e <HAL_GPIO_Init+0xca>
 8003e5c:	2704      	movs	r7, #4
 8003e5e:	fa07 f606 	lsl.w	r6, r7, r6
 8003e62:	4331      	orrs	r1, r6
 8003e64:	e773      	b.n	8003d4e <HAL_GPIO_Init+0xca>
 8003e66:	2705      	movs	r7, #5
 8003e68:	fa07 f606 	lsl.w	r6, r7, r6
 8003e6c:	4331      	orrs	r1, r6
 8003e6e:	e76e      	b.n	8003d4e <HAL_GPIO_Init+0xca>
 8003e70:	48000400 	.word	0x48000400
 8003e74:	48000800 	.word	0x48000800
 8003e78:	48000c00 	.word	0x48000c00
 8003e7c:	48001000 	.word	0x48001000
 8003e80:	48001400 	.word	0x48001400
 8003e84:	48001800 	.word	0x48001800
 8003e88:	48001c00 	.word	0x48001c00
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40010400 	.word	0x40010400

08003e94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e94:	b10a      	cbz	r2, 8003e9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e96:	6181      	str	r1, [r0, #24]
 8003e98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e9a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	f000 8088 	beq.w	8003fba <HAL_PCD_Init+0x11a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eaa:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8003eae:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d079      	beq.n	8003fae <HAL_PCD_Init+0x10e>
 8003eba:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ec2:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ec4:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ec6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8003eca:	bf08      	it	eq
 8003ecc:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8003ece:	f001 fdeb 	bl	8005aa8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ed2:	f856 eb10 	ldr.w	lr, [r6], #16
 8003ed6:	46b4      	mov	ip, r6
 8003ed8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003edc:	466c      	mov	r4, sp
 8003ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8003eea:	e884 0003 	stmia.w	r4, {r0, r1}
 8003eee:	1d2f      	adds	r7, r5, #4
 8003ef0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003ef4:	4670      	mov	r0, lr
 8003ef6:	f001 fd8f 	bl	8005a18 <USB_CoreInit>
 8003efa:	4604      	mov	r4, r0
 8003efc:	b130      	cbz	r0, 8003f0c <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8003efe:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f00:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8003f02:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f04:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8003f08:	b00b      	add	sp, #44	; 0x2c
 8003f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	6828      	ldr	r0, [r5, #0]
 8003f10:	f001 fdd2 	bl	8005ab8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f14:	6868      	ldr	r0, [r5, #4]
 8003f16:	b358      	cbz	r0, 8003f70 <HAL_PCD_Init+0xd0>
 8003f18:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8003f1a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f1e:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8003f20:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8003f24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f28:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f34:	fa5f f28c 	uxtb.w	r2, ip
 8003f38:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f3a:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8003f3e:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f42:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f46:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f48:	d3ea      	bcc.n	8003f20 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8003f50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f54:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8003f56:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5a:	b2cc      	uxtb	r4, r1
 8003f5c:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f5e:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8003f62:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f66:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f6e:	d3ed      	bcc.n	8003f4c <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f72:	466c      	mov	r4, sp
 8003f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f7a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003f7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003f82:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003f86:	6828      	ldr	r0, [r5, #0]
 8003f88:	f001 fdce 	bl	8005b28 <USB_DevInit>
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d1b5      	bne.n	8003efe <HAL_PCD_Init+0x5e>
  if (hpcd->Init.lpm_enable == 1U)
 8003f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8003f94:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f98:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8003f9a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8003f9c:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8003fa0:	d00f      	beq.n	8003fc2 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fa2:	6828      	ldr	r0, [r5, #0]
 8003fa4:	f001 fec0 	bl	8005d28 <USB_DevDisconnect>
}
 8003fa8:	4620      	mov	r0, r4
 8003faa:	b00b      	add	sp, #44	; 0x2c
 8003fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003fae:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8003fb2:	f7ff fcd1 	bl	8003958 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8003fb6:	6828      	ldr	r0, [r5, #0]
 8003fb8:	e780      	b.n	8003ebc <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8003fba:	2401      	movs	r4, #1
}
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	b00b      	add	sp, #44	; 0x2c
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 f802 	bl	8003fcc <HAL_PCDEx_ActivateLPM>
 8003fc8:	e7eb      	b.n	8003fa2 <HAL_PCD_Init+0x102>
 8003fca:	bf00      	nop

08003fcc <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fcc:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8003fce:	2100      	movs	r1, #0
{
 8003fd0:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8003fd2:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fd6:	6993      	ldr	r3, [r2, #24]
  hpcd->lpm_active = 1U;
 8003fd8:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  hpcd->lpm_active = 1U;
 8003fde:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fe2:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fe4:	6d53      	ldr	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	f043 0303 	orr.w	r3, r3, #3
}
 8003ff2:	4608      	mov	r0, r1
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ff4:	6553      	str	r3, [r2, #84]	; 0x54
}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <HAL_PWREx_GetVoltageRange+0x20>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004000:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004004:	d006      	beq.n	8004014 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004006:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800400a:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800400e:	bf18      	it	ne
 8004010:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40007000 	.word	0x40007000

0800401c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800401c:	b410      	push	{r4}

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800401e:	4a3b      	ldr	r2, [pc, #236]	; (800410c <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004020:	b970      	cbnz	r0, 8004040 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800402c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004030:	d023      	beq.n	800407a <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    }
  }
#endif

  return HAL_OK;
}
 8004036:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800403a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800403e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004040:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004044:	d009      	beq.n	800405a <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004046:	6813      	ldr	r3, [r2, #0]
}
 8004048:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800404c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8004054:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004064:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004068:	d02f      	beq.n	80040ca <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800406a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 800406e:	2000      	movs	r0, #0
}
 8004070:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004078:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800407a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800407e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004082:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004084:	4c22      	ldr	r4, [pc, #136]	; (8004110 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004086:	4823      	ldr	r0, [pc, #140]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004088:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800408c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004090:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	2132      	movs	r1, #50	; 0x32
 8004096:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800409c:	fba0 0303 	umull	r0, r3, r0, r3
 80040a0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a2:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040a4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a8:	d506      	bpl.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80040aa:	e000      	b.n	80040ae <HAL_PWREx_ControlVoltageScaling+0x92>
 80040ac:	b123      	cbz	r3, 80040b8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80040ae:	6951      	ldr	r1, [r2, #20]
 80040b0:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80040b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040b6:	d4f9      	bmi.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 80040be:	bf54      	ite	pl
 80040c0:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 80040c2:	2003      	movmi	r0, #3
}
 80040c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c8:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d2:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040d4:	4c0e      	ldr	r4, [pc, #56]	; (8004110 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80040d6:	480f      	ldr	r0, [pc, #60]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d8:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80040dc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80040e0:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	2132      	movs	r1, #50	; 0x32
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ea:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040ec:	fba0 0303 	umull	r0, r3, r0, r3
 80040f0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f2:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040f4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f8:	d5de      	bpl.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80040fa:	e001      	b.n	8004100 <HAL_PWREx_ControlVoltageScaling+0xe4>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0db      	beq.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004100:	6951      	ldr	r1, [r2, #20]
 8004102:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004104:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004108:	d5d6      	bpl.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800410a:	e7f7      	b.n	80040fc <HAL_PWREx_ControlVoltageScaling+0xe0>
 800410c:	40007000 	.word	0x40007000
 8004110:	20007800 	.word	0x20007800
 8004114:	431bde83 	.word	0x431bde83

08004118 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004118:	4a02      	ldr	r2, [pc, #8]	; (8004124 <HAL_PWREx_EnableVddUSB+0xc>)
 800411a:	6853      	ldr	r3, [r2, #4]
 800411c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004120:	6053      	str	r3, [r2, #4]
}
 8004122:	4770      	bx	lr
 8004124:	40007000 	.word	0x40007000

08004128 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004128:	4a02      	ldr	r2, [pc, #8]	; (8004134 <HAL_PWREx_EnableVddIO2+0xc>)
 800412a:	6853      	ldr	r3, [r2, #4]
 800412c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004130:	6053      	str	r3, [r2, #4]
}
 8004132:	4770      	bx	lr
 8004134:	40007000 	.word	0x40007000

08004138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004138:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800413a:	4d1e      	ldr	r5, [pc, #120]	; (80041b4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800413c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800413e:	00db      	lsls	r3, r3, #3
{
 8004140:	b083      	sub	sp, #12
 8004142:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004144:	d519      	bpl.n	800417a <RCC_SetFlashLatencyFromMSIRange+0x42>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004146:	f7ff ff57 	bl	8003ff8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800414a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800414e:	d026      	beq.n	800419e <RCC_SetFlashLatencyFromMSIRange+0x66>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004150:	2c7f      	cmp	r4, #127	; 0x7f
 8004152:	d82b      	bhi.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x74>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004154:	f1a4 0070 	sub.w	r0, r4, #112	; 0x70
 8004158:	fab0 f080 	clz	r0, r0
 800415c:	0940      	lsrs	r0, r0, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800415e:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	f023 030f 	bic.w	r3, r3, #15
 8004166:	4303      	orrs	r3, r0
 8004168:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800416a:	6813      	ldr	r3, [r2, #0]
 800416c:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004170:	1a18      	subs	r0, r3, r0
 8004172:	bf18      	it	ne
 8004174:	2001      	movne	r0, #1
 8004176:	b003      	add	sp, #12
 8004178:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	65ab      	str	r3, [r5, #88]	; 0x58
 8004182:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800418c:	f7ff ff34 	bl	8003ff8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004190:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004192:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8004196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419a:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800419c:	d1d8      	bne.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 800419e:	2c80      	cmp	r4, #128	; 0x80
 80041a0:	d906      	bls.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x78>
        latency = FLASH_LATENCY_1; /* 1WS */
 80041a2:	2ca0      	cmp	r4, #160	; 0xa0
 80041a4:	bf8c      	ite	hi
 80041a6:	2002      	movhi	r0, #2
 80041a8:	2001      	movls	r0, #1
 80041aa:	e7d8      	b.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x26>
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ac:	2002      	movs	r0, #2
 80041ae:	e7d6      	b.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041b0:	2000      	movs	r0, #0
 80041b2:	e7d4      	b.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x26>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40022000 	.word	0x40022000

080041bc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041bc:	4a28      	ldr	r2, [pc, #160]	; (8004260 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041be:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c0:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041c2:	f013 030c 	ands.w	r3, r3, #12
 80041c6:	d008      	beq.n	80041da <HAL_RCC_GetSysClockFreq+0x1e>
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d038      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d034      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	4824      	ldr	r0, [pc, #144]	; (8004264 <HAL_RCC_GetSysClockFreq+0xa8>)
 80041d4:	bf18      	it	ne
 80041d6:	2000      	movne	r0, #0
 80041d8:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041e0:	bf54      	ite	pl
 80041e2:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041e6:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80041e8:	491f      	ldr	r1, [pc, #124]	; (8004268 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041ea:	bf54      	ite	pl
 80041ec:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041f0:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80041f4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f8:	b303      	cbz	r3, 800423c <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d12d      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004206:	2b02      	cmp	r3, #2
 8004208:	d025      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x9a>
 800420a:	4a16      	ldr	r2, [pc, #88]	; (8004264 <HAL_RCC_GetSysClockFreq+0xa8>)
 800420c:	2b03      	cmp	r3, #3
 800420e:	bf08      	it	eq
 8004210:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004214:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004216:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800421e:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004222:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004226:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004228:	fb02 f000 	mul.w	r0, r2, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800422c:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800422e:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004230:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 8004234:	fbb0 f0f3 	udiv	r0, r0, r3
 8004238:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800423a:	480c      	ldr	r0, [pc, #48]	; (800426c <HAL_RCC_GetSysClockFreq+0xb0>)
}
 800423c:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800423e:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004242:	2a01      	cmp	r2, #1
 8004244:	d0c9      	beq.n	80041da <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800424e:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004250:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8004254:	d1d9      	bne.n	800420a <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8004256:	4805      	ldr	r0, [pc, #20]	; (800426c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004258:	e7db      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x56>
 800425a:	2000      	movs	r0, #0
  return sysclockfreq;
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000
 8004264:	007a1200 	.word	0x007a1200
 8004268:	0801a630 	.word	0x0801a630
 800426c:	00f42400 	.word	0x00f42400

08004270 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004270:	2800      	cmp	r0, #0
 8004272:	f000 828f 	beq.w	8004794 <HAL_RCC_OscConfig+0x524>
{
 8004276:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427a:	4a94      	ldr	r2, [pc, #592]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800427c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004280:	68d6      	ldr	r6, [r2, #12]
 8004282:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004284:	06d8      	lsls	r0, r3, #27
{
 8004286:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004288:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800428c:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004290:	d52e      	bpl.n	80042f0 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004292:	2d00      	cmp	r5, #0
 8004294:	f000 8123 	beq.w	80044de <HAL_RCC_OscConfig+0x26e>
 8004298:	2d0c      	cmp	r5, #12
 800429a:	f000 811d 	beq.w	80044d8 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800429e:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80042a0:	4f8a      	ldr	r7, [pc, #552]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 8193 	beq.w	80045ce <HAL_RCC_OscConfig+0x35e>
        __HAL_RCC_MSI_ENABLE();
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80042b0:	f7ff fc66 	bl	8003b80 <HAL_GetTick>
 80042b4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b6:	e006      	b.n	80042c6 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042b8:	f7ff fc62 	bl	8003b80 <HAL_GetTick>
 80042bc:	eba0 0008 	sub.w	r0, r0, r8
 80042c0:	2802      	cmp	r0, #2
 80042c2:	f200 8194 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	079b      	lsls	r3, r3, #30
 80042ca:	d5f5      	bpl.n	80042b8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f043 0308 	orr.w	r3, r3, #8
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6a22      	ldr	r2, [r4, #32]
 80042d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042dc:	4313      	orrs	r3, r2
 80042de:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69e2      	ldr	r2, [r4, #28]
 80042e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042ec:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	07d9      	lsls	r1, r3, #31
 80042f2:	f100 80c2 	bmi.w	800447a <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f6:	0799      	lsls	r1, r3, #30
 80042f8:	d523      	bpl.n	8004342 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042fa:	2d04      	cmp	r5, #4
 80042fc:	f000 8157 	beq.w	80045ae <HAL_RCC_OscConfig+0x33e>
 8004300:	2d0c      	cmp	r5, #12
 8004302:	f000 8151 	beq.w	80045a8 <HAL_RCC_OscConfig+0x338>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004306:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004308:	4e70      	ldr	r6, [pc, #448]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 81dc 	beq.w	80046c8 <HAL_RCC_OscConfig+0x458>
        __HAL_RCC_HSI_ENABLE();
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004318:	f7ff fc32 	bl	8003b80 <HAL_GetTick>
 800431c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800431e:	e005      	b.n	800432c <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004320:	f7ff fc2e 	bl	8003b80 <HAL_GetTick>
 8004324:	1bc0      	subs	r0, r0, r7
 8004326:	2802      	cmp	r0, #2
 8004328:	f200 8161 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800432c:	6833      	ldr	r3, [r6, #0]
 800432e:	055b      	lsls	r3, r3, #21
 8004330:	d5f6      	bpl.n	8004320 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004332:	6873      	ldr	r3, [r6, #4]
 8004334:	6922      	ldr	r2, [r4, #16]
 8004336:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800433a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800433e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	0719      	lsls	r1, r3, #28
 8004344:	d519      	bpl.n	800437a <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004346:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004348:	4e60      	ldr	r6, [pc, #384]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8118 	beq.w	8004580 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 8004350:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800435c:	f7ff fc10 	bl	8003b80 <HAL_GetTick>
 8004360:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004362:	e005      	b.n	8004370 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004364:	f7ff fc0c 	bl	8003b80 <HAL_GetTick>
 8004368:	1bc0      	subs	r0, r0, r7
 800436a:	2802      	cmp	r0, #2
 800436c:	f200 813f 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004370:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004374:	079a      	lsls	r2, r3, #30
 8004376:	d5f5      	bpl.n	8004364 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	075e      	lsls	r6, r3, #29
 800437c:	d53f      	bpl.n	80043fe <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800437e:	4b53      	ldr	r3, [pc, #332]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
 8004380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004382:	00d0      	lsls	r0, r2, #3
 8004384:	f100 819e 	bmi.w	80046c4 <HAL_RCC_OscConfig+0x454>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800438a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800438e:	659a      	str	r2, [r3, #88]	; 0x58
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800439a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439c:	4f4c      	ldr	r7, [pc, #304]	; (80044d0 <HAL_RCC_OscConfig+0x260>)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	05d9      	lsls	r1, r3, #23
 80043a2:	f140 81f9 	bpl.w	8004798 <HAL_RCC_OscConfig+0x528>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	f000 819f 	beq.w	80046ec <HAL_RCC_OscConfig+0x47c>
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	f000 821d 	beq.w	80047ee <HAL_RCC_OscConfig+0x57e>
 80043b4:	4f45      	ldr	r7, [pc, #276]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
 80043b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80043c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80043c6:	f022 0204 	bic.w	r2, r2, #4
 80043ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 8193 	bne.w	80046fa <HAL_RCC_OscConfig+0x48a>
      tickstart = HAL_GetTick();
 80043d4:	f7ff fbd4 	bl	8003b80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80043dc:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043de:	e006      	b.n	80043ee <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7ff fbce 	bl	8003b80 <HAL_GetTick>
 80043e4:	eba0 0008 	sub.w	r0, r0, r8
 80043e8:	4548      	cmp	r0, r9
 80043ea:	f200 8100 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043f2:	0798      	lsls	r0, r3, #30
 80043f4:	d4f4      	bmi.n	80043e0 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 80043f6:	2e00      	cmp	r6, #0
 80043f8:	f040 81e0 	bne.w	80047bc <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	0699      	lsls	r1, r3, #26
 8004400:	d518      	bpl.n	8004434 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004402:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004404:	4e31      	ldr	r6, [pc, #196]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 81a5 	beq.w	8004756 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSI48_ENABLE();
 800440c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004418:	f7ff fbb2 	bl	8003b80 <HAL_GetTick>
 800441c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800441e:	e005      	b.n	800442c <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004420:	f7ff fbae 	bl	8003b80 <HAL_GetTick>
 8004424:	1bc0      	subs	r0, r0, r7
 8004426:	2802      	cmp	r0, #2
 8004428:	f200 80e1 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800442c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004430:	079a      	lsls	r2, r3, #30
 8004432:	d5f5      	bpl.n	8004420 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8142 	beq.w	80046c0 <HAL_RCC_OscConfig+0x450>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800443c:	2b02      	cmp	r3, #2
 800443e:	f000 80ef 	beq.w	8004620 <HAL_RCC_OscConfig+0x3b0>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004442:	2d0c      	cmp	r5, #12
 8004444:	f000 808c 	beq.w	8004560 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8004448:	4c20      	ldr	r4, [pc, #128]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004450:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004452:	f7ff fb95 	bl	8003b80 <HAL_GetTick>
 8004456:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004458:	e005      	b.n	8004466 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445a:	f7ff fb91 	bl	8003b80 <HAL_GetTick>
 800445e:	1b40      	subs	r0, r0, r5
 8004460:	2802      	cmp	r0, #2
 8004462:	f200 80c4 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800446c:	d1f5      	bne.n	800445a <HAL_RCC_OscConfig+0x1ea>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800446e:	68e1      	ldr	r1, [r4, #12]
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004472:	400a      	ands	r2, r1
  return HAL_OK;
 8004474:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004476:	60e2      	str	r2, [r4, #12]
 8004478:	e073      	b.n	8004562 <HAL_RCC_OscConfig+0x2f2>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800447a:	2d08      	cmp	r5, #8
 800447c:	d076      	beq.n	800456c <HAL_RCC_OscConfig+0x2fc>
 800447e:	2d0c      	cmp	r5, #12
 8004480:	d072      	beq.n	8004568 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	f000 80b5 	beq.w	80045f6 <HAL_RCC_OscConfig+0x386>
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004490:	f000 81a0 	beq.w	80047d4 <HAL_RCC_OscConfig+0x564>
 8004494:	4f0d      	ldr	r7, [pc, #52]	; (80044cc <HAL_RCC_OscConfig+0x25c>)
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800449c:	603a      	str	r2, [r7, #0]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a4:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 80aa 	bne.w	8004600 <HAL_RCC_OscConfig+0x390>
        tickstart = HAL_GetTick();
 80044ac:	f7ff fb68 	bl	8003b80 <HAL_GetTick>
 80044b0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044b2:	e006      	b.n	80044c2 <HAL_RCC_OscConfig+0x252>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b4:	f7ff fb64 	bl	8003b80 <HAL_GetTick>
 80044b8:	eba0 0008 	sub.w	r0, r0, r8
 80044bc:	2864      	cmp	r0, #100	; 0x64
 80044be:	f200 8096 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	0398      	lsls	r0, r3, #14
 80044c6:	d4f5      	bmi.n	80044b4 <HAL_RCC_OscConfig+0x244>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	e714      	b.n	80042f6 <HAL_RCC_OscConfig+0x86>
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40007000 	.word	0x40007000
 80044d4:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044d8:	2e01      	cmp	r6, #1
 80044da:	f47f aee0 	bne.w	800429e <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044de:	4ba8      	ldr	r3, [pc, #672]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0799      	lsls	r1, r3, #30
 80044e4:	d439      	bmi.n	800455a <HAL_RCC_OscConfig+0x2ea>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044e6:	4ba6      	ldr	r3, [pc, #664]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 80044e8:	6a20      	ldr	r0, [r4, #32]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	0712      	lsls	r2, r2, #28
 80044ee:	bf56      	itet	pl
 80044f0:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80044f4:	681b      	ldrmi	r3, [r3, #0]
 80044f6:	091b      	lsrpl	r3, r3, #4
 80044f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fc:	4298      	cmp	r0, r3
 80044fe:	f200 8112 	bhi.w	8004726 <HAL_RCC_OscConfig+0x4b6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004502:	4b9f      	ldr	r3, [pc, #636]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	f042 0208 	orr.w	r2, r2, #8
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004512:	4302      	orrs	r2, r0
 8004514:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	69e1      	ldr	r1, [r4, #28]
 800451a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800451e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004522:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004524:	2d00      	cmp	r5, #0
 8004526:	f000 814f 	beq.w	80047c8 <HAL_RCC_OscConfig+0x558>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800452a:	f7ff fe47 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800452e:	4b94      	ldr	r3, [pc, #592]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 8004530:	4a94      	ldr	r2, [pc, #592]	; (8004784 <HAL_RCC_OscConfig+0x514>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004538:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 800453a:	4a93      	ldr	r2, [pc, #588]	; (8004788 <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8004544:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004546:	4a91      	ldr	r2, [pc, #580]	; (800478c <HAL_RCC_OscConfig+0x51c>)
 8004548:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800454a:	f7ff fad7 	bl	8003afc <HAL_InitTick>
        if(status != HAL_OK)
 800454e:	b940      	cbnz	r0, 8004562 <HAL_RCC_OscConfig+0x2f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	07d9      	lsls	r1, r3, #31
 8004554:	f57f aecf 	bpl.w	80042f6 <HAL_RCC_OscConfig+0x86>
 8004558:	e78f      	b.n	800447a <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800455a:	69a3      	ldr	r3, [r4, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1c2      	bne.n	80044e6 <HAL_RCC_OscConfig+0x276>
          return HAL_ERROR;
 8004560:	2001      	movs	r0, #1
}
 8004562:	b003      	add	sp, #12
 8004564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004568:	2e03      	cmp	r6, #3
 800456a:	d18a      	bne.n	8004482 <HAL_RCC_OscConfig+0x212>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	4a84      	ldr	r2, [pc, #528]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	0392      	lsls	r2, r2, #14
 8004572:	f57f aec0 	bpl.w	80042f6 <HAL_RCC_OscConfig+0x86>
 8004576:	6862      	ldr	r2, [r4, #4]
 8004578:	2a00      	cmp	r2, #0
 800457a:	f47f aebc 	bne.w	80042f6 <HAL_RCC_OscConfig+0x86>
 800457e:	e7ef      	b.n	8004560 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_DISABLE();
 8004580:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800458c:	f7ff faf8 	bl	8003b80 <HAL_GetTick>
 8004590:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004592:	e004      	b.n	800459e <HAL_RCC_OscConfig+0x32e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004594:	f7ff faf4 	bl	8003b80 <HAL_GetTick>
 8004598:	1bc0      	subs	r0, r0, r7
 800459a:	2802      	cmp	r0, #2
 800459c:	d827      	bhi.n	80045ee <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800459e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80045a2:	079b      	lsls	r3, r3, #30
 80045a4:	d4f6      	bmi.n	8004594 <HAL_RCC_OscConfig+0x324>
 80045a6:	e6e7      	b.n	8004378 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045a8:	2e02      	cmp	r6, #2
 80045aa:	f47f aeac 	bne.w	8004306 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ae:	4a74      	ldr	r2, [pc, #464]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	0552      	lsls	r2, r2, #21
 80045b4:	d502      	bpl.n	80045bc <HAL_RCC_OscConfig+0x34c>
 80045b6:	68e2      	ldr	r2, [r4, #12]
 80045b8:	2a00      	cmp	r2, #0
 80045ba:	d0d1      	beq.n	8004560 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045bc:	4970      	ldr	r1, [pc, #448]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 80045be:	6920      	ldr	r0, [r4, #16]
 80045c0:	684a      	ldr	r2, [r1, #4]
 80045c2:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80045c6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80045ca:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045cc:	e6b9      	b.n	8004342 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80045d6:	f7ff fad3 	bl	8003b80 <HAL_GetTick>
 80045da:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	0798      	lsls	r0, r3, #30
 80045e0:	d5b6      	bpl.n	8004550 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045e2:	f7ff facd 	bl	8003b80 <HAL_GetTick>
 80045e6:	eba0 0008 	sub.w	r0, r0, r8
 80045ea:	2802      	cmp	r0, #2
 80045ec:	d9f6      	bls.n	80045dc <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 80045ee:	2003      	movs	r0, #3
}
 80045f0:	b003      	add	sp, #12
 80045f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f6:	4a62      	ldr	r2, [pc, #392]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 80045f8:	6813      	ldr	r3, [r2, #0]
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004600:	f7ff fabe 	bl	8003b80 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004604:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8004780 <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 8004608:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800460a:	e004      	b.n	8004616 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800460c:	f7ff fab8 	bl	8003b80 <HAL_GetTick>
 8004610:	1bc0      	subs	r0, r0, r7
 8004612:	2864      	cmp	r0, #100	; 0x64
 8004614:	d8eb      	bhi.n	80045ee <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004616:	f8d8 3000 	ldr.w	r3, [r8]
 800461a:	039b      	lsls	r3, r3, #14
 800461c:	d5f6      	bpl.n	800460c <HAL_RCC_OscConfig+0x39c>
 800461e:	e753      	b.n	80044c8 <HAL_RCC_OscConfig+0x258>
      pll_config = RCC->PLLCFGR;
 8004620:	4e57      	ldr	r6, [pc, #348]	; (8004780 <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8004624:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	f003 0103 	and.w	r1, r3, #3
 800462a:	4291      	cmp	r1, r2
 800462c:	f000 80ed 	beq.w	800480a <HAL_RCC_OscConfig+0x59a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004630:	2d0c      	cmp	r5, #12
 8004632:	d095      	beq.n	8004560 <HAL_RCC_OscConfig+0x2f0>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004634:	4d52      	ldr	r5, [pc, #328]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	015f      	lsls	r7, r3, #5
 800463a:	d491      	bmi.n	8004560 <HAL_RCC_OscConfig+0x2f0>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	00de      	lsls	r6, r3, #3
 8004640:	d48e      	bmi.n	8004560 <HAL_RCC_OscConfig+0x2f0>
            __HAL_RCC_PLL_DISABLE();
 8004642:	682b      	ldr	r3, [r5, #0]
 8004644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004648:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800464a:	f7ff fa99 	bl	8003b80 <HAL_GetTick>
 800464e:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004650:	e004      	b.n	800465c <HAL_RCC_OscConfig+0x3ec>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004652:	f7ff fa95 	bl	8003b80 <HAL_GetTick>
 8004656:	1b80      	subs	r0, r0, r6
 8004658:	2802      	cmp	r0, #2
 800465a:	d8c8      	bhi.n	80045ee <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	0198      	lsls	r0, r3, #6
 8004660:	d4f7      	bmi.n	8004652 <HAL_RCC_OscConfig+0x3e2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004662:	68e9      	ldr	r1, [r5, #12]
 8004664:	4b4a      	ldr	r3, [pc, #296]	; (8004790 <HAL_RCC_OscConfig+0x520>)
 8004666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004668:	6b20      	ldr	r0, [r4, #48]	; 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466a:	4e45      	ldr	r6, [pc, #276]	; (8004780 <HAL_RCC_OscConfig+0x510>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466c:	400b      	ands	r3, r1
 800466e:	4313      	orrs	r3, r2
 8004670:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 8004674:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004678:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800467c:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8004680:	3801      	subs	r0, #1
 8004682:	0849      	lsrs	r1, r1, #1
 8004684:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004688:	3901      	subs	r1, #1
 800468a:	0852      	lsrs	r2, r2, #1
 800468c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004690:	3a01      	subs	r2, #1
 8004692:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004696:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469e:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046a0:	68eb      	ldr	r3, [r5, #12]
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a6:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80046a8:	f7ff fa6a 	bl	8003b80 <HAL_GetTick>
 80046ac:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ae:	e004      	b.n	80046ba <HAL_RCC_OscConfig+0x44a>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7ff fa66 	bl	8003b80 <HAL_GetTick>
 80046b4:	1b00      	subs	r0, r0, r4
 80046b6:	2802      	cmp	r0, #2
 80046b8:	d899      	bhi.n	80045ee <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ba:	6833      	ldr	r3, [r6, #0]
 80046bc:	0199      	lsls	r1, r3, #6
 80046be:	d5f7      	bpl.n	80046b0 <HAL_RCC_OscConfig+0x440>
  return HAL_OK;
 80046c0:	2000      	movs	r0, #0
 80046c2:	e74e      	b.n	8004562 <HAL_RCC_OscConfig+0x2f2>
    FlagStatus       pwrclkchanged = RESET;
 80046c4:	2600      	movs	r6, #0
 80046c6:	e669      	b.n	800439c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ce:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80046d0:	f7ff fa56 	bl	8003b80 <HAL_GetTick>
 80046d4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d6:	e004      	b.n	80046e2 <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d8:	f7ff fa52 	bl	8003b80 <HAL_GetTick>
 80046dc:	1bc0      	subs	r0, r0, r7
 80046de:	2802      	cmp	r0, #2
 80046e0:	d885      	bhi.n	80045ee <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e2:	6833      	ldr	r3, [r6, #0]
 80046e4:	0558      	lsls	r0, r3, #21
 80046e6:	d4f7      	bmi.n	80046d8 <HAL_RCC_OscConfig+0x468>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	e62a      	b.n	8004342 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ec:	4a24      	ldr	r2, [pc, #144]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 80046ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80046fa:	f7ff fa41 	bl	8003b80 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fe:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8004780 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8004702:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004708:	e005      	b.n	8004716 <HAL_RCC_OscConfig+0x4a6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7ff fa39 	bl	8003b80 <HAL_GetTick>
 800470e:	1bc0      	subs	r0, r0, r7
 8004710:	4548      	cmp	r0, r9
 8004712:	f63f af6c 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004716:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800471a:	079b      	lsls	r3, r3, #30
 800471c:	d5f5      	bpl.n	800470a <HAL_RCC_OscConfig+0x49a>
    if(pwrclkchanged == SET)
 800471e:	2e00      	cmp	r6, #0
 8004720:	f43f ae6c 	beq.w	80043fc <HAL_RCC_OscConfig+0x18c>
 8004724:	e04a      	b.n	80047bc <HAL_RCC_OscConfig+0x54c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004726:	f7ff fd07 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 800472a:	2800      	cmp	r0, #0
 800472c:	f47f af18 	bne.w	8004560 <HAL_RCC_OscConfig+0x2f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004730:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_RCC_OscConfig+0x510>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	f042 0208 	orr.w	r2, r2, #8
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	6a21      	ldr	r1, [r4, #32]
 800473e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	69e1      	ldr	r1, [r4, #28]
 800474a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800474e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	e6e9      	b.n	800452a <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 8004756:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004762:	f7ff fa0d 	bl	8003b80 <HAL_GetTick>
 8004766:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004768:	e005      	b.n	8004776 <HAL_RCC_OscConfig+0x506>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800476a:	f7ff fa09 	bl	8003b80 <HAL_GetTick>
 800476e:	1bc0      	subs	r0, r0, r7
 8004770:	2802      	cmp	r0, #2
 8004772:	f63f af3c 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004776:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800477a:	079b      	lsls	r3, r3, #30
 800477c:	d4f5      	bmi.n	800476a <HAL_RCC_OscConfig+0x4fa>
 800477e:	e659      	b.n	8004434 <HAL_RCC_OscConfig+0x1c4>
 8004780:	40021000 	.word	0x40021000
 8004784:	0801a618 	.word	0x0801a618
 8004788:	20007808 	.word	0x20007808
 800478c:	20007800 	.word	0x20007800
 8004790:	019d800c 	.word	0x019d800c
    return HAL_ERROR;
 8004794:	2001      	movs	r0, #1
}
 8004796:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80047a0:	f7ff f9ee 	bl	8003b80 <HAL_GetTick>
 80047a4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	05da      	lsls	r2, r3, #23
 80047aa:	f53f adfc 	bmi.w	80043a6 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7ff f9e7 	bl	8003b80 <HAL_GetTick>
 80047b2:	eba0 0008 	sub.w	r0, r0, r8
 80047b6:	2802      	cmp	r0, #2
 80047b8:	d9f5      	bls.n	80047a6 <HAL_RCC_OscConfig+0x536>
 80047ba:	e718      	b.n	80045ee <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047bc:	4a34      	ldr	r2, [pc, #208]	; (8004890 <HAL_RCC_OscConfig+0x620>)
 80047be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80047c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6593      	str	r3, [r2, #88]	; 0x58
 80047c6:	e619      	b.n	80043fc <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047c8:	f7ff fcb6 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f43f aeac 	beq.w	800452a <HAL_RCC_OscConfig+0x2ba>
 80047d2:	e6c5      	b.n	8004560 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047d8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047ea:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ec:	e708      	b.n	8004600 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ee:	4b28      	ldr	r3, [pc, #160]	; (8004890 <HAL_RCC_OscConfig+0x620>)
 80047f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80047f4:	f042 0204 	orr.w	r2, r2, #4
 80047f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80047fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004808:	e777      	b.n	80046fa <HAL_RCC_OscConfig+0x48a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800480a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800480c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004810:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004816:	f47f af0b 	bne.w	8004630 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800481a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800481c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004820:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004824:	f47f af04 	bne.w	8004630 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004828:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800482a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004832:	f47f aefd 	bne.w	8004630 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004836:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004838:	0852      	lsrs	r2, r2, #1
 800483a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800483e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004840:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004844:	f47f aef4 	bne.w	8004630 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004848:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800484a:	0852      	lsrs	r2, r2, #1
 800484c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004850:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004852:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004856:	f47f aeeb 	bne.w	8004630 <HAL_RCC_OscConfig+0x3c0>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485a:	6833      	ldr	r3, [r6, #0]
 800485c:	019a      	lsls	r2, r3, #6
 800485e:	f53f af2f 	bmi.w	80046c0 <HAL_RCC_OscConfig+0x450>
          __HAL_RCC_PLL_ENABLE();
 8004862:	6833      	ldr	r3, [r6, #0]
 8004864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004868:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800486a:	68f3      	ldr	r3, [r6, #12]
 800486c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004870:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8004872:	f7ff f985 	bl	8003b80 <HAL_GetTick>
 8004876:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004878:	e005      	b.n	8004886 <HAL_RCC_OscConfig+0x616>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7ff f981 	bl	8003b80 <HAL_GetTick>
 800487e:	1b00      	subs	r0, r0, r4
 8004880:	2802      	cmp	r0, #2
 8004882:	f63f aeb4 	bhi.w	80045ee <HAL_RCC_OscConfig+0x37e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004886:	6833      	ldr	r3, [r6, #0]
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	d5f6      	bpl.n	800487a <HAL_RCC_OscConfig+0x60a>
 800488c:	e718      	b.n	80046c0 <HAL_RCC_OscConfig+0x450>
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000

08004894 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004894:	2800      	cmp	r0, #0
 8004896:	f000 80cd 	beq.w	8004a34 <HAL_RCC_ClockConfig+0x1a0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489a:	4a8c      	ldr	r2, [pc, #560]	; (8004acc <HAL_RCC_ClockConfig+0x238>)
{
 800489c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	6813      	ldr	r3, [r2, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	428b      	cmp	r3, r1
 80048a8:	460d      	mov	r5, r1
 80048aa:	4604      	mov	r4, r0
 80048ac:	d20c      	bcs.n	80048c8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	f023 030f 	bic.w	r3, r3, #15
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b8:	6813      	ldr	r3, [r2, #0]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	428b      	cmp	r3, r1
 80048c0:	d002      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80048c2:	2001      	movs	r0, #1
}
 80048c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	079e      	lsls	r6, r3, #30
 80048cc:	f140 8086 	bpl.w	80049dc <HAL_RCC_ClockConfig+0x148>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048d0:	487f      	ldr	r0, [pc, #508]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 80048d2:	68a1      	ldr	r1, [r4, #8]
 80048d4:	6882      	ldr	r2, [r0, #8]
 80048d6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80048da:	4291      	cmp	r1, r2
 80048dc:	d904      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048de:	6882      	ldr	r2, [r0, #8]
 80048e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048e4:	430a      	orrs	r2, r1
 80048e6:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e8:	07da      	lsls	r2, r3, #31
 80048ea:	f140 8091 	bpl.w	8004a10 <HAL_RCC_ClockConfig+0x17c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d078      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	f000 8097 	beq.w	8004a28 <HAL_RCC_ClockConfig+0x194>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 809e 	bne.w	8004a3c <HAL_RCC_ClockConfig+0x1a8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004904:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	079b      	lsls	r3, r3, #30
 800490c:	d5d9      	bpl.n	80048c2 <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800490e:	f7ff fc55 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 8004912:	4b70      	ldr	r3, [pc, #448]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 8004914:	4298      	cmp	r0, r3
 8004916:	d905      	bls.n	8004924 <HAL_RCC_ClockConfig+0x90>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004918:	4b6d      	ldr	r3, [pc, #436]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8004920:	f000 8092 	beq.w	8004a48 <HAL_RCC_ClockConfig+0x1b4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004924:	6863      	ldr	r3, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004926:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800492a:	4e69      	ldr	r6, [pc, #420]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 800492c:	68b2      	ldr	r2, [r6, #8]
 800492e:	f022 0203 	bic.w	r2, r2, #3
 8004932:	4313      	orrs	r3, r2
 8004934:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004936:	f7ff f923 	bl	8003b80 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800493e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004940:	e004      	b.n	800494c <HAL_RCC_ClockConfig+0xb8>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004942:	f7ff f91d 	bl	8003b80 <HAL_GetTick>
 8004946:	1bc0      	subs	r0, r0, r7
 8004948:	4540      	cmp	r0, r8
 800494a:	d875      	bhi.n	8004a38 <HAL_RCC_ClockConfig+0x1a4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494c:	68b3      	ldr	r3, [r6, #8]
 800494e:	6862      	ldr	r2, [r4, #4]
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004958:	d1f3      	bne.n	8004942 <HAL_RCC_ClockConfig+0xae>
  if(hpre == RCC_SYSCLK_DIV2)
 800495a:	f1b9 0f00 	cmp.w	r9, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004960:	68b3      	ldr	r3, [r6, #8]
 8004962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004966:	60b3      	str	r3, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	079e      	lsls	r6, r3, #30
 800496c:	d44f      	bmi.n	8004a0e <HAL_RCC_ClockConfig+0x17a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496e:	4957      	ldr	r1, [pc, #348]	; (8004acc <HAL_RCC_ClockConfig+0x238>)
 8004970:	680a      	ldr	r2, [r1, #0]
 8004972:	f002 020f 	and.w	r2, r2, #15
 8004976:	42aa      	cmp	r2, r5
 8004978:	d909      	bls.n	800498e <HAL_RCC_ClockConfig+0xfa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	680a      	ldr	r2, [r1, #0]
 800497c:	f022 020f 	bic.w	r2, r2, #15
 8004980:	432a      	orrs	r2, r5
 8004982:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004984:	680a      	ldr	r2, [r1, #0]
 8004986:	f002 020f 	and.w	r2, r2, #15
 800498a:	42aa      	cmp	r2, r5
 800498c:	d199      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498e:	075d      	lsls	r5, r3, #29
 8004990:	d506      	bpl.n	80049a0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004992:	494f      	ldr	r1, [pc, #316]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 8004994:	68e0      	ldr	r0, [r4, #12]
 8004996:	688a      	ldr	r2, [r1, #8]
 8004998:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800499c:	4302      	orrs	r2, r0
 800499e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a0:	0718      	lsls	r0, r3, #28
 80049a2:	d507      	bpl.n	80049b4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a4:	4a4a      	ldr	r2, [pc, #296]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 80049a6:	6921      	ldr	r1, [r4, #16]
 80049a8:	6893      	ldr	r3, [r2, #8]
 80049aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80049ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80049b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b4:	f7ff fc02 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 80049b8:	4a45      	ldr	r2, [pc, #276]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 80049ba:	4c47      	ldr	r4, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80049bc:	6892      	ldr	r2, [r2, #8]
 80049be:	4947      	ldr	r1, [pc, #284]	; (8004adc <HAL_RCC_ClockConfig+0x248>)
 80049c0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80049c4:	4603      	mov	r3, r0
 80049c6:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80049c8:	4845      	ldr	r0, [pc, #276]	; (8004ae0 <HAL_RCC_ClockConfig+0x24c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049ca:	f002 021f 	and.w	r2, r2, #31
 80049ce:	40d3      	lsrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80049d2:	6800      	ldr	r0, [r0, #0]
}
 80049d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 80049d8:	f7ff b890 	b.w	8003afc <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049dc:	07d9      	lsls	r1, r3, #31
 80049de:	d5c6      	bpl.n	800496e <HAL_RCC_ClockConfig+0xda>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e0:	6863      	ldr	r3, [r4, #4]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d186      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e6:	4a3a      	ldr	r2, [pc, #232]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 80049e8:	6811      	ldr	r1, [r2, #0]
 80049ea:	0188      	lsls	r0, r1, #6
 80049ec:	f57f af69 	bpl.w	80048c2 <HAL_RCC_ClockConfig+0x2e>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049f0:	68d1      	ldr	r1, [r2, #12]
 80049f2:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 80049f6:	2902      	cmp	r1, #2
 80049f8:	d063      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x22e>
 80049fa:	2903      	cmp	r1, #3
 80049fc:	d02e      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x1c8>
 80049fe:	2901      	cmp	r1, #1
 8004a00:	d050      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x210>
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a02:	68d1      	ldr	r1, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a04:	68d1      	ldr	r1, [r2, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a06:	68d2      	ldr	r2, [r2, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a08:	f04f 0900 	mov.w	r9, #0
 8004a0c:	e78d      	b.n	800492a <HAL_RCC_ClockConfig+0x96>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a0e:	68a1      	ldr	r1, [r4, #8]
 8004a10:	482f      	ldr	r0, [pc, #188]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 8004a12:	6882      	ldr	r2, [r0, #8]
 8004a14:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a18:	428a      	cmp	r2, r1
 8004a1a:	d9a8      	bls.n	800496e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	6882      	ldr	r2, [r0, #8]
 8004a1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a22:	4311      	orrs	r1, r2
 8004a24:	6081      	str	r1, [r0, #8]
 8004a26:	e7a2      	b.n	800496e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a28:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	039a      	lsls	r2, r3, #14
 8004a2e:	f53f af6e 	bmi.w	800490e <HAL_RCC_ClockConfig+0x7a>
 8004a32:	e746      	b.n	80048c2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004a34:	2001      	movs	r0, #1
}
 8004a36:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004a38:	2003      	movs	r0, #3
 8004a3a:	e743      	b.n	80048c4 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a3c:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	055f      	lsls	r7, r3, #21
 8004a42:	f57f af3e 	bpl.w	80048c2 <HAL_RCC_ClockConfig+0x2e>
 8004a46:	e762      	b.n	800490e <HAL_RCC_ClockConfig+0x7a>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a48:	689a      	ldr	r2, [r3, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a4a:	f04f 0980 	mov.w	r9, #128	; 0x80
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a52:	ea42 0209 	orr.w	r2, r2, r9
 8004a56:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	e766      	b.n	800492a <HAL_RCC_ClockConfig+0x96>
  switch (pllsource)
 8004a5c:	4f21      	ldr	r7, [pc, #132]	; (8004ae4 <HAL_RCC_ClockConfig+0x250>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a5e:	481c      	ldr	r0, [pc, #112]	; (8004ad0 <HAL_RCC_ClockConfig+0x23c>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004a60:	4e1c      	ldr	r6, [pc, #112]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a62:	68c2      	ldr	r2, [r0, #12]
 8004a64:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004a68:	1c51      	adds	r1, r2, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a6a:	68c2      	ldr	r2, [r0, #12]
 8004a6c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004a70:	fb07 f202 	mul.w	r2, r7, r2
 8004a74:	fbb2 f2f1 	udiv	r2, r2, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a78:	68c1      	ldr	r1, [r0, #12]
 8004a7a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8004a7e:	3101      	adds	r1, #1
 8004a80:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco / pllr;
 8004a82:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004a86:	42b2      	cmp	r2, r6
 8004a88:	d91d      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x232>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a8a:	6882      	ldr	r2, [r0, #8]
 8004a8c:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8004a90:	d119      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0x232>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a92:	6882      	ldr	r2, [r0, #8]
 8004a94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a9c:	6082      	str	r2, [r0, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a9e:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004aa2:	e742      	b.n	800492a <HAL_RCC_ClockConfig+0x96>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004aa4:	6811      	ldr	r1, [r2, #0]
 8004aa6:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004aa8:	bf54      	ite	pl
 8004aaa:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004aae:	6812      	ldrmi	r2, [r2, #0]
    pllvco = MSIRangeTable[msirange];
 8004ab0:	490d      	ldr	r1, [pc, #52]	; (8004ae8 <HAL_RCC_ClockConfig+0x254>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ab2:	bf54      	ite	pl
 8004ab4:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ab8:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    pllvco = MSIRangeTable[msirange];
 8004abc:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
    break;
 8004ac0:	e7cd      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ca>
    pllvco = HSI_VALUE;
 8004ac2:	4f0a      	ldr	r7, [pc, #40]	; (8004aec <HAL_RCC_ClockConfig+0x258>)
 8004ac4:	e7cb      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ac6:	f04f 0900 	mov.w	r9, #0
 8004aca:	e72e      	b.n	800492a <HAL_RCC_ClockConfig+0x96>
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	04c4b400 	.word	0x04c4b400
 8004ad8:	0801a618 	.word	0x0801a618
 8004adc:	20007800 	.word	0x20007800
 8004ae0:	20007808 	.word	0x20007808
 8004ae4:	007a1200 	.word	0x007a1200
 8004ae8:	0801a630 	.word	0x0801a630
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004af2:	4a06      	ldr	r2, [pc, #24]	; (8004b0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004af4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004af6:	4906      	ldr	r1, [pc, #24]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004af8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004afc:	6808      	ldr	r0, [r1, #0]
 8004afe:	5cd3      	ldrb	r3, [r2, r3]
 8004b00:	f003 031f 	and.w	r3, r3, #31
}
 8004b04:	40d8      	lsrs	r0, r3
 8004b06:	4770      	bx	lr
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	0801a628 	.word	0x0801a628
 8004b10:	20007800 	.word	0x20007800

08004b14 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004b16:	4a06      	ldr	r2, [pc, #24]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b18:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004b1a:	4906      	ldr	r1, [pc, #24]	; (8004b34 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b1c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004b20:	6808      	ldr	r0, [r1, #0]
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	f003 031f 	and.w	r3, r3, #31
}
 8004b28:	40d8      	lsrs	r0, r3
 8004b2a:	4770      	bx	lr
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	0801a628 	.word	0x0801a628
 8004b34:	20007800 	.word	0x20007800

08004b38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b3a:	4b44      	ldr	r3, [pc, #272]	; (8004c4c <RCCEx_PLLSAI1_Config+0x114>)
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	0792      	lsls	r2, r2, #30
{
 8004b40:	4604      	mov	r4, r0
 8004b42:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b44:	d007      	beq.n	8004b56 <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	6802      	ldr	r2, [r0, #0]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d012      	beq.n	8004b78 <RCCEx_PLLSAI1_Config+0x40>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b52:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8004b56:	6800      	ldr	r0, [r0, #0]
 8004b58:	2802      	cmp	r0, #2
 8004b5a:	d04e      	beq.n	8004bfa <RCCEx_PLLSAI1_Config+0xc2>
 8004b5c:	2803      	cmp	r0, #3
 8004b5e:	d045      	beq.n	8004bec <RCCEx_PLLSAI1_Config+0xb4>
 8004b60:	2801      	cmp	r0, #1
 8004b62:	d1f6      	bne.n	8004b52 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	079b      	lsls	r3, r3, #30
 8004b68:	d5f4      	bpl.n	8004b54 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004b6a:	4a38      	ldr	r2, [pc, #224]	; (8004c4c <RCCEx_PLLSAI1_Config+0x114>)
 8004b6c:	68d3      	ldr	r3, [r2, #12]
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	4318      	orrs	r0, r3
 8004b74:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 8004b76:	e001      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0x44>
       ||
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0ea      	beq.n	8004b52 <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b7c:	4d33      	ldr	r5, [pc, #204]	; (8004c4c <RCCEx_PLLSAI1_Config+0x114>)
 8004b7e:	682b      	ldr	r3, [r5, #0]
 8004b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b84:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004b86:	f7fe fffb 	bl	8003b80 <HAL_GetTick>
 8004b8a:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b8c:	e004      	b.n	8004b98 <RCCEx_PLLSAI1_Config+0x60>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b8e:	f7fe fff7 	bl	8003b80 <HAL_GetTick>
 8004b92:	1b83      	subs	r3, r0, r6
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d834      	bhi.n	8004c02 <RCCEx_PLLSAI1_Config+0xca>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	011a      	lsls	r2, r3, #4
 8004b9c:	d4f7      	bmi.n	8004b8e <RCCEx_PLLSAI1_Config+0x56>
      if(Divider == DIVIDER_P_UPDATE)
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	d131      	bne.n	8004c06 <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba2:	68e3      	ldr	r3, [r4, #12]
 8004ba4:	68a1      	ldr	r1, [r4, #8]
 8004ba6:	692a      	ldr	r2, [r5, #16]
 8004ba8:	06db      	lsls	r3, r3, #27
 8004baa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004bae:	4928      	ldr	r1, [pc, #160]	; (8004c50 <RCCEx_PLLSAI1_Config+0x118>)
 8004bb0:	4011      	ands	r1, r2
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	3a01      	subs	r2, #1
 8004bb8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004bbc:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bbe:	4d23      	ldr	r5, [pc, #140]	; (8004c4c <RCCEx_PLLSAI1_Config+0x114>)
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004bc8:	f7fe ffda 	bl	8003b80 <HAL_GetTick>
 8004bcc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bce:	e004      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bd0:	f7fe ffd6 	bl	8003b80 <HAL_GetTick>
 8004bd4:	1b83      	subs	r3, r0, r6
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d813      	bhi.n	8004c02 <RCCEx_PLLSAI1_Config+0xca>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bda:	682b      	ldr	r3, [r5, #0]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	d5f7      	bpl.n	8004bd0 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004be0:	692b      	ldr	r3, [r5, #16]
 8004be2:	69a2      	ldr	r2, [r4, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	2000      	movs	r0, #0
 8004be8:	612b      	str	r3, [r5, #16]
}
 8004bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	0395      	lsls	r5, r2, #14
 8004bf0:	d4bb      	bmi.n	8004b6a <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0359      	lsls	r1, r3, #13
 8004bf6:	d5ac      	bpl.n	8004b52 <RCCEx_PLLSAI1_Config+0x1a>
 8004bf8:	e7b7      	b.n	8004b6a <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	055e      	lsls	r6, r3, #21
 8004bfe:	d5a8      	bpl.n	8004b52 <RCCEx_PLLSAI1_Config+0x1a>
 8004c00:	e7b3      	b.n	8004b6a <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8004c02:	2003      	movs	r0, #3
}
 8004c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c06:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c08:	692a      	ldr	r2, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c0a:	d00f      	beq.n	8004c2c <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0c:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <RCCEx_PLLSAI1_Config+0x11c>)
 8004c0e:	68a1      	ldr	r1, [r4, #8]
 8004c10:	4013      	ands	r3, r2
 8004c12:	6862      	ldr	r2, [r4, #4]
 8004c14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004c1e:	6962      	ldr	r2, [r4, #20]
 8004c20:	0852      	lsrs	r2, r2, #1
 8004c22:	3a01      	subs	r2, #1
 8004c24:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004c28:	612b      	str	r3, [r5, #16]
 8004c2a:	e7c8      	b.n	8004bbe <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <RCCEx_PLLSAI1_Config+0x120>)
 8004c2e:	68a1      	ldr	r1, [r4, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	6862      	ldr	r2, [r4, #4]
 8004c34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c38:	3a01      	subs	r2, #1
 8004c3a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004c3e:	6922      	ldr	r2, [r4, #16]
 8004c40:	0852      	lsrs	r2, r2, #1
 8004c42:	3a01      	subs	r2, #1
 8004c44:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004c48:	612b      	str	r3, [r5, #16]
 8004c4a:	e7b8      	b.n	8004bbe <RCCEx_PLLSAI1_Config+0x86>
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	07ff800f 	.word	0x07ff800f
 8004c54:	f9ff800f 	.word	0xf9ff800f
 8004c58:	ff9f800f 	.word	0xff9f800f

08004c5c <RCCEx_PLLSAI2_Config.constprop.0>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c5c:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	0792      	lsls	r2, r2, #30
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 8004c62:	b570      	push	{r4, r5, r6, lr}
 8004c64:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c66:	d007      	beq.n	8004c78 <RCCEx_PLLSAI2_Config.constprop.0+0x1c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	6802      	ldr	r2, [r0, #0]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d012      	beq.n	8004c9a <RCCEx_PLLSAI2_Config.constprop.0+0x3e>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c74:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
    switch(PllSai2->PLLSAI2Source)
 8004c78:	6800      	ldr	r0, [r0, #0]
 8004c7a:	2802      	cmp	r0, #2
 8004c7c:	d04c      	beq.n	8004d18 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
 8004c7e:	2803      	cmp	r0, #3
 8004c80:	d043      	beq.n	8004d0a <RCCEx_PLLSAI2_Config.constprop.0+0xae>
 8004c82:	2801      	cmp	r0, #1
 8004c84:	d1f6      	bne.n	8004c74 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	079b      	lsls	r3, r3, #30
 8004c8a:	d5f4      	bpl.n	8004c76 <RCCEx_PLLSAI2_Config.constprop.0+0x1a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004c8c:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8004c8e:	68d3      	ldr	r3, [r2, #12]
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	4318      	orrs	r0, r3
 8004c96:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 8004c98:	e001      	b.n	8004c9e <RCCEx_PLLSAI2_Config.constprop.0+0x42>
       ||
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ea      	beq.n	8004c74 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c9e:	4c21      	ldr	r4, [pc, #132]	; (8004d24 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004ca8:	f7fe ff6a 	bl	8003b80 <HAL_GetTick>
 8004cac:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cae:	e004      	b.n	8004cba <RCCEx_PLLSAI2_Config.constprop.0+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cb0:	f7fe ff66 	bl	8003b80 <HAL_GetTick>
 8004cb4:	1b83      	subs	r3, r0, r6
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d832      	bhi.n	8004d20 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	009a      	lsls	r2, r3, #2
 8004cbe:	d4f7      	bmi.n	8004cb0 <RCCEx_PLLSAI2_Config.constprop.0+0x54>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cc0:	68eb      	ldr	r3, [r5, #12]
 8004cc2:	68a9      	ldr	r1, [r5, #8]
 8004cc4:	6962      	ldr	r2, [r4, #20]
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cc6:	4e17      	ldr	r6, [pc, #92]	; (8004d24 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cc8:	06db      	lsls	r3, r3, #27
 8004cca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004cce:	4916      	ldr	r1, [pc, #88]	; (8004d28 <RCCEx_PLLSAI2_Config.constprop.0+0xcc>)
 8004cd0:	4011      	ands	r1, r2
 8004cd2:	686a      	ldr	r2, [r5, #4]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004cdc:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8004ce6:	f7fe ff4b 	bl	8003b80 <HAL_GetTick>
 8004cea:	4604      	mov	r4, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cec:	e004      	b.n	8004cf8 <RCCEx_PLLSAI2_Config.constprop.0+0x9c>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cee:	f7fe ff47 	bl	8003b80 <HAL_GetTick>
 8004cf2:	1b03      	subs	r3, r0, r4
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d813      	bhi.n	8004d20 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cf8:	6833      	ldr	r3, [r6, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	d5f7      	bpl.n	8004cee <RCCEx_PLLSAI2_Config.constprop.0+0x92>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cfe:	6973      	ldr	r3, [r6, #20]
 8004d00:	69aa      	ldr	r2, [r5, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	2000      	movs	r0, #0
 8004d06:	6173      	str	r3, [r6, #20]
}
 8004d08:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	0394      	lsls	r4, r2, #14
 8004d0e:	d4bd      	bmi.n	8004c8c <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	0359      	lsls	r1, r3, #13
 8004d14:	d5ae      	bpl.n	8004c74 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8004d16:	e7b9      	b.n	8004c8c <RCCEx_PLLSAI2_Config.constprop.0+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	055e      	lsls	r6, r3, #21
 8004d1c:	d5aa      	bpl.n	8004c74 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8004d1e:	e7b5      	b.n	8004c8c <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        status = HAL_TIMEOUT;
 8004d20:	2003      	movs	r0, #3
}
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	07ff800f 	.word	0x07ff800f

08004d2c <HAL_RCCEx_PeriphCLKConfig>:
{
 8004d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d30:	6803      	ldr	r3, [r0, #0]
 8004d32:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 8004d36:	b083      	sub	sp, #12
 8004d38:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d3a:	d022      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d3c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8004d3e:	2940      	cmp	r1, #64	; 0x40
 8004d40:	f000 8214 	beq.w	800516c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004d44:	d80f      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004d46:	2900      	cmp	r1, #0
 8004d48:	f000 81d4 	beq.w	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8004d4c:	2920      	cmp	r1, #32
 8004d4e:	f040 8229 	bne.w	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d52:	3020      	adds	r0, #32
 8004d54:	f7ff ff82 	bl	8004c5c <RCCEx_PLLSAI2_Config.constprop.0>
 8004d58:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004d5a:	2e00      	cmp	r6, #0
 8004d5c:	f040 81fd 	bne.w	800515a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d60:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	e004      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d66:	2960      	cmp	r1, #96	; 0x60
 8004d68:	d002      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d6a:	2980      	cmp	r1, #128	; 0x80
 8004d6c:	f040 821a 	bne.w	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d70:	48a9      	ldr	r0, [pc, #676]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d72:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8004d76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d7a:	4311      	orrs	r1, r2
 8004d7c:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 8004d80:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d82:	04da      	lsls	r2, r3, #19
 8004d84:	f140 8135 	bpl.w	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004d88:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004d8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004d8e:	f000 81e6 	beq.w	800515e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004d92:	f200 8120 	bhi.w	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004d96:	2900      	cmp	r1, #0
 8004d98:	f000 81b4 	beq.w	8005104 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8004d9c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004da0:	f040 8204 	bne.w	80051ac <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004da4:	f104 0020 	add.w	r0, r4, #32
 8004da8:	f7ff ff58 	bl	8004c5c <RCCEx_PLLSAI2_Config.constprop.0>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dac:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dae:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8004db0:	f1b8 0f00 	cmp.w	r8, #0
 8004db4:	f040 811b 	bne.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004db8:	4997      	ldr	r1, [pc, #604]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004dba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004dbc:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004dc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dc4:	4302      	orrs	r2, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dc6:	039f      	lsls	r7, r3, #14
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dc8:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dcc:	f100 8115 	bmi.w	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd0:	07d8      	lsls	r0, r3, #31
 8004dd2:	d508      	bpl.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd4:	4990      	ldr	r1, [pc, #576]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004dd6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004dd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ddc:	f022 0203 	bic.w	r2, r2, #3
 8004de0:	4302      	orrs	r2, r0
 8004de2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004de6:	0799      	lsls	r1, r3, #30
 8004de8:	d508      	bpl.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dea:	498b      	ldr	r1, [pc, #556]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004dec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004dee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004df2:	f022 020c 	bic.w	r2, r2, #12
 8004df6:	4302      	orrs	r2, r0
 8004df8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dfc:	075a      	lsls	r2, r3, #29
 8004dfe:	d508      	bpl.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e00:	4985      	ldr	r1, [pc, #532]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e02:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004e04:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e08:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004e0c:	4302      	orrs	r2, r0
 8004e0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e12:	071f      	lsls	r7, r3, #28
 8004e14:	d508      	bpl.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e16:	4980      	ldr	r1, [pc, #512]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004e1a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e1e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e22:	4302      	orrs	r2, r0
 8004e24:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e28:	06dd      	lsls	r5, r3, #27
 8004e2a:	d508      	bpl.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e2c:	497a      	ldr	r1, [pc, #488]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e2e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004e30:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e38:	4302      	orrs	r2, r0
 8004e3a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e3e:	0698      	lsls	r0, r3, #26
 8004e40:	d508      	bpl.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e42:	4975      	ldr	r1, [pc, #468]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e44:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004e46:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e4e:	4302      	orrs	r2, r0
 8004e50:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e54:	0599      	lsls	r1, r3, #22
 8004e56:	d508      	bpl.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e58:	496f      	ldr	r1, [pc, #444]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e5a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004e5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e60:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004e64:	4302      	orrs	r2, r0
 8004e66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e6a:	055a      	lsls	r2, r3, #21
 8004e6c:	d508      	bpl.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e6e:	496a      	ldr	r1, [pc, #424]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e70:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004e72:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e76:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004e7a:	4302      	orrs	r2, r0
 8004e7c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e80:	065f      	lsls	r7, r3, #25
 8004e82:	d508      	bpl.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e84:	4964      	ldr	r1, [pc, #400]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e8c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004e90:	4302      	orrs	r2, r0
 8004e92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e96:	061d      	lsls	r5, r3, #24
 8004e98:	d508      	bpl.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e9a:	495f      	ldr	r1, [pc, #380]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ea2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004ea6:	4302      	orrs	r2, r0
 8004ea8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eac:	05d8      	lsls	r0, r3, #23
 8004eae:	d508      	bpl.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eb0:	4959      	ldr	r1, [pc, #356]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004eb2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004eb4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004eb8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004ebc:	4302      	orrs	r2, r0
 8004ebe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ec2:	02d9      	lsls	r1, r3, #11
 8004ec4:	d508      	bpl.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ec6:	4954      	ldr	r1, [pc, #336]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ec8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004eca:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004ece:	f022 0203 	bic.w	r2, r2, #3
 8004ed2:	4302      	orrs	r2, r0
 8004ed4:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ed8:	049a      	lsls	r2, r3, #18
 8004eda:	d510      	bpl.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004edc:	494e      	ldr	r1, [pc, #312]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ede:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004ee0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ee4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004ee8:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004eea:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ef2:	f000 8115 	beq.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ef6:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004efa:	f000 813d 	beq.w	8005178 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004efe:	031f      	lsls	r7, r3, #12
 8004f00:	d51a      	bpl.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f02:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004f04:	4a44      	ldr	r2, [pc, #272]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f06:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004f0a:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8004f0e:	f000 810c 	beq.w	800512a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8004f12:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004f16:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 8004f1a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8004f1e:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8004f22:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f24:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f28:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f2c:	f040 80d2 	bne.w	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f30:	68d1      	ldr	r1, [r2, #12]
 8004f32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f36:	60d1      	str	r1, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f38:	035d      	lsls	r5, r3, #13
 8004f3a:	d510      	bpl.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f3c:	4936      	ldr	r1, [pc, #216]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f3e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004f40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f44:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004f48:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f4a:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f52:	f000 80f3 	beq.w	800513c <HAL_RCCEx_PeriphCLKConfig+0x410>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f56:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004f5a:	f000 8117 	beq.w	800518c <HAL_RCCEx_PeriphCLKConfig+0x460>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f5e:	0458      	lsls	r0, r3, #17
 8004f60:	d50d      	bpl.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f62:	482d      	ldr	r0, [pc, #180]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f64:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004f68:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004f6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f70:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f72:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f76:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f7a:	f000 80e4 	beq.w	8005146 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f7e:	03d9      	lsls	r1, r3, #15
 8004f80:	d509      	bpl.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f82:	4925      	ldr	r1, [pc, #148]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f84:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004f88:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004f8c:	f022 0204 	bic.w	r2, r2, #4
 8004f90:	4302      	orrs	r2, r0
 8004f92:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f96:	029a      	lsls	r2, r3, #10
 8004f98:	d509      	bpl.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f9a:	491f      	ldr	r1, [pc, #124]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f9c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004fa0:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004fa4:	f022 0218 	bic.w	r2, r2, #24
 8004fa8:	4302      	orrs	r2, r0
 8004faa:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fae:	01db      	lsls	r3, r3, #7
 8004fb0:	d50d      	bpl.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fb2:	4a19      	ldr	r2, [pc, #100]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004fb4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004fb8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004fbc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004fc0:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004fc2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fc6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004fca:	f000 80a1 	beq.w	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
}
 8004fce:	4630      	mov	r0, r6
 8004fd0:	b003      	add	sp, #12
 8004fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8004fd6:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004fda:	d003      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004fdc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004fe0:	f040 80e4 	bne.w	80051ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004fe4:	46b0      	mov	r8, r6
    if(ret == HAL_OK)
 8004fe6:	f1b8 0f00 	cmp.w	r8, #0
 8004fea:	f43f aee5 	beq.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004fee:	4646      	mov	r6, r8
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004ff2:	46b0      	mov	r8, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ff4:	039f      	lsls	r7, r3, #14
 8004ff6:	f57f aeeb 	bpl.w	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ffc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ffe:	00d5      	lsls	r5, r2, #3
 8005000:	d55c      	bpl.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x390>
    FlagStatus       pwrclkchanged = RESET;
 8005002:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005006:	4d05      	ldr	r5, [pc, #20]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005010:	f7fe fdb6 	bl	8003b80 <HAL_GetTick>
 8005014:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005018:	40021000 	.word	0x40021000
 800501c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005020:	f7fe fdae 	bl	8003b80 <HAL_GetTick>
 8005024:	1bc3      	subs	r3, r0, r7
 8005026:	2b02      	cmp	r3, #2
 8005028:	d862      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	05d8      	lsls	r0, r3, #23
 800502e:	d5f7      	bpl.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    if(ret == HAL_OK)
 8005030:	f1b8 0f00 	cmp.w	r8, #0
 8005034:	f040 80b4 	bne.w	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005038:	4d5e      	ldr	r5, [pc, #376]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800503e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005042:	d027      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005044:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005048:	429a      	cmp	r2, r3
 800504a:	d025      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800504c:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8005050:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005058:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800505c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005064:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005068:	f421 7340 	bic.w	r3, r1, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800506c:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800506e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005072:	f140 8099 	bpl.w	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        tickstart = HAL_GetTick();
 8005076:	f7fe fd83 	bl	8003b80 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800507e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005080:	e004      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x360>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fe fd7d 	bl	8003b80 <HAL_GetTick>
 8005086:	1bc0      	subs	r0, r0, r7
 8005088:	4540      	cmp	r0, r8
 800508a:	d831      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005090:	079b      	lsls	r3, r3, #30
 8005092:	d5f6      	bpl.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x356>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005094:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005098:	4946      	ldr	r1, [pc, #280]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800509a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800509e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 80050a8:	f1b9 0f00 	cmp.w	r9, #0
 80050ac:	d004      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ae:	4a41      	ldr	r2, [pc, #260]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	e689      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80050bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80050c2:	659a      	str	r2, [r3, #88]	; 0x58
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80050ce:	f04f 0901 	mov.w	r9, #1
 80050d2:	e798      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050d4:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80050d8:	f47f af2e 	bne.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050dc:	2101      	movs	r1, #1
 80050de:	1d20      	adds	r0, r4, #4
 80050e0:	f7ff fd2a 	bl	8004b38 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050e4:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f43f af26 	beq.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050ec:	4606      	mov	r6, r0
 80050ee:	e723      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        ret = HAL_TIMEOUT;
 80050f0:	2603      	movs	r6, #3
 80050f2:	e7d9      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050f4:	3004      	adds	r0, #4
 80050f6:	f7ff fd1f 	bl	8004b38 <RCCEx_PLLSAI1_Config>
 80050fa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	f43f ae2f 	beq.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005102:	e02a      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005104:	1d20      	adds	r0, r4, #4
 8005106:	f7ff fd17 	bl	8004b38 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800510a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800510c:	4680      	mov	r8, r0
      break;
 800510e:	e64f      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005110:	68d3      	ldr	r3, [r2, #12]
}
 8005112:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005118:	60d3      	str	r3, [r2, #12]
}
 800511a:	b003      	add	sp, #12
 800511c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005120:	68ca      	ldr	r2, [r1, #12]
 8005122:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005126:	60ca      	str	r2, [r1, #12]
 8005128:	e6e9      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800512a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800512e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005132:	68d1      	ldr	r1, [r2, #12]
 8005134:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005138:	60d1      	str	r1, [r2, #12]
 800513a:	e6fd      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513c:	68ca      	ldr	r2, [r1, #12]
 800513e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005142:	60ca      	str	r2, [r1, #12]
 8005144:	e70b      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x232>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005146:	2102      	movs	r1, #2
 8005148:	1d20      	adds	r0, r4, #4
 800514a:	f7ff fcf5 	bl	8004b38 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800514e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005150:	2800      	cmp	r0, #0
 8005152:	f43f af14 	beq.w	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x252>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005156:	4606      	mov	r6, r0
 8005158:	e711      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x252>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	e611      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800515e:	4915      	ldr	r1, [pc, #84]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005160:	68ca      	ldr	r2, [r1, #12]
 8005162:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005166:	60ca      	str	r2, [r1, #12]
      break;
 8005168:	46b0      	mov	r8, r6
 800516a:	e621      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800516c:	4811      	ldr	r0, [pc, #68]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516e:	68c2      	ldr	r2, [r0, #12]
 8005170:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005174:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8005176:	e5fb      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005178:	2101      	movs	r1, #1
 800517a:	1d20      	adds	r0, r4, #4
 800517c:	f7ff fcdc 	bl	8004b38 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005180:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8005182:	2800      	cmp	r0, #0
 8005184:	f43f aebb 	beq.w	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005188:	4606      	mov	r6, r0
 800518a:	e6b8      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800518c:	2101      	movs	r1, #1
 800518e:	1d20      	adds	r0, r4, #4
 8005190:	f7ff fcd2 	bl	8004b38 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005194:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005196:	2800      	cmp	r0, #0
 8005198:	f43f aee1 	beq.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x232>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800519c:	4606      	mov	r6, r0
 800519e:	e6de      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x232>
 80051a0:	4646      	mov	r6, r8
 80051a2:	e781      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80051a4:	2601      	movs	r6, #1
 80051a6:	e5ec      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051a8:	4613      	mov	r3, r2
 80051aa:	e775      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80051ac:	2601      	movs	r6, #1
 80051ae:	46b0      	mov	r8, r6
 80051b0:	e720      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000

080051b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80051bc:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051be:	6882      	ldr	r2, [r0, #8]
 80051c0:	6900      	ldr	r0, [r0, #16]
 80051c2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c6:	4302      	orrs	r2, r0
 80051c8:	430a      	orrs	r2, r1
 80051ca:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051cc:	49b3      	ldr	r1, [pc, #716]	; (800549c <UART_SetConfig+0x2e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ce:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d0:	4029      	ands	r1, r5
 80051d2:	430a      	orrs	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68e1      	ldr	r1, [r4, #12]
 80051da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80051de:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051e0:	49af      	ldr	r1, [pc, #700]	; (80054a0 <UART_SetConfig+0x2e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051e4:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051e6:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e8:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051ea:	f000 8081 	beq.w	80052f0 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 80051ee:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051f0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80051f4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80051f8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051fa:	430a      	orrs	r2, r1
 80051fc:	609a      	str	r2, [r3, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005202:	f022 020f 	bic.w	r2, r2, #15
 8005206:	430a      	orrs	r2, r1
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800520a:	4aa6      	ldr	r2, [pc, #664]	; (80054a4 <UART_SetConfig+0x2ec>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d027      	beq.n	8005260 <UART_SetConfig+0xa8>
 8005210:	4aa5      	ldr	r2, [pc, #660]	; (80054a8 <UART_SetConfig+0x2f0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d04b      	beq.n	80052ae <UART_SetConfig+0xf6>
 8005216:	4aa5      	ldr	r2, [pc, #660]	; (80054ac <UART_SetConfig+0x2f4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	f000 8113 	beq.w	8005444 <UART_SetConfig+0x28c>
 800521e:	4aa4      	ldr	r2, [pc, #656]	; (80054b0 <UART_SetConfig+0x2f8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	f000 80ba 	beq.w	800539a <UART_SetConfig+0x1e2>
 8005226:	4aa3      	ldr	r2, [pc, #652]	; (80054b4 <UART_SetConfig+0x2fc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d111      	bne.n	8005250 <UART_SetConfig+0x98>
 800522c:	4ba2      	ldr	r3, [pc, #648]	; (80054b8 <UART_SetConfig+0x300>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523a:	f000 8128 	beq.w	800548e <UART_SetConfig+0x2d6>
 800523e:	f200 80d7 	bhi.w	80053f0 <UART_SetConfig+0x238>
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 80db 	beq.w	80053fe <UART_SetConfig+0x246>
 8005248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524c:	f000 80b1 	beq.w	80053b2 <UART_SetConfig+0x1fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8005250:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005252:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005254:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8005258:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800525c:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 800525e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005260:	4b95      	ldr	r3, [pc, #596]	; (80054b8 <UART_SetConfig+0x300>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	3b01      	subs	r3, #1
 800526c:	2b02      	cmp	r3, #2
 800526e:	f240 808e 	bls.w	800538e <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005272:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005276:	f000 8105 	beq.w	8005484 <UART_SetConfig+0x2cc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800527a:	f7ff fc4b 	bl	8004b14 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800527e:	2800      	cmp	r0, #0
 8005280:	f000 80de 	beq.w	8005440 <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005284:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005286:	6862      	ldr	r2, [r4, #4]
 8005288:	4b8c      	ldr	r3, [pc, #560]	; (80054bc <UART_SetConfig+0x304>)
 800528a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800528e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005292:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005296:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800529a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529e:	f1a3 0210 	sub.w	r2, r3, #16
 80052a2:	428a      	cmp	r2, r1
 80052a4:	d8d4      	bhi.n	8005250 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052a6:	6822      	ldr	r2, [r4, #0]
 80052a8:	2000      	movs	r0, #0
 80052aa:	60d3      	str	r3, [r2, #12]
 80052ac:	e7d1      	b.n	8005252 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ae:	4b82      	ldr	r3, [pc, #520]	; (80054b8 <UART_SetConfig+0x300>)
 80052b0:	4a83      	ldr	r2, [pc, #524]	; (80054c0 <UART_SetConfig+0x308>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80052c0:	d07d      	beq.n	80053be <UART_SetConfig+0x206>
    switch (clocksource)
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d8c4      	bhi.n	8005250 <UART_SetConfig+0x98>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0x114>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080053f9 	.word	0x080053f9
 80052d0:	0800527b 	.word	0x0800527b
 80052d4:	0800547b 	.word	0x0800547b
 80052d8:	08005251 	.word	0x08005251
 80052dc:	080053b9 	.word	0x080053b9
 80052e0:	08005251 	.word	0x08005251
 80052e4:	08005251 	.word	0x08005251
 80052e8:	08005251 	.word	0x08005251
 80052ec:	0800546b 	.word	0x0800546b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052f0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80052f4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005300:	486d      	ldr	r0, [pc, #436]	; (80054b8 <UART_SetConfig+0x300>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005302:	f022 020f 	bic.w	r2, r2, #15
 8005306:	430a      	orrs	r2, r1
 8005308:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800530a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800530e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005316:	f000 80ae 	beq.w	8005476 <UART_SetConfig+0x2be>
 800531a:	d80b      	bhi.n	8005334 <UART_SetConfig+0x17c>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d039      	beq.n	8005394 <UART_SetConfig+0x1dc>
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d194      	bne.n	8005250 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 8005326:	f7fe ff49 	bl	80041bc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800532a:	2800      	cmp	r0, #0
 800532c:	f000 8088 	beq.w	8005440 <UART_SetConfig+0x288>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005330:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005332:	e004      	b.n	800533e <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005338:	d18a      	bne.n	8005250 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 800533a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800533e:	4b5f      	ldr	r3, [pc, #380]	; (80054bc <UART_SetConfig+0x304>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005340:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005342:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8005346:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800534a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800534e:	4299      	cmp	r1, r3
 8005350:	f63f af7e 	bhi.w	8005250 <UART_SetConfig+0x98>
 8005354:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005358:	f63f af7a 	bhi.w	8005250 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800535c:	2300      	movs	r3, #0
 800535e:	4619      	mov	r1, r3
 8005360:	f7fb f982 	bl	8000668 <__aeabi_uldivmod>
 8005364:	0209      	lsls	r1, r1, #8
 8005366:	0203      	lsls	r3, r0, #8
 8005368:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800536c:	0868      	lsrs	r0, r5, #1
 800536e:	1818      	adds	r0, r3, r0
 8005370:	462a      	mov	r2, r5
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	f141 0100 	adc.w	r1, r1, #0
 800537a:	f7fb f975 	bl	8000668 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800537e:	4a51      	ldr	r2, [pc, #324]	; (80054c4 <UART_SetConfig+0x30c>)
 8005380:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005384:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005386:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005388:	f63f af62 	bhi.w	8005250 <UART_SetConfig+0x98>
 800538c:	e78b      	b.n	80052a6 <UART_SetConfig+0xee>
 800538e:	4a4e      	ldr	r2, [pc, #312]	; (80054c8 <UART_SetConfig+0x310>)
 8005390:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005392:	e793      	b.n	80052bc <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005394:	f7ff fbac 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
        break;
 8005398:	e7c7      	b.n	800532a <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800539a:	4b47      	ldr	r3, [pc, #284]	; (80054b8 <UART_SetConfig+0x300>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d072      	beq.n	800548e <UART_SetConfig+0x2d6>
 80053a8:	d862      	bhi.n	8005470 <UART_SetConfig+0x2b8>
 80053aa:	b343      	cbz	r3, 80053fe <UART_SetConfig+0x246>
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	f47f af4f 	bne.w	8005250 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80053b6:	d062      	beq.n	800547e <UART_SetConfig+0x2c6>
        pclk = HAL_RCC_GetSysClockFreq();
 80053b8:	f7fe ff00 	bl	80041bc <HAL_RCC_GetSysClockFreq>
        break;
 80053bc:	e75f      	b.n	800527e <UART_SetConfig+0xc6>
    switch (clocksource)
 80053be:	2b08      	cmp	r3, #8
 80053c0:	f63f af46 	bhi.w	8005250 <UART_SetConfig+0x98>
 80053c4:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <UART_SetConfig+0x214>)
 80053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	08005405 	.word	0x08005405
 80053d0:	08005485 	.word	0x08005485
 80053d4:	0800548b 	.word	0x0800548b
 80053d8:	08005251 	.word	0x08005251
 80053dc:	0800547f 	.word	0x0800547f
 80053e0:	08005251 	.word	0x08005251
 80053e4:	08005251 	.word	0x08005251
 80053e8:	08005251 	.word	0x08005251
 80053ec:	0800540d 	.word	0x0800540d
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f4:	d036      	beq.n	8005464 <UART_SetConfig+0x2ac>
 80053f6:	e72b      	b.n	8005250 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f8:	f7ff fb7a 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
        break;
 80053fc:	e73f      	b.n	800527e <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005402:	d1f9      	bne.n	80053f8 <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005404:	f7ff fb74 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005408:	b1d0      	cbz	r0, 8005440 <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800540a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800540c:	6862      	ldr	r2, [r4, #4]
 800540e:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <UART_SetConfig+0x304>)
 8005410:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8005414:	fbb0 f0f1 	udiv	r0, r0, r1
 8005418:	0853      	lsrs	r3, r2, #1
 800541a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800541e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005422:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005426:	f1a0 0210 	sub.w	r2, r0, #16
 800542a:	429a      	cmp	r2, r3
 800542c:	f63f af10 	bhi.w	8005250 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005430:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8005434:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005436:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005438:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800543c:	4318      	orrs	r0, r3
 800543e:	60d0      	str	r0, [r2, #12]
 8005440:	2000      	movs	r0, #0
 8005442:	e706      	b.n	8005252 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <UART_SetConfig+0x300>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800544e:	2b20      	cmp	r3, #32
 8005450:	d01d      	beq.n	800548e <UART_SetConfig+0x2d6>
 8005452:	d804      	bhi.n	800545e <UART_SetConfig+0x2a6>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0d2      	beq.n	80053fe <UART_SetConfig+0x246>
 8005458:	2b10      	cmp	r3, #16
 800545a:	d0aa      	beq.n	80053b2 <UART_SetConfig+0x1fa>
 800545c:	e6f8      	b.n	8005250 <UART_SetConfig+0x98>
 800545e:	2b30      	cmp	r3, #48	; 0x30
 8005460:	f47f aef6 	bne.w	8005250 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005464:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005468:	d0d0      	beq.n	800540c <UART_SetConfig+0x254>
    switch (clocksource)
 800546a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800546e:	e70a      	b.n	8005286 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005470:	2bc0      	cmp	r3, #192	; 0xc0
 8005472:	d0f7      	beq.n	8005464 <UART_SetConfig+0x2ac>
 8005474:	e6ec      	b.n	8005250 <UART_SetConfig+0x98>
 8005476:	4815      	ldr	r0, [pc, #84]	; (80054cc <UART_SetConfig+0x314>)
 8005478:	e761      	b.n	800533e <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 800547a:	4814      	ldr	r0, [pc, #80]	; (80054cc <UART_SetConfig+0x314>)
 800547c:	e703      	b.n	8005286 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800547e:	f7fe fe9d 	bl	80041bc <HAL_RCC_GetSysClockFreq>
        break;
 8005482:	e7c1      	b.n	8005408 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005484:	f7ff fb46 	bl	8004b14 <HAL_RCC_GetPCLK2Freq>
        break;
 8005488:	e7be      	b.n	8005408 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 800548a:	4810      	ldr	r0, [pc, #64]	; (80054cc <UART_SetConfig+0x314>)
 800548c:	e7be      	b.n	800540c <UART_SetConfig+0x254>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8005492:	480e      	ldr	r0, [pc, #56]	; (80054cc <UART_SetConfig+0x314>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005494:	f47f aef7 	bne.w	8005286 <UART_SetConfig+0xce>
 8005498:	e7b8      	b.n	800540c <UART_SetConfig+0x254>
 800549a:	bf00      	nop
 800549c:	cfff69f3 	.word	0xcfff69f3
 80054a0:	40008000 	.word	0x40008000
 80054a4:	40013800 	.word	0x40013800
 80054a8:	40004400 	.word	0x40004400
 80054ac:	40004800 	.word	0x40004800
 80054b0:	40004c00 	.word	0x40004c00
 80054b4:	40005000 	.word	0x40005000
 80054b8:	40021000 	.word	0x40021000
 80054bc:	0801a674 	.word	0x0801a674
 80054c0:	0801a664 	.word	0x0801a664
 80054c4:	000ffcff 	.word	0x000ffcff
 80054c8:	0801a660 	.word	0x0801a660
 80054cc:	00f42400 	.word	0x00f42400

080054d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80054d2:	07da      	lsls	r2, r3, #31
{
 80054d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d6:	d506      	bpl.n	80054e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d8:	6801      	ldr	r1, [r0, #0]
 80054da:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80054dc:	684a      	ldr	r2, [r1, #4]
 80054de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80054e2:	4322      	orrs	r2, r4
 80054e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054e6:	079c      	lsls	r4, r3, #30
 80054e8:	d506      	bpl.n	80054f8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ea:	6801      	ldr	r1, [r0, #0]
 80054ec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80054ee:	684a      	ldr	r2, [r1, #4]
 80054f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054f4:	4322      	orrs	r2, r4
 80054f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054f8:	0759      	lsls	r1, r3, #29
 80054fa:	d506      	bpl.n	800550a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054fc:	6801      	ldr	r1, [r0, #0]
 80054fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005500:	684a      	ldr	r2, [r1, #4]
 8005502:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005506:	4322      	orrs	r2, r4
 8005508:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800550a:	071a      	lsls	r2, r3, #28
 800550c:	d506      	bpl.n	800551c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800550e:	6801      	ldr	r1, [r0, #0]
 8005510:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005512:	684a      	ldr	r2, [r1, #4]
 8005514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005518:	4322      	orrs	r2, r4
 800551a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800551c:	06dc      	lsls	r4, r3, #27
 800551e:	d506      	bpl.n	800552e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005520:	6801      	ldr	r1, [r0, #0]
 8005522:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005524:	688a      	ldr	r2, [r1, #8]
 8005526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800552a:	4322      	orrs	r2, r4
 800552c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800552e:	0699      	lsls	r1, r3, #26
 8005530:	d506      	bpl.n	8005540 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005532:	6801      	ldr	r1, [r0, #0]
 8005534:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005536:	688a      	ldr	r2, [r1, #8]
 8005538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800553c:	4322      	orrs	r2, r4
 800553e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005540:	065a      	lsls	r2, r3, #25
 8005542:	d509      	bpl.n	8005558 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005544:	6801      	ldr	r1, [r0, #0]
 8005546:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005548:	684a      	ldr	r2, [r1, #4]
 800554a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800554e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005550:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005554:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005556:	d00b      	beq.n	8005570 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	d506      	bpl.n	800556a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555c:	6802      	ldr	r2, [r0, #0]
 800555e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005560:	6853      	ldr	r3, [r2, #4]
 8005562:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005566:	430b      	orrs	r3, r1
 8005568:	6053      	str	r3, [r2, #4]
  }
}
 800556a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800556e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005570:	684a      	ldr	r2, [r1, #4]
 8005572:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005574:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005578:	4322      	orrs	r2, r4
 800557a:	604a      	str	r2, [r1, #4]
 800557c:	e7ec      	b.n	8005558 <UART_AdvFeatureConfig+0x88>
 800557e:	bf00      	nop

08005580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005584:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005588:	6804      	ldr	r4, [r0, #0]
{
 800558a:	4607      	mov	r7, r0
 800558c:	460e      	mov	r6, r1
 800558e:	4615      	mov	r5, r2
 8005590:	4699      	mov	r9, r3
 8005592:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005596:	d10a      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005598:	69e3      	ldr	r3, [r4, #28]
 800559a:	ea36 0303 	bics.w	r3, r6, r3
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	429d      	cmp	r5, r3
 80055a6:	d0f7      	beq.n	8005598 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80055a8:	2000      	movs	r0, #0
}
 80055aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ae:	69e3      	ldr	r3, [r4, #28]
 80055b0:	ea36 0303 	bics.w	r3, r6, r3
 80055b4:	bf0c      	ite	eq
 80055b6:	2301      	moveq	r3, #1
 80055b8:	2300      	movne	r3, #0
 80055ba:	42ab      	cmp	r3, r5
 80055bc:	d1f4      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fe fadf 	bl	8003b80 <HAL_GetTick>
 80055c2:	eba0 0009 	sub.w	r0, r0, r9
 80055c6:	4540      	cmp	r0, r8
 80055c8:	d833      	bhi.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055ca:	f1b8 0f00 	cmp.w	r8, #0
 80055ce:	d030      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055d0:	683c      	ldr	r4, [r7, #0]
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	0759      	lsls	r1, r3, #29
 80055d6:	4622      	mov	r2, r4
 80055d8:	d5db      	bpl.n	8005592 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055da:	69e3      	ldr	r3, [r4, #28]
 80055dc:	051b      	lsls	r3, r3, #20
 80055de:	d5d8      	bpl.n	8005592 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055e4:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	e844 3100 	strex	r1, r3, [r4]
 80055f2:	b139      	cbz	r1, 8005604 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	e852 3f00 	ldrex	r3, [r2]
 80055f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	e842 3100 	strex	r1, r3, [r2]
 8005600:	2900      	cmp	r1, #0
 8005602:	d1f7      	bne.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	f102 0308 	add.w	r3, r2, #8
 8005608:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	f102 0008 	add.w	r0, r2, #8
 8005614:	e840 3100 	strex	r1, r3, [r0]
 8005618:	2900      	cmp	r1, #0
 800561a:	d1f3      	bne.n	8005604 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800561c:	2320      	movs	r3, #32
 800561e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8005622:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800562a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800562c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8005630:	e7bb      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x2a>
 8005632:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	e842 3100 	strex	r1, r3, [r2]
 8005640:	2900      	cmp	r1, #0
 8005642:	d1f7      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	f102 0308 	add.w	r3, r2, #8
 8005648:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	f102 0008 	add.w	r0, r2, #8
 8005654:	e840 3100 	strex	r1, r3, [r0]
 8005658:	2900      	cmp	r1, #0
 800565a:	d1f3      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800565c:	2320      	movs	r3, #32
 800565e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8005662:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800566a:	2003      	movs	r0, #3
 800566c:	e79d      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x2a>
 800566e:	bf00      	nop

08005670 <HAL_UART_Transmit>:
{
 8005670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005674:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005676:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800567a:	2820      	cmp	r0, #32
{
 800567c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800567e:	f040 8090 	bne.w	80057a2 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8005682:	4689      	mov	r9, r1
 8005684:	2900      	cmp	r1, #0
 8005686:	d048      	beq.n	800571a <HAL_UART_Transmit+0xaa>
 8005688:	4614      	mov	r4, r2
 800568a:	2a00      	cmp	r2, #0
 800568c:	d045      	beq.n	800571a <HAL_UART_Transmit+0xaa>
 800568e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8005690:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8005694:	2b01      	cmp	r3, #1
 8005696:	f000 8084 	beq.w	80057a2 <HAL_UART_Transmit+0x132>
 800569a:	2301      	movs	r3, #1
 800569c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a6:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056aa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 80056ae:	f7fe fa67 	bl	8003b80 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b2:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80056b4:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80056bc:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 80056c0:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c2:	d072      	beq.n	80057aa <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 80056c4:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 80056c8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80056ca:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80056cc:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80056d0:	b1b3      	cbz	r3, 8005700 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d2:	682c      	ldr	r4, [r5, #0]
 80056d4:	1c71      	adds	r1, r6, #1
 80056d6:	d124      	bne.n	8005722 <HAL_UART_Transmit+0xb2>
 80056d8:	69e2      	ldr	r2, [r4, #28]
 80056da:	0612      	lsls	r2, r2, #24
 80056dc:	d5fc      	bpl.n	80056d8 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 80056de:	f1b9 0f00 	cmp.w	r9, #0
 80056e2:	d059      	beq.n	8005798 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80056e8:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80056ea:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056f6:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e9      	bne.n	80056d4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005700:	9600      	str	r6, [sp, #0]
 8005702:	463b      	mov	r3, r7
 8005704:	2200      	movs	r2, #0
 8005706:	2140      	movs	r1, #64	; 0x40
 8005708:	4628      	mov	r0, r5
 800570a:	f7ff ff39 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 800570e:	2800      	cmp	r0, #0
 8005710:	d171      	bne.n	80057f6 <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8005712:	2320      	movs	r3, #32
 8005714:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8005718:	e000      	b.n	800571c <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800571a:	2001      	movs	r0, #1
}
 800571c:	b003      	add	sp, #12
 800571e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005722:	69e3      	ldr	r3, [r4, #28]
 8005724:	061b      	lsls	r3, r3, #24
 8005726:	d4da      	bmi.n	80056de <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005728:	f7fe fa2a 	bl	8003b80 <HAL_GetTick>
 800572c:	1bc0      	subs	r0, r0, r7
 800572e:	4286      	cmp	r6, r0
 8005730:	d341      	bcc.n	80057b6 <HAL_UART_Transmit+0x146>
 8005732:	2e00      	cmp	r6, #0
 8005734:	d03f      	beq.n	80057b6 <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005736:	682c      	ldr	r4, [r5, #0]
 8005738:	6822      	ldr	r2, [r4, #0]
 800573a:	0752      	lsls	r2, r2, #29
 800573c:	4623      	mov	r3, r4
 800573e:	d5c9      	bpl.n	80056d4 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005740:	69e2      	ldr	r2, [r4, #28]
 8005742:	0510      	lsls	r0, r2, #20
 8005744:	d5c6      	bpl.n	80056d4 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800574a:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	e844 2100 	strex	r1, r2, [r4]
 8005758:	b139      	cbz	r1, 800576a <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	e853 2f00 	ldrex	r2, [r3]
 800575e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	e843 2100 	strex	r1, r2, [r3]
 8005766:	2900      	cmp	r1, #0
 8005768:	d1f7      	bne.n	800575a <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	f103 0208 	add.w	r2, r3, #8
 800576e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005772:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	f103 0008 	add.w	r0, r3, #8
 800577a:	e840 2100 	strex	r1, r2, [r0]
 800577e:	2900      	cmp	r1, #0
 8005780:	d1f3      	bne.n	800576a <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8005782:	2320      	movs	r3, #32
 8005784:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8005788:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800578c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 8005790:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005792:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8005796:	e7c1      	b.n	800571c <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005798:	f838 3b02 	ldrh.w	r3, [r8], #2
 800579c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a0:	e7a2      	b.n	80056e8 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 80057a2:	2002      	movs	r0, #2
}
 80057a4:	b003      	add	sp, #12
 80057a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057aa:	692b      	ldr	r3, [r5, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d189      	bne.n	80056c4 <HAL_UART_Transmit+0x54>
 80057b0:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80057b2:	4699      	mov	r9, r3
 80057b4:	e786      	b.n	80056c4 <HAL_UART_Transmit+0x54>
 80057b6:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	e843 2100 	strex	r1, r2, [r3]
 80057c4:	2900      	cmp	r1, #0
 80057c6:	d1f7      	bne.n	80057b8 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	f103 0208 	add.w	r2, r3, #8
 80057cc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	f103 0008 	add.w	r0, r3, #8
 80057d8:	e840 2100 	strex	r1, r2, [r0]
 80057dc:	2900      	cmp	r1, #0
 80057de:	d1f3      	bne.n	80057c8 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 80057e0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80057e2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80057e4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80057e8:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80057ec:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 80057f0:	b003      	add	sp, #12
 80057f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80057f6:	2003      	movs	r0, #3
 80057f8:	e790      	b.n	800571c <HAL_UART_Transmit+0xac>
 80057fa:	bf00      	nop

080057fc <HAL_UART_Init>:
  if (huart == NULL)
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d066      	beq.n	80058ce <HAL_UART_Init+0xd2>
{
 8005800:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005802:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8005806:	b082      	sub	sp, #8
 8005808:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04c      	beq.n	80058a8 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800580e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	2324      	movs	r3, #36	; 0x24
 8005812:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005816:	6813      	ldr	r3, [r2, #0]
 8005818:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800581c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800581e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005820:	f7ff fcca 	bl	80051b8 <UART_SetConfig>
 8005824:	2801      	cmp	r0, #1
 8005826:	d03c      	beq.n	80058a2 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d135      	bne.n	800589a <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
 8005832:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8005836:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005838:	6899      	ldr	r1, [r3, #8]
 800583a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800583e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005840:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005842:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8005844:	f041 0101 	orr.w	r1, r1, #1
 8005848:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800584e:	f7fe f997 	bl	8003b80 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8005858:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800585a:	d40e      	bmi.n	800587a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	075b      	lsls	r3, r3, #29
 8005860:	d427      	bmi.n	80058b2 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005864:	2220      	movs	r2, #32
 8005866:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800586a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800586e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8005872:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005876:	b002      	add	sp, #8
 8005878:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800587a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	462a      	mov	r2, r5
 8005882:	4603      	mov	r3, r0
 8005884:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005888:	4620      	mov	r0, r4
 800588a:	f7ff fe79 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 800588e:	b9e0      	cbnz	r0, 80058ca <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	075b      	lsls	r3, r3, #29
 8005896:	d40c      	bmi.n	80058b2 <HAL_UART_Init+0xb6>
 8005898:	e7e3      	b.n	8005862 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800589a:	4620      	mov	r0, r4
 800589c:	f7ff fe18 	bl	80054d0 <UART_AdvFeatureConfig>
 80058a0:	e7c5      	b.n	800582e <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80058a2:	2001      	movs	r0, #1
}
 80058a4:	b002      	add	sp, #8
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80058a8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80058ac:	f7fd ffc8 	bl	8003840 <HAL_UART_MspInit>
 80058b0:	e7ad      	b.n	800580e <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2200      	movs	r2, #0
 80058ba:	4633      	mov	r3, r6
 80058bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058c0:	4620      	mov	r0, r4
 80058c2:	f7ff fe5d 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	d0cb      	beq.n	8005862 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80058ca:	2003      	movs	r0, #3
 80058cc:	e7d3      	b.n	8005876 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80058ce:	2001      	movs	r0, #1
}
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop

080058d4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058d4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d017      	beq.n	800590c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058dc:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058de:	2324      	movs	r3, #36	; 0x24
{
 80058e0:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80058e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e6:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e8:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058ea:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80058ec:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058f0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80058f4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058f6:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058f8:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058fa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80058fe:	2220      	movs	r2, #32
 8005900:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8005904:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8005908:	4618      	mov	r0, r3
}
 800590a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800590c:	2002      	movs	r0, #2
}
 800590e:	4770      	bx	lr

08005910 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005910:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005914:	2a01      	cmp	r2, #1
 8005916:	d037      	beq.n	8005988 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8005918:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800591a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800591c:	2024      	movs	r0, #36	; 0x24
{
 800591e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005920:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005924:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005926:	6810      	ldr	r0, [r2, #0]
 8005928:	f020 0001 	bic.w	r0, r0, #1
 800592c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800592e:	6890      	ldr	r0, [r2, #8]
 8005930:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8005934:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005936:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005938:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800593a:	b310      	cbz	r0, 8005982 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800593c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800593e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8005940:	4d12      	ldr	r5, [pc, #72]	; (800598c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005942:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005946:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800594a:	4911      	ldr	r1, [pc, #68]	; (8005990 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800594c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005950:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005954:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005958:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800595c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800595e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005960:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005964:	fbb1 f1f5 	udiv	r1, r1, r5
 8005968:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800596c:	2100      	movs	r1, #0
 800596e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8005972:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005974:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005976:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800597a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800597c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005980:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005982:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005984:	4608      	mov	r0, r1
 8005986:	e7ef      	b.n	8005968 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005988:	2002      	movs	r0, #2
}
 800598a:	4770      	bx	lr
 800598c:	0801a68c 	.word	0x0801a68c
 8005990:	0801a694 	.word	0x0801a694

08005994 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8005994:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005998:	2a01      	cmp	r2, #1
 800599a:	d037      	beq.n	8005a0c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800599c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800599e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80059a0:	2024      	movs	r0, #36	; 0x24
{
 80059a2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80059a4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059a8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80059aa:	6810      	ldr	r0, [r2, #0]
 80059ac:	f020 0001 	bic.w	r0, r0, #1
 80059b0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059b2:	6890      	ldr	r0, [r2, #8]
 80059b4:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80059b8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059ba:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059bc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059be:	b310      	cbz	r0, 8005a06 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059c0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059c2:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80059c4:	4d12      	ldr	r5, [pc, #72]	; (8005a10 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059c6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059ca:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059ce:	4911      	ldr	r1, [pc, #68]	; (8005a14 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80059d0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059d4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80059d8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80059dc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059e2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059e8:	fbb1 f1f5 	udiv	r1, r1, r5
 80059ec:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80059f0:	2100      	movs	r1, #0
 80059f2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80059f6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80059fa:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80059fe:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005a00:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005a04:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005a06:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005a08:	4608      	mov	r0, r1
 8005a0a:	e7ef      	b.n	80059ec <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005a0c:	2002      	movs	r0, #2
}
 8005a0e:	4770      	bx	lr
 8005a10:	0801a68c 	.word	0x0801a68c
 8005a14:	0801a694 	.word	0x0801a694

08005a18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a18:	b084      	sub	sp, #16
 8005a1a:	4684      	mov	ip, r0
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	a803      	add	r0, sp, #12
 8005a20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a24:	f8dc 300c 	ldr.w	r3, [ip, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8005a28:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <USB_CoreInit+0x8c>)
  __IO uint32_t count = 0U;
 8005a2a:	2100      	movs	r1, #0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a30:	f8cc 300c 	str.w	r3, [ip, #12]
  __IO uint32_t count = 0U;
 8005a34:	9101      	str	r1, [sp, #4]
 8005a36:	e003      	b.n	8005a40 <USB_CoreInit+0x28>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a38:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	db1a      	blt.n	8005a76 <USB_CoreInit+0x5e>
    count++;
 8005a40:	9b01      	ldr	r3, [sp, #4]
 8005a42:	3301      	adds	r3, #1
 8005a44:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005a46:	9b01      	ldr	r3, [sp, #4]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d9f5      	bls.n	8005a38 <USB_CoreInit+0x20>
      return HAL_TIMEOUT;
 8005a4c:	2003      	movs	r0, #3
  if (cfg.battery_charging_enable == 0U)
 8005a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a50:	b943      	cbnz	r3, 8005a64 <USB_CoreInit+0x4c>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a52:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8005a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 8005a5e:	b002      	add	sp, #8
 8005a60:	b004      	add	sp, #16
 8005a62:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a64:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8005a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 8005a70:	b002      	add	sp, #8
 8005a72:	b004      	add	sp, #16
 8005a74:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a7a:	f8dc 3010 	ldr.w	r3, [ip, #16]

  do
  {
    count++;

    if (count > 200000U)
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <USB_CoreInit+0x8c>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	f8cc 3010 	str.w	r3, [ip, #16]
 8005a88:	e004      	b.n	8005a94 <USB_CoreInit+0x7c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a8a:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8005a8e:	f010 0001 	ands.w	r0, r0, #1
 8005a92:	d0dc      	beq.n	8005a4e <USB_CoreInit+0x36>
    count++;
 8005a94:	9b01      	ldr	r3, [sp, #4]
 8005a96:	3301      	adds	r3, #1
 8005a98:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005a9a:	9b01      	ldr	r3, [sp, #4]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d9f4      	bls.n	8005a8a <USB_CoreInit+0x72>
 8005aa0:	e7d4      	b.n	8005a4c <USB_CoreInit+0x34>
 8005aa2:	bf00      	nop
 8005aa4:	00030d40 	.word	0x00030d40

08005aa8 <USB_DisableGlobalInt>:
{
 8005aa8:	4603      	mov	r3, r0
}
 8005aaa:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop

08005ab8 <USB_SetCurrentMode>:
{
 8005ab8:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005aba:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005abc:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005abe:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8005ac2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ac4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005ac6:	d018      	beq.n	8005afa <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8005ac8:	b9a9      	cbnz	r1, 8005af6 <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005aca:	68c3      	ldr	r3, [r0, #12]
 8005acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t ms = 0U;
 8005ad0:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ad2:	60c3      	str	r3, [r0, #12]
 8005ad4:	e001      	b.n	8005ada <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ad6:	2c32      	cmp	r4, #50	; 0x32
 8005ad8:	d00d      	beq.n	8005af6 <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8005ada:	2001      	movs	r0, #1
 8005adc:	f7fe f856 	bl	8003b8c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8005ae0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ae2:	07db      	lsls	r3, r3, #31
      ms++;
 8005ae4:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ae8:	d4f5      	bmi.n	8005ad6 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8005aea:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8005aee:	fab0 f080 	clz	r0, r0
 8005af2:	0940      	lsrs	r0, r0, #5
}
 8005af4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005af6:	2001      	movs	r0, #1
}
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005afa:	68c3      	ldr	r3, [r0, #12]
 8005afc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  uint32_t ms = 0U;
 8005b00:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b02:	60c3      	str	r3, [r0, #12]
 8005b04:	e001      	b.n	8005b0a <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b06:	2c32      	cmp	r4, #50	; 0x32
 8005b08:	d0f5      	beq.n	8005af6 <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	f7fe f83e 	bl	8003b8c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8005b10:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b12:	07da      	lsls	r2, r3, #31
      ms++;
 8005b14:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b18:	d5f5      	bpl.n	8005b06 <USB_SetCurrentMode+0x4e>
    return HAL_ERROR;
 8005b1a:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8005b1e:	fab0 f080 	clz	r0, r0
 8005b22:	0940      	lsrs	r0, r0, #5
 8005b24:	e7e6      	b.n	8005af4 <USB_SetCurrentMode+0x3c>
 8005b26:	bf00      	nop

08005b28 <USB_DevInit>:
{
 8005b28:	b084      	sub	sp, #16
 8005b2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	ac0b      	add	r4, sp, #44	; 0x2c
 8005b32:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005b34:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8005b3e:	460c      	mov	r4, r1
 8005b40:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8005b44:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8005b48:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8005b4c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8005b50:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8005b54:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8005b58:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8005b5c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8005b60:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8005b64:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8005b68:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8005b6c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 8005b70:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8005b74:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8005b78:	2d00      	cmp	r5, #0
 8005b7a:	f040 80a7 	bne.w	8005ccc <USB_DevInit+0x1a4>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b7e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005b82:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 8005b86:	f043 0302 	orr.w	r3, r3, #2
 8005b8a:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005b90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b94:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b96:	6803      	ldr	r3, [r0, #0]
 8005b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9c:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b9e:	6803      	ldr	r3, [r0, #0]
 8005ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba4:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c0 2e00 	str.w	r2, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005bac:	f8dc 3000 	ldr.w	r3, [ip]
 8005bb0:	f8cc 3000 	str.w	r3, [ip]
  USBx_DEVICE->DCFG |= speed;
 8005bb4:	f8dc 3000 	ldr.w	r3, [ip]
 8005bb8:	f043 0303 	orr.w	r3, r3, #3
 8005bbc:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 8005bc0:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8005bc2:	4a57      	ldr	r2, [pc, #348]	; (8005d20 <USB_DevInit+0x1f8>)
 8005bc4:	e003      	b.n	8005bce <USB_DevInit+0xa6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bc6:	6903      	ldr	r3, [r0, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f2c0 8096 	blt.w	8005cfa <USB_DevInit+0x1d2>
    count++;
 8005bce:	9b00      	ldr	r3, [sp, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8005bd4:	9b00      	ldr	r3, [sp, #0]
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d9f5      	bls.n	8005bc6 <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 8005bda:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 8005bdc:	2300      	movs	r3, #0
    if (count > 200000U)
 8005bde:	4a50      	ldr	r2, [pc, #320]	; (8005d20 <USB_DevInit+0x1f8>)
  __IO uint32_t count = 0U;
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	e002      	b.n	8005bea <USB_DevInit+0xc2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005be4:	6903      	ldr	r3, [r0, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	db77      	blt.n	8005cda <USB_DevInit+0x1b2>
    count++;
 8005bea:	9b01      	ldr	r3, [sp, #4]
 8005bec:	3301      	adds	r3, #1
 8005bee:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d9f6      	bls.n	8005be4 <USB_DevInit+0xbc>
    ret = HAL_ERROR;
 8005bf6:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bfe:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c02:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c06:	b1e4      	cbz	r4, 8005c42 <USB_DevInit+0x11a>
 8005c08:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c0c:	4617      	mov	r7, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c0e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c12:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c16:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8005c1a:	e008      	b.n	8005c2e <USB_DevInit+0x106>
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c1c:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1e:	3201      	adds	r2, #1
 8005c20:	4294      	cmp	r4, r2
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c22:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c24:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c28:	f103 0320 	add.w	r3, r3, #32
 8005c2c:	d030      	beq.n	8005c90 <USB_DevInit+0x168>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c2e:	681e      	ldr	r6, [r3, #0]
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	daf3      	bge.n	8005c1c <USB_DevInit+0xf4>
      if (i == 0U)
 8005c34:	b112      	cbz	r2, 8005c3c <USB_DevInit+0x114>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c36:	f8c3 8000 	str.w	r8, [r3]
 8005c3a:	e7f0      	b.n	8005c1e <USB_DevInit+0xf6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c3c:	f8c3 9000 	str.w	r9, [r3]
 8005c40:	e7ed      	b.n	8005c1e <USB_DevInit+0xf6>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c42:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8005c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4a:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8005c4e:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c50:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8005c54:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c56:	6143      	str	r3, [r0, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c58:	6982      	ldr	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c5a:	4b32      	ldr	r3, [pc, #200]	; (8005d24 <USB_DevInit+0x1fc>)
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c5c:	f042 0210 	orr.w	r2, r2, #16
 8005c60:	6182      	str	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c62:	6982      	ldr	r2, [r0, #24]
 8005c64:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8005c66:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c68:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 8005c6a:	b11a      	cbz	r2, 8005c74 <USB_DevInit+0x14c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c6c:	6983      	ldr	r3, [r0, #24]
 8005c6e:	f043 0308 	orr.w	r3, r3, #8
 8005c72:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8005c74:	2d01      	cmp	r5, #1
 8005c76:	d105      	bne.n	8005c84 <USB_DevInit+0x15c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c78:	6983      	ldr	r3, [r0, #24]
 8005c7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c7e:	f043 0304 	orr.w	r3, r3, #4
 8005c82:	6183      	str	r3, [r0, #24]
}
 8005c84:	4608      	mov	r0, r1
 8005c86:	b003      	add	sp, #12
 8005c88:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	b004      	add	sp, #16
 8005c8e:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c90:	2200      	movs	r2, #0
 8005c92:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c96:	4617      	mov	r7, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c98:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c9c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ca0:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8005ca4:	e008      	b.n	8005cb8 <USB_DevInit+0x190>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ca6:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca8:	3201      	adds	r2, #1
 8005caa:	4294      	cmp	r4, r2
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cac:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cae:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb2:	f103 0320 	add.w	r3, r3, #32
 8005cb6:	d0c4      	beq.n	8005c42 <USB_DevInit+0x11a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb8:	681e      	ldr	r6, [r3, #0]
 8005cba:	2e00      	cmp	r6, #0
 8005cbc:	daf3      	bge.n	8005ca6 <USB_DevInit+0x17e>
      if (i == 0U)
 8005cbe:	b112      	cbz	r2, 8005cc6 <USB_DevInit+0x19e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cc0:	f8c3 8000 	str.w	r8, [r3]
 8005cc4:	e7f0      	b.n	8005ca8 <USB_DevInit+0x180>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cc6:	f8c3 9000 	str.w	r9, [r3]
 8005cca:	e7ed      	b.n	8005ca8 <USB_DevInit+0x180>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ccc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cd2:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cd6:	6383      	str	r3, [r0, #56]	; 0x38
 8005cd8:	e765      	b.n	8005ba6 <USB_DevInit+0x7e>
  count = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cde:	2310      	movs	r3, #16
    if (count > 200000U)
 8005ce0:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <USB_DevInit+0x1f8>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ce2:	6103      	str	r3, [r0, #16]
 8005ce4:	e002      	b.n	8005cec <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ce6:	6903      	ldr	r3, [r0, #16]
 8005ce8:	06db      	lsls	r3, r3, #27
 8005cea:	d585      	bpl.n	8005bf8 <USB_DevInit+0xd0>
    count++;
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005cf2:	9b01      	ldr	r3, [sp, #4]
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d9f6      	bls.n	8005ce6 <USB_DevInit+0x1be>
 8005cf8:	e77d      	b.n	8005bf6 <USB_DevInit+0xce>
  count = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cfe:	f44f 6384 	mov.w	r3, #1056	; 0x420
    if (count > 200000U)
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <USB_DevInit+0x1f8>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d04:	6103      	str	r3, [r0, #16]
 8005d06:	e004      	b.n	8005d12 <USB_DevInit+0x1ea>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d08:	6901      	ldr	r1, [r0, #16]
 8005d0a:	f011 0120 	ands.w	r1, r1, #32
 8005d0e:	f43f af65 	beq.w	8005bdc <USB_DevInit+0xb4>
    count++;
 8005d12:	9b00      	ldr	r3, [sp, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8005d18:	9b00      	ldr	r3, [sp, #0]
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d9f4      	bls.n	8005d08 <USB_DevInit+0x1e0>
 8005d1e:	e75c      	b.n	8005bda <USB_DevInit+0xb2>
 8005d20:	00030d40 	.word	0x00030d40
 8005d24:	803c3800 	.word	0x803c3800

08005d28 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d28:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 8005d2c:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d2e:	f022 0203 	bic.w	r2, r2, #3
 8005d32:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d36:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8005d3a:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
}
 8005d42:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d44:	604b      	str	r3, [r1, #4]
}
 8005d46:	4770      	bx	lr

08005d48 <__errno>:
 8005d48:	4b01      	ldr	r3, [pc, #4]	; (8005d50 <__errno+0x8>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	2000780c 	.word	0x2000780c

08005d54 <__libc_init_array>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	4d0d      	ldr	r5, [pc, #52]	; (8005d8c <__libc_init_array+0x38>)
 8005d58:	4c0d      	ldr	r4, [pc, #52]	; (8005d90 <__libc_init_array+0x3c>)
 8005d5a:	1b64      	subs	r4, r4, r5
 8005d5c:	10a4      	asrs	r4, r4, #2
 8005d5e:	2600      	movs	r6, #0
 8005d60:	42a6      	cmp	r6, r4
 8005d62:	d109      	bne.n	8005d78 <__libc_init_array+0x24>
 8005d64:	4d0b      	ldr	r5, [pc, #44]	; (8005d94 <__libc_init_array+0x40>)
 8005d66:	4c0c      	ldr	r4, [pc, #48]	; (8005d98 <__libc_init_array+0x44>)
 8005d68:	f000 fce8 	bl	800673c <_init>
 8005d6c:	1b64      	subs	r4, r4, r5
 8005d6e:	10a4      	asrs	r4, r4, #2
 8005d70:	2600      	movs	r6, #0
 8005d72:	42a6      	cmp	r6, r4
 8005d74:	d105      	bne.n	8005d82 <__libc_init_array+0x2e>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7c:	4798      	blx	r3
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7ee      	b.n	8005d60 <__libc_init_array+0xc>
 8005d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d86:	4798      	blx	r3
 8005d88:	3601      	adds	r6, #1
 8005d8a:	e7f2      	b.n	8005d72 <__libc_init_array+0x1e>
 8005d8c:	0801a6d8 	.word	0x0801a6d8
 8005d90:	0801a6d8 	.word	0x0801a6d8
 8005d94:	0801a6d8 	.word	0x0801a6d8
 8005d98:	0801a6dc 	.word	0x0801a6dc

08005d9c <memcpy>:
 8005d9c:	440a      	add	r2, r1
 8005d9e:	4291      	cmp	r1, r2
 8005da0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005da4:	d100      	bne.n	8005da8 <memcpy+0xc>
 8005da6:	4770      	bx	lr
 8005da8:	b510      	push	{r4, lr}
 8005daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db2:	4291      	cmp	r1, r2
 8005db4:	d1f9      	bne.n	8005daa <memcpy+0xe>
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <memmove>:
 8005db8:	4288      	cmp	r0, r1
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	eb01 0402 	add.w	r4, r1, r2
 8005dc0:	d902      	bls.n	8005dc8 <memmove+0x10>
 8005dc2:	4284      	cmp	r4, r0
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	d807      	bhi.n	8005dd8 <memmove+0x20>
 8005dc8:	1e43      	subs	r3, r0, #1
 8005dca:	42a1      	cmp	r1, r4
 8005dcc:	d008      	beq.n	8005de0 <memmove+0x28>
 8005dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dd6:	e7f8      	b.n	8005dca <memmove+0x12>
 8005dd8:	4402      	add	r2, r0
 8005dda:	4601      	mov	r1, r0
 8005ddc:	428a      	cmp	r2, r1
 8005dde:	d100      	bne.n	8005de2 <memmove+0x2a>
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dea:	e7f7      	b.n	8005ddc <memmove+0x24>

08005dec <memset>:
 8005dec:	4402      	add	r2, r0
 8005dee:	4603      	mov	r3, r0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d100      	bne.n	8005df6 <memset+0xa>
 8005df4:	4770      	bx	lr
 8005df6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfa:	e7f9      	b.n	8005df0 <memset+0x4>

08005dfc <sniprintf>:
 8005dfc:	b40c      	push	{r2, r3}
 8005dfe:	b530      	push	{r4, r5, lr}
 8005e00:	4b17      	ldr	r3, [pc, #92]	; (8005e60 <sniprintf+0x64>)
 8005e02:	1e0c      	subs	r4, r1, #0
 8005e04:	681d      	ldr	r5, [r3, #0]
 8005e06:	b09d      	sub	sp, #116	; 0x74
 8005e08:	da08      	bge.n	8005e1c <sniprintf+0x20>
 8005e0a:	238b      	movs	r3, #139	; 0x8b
 8005e0c:	602b      	str	r3, [r5, #0]
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e12:	b01d      	add	sp, #116	; 0x74
 8005e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e18:	b002      	add	sp, #8
 8005e1a:	4770      	bx	lr
 8005e1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e24:	bf14      	ite	ne
 8005e26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005e2a:	4623      	moveq	r3, r4
 8005e2c:	9304      	str	r3, [sp, #16]
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e34:	9002      	str	r0, [sp, #8]
 8005e36:	9006      	str	r0, [sp, #24]
 8005e38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e3e:	ab21      	add	r3, sp, #132	; 0x84
 8005e40:	a902      	add	r1, sp, #8
 8005e42:	4628      	mov	r0, r5
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	f000 f869 	bl	8005f1c <_svfiprintf_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	bfbc      	itt	lt
 8005e4e:	238b      	movlt	r3, #139	; 0x8b
 8005e50:	602b      	strlt	r3, [r5, #0]
 8005e52:	2c00      	cmp	r4, #0
 8005e54:	d0dd      	beq.n	8005e12 <sniprintf+0x16>
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	e7d9      	b.n	8005e12 <sniprintf+0x16>
 8005e5e:	bf00      	nop
 8005e60:	2000780c 	.word	0x2000780c

08005e64 <__ssputs_r>:
 8005e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	688e      	ldr	r6, [r1, #8]
 8005e6a:	429e      	cmp	r6, r3
 8005e6c:	4682      	mov	sl, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	4690      	mov	r8, r2
 8005e72:	461f      	mov	r7, r3
 8005e74:	d838      	bhi.n	8005ee8 <__ssputs_r+0x84>
 8005e76:	898a      	ldrh	r2, [r1, #12]
 8005e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e7c:	d032      	beq.n	8005ee4 <__ssputs_r+0x80>
 8005e7e:	6825      	ldr	r5, [r4, #0]
 8005e80:	6909      	ldr	r1, [r1, #16]
 8005e82:	eba5 0901 	sub.w	r9, r5, r1
 8005e86:	6965      	ldr	r5, [r4, #20]
 8005e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e90:	3301      	adds	r3, #1
 8005e92:	444b      	add	r3, r9
 8005e94:	106d      	asrs	r5, r5, #1
 8005e96:	429d      	cmp	r5, r3
 8005e98:	bf38      	it	cc
 8005e9a:	461d      	movcc	r5, r3
 8005e9c:	0553      	lsls	r3, r2, #21
 8005e9e:	d531      	bpl.n	8005f04 <__ssputs_r+0xa0>
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	f000 fb3b 	bl	800651c <_malloc_r>
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	b950      	cbnz	r0, 8005ec0 <__ssputs_r+0x5c>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	f8ca 3000 	str.w	r3, [sl]
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec0:	6921      	ldr	r1, [r4, #16]
 8005ec2:	464a      	mov	r2, r9
 8005ec4:	f7ff ff6a 	bl	8005d9c <memcpy>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	6126      	str	r6, [r4, #16]
 8005ed6:	6165      	str	r5, [r4, #20]
 8005ed8:	444e      	add	r6, r9
 8005eda:	eba5 0509 	sub.w	r5, r5, r9
 8005ede:	6026      	str	r6, [r4, #0]
 8005ee0:	60a5      	str	r5, [r4, #8]
 8005ee2:	463e      	mov	r6, r7
 8005ee4:	42be      	cmp	r6, r7
 8005ee6:	d900      	bls.n	8005eea <__ssputs_r+0x86>
 8005ee8:	463e      	mov	r6, r7
 8005eea:	6820      	ldr	r0, [r4, #0]
 8005eec:	4632      	mov	r2, r6
 8005eee:	4641      	mov	r1, r8
 8005ef0:	f7ff ff62 	bl	8005db8 <memmove>
 8005ef4:	68a3      	ldr	r3, [r4, #8]
 8005ef6:	1b9b      	subs	r3, r3, r6
 8005ef8:	60a3      	str	r3, [r4, #8]
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	4433      	add	r3, r6
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	2000      	movs	r0, #0
 8005f02:	e7db      	b.n	8005ebc <__ssputs_r+0x58>
 8005f04:	462a      	mov	r2, r5
 8005f06:	f000 fb7d 	bl	8006604 <_realloc_r>
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d1e1      	bne.n	8005ed4 <__ssputs_r+0x70>
 8005f10:	6921      	ldr	r1, [r4, #16]
 8005f12:	4650      	mov	r0, sl
 8005f14:	f000 fa96 	bl	8006444 <_free_r>
 8005f18:	e7c7      	b.n	8005eaa <__ssputs_r+0x46>
	...

08005f1c <_svfiprintf_r>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	4698      	mov	r8, r3
 8005f22:	898b      	ldrh	r3, [r1, #12]
 8005f24:	061b      	lsls	r3, r3, #24
 8005f26:	b09d      	sub	sp, #116	; 0x74
 8005f28:	4607      	mov	r7, r0
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	d50e      	bpl.n	8005f4e <_svfiprintf_r+0x32>
 8005f30:	690b      	ldr	r3, [r1, #16]
 8005f32:	b963      	cbnz	r3, 8005f4e <_svfiprintf_r+0x32>
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	f000 faf1 	bl	800651c <_malloc_r>
 8005f3a:	6028      	str	r0, [r5, #0]
 8005f3c:	6128      	str	r0, [r5, #16]
 8005f3e:	b920      	cbnz	r0, 8005f4a <_svfiprintf_r+0x2e>
 8005f40:	230c      	movs	r3, #12
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f48:	e0d1      	b.n	80060ee <_svfiprintf_r+0x1d2>
 8005f4a:	2340      	movs	r3, #64	; 0x40
 8005f4c:	616b      	str	r3, [r5, #20]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9309      	str	r3, [sp, #36]	; 0x24
 8005f52:	2320      	movs	r3, #32
 8005f54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f5c:	2330      	movs	r3, #48	; 0x30
 8005f5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006108 <_svfiprintf_r+0x1ec>
 8005f62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f66:	f04f 0901 	mov.w	r9, #1
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	469a      	mov	sl, r3
 8005f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f72:	b10a      	cbz	r2, 8005f78 <_svfiprintf_r+0x5c>
 8005f74:	2a25      	cmp	r2, #37	; 0x25
 8005f76:	d1f9      	bne.n	8005f6c <_svfiprintf_r+0x50>
 8005f78:	ebba 0b04 	subs.w	fp, sl, r4
 8005f7c:	d00b      	beq.n	8005f96 <_svfiprintf_r+0x7a>
 8005f7e:	465b      	mov	r3, fp
 8005f80:	4622      	mov	r2, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	4638      	mov	r0, r7
 8005f86:	f7ff ff6d 	bl	8005e64 <__ssputs_r>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f000 80aa 	beq.w	80060e4 <_svfiprintf_r+0x1c8>
 8005f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f92:	445a      	add	r2, fp
 8005f94:	9209      	str	r2, [sp, #36]	; 0x24
 8005f96:	f89a 3000 	ldrb.w	r3, [sl]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 80a2 	beq.w	80060e4 <_svfiprintf_r+0x1c8>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005faa:	f10a 0a01 	add.w	sl, sl, #1
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	9307      	str	r3, [sp, #28]
 8005fb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fb6:	931a      	str	r3, [sp, #104]	; 0x68
 8005fb8:	4654      	mov	r4, sl
 8005fba:	2205      	movs	r2, #5
 8005fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc0:	4851      	ldr	r0, [pc, #324]	; (8006108 <_svfiprintf_r+0x1ec>)
 8005fc2:	f7fa f91d 	bl	8000200 <memchr>
 8005fc6:	9a04      	ldr	r2, [sp, #16]
 8005fc8:	b9d8      	cbnz	r0, 8006002 <_svfiprintf_r+0xe6>
 8005fca:	06d0      	lsls	r0, r2, #27
 8005fcc:	bf44      	itt	mi
 8005fce:	2320      	movmi	r3, #32
 8005fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd4:	0711      	lsls	r1, r2, #28
 8005fd6:	bf44      	itt	mi
 8005fd8:	232b      	movmi	r3, #43	; 0x2b
 8005fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fde:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe4:	d015      	beq.n	8006012 <_svfiprintf_r+0xf6>
 8005fe6:	9a07      	ldr	r2, [sp, #28]
 8005fe8:	4654      	mov	r4, sl
 8005fea:	2000      	movs	r0, #0
 8005fec:	f04f 0c0a 	mov.w	ip, #10
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff6:	3b30      	subs	r3, #48	; 0x30
 8005ff8:	2b09      	cmp	r3, #9
 8005ffa:	d94e      	bls.n	800609a <_svfiprintf_r+0x17e>
 8005ffc:	b1b0      	cbz	r0, 800602c <_svfiprintf_r+0x110>
 8005ffe:	9207      	str	r2, [sp, #28]
 8006000:	e014      	b.n	800602c <_svfiprintf_r+0x110>
 8006002:	eba0 0308 	sub.w	r3, r0, r8
 8006006:	fa09 f303 	lsl.w	r3, r9, r3
 800600a:	4313      	orrs	r3, r2
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	46a2      	mov	sl, r4
 8006010:	e7d2      	b.n	8005fb8 <_svfiprintf_r+0x9c>
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	1d19      	adds	r1, r3, #4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	9103      	str	r1, [sp, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	bfbb      	ittet	lt
 800601e:	425b      	neglt	r3, r3
 8006020:	f042 0202 	orrlt.w	r2, r2, #2
 8006024:	9307      	strge	r3, [sp, #28]
 8006026:	9307      	strlt	r3, [sp, #28]
 8006028:	bfb8      	it	lt
 800602a:	9204      	strlt	r2, [sp, #16]
 800602c:	7823      	ldrb	r3, [r4, #0]
 800602e:	2b2e      	cmp	r3, #46	; 0x2e
 8006030:	d10c      	bne.n	800604c <_svfiprintf_r+0x130>
 8006032:	7863      	ldrb	r3, [r4, #1]
 8006034:	2b2a      	cmp	r3, #42	; 0x2a
 8006036:	d135      	bne.n	80060a4 <_svfiprintf_r+0x188>
 8006038:	9b03      	ldr	r3, [sp, #12]
 800603a:	1d1a      	adds	r2, r3, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	9203      	str	r2, [sp, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	bfb8      	it	lt
 8006044:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006048:	3402      	adds	r4, #2
 800604a:	9305      	str	r3, [sp, #20]
 800604c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006118 <_svfiprintf_r+0x1fc>
 8006050:	7821      	ldrb	r1, [r4, #0]
 8006052:	2203      	movs	r2, #3
 8006054:	4650      	mov	r0, sl
 8006056:	f7fa f8d3 	bl	8000200 <memchr>
 800605a:	b140      	cbz	r0, 800606e <_svfiprintf_r+0x152>
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	eba0 000a 	sub.w	r0, r0, sl
 8006062:	fa03 f000 	lsl.w	r0, r3, r0
 8006066:	9b04      	ldr	r3, [sp, #16]
 8006068:	4303      	orrs	r3, r0
 800606a:	3401      	adds	r4, #1
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006072:	4826      	ldr	r0, [pc, #152]	; (800610c <_svfiprintf_r+0x1f0>)
 8006074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006078:	2206      	movs	r2, #6
 800607a:	f7fa f8c1 	bl	8000200 <memchr>
 800607e:	2800      	cmp	r0, #0
 8006080:	d038      	beq.n	80060f4 <_svfiprintf_r+0x1d8>
 8006082:	4b23      	ldr	r3, [pc, #140]	; (8006110 <_svfiprintf_r+0x1f4>)
 8006084:	bb1b      	cbnz	r3, 80060ce <_svfiprintf_r+0x1b2>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	3307      	adds	r3, #7
 800608a:	f023 0307 	bic.w	r3, r3, #7
 800608e:	3308      	adds	r3, #8
 8006090:	9303      	str	r3, [sp, #12]
 8006092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006094:	4433      	add	r3, r6
 8006096:	9309      	str	r3, [sp, #36]	; 0x24
 8006098:	e767      	b.n	8005f6a <_svfiprintf_r+0x4e>
 800609a:	fb0c 3202 	mla	r2, ip, r2, r3
 800609e:	460c      	mov	r4, r1
 80060a0:	2001      	movs	r0, #1
 80060a2:	e7a5      	b.n	8005ff0 <_svfiprintf_r+0xd4>
 80060a4:	2300      	movs	r3, #0
 80060a6:	3401      	adds	r4, #1
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	4619      	mov	r1, r3
 80060ac:	f04f 0c0a 	mov.w	ip, #10
 80060b0:	4620      	mov	r0, r4
 80060b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b6:	3a30      	subs	r2, #48	; 0x30
 80060b8:	2a09      	cmp	r2, #9
 80060ba:	d903      	bls.n	80060c4 <_svfiprintf_r+0x1a8>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0c5      	beq.n	800604c <_svfiprintf_r+0x130>
 80060c0:	9105      	str	r1, [sp, #20]
 80060c2:	e7c3      	b.n	800604c <_svfiprintf_r+0x130>
 80060c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c8:	4604      	mov	r4, r0
 80060ca:	2301      	movs	r3, #1
 80060cc:	e7f0      	b.n	80060b0 <_svfiprintf_r+0x194>
 80060ce:	ab03      	add	r3, sp, #12
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	462a      	mov	r2, r5
 80060d4:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <_svfiprintf_r+0x1f8>)
 80060d6:	a904      	add	r1, sp, #16
 80060d8:	4638      	mov	r0, r7
 80060da:	f3af 8000 	nop.w
 80060de:	1c42      	adds	r2, r0, #1
 80060e0:	4606      	mov	r6, r0
 80060e2:	d1d6      	bne.n	8006092 <_svfiprintf_r+0x176>
 80060e4:	89ab      	ldrh	r3, [r5, #12]
 80060e6:	065b      	lsls	r3, r3, #25
 80060e8:	f53f af2c 	bmi.w	8005f44 <_svfiprintf_r+0x28>
 80060ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ee:	b01d      	add	sp, #116	; 0x74
 80060f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f4:	ab03      	add	r3, sp, #12
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	462a      	mov	r2, r5
 80060fa:	4b06      	ldr	r3, [pc, #24]	; (8006114 <_svfiprintf_r+0x1f8>)
 80060fc:	a904      	add	r1, sp, #16
 80060fe:	4638      	mov	r0, r7
 8006100:	f000 f87a 	bl	80061f8 <_printf_i>
 8006104:	e7eb      	b.n	80060de <_svfiprintf_r+0x1c2>
 8006106:	bf00      	nop
 8006108:	0801a69c 	.word	0x0801a69c
 800610c:	0801a6a6 	.word	0x0801a6a6
 8006110:	00000000 	.word	0x00000000
 8006114:	08005e65 	.word	0x08005e65
 8006118:	0801a6a2 	.word	0x0801a6a2

0800611c <_printf_common>:
 800611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006120:	4616      	mov	r6, r2
 8006122:	4699      	mov	r9, r3
 8006124:	688a      	ldr	r2, [r1, #8]
 8006126:	690b      	ldr	r3, [r1, #16]
 8006128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800612c:	4293      	cmp	r3, r2
 800612e:	bfb8      	it	lt
 8006130:	4613      	movlt	r3, r2
 8006132:	6033      	str	r3, [r6, #0]
 8006134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006138:	4607      	mov	r7, r0
 800613a:	460c      	mov	r4, r1
 800613c:	b10a      	cbz	r2, 8006142 <_printf_common+0x26>
 800613e:	3301      	adds	r3, #1
 8006140:	6033      	str	r3, [r6, #0]
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	0699      	lsls	r1, r3, #26
 8006146:	bf42      	ittt	mi
 8006148:	6833      	ldrmi	r3, [r6, #0]
 800614a:	3302      	addmi	r3, #2
 800614c:	6033      	strmi	r3, [r6, #0]
 800614e:	6825      	ldr	r5, [r4, #0]
 8006150:	f015 0506 	ands.w	r5, r5, #6
 8006154:	d106      	bne.n	8006164 <_printf_common+0x48>
 8006156:	f104 0a19 	add.w	sl, r4, #25
 800615a:	68e3      	ldr	r3, [r4, #12]
 800615c:	6832      	ldr	r2, [r6, #0]
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	42ab      	cmp	r3, r5
 8006162:	dc26      	bgt.n	80061b2 <_printf_common+0x96>
 8006164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006168:	1e13      	subs	r3, r2, #0
 800616a:	6822      	ldr	r2, [r4, #0]
 800616c:	bf18      	it	ne
 800616e:	2301      	movne	r3, #1
 8006170:	0692      	lsls	r2, r2, #26
 8006172:	d42b      	bmi.n	80061cc <_printf_common+0xb0>
 8006174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006178:	4649      	mov	r1, r9
 800617a:	4638      	mov	r0, r7
 800617c:	47c0      	blx	r8
 800617e:	3001      	adds	r0, #1
 8006180:	d01e      	beq.n	80061c0 <_printf_common+0xa4>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	68e5      	ldr	r5, [r4, #12]
 8006186:	6832      	ldr	r2, [r6, #0]
 8006188:	f003 0306 	and.w	r3, r3, #6
 800618c:	2b04      	cmp	r3, #4
 800618e:	bf08      	it	eq
 8006190:	1aad      	subeq	r5, r5, r2
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	6922      	ldr	r2, [r4, #16]
 8006196:	bf0c      	ite	eq
 8006198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800619c:	2500      	movne	r5, #0
 800619e:	4293      	cmp	r3, r2
 80061a0:	bfc4      	itt	gt
 80061a2:	1a9b      	subgt	r3, r3, r2
 80061a4:	18ed      	addgt	r5, r5, r3
 80061a6:	2600      	movs	r6, #0
 80061a8:	341a      	adds	r4, #26
 80061aa:	42b5      	cmp	r5, r6
 80061ac:	d11a      	bne.n	80061e4 <_printf_common+0xc8>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e008      	b.n	80061c4 <_printf_common+0xa8>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4652      	mov	r2, sl
 80061b6:	4649      	mov	r1, r9
 80061b8:	4638      	mov	r0, r7
 80061ba:	47c0      	blx	r8
 80061bc:	3001      	adds	r0, #1
 80061be:	d103      	bne.n	80061c8 <_printf_common+0xac>
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c8:	3501      	adds	r5, #1
 80061ca:	e7c6      	b.n	800615a <_printf_common+0x3e>
 80061cc:	18e1      	adds	r1, r4, r3
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	2030      	movs	r0, #48	; 0x30
 80061d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061d6:	4422      	add	r2, r4
 80061d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061e0:	3302      	adds	r3, #2
 80061e2:	e7c7      	b.n	8006174 <_printf_common+0x58>
 80061e4:	2301      	movs	r3, #1
 80061e6:	4622      	mov	r2, r4
 80061e8:	4649      	mov	r1, r9
 80061ea:	4638      	mov	r0, r7
 80061ec:	47c0      	blx	r8
 80061ee:	3001      	adds	r0, #1
 80061f0:	d0e6      	beq.n	80061c0 <_printf_common+0xa4>
 80061f2:	3601      	adds	r6, #1
 80061f4:	e7d9      	b.n	80061aa <_printf_common+0x8e>
	...

080061f8 <_printf_i>:
 80061f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	7e0f      	ldrb	r7, [r1, #24]
 80061fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006200:	2f78      	cmp	r7, #120	; 0x78
 8006202:	4691      	mov	r9, r2
 8006204:	4680      	mov	r8, r0
 8006206:	460c      	mov	r4, r1
 8006208:	469a      	mov	sl, r3
 800620a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800620e:	d807      	bhi.n	8006220 <_printf_i+0x28>
 8006210:	2f62      	cmp	r7, #98	; 0x62
 8006212:	d80a      	bhi.n	800622a <_printf_i+0x32>
 8006214:	2f00      	cmp	r7, #0
 8006216:	f000 80d8 	beq.w	80063ca <_printf_i+0x1d2>
 800621a:	2f58      	cmp	r7, #88	; 0x58
 800621c:	f000 80a3 	beq.w	8006366 <_printf_i+0x16e>
 8006220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006228:	e03a      	b.n	80062a0 <_printf_i+0xa8>
 800622a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800622e:	2b15      	cmp	r3, #21
 8006230:	d8f6      	bhi.n	8006220 <_printf_i+0x28>
 8006232:	a101      	add	r1, pc, #4	; (adr r1, 8006238 <_printf_i+0x40>)
 8006234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006238:	08006291 	.word	0x08006291
 800623c:	080062a5 	.word	0x080062a5
 8006240:	08006221 	.word	0x08006221
 8006244:	08006221 	.word	0x08006221
 8006248:	08006221 	.word	0x08006221
 800624c:	08006221 	.word	0x08006221
 8006250:	080062a5 	.word	0x080062a5
 8006254:	08006221 	.word	0x08006221
 8006258:	08006221 	.word	0x08006221
 800625c:	08006221 	.word	0x08006221
 8006260:	08006221 	.word	0x08006221
 8006264:	080063b1 	.word	0x080063b1
 8006268:	080062d5 	.word	0x080062d5
 800626c:	08006393 	.word	0x08006393
 8006270:	08006221 	.word	0x08006221
 8006274:	08006221 	.word	0x08006221
 8006278:	080063d3 	.word	0x080063d3
 800627c:	08006221 	.word	0x08006221
 8006280:	080062d5 	.word	0x080062d5
 8006284:	08006221 	.word	0x08006221
 8006288:	08006221 	.word	0x08006221
 800628c:	0800639b 	.word	0x0800639b
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	602a      	str	r2, [r5, #0]
 8006298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800629c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0a3      	b.n	80063ec <_printf_i+0x1f4>
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	6829      	ldr	r1, [r5, #0]
 80062a8:	0606      	lsls	r6, r0, #24
 80062aa:	f101 0304 	add.w	r3, r1, #4
 80062ae:	d50a      	bpl.n	80062c6 <_printf_i+0xce>
 80062b0:	680e      	ldr	r6, [r1, #0]
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	2e00      	cmp	r6, #0
 80062b6:	da03      	bge.n	80062c0 <_printf_i+0xc8>
 80062b8:	232d      	movs	r3, #45	; 0x2d
 80062ba:	4276      	negs	r6, r6
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c0:	485e      	ldr	r0, [pc, #376]	; (800643c <_printf_i+0x244>)
 80062c2:	230a      	movs	r3, #10
 80062c4:	e019      	b.n	80062fa <_printf_i+0x102>
 80062c6:	680e      	ldr	r6, [r1, #0]
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062ce:	bf18      	it	ne
 80062d0:	b236      	sxthne	r6, r6
 80062d2:	e7ef      	b.n	80062b4 <_printf_i+0xbc>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	6820      	ldr	r0, [r4, #0]
 80062d8:	1d19      	adds	r1, r3, #4
 80062da:	6029      	str	r1, [r5, #0]
 80062dc:	0601      	lsls	r1, r0, #24
 80062de:	d501      	bpl.n	80062e4 <_printf_i+0xec>
 80062e0:	681e      	ldr	r6, [r3, #0]
 80062e2:	e002      	b.n	80062ea <_printf_i+0xf2>
 80062e4:	0646      	lsls	r6, r0, #25
 80062e6:	d5fb      	bpl.n	80062e0 <_printf_i+0xe8>
 80062e8:	881e      	ldrh	r6, [r3, #0]
 80062ea:	4854      	ldr	r0, [pc, #336]	; (800643c <_printf_i+0x244>)
 80062ec:	2f6f      	cmp	r7, #111	; 0x6f
 80062ee:	bf0c      	ite	eq
 80062f0:	2308      	moveq	r3, #8
 80062f2:	230a      	movne	r3, #10
 80062f4:	2100      	movs	r1, #0
 80062f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062fa:	6865      	ldr	r5, [r4, #4]
 80062fc:	60a5      	str	r5, [r4, #8]
 80062fe:	2d00      	cmp	r5, #0
 8006300:	bfa2      	ittt	ge
 8006302:	6821      	ldrge	r1, [r4, #0]
 8006304:	f021 0104 	bicge.w	r1, r1, #4
 8006308:	6021      	strge	r1, [r4, #0]
 800630a:	b90e      	cbnz	r6, 8006310 <_printf_i+0x118>
 800630c:	2d00      	cmp	r5, #0
 800630e:	d04d      	beq.n	80063ac <_printf_i+0x1b4>
 8006310:	4615      	mov	r5, r2
 8006312:	fbb6 f1f3 	udiv	r1, r6, r3
 8006316:	fb03 6711 	mls	r7, r3, r1, r6
 800631a:	5dc7      	ldrb	r7, [r0, r7]
 800631c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006320:	4637      	mov	r7, r6
 8006322:	42bb      	cmp	r3, r7
 8006324:	460e      	mov	r6, r1
 8006326:	d9f4      	bls.n	8006312 <_printf_i+0x11a>
 8006328:	2b08      	cmp	r3, #8
 800632a:	d10b      	bne.n	8006344 <_printf_i+0x14c>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	07de      	lsls	r6, r3, #31
 8006330:	d508      	bpl.n	8006344 <_printf_i+0x14c>
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	6861      	ldr	r1, [r4, #4]
 8006336:	4299      	cmp	r1, r3
 8006338:	bfde      	ittt	le
 800633a:	2330      	movle	r3, #48	; 0x30
 800633c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006340:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006344:	1b52      	subs	r2, r2, r5
 8006346:	6122      	str	r2, [r4, #16]
 8006348:	f8cd a000 	str.w	sl, [sp]
 800634c:	464b      	mov	r3, r9
 800634e:	aa03      	add	r2, sp, #12
 8006350:	4621      	mov	r1, r4
 8006352:	4640      	mov	r0, r8
 8006354:	f7ff fee2 	bl	800611c <_printf_common>
 8006358:	3001      	adds	r0, #1
 800635a:	d14c      	bne.n	80063f6 <_printf_i+0x1fe>
 800635c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006360:	b004      	add	sp, #16
 8006362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006366:	4835      	ldr	r0, [pc, #212]	; (800643c <_printf_i+0x244>)
 8006368:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800636c:	6829      	ldr	r1, [r5, #0]
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f851 6b04 	ldr.w	r6, [r1], #4
 8006374:	6029      	str	r1, [r5, #0]
 8006376:	061d      	lsls	r5, r3, #24
 8006378:	d514      	bpl.n	80063a4 <_printf_i+0x1ac>
 800637a:	07df      	lsls	r7, r3, #31
 800637c:	bf44      	itt	mi
 800637e:	f043 0320 	orrmi.w	r3, r3, #32
 8006382:	6023      	strmi	r3, [r4, #0]
 8006384:	b91e      	cbnz	r6, 800638e <_printf_i+0x196>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	f023 0320 	bic.w	r3, r3, #32
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	2310      	movs	r3, #16
 8006390:	e7b0      	b.n	80062f4 <_printf_i+0xfc>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	f043 0320 	orr.w	r3, r3, #32
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	2378      	movs	r3, #120	; 0x78
 800639c:	4828      	ldr	r0, [pc, #160]	; (8006440 <_printf_i+0x248>)
 800639e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063a2:	e7e3      	b.n	800636c <_printf_i+0x174>
 80063a4:	0659      	lsls	r1, r3, #25
 80063a6:	bf48      	it	mi
 80063a8:	b2b6      	uxthmi	r6, r6
 80063aa:	e7e6      	b.n	800637a <_printf_i+0x182>
 80063ac:	4615      	mov	r5, r2
 80063ae:	e7bb      	b.n	8006328 <_printf_i+0x130>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	6826      	ldr	r6, [r4, #0]
 80063b4:	6961      	ldr	r1, [r4, #20]
 80063b6:	1d18      	adds	r0, r3, #4
 80063b8:	6028      	str	r0, [r5, #0]
 80063ba:	0635      	lsls	r5, r6, #24
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	d501      	bpl.n	80063c4 <_printf_i+0x1cc>
 80063c0:	6019      	str	r1, [r3, #0]
 80063c2:	e002      	b.n	80063ca <_printf_i+0x1d2>
 80063c4:	0670      	lsls	r0, r6, #25
 80063c6:	d5fb      	bpl.n	80063c0 <_printf_i+0x1c8>
 80063c8:	8019      	strh	r1, [r3, #0]
 80063ca:	2300      	movs	r3, #0
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	4615      	mov	r5, r2
 80063d0:	e7ba      	b.n	8006348 <_printf_i+0x150>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	602a      	str	r2, [r5, #0]
 80063d8:	681d      	ldr	r5, [r3, #0]
 80063da:	6862      	ldr	r2, [r4, #4]
 80063dc:	2100      	movs	r1, #0
 80063de:	4628      	mov	r0, r5
 80063e0:	f7f9 ff0e 	bl	8000200 <memchr>
 80063e4:	b108      	cbz	r0, 80063ea <_printf_i+0x1f2>
 80063e6:	1b40      	subs	r0, r0, r5
 80063e8:	6060      	str	r0, [r4, #4]
 80063ea:	6863      	ldr	r3, [r4, #4]
 80063ec:	6123      	str	r3, [r4, #16]
 80063ee:	2300      	movs	r3, #0
 80063f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f4:	e7a8      	b.n	8006348 <_printf_i+0x150>
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	462a      	mov	r2, r5
 80063fa:	4649      	mov	r1, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	47d0      	blx	sl
 8006400:	3001      	adds	r0, #1
 8006402:	d0ab      	beq.n	800635c <_printf_i+0x164>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	079b      	lsls	r3, r3, #30
 8006408:	d413      	bmi.n	8006432 <_printf_i+0x23a>
 800640a:	68e0      	ldr	r0, [r4, #12]
 800640c:	9b03      	ldr	r3, [sp, #12]
 800640e:	4298      	cmp	r0, r3
 8006410:	bfb8      	it	lt
 8006412:	4618      	movlt	r0, r3
 8006414:	e7a4      	b.n	8006360 <_printf_i+0x168>
 8006416:	2301      	movs	r3, #1
 8006418:	4632      	mov	r2, r6
 800641a:	4649      	mov	r1, r9
 800641c:	4640      	mov	r0, r8
 800641e:	47d0      	blx	sl
 8006420:	3001      	adds	r0, #1
 8006422:	d09b      	beq.n	800635c <_printf_i+0x164>
 8006424:	3501      	adds	r5, #1
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	9903      	ldr	r1, [sp, #12]
 800642a:	1a5b      	subs	r3, r3, r1
 800642c:	42ab      	cmp	r3, r5
 800642e:	dcf2      	bgt.n	8006416 <_printf_i+0x21e>
 8006430:	e7eb      	b.n	800640a <_printf_i+0x212>
 8006432:	2500      	movs	r5, #0
 8006434:	f104 0619 	add.w	r6, r4, #25
 8006438:	e7f5      	b.n	8006426 <_printf_i+0x22e>
 800643a:	bf00      	nop
 800643c:	0801a6ad 	.word	0x0801a6ad
 8006440:	0801a6be 	.word	0x0801a6be

08006444 <_free_r>:
 8006444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006446:	2900      	cmp	r1, #0
 8006448:	d044      	beq.n	80064d4 <_free_r+0x90>
 800644a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800644e:	9001      	str	r0, [sp, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f1a1 0404 	sub.w	r4, r1, #4
 8006456:	bfb8      	it	lt
 8006458:	18e4      	addlt	r4, r4, r3
 800645a:	f000 f913 	bl	8006684 <__malloc_lock>
 800645e:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <_free_r+0x94>)
 8006460:	9801      	ldr	r0, [sp, #4]
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	b933      	cbnz	r3, 8006474 <_free_r+0x30>
 8006466:	6063      	str	r3, [r4, #4]
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	b003      	add	sp, #12
 800646c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006470:	f000 b90e 	b.w	8006690 <__malloc_unlock>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d908      	bls.n	800648a <_free_r+0x46>
 8006478:	6825      	ldr	r5, [r4, #0]
 800647a:	1961      	adds	r1, r4, r5
 800647c:	428b      	cmp	r3, r1
 800647e:	bf01      	itttt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	1949      	addeq	r1, r1, r5
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	e7ed      	b.n	8006466 <_free_r+0x22>
 800648a:	461a      	mov	r2, r3
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b10b      	cbz	r3, 8006494 <_free_r+0x50>
 8006490:	42a3      	cmp	r3, r4
 8006492:	d9fa      	bls.n	800648a <_free_r+0x46>
 8006494:	6811      	ldr	r1, [r2, #0]
 8006496:	1855      	adds	r5, r2, r1
 8006498:	42a5      	cmp	r5, r4
 800649a:	d10b      	bne.n	80064b4 <_free_r+0x70>
 800649c:	6824      	ldr	r4, [r4, #0]
 800649e:	4421      	add	r1, r4
 80064a0:	1854      	adds	r4, r2, r1
 80064a2:	42a3      	cmp	r3, r4
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	d1e0      	bne.n	800646a <_free_r+0x26>
 80064a8:	681c      	ldr	r4, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	6053      	str	r3, [r2, #4]
 80064ae:	4421      	add	r1, r4
 80064b0:	6011      	str	r1, [r2, #0]
 80064b2:	e7da      	b.n	800646a <_free_r+0x26>
 80064b4:	d902      	bls.n	80064bc <_free_r+0x78>
 80064b6:	230c      	movs	r3, #12
 80064b8:	6003      	str	r3, [r0, #0]
 80064ba:	e7d6      	b.n	800646a <_free_r+0x26>
 80064bc:	6825      	ldr	r5, [r4, #0]
 80064be:	1961      	adds	r1, r4, r5
 80064c0:	428b      	cmp	r3, r1
 80064c2:	bf04      	itt	eq
 80064c4:	6819      	ldreq	r1, [r3, #0]
 80064c6:	685b      	ldreq	r3, [r3, #4]
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	bf04      	itt	eq
 80064cc:	1949      	addeq	r1, r1, r5
 80064ce:	6021      	streq	r1, [r4, #0]
 80064d0:	6054      	str	r4, [r2, #4]
 80064d2:	e7ca      	b.n	800646a <_free_r+0x26>
 80064d4:	b003      	add	sp, #12
 80064d6:	bd30      	pop	{r4, r5, pc}
 80064d8:	200267c4 	.word	0x200267c4

080064dc <sbrk_aligned>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4e0e      	ldr	r6, [pc, #56]	; (8006518 <sbrk_aligned+0x3c>)
 80064e0:	460c      	mov	r4, r1
 80064e2:	6831      	ldr	r1, [r6, #0]
 80064e4:	4605      	mov	r5, r0
 80064e6:	b911      	cbnz	r1, 80064ee <sbrk_aligned+0x12>
 80064e8:	f000 f8bc 	bl	8006664 <_sbrk_r>
 80064ec:	6030      	str	r0, [r6, #0]
 80064ee:	4621      	mov	r1, r4
 80064f0:	4628      	mov	r0, r5
 80064f2:	f000 f8b7 	bl	8006664 <_sbrk_r>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d00a      	beq.n	8006510 <sbrk_aligned+0x34>
 80064fa:	1cc4      	adds	r4, r0, #3
 80064fc:	f024 0403 	bic.w	r4, r4, #3
 8006500:	42a0      	cmp	r0, r4
 8006502:	d007      	beq.n	8006514 <sbrk_aligned+0x38>
 8006504:	1a21      	subs	r1, r4, r0
 8006506:	4628      	mov	r0, r5
 8006508:	f000 f8ac 	bl	8006664 <_sbrk_r>
 800650c:	3001      	adds	r0, #1
 800650e:	d101      	bne.n	8006514 <sbrk_aligned+0x38>
 8006510:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006514:	4620      	mov	r0, r4
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	200267c8 	.word	0x200267c8

0800651c <_malloc_r>:
 800651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006520:	1ccd      	adds	r5, r1, #3
 8006522:	f025 0503 	bic.w	r5, r5, #3
 8006526:	3508      	adds	r5, #8
 8006528:	2d0c      	cmp	r5, #12
 800652a:	bf38      	it	cc
 800652c:	250c      	movcc	r5, #12
 800652e:	2d00      	cmp	r5, #0
 8006530:	4607      	mov	r7, r0
 8006532:	db01      	blt.n	8006538 <_malloc_r+0x1c>
 8006534:	42a9      	cmp	r1, r5
 8006536:	d905      	bls.n	8006544 <_malloc_r+0x28>
 8006538:	230c      	movs	r3, #12
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	2600      	movs	r6, #0
 800653e:	4630      	mov	r0, r6
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	4e2e      	ldr	r6, [pc, #184]	; (8006600 <_malloc_r+0xe4>)
 8006546:	f000 f89d 	bl	8006684 <__malloc_lock>
 800654a:	6833      	ldr	r3, [r6, #0]
 800654c:	461c      	mov	r4, r3
 800654e:	bb34      	cbnz	r4, 800659e <_malloc_r+0x82>
 8006550:	4629      	mov	r1, r5
 8006552:	4638      	mov	r0, r7
 8006554:	f7ff ffc2 	bl	80064dc <sbrk_aligned>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	4604      	mov	r4, r0
 800655c:	d14d      	bne.n	80065fa <_malloc_r+0xde>
 800655e:	6834      	ldr	r4, [r6, #0]
 8006560:	4626      	mov	r6, r4
 8006562:	2e00      	cmp	r6, #0
 8006564:	d140      	bne.n	80065e8 <_malloc_r+0xcc>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	4631      	mov	r1, r6
 800656a:	4638      	mov	r0, r7
 800656c:	eb04 0803 	add.w	r8, r4, r3
 8006570:	f000 f878 	bl	8006664 <_sbrk_r>
 8006574:	4580      	cmp	r8, r0
 8006576:	d13a      	bne.n	80065ee <_malloc_r+0xd2>
 8006578:	6821      	ldr	r1, [r4, #0]
 800657a:	3503      	adds	r5, #3
 800657c:	1a6d      	subs	r5, r5, r1
 800657e:	f025 0503 	bic.w	r5, r5, #3
 8006582:	3508      	adds	r5, #8
 8006584:	2d0c      	cmp	r5, #12
 8006586:	bf38      	it	cc
 8006588:	250c      	movcc	r5, #12
 800658a:	4629      	mov	r1, r5
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff ffa5 	bl	80064dc <sbrk_aligned>
 8006592:	3001      	adds	r0, #1
 8006594:	d02b      	beq.n	80065ee <_malloc_r+0xd2>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	442b      	add	r3, r5
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	e00e      	b.n	80065bc <_malloc_r+0xa0>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	1b52      	subs	r2, r2, r5
 80065a2:	d41e      	bmi.n	80065e2 <_malloc_r+0xc6>
 80065a4:	2a0b      	cmp	r2, #11
 80065a6:	d916      	bls.n	80065d6 <_malloc_r+0xba>
 80065a8:	1961      	adds	r1, r4, r5
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	6025      	str	r5, [r4, #0]
 80065ae:	bf18      	it	ne
 80065b0:	6059      	strne	r1, [r3, #4]
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	bf08      	it	eq
 80065b6:	6031      	streq	r1, [r6, #0]
 80065b8:	5162      	str	r2, [r4, r5]
 80065ba:	604b      	str	r3, [r1, #4]
 80065bc:	4638      	mov	r0, r7
 80065be:	f104 060b 	add.w	r6, r4, #11
 80065c2:	f000 f865 	bl	8006690 <__malloc_unlock>
 80065c6:	f026 0607 	bic.w	r6, r6, #7
 80065ca:	1d23      	adds	r3, r4, #4
 80065cc:	1af2      	subs	r2, r6, r3
 80065ce:	d0b6      	beq.n	800653e <_malloc_r+0x22>
 80065d0:	1b9b      	subs	r3, r3, r6
 80065d2:	50a3      	str	r3, [r4, r2]
 80065d4:	e7b3      	b.n	800653e <_malloc_r+0x22>
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	42a3      	cmp	r3, r4
 80065da:	bf0c      	ite	eq
 80065dc:	6032      	streq	r2, [r6, #0]
 80065de:	605a      	strne	r2, [r3, #4]
 80065e0:	e7ec      	b.n	80065bc <_malloc_r+0xa0>
 80065e2:	4623      	mov	r3, r4
 80065e4:	6864      	ldr	r4, [r4, #4]
 80065e6:	e7b2      	b.n	800654e <_malloc_r+0x32>
 80065e8:	4634      	mov	r4, r6
 80065ea:	6876      	ldr	r6, [r6, #4]
 80065ec:	e7b9      	b.n	8006562 <_malloc_r+0x46>
 80065ee:	230c      	movs	r3, #12
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4638      	mov	r0, r7
 80065f4:	f000 f84c 	bl	8006690 <__malloc_unlock>
 80065f8:	e7a1      	b.n	800653e <_malloc_r+0x22>
 80065fa:	6025      	str	r5, [r4, #0]
 80065fc:	e7de      	b.n	80065bc <_malloc_r+0xa0>
 80065fe:	bf00      	nop
 8006600:	200267c4 	.word	0x200267c4

08006604 <_realloc_r>:
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	4680      	mov	r8, r0
 800660a:	4614      	mov	r4, r2
 800660c:	460e      	mov	r6, r1
 800660e:	b921      	cbnz	r1, 800661a <_realloc_r+0x16>
 8006610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006614:	4611      	mov	r1, r2
 8006616:	f7ff bf81 	b.w	800651c <_malloc_r>
 800661a:	b92a      	cbnz	r2, 8006628 <_realloc_r+0x24>
 800661c:	f7ff ff12 	bl	8006444 <_free_r>
 8006620:	4625      	mov	r5, r4
 8006622:	4628      	mov	r0, r5
 8006624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006628:	f000 f838 	bl	800669c <_malloc_usable_size_r>
 800662c:	4284      	cmp	r4, r0
 800662e:	4607      	mov	r7, r0
 8006630:	d802      	bhi.n	8006638 <_realloc_r+0x34>
 8006632:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006636:	d812      	bhi.n	800665e <_realloc_r+0x5a>
 8006638:	4621      	mov	r1, r4
 800663a:	4640      	mov	r0, r8
 800663c:	f7ff ff6e 	bl	800651c <_malloc_r>
 8006640:	4605      	mov	r5, r0
 8006642:	2800      	cmp	r0, #0
 8006644:	d0ed      	beq.n	8006622 <_realloc_r+0x1e>
 8006646:	42bc      	cmp	r4, r7
 8006648:	4622      	mov	r2, r4
 800664a:	4631      	mov	r1, r6
 800664c:	bf28      	it	cs
 800664e:	463a      	movcs	r2, r7
 8006650:	f7ff fba4 	bl	8005d9c <memcpy>
 8006654:	4631      	mov	r1, r6
 8006656:	4640      	mov	r0, r8
 8006658:	f7ff fef4 	bl	8006444 <_free_r>
 800665c:	e7e1      	b.n	8006622 <_realloc_r+0x1e>
 800665e:	4635      	mov	r5, r6
 8006660:	e7df      	b.n	8006622 <_realloc_r+0x1e>
	...

08006664 <_sbrk_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d06      	ldr	r5, [pc, #24]	; (8006680 <_sbrk_r+0x1c>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fd f9ee 	bl	8003a50 <_sbrk>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_sbrk_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_sbrk_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	200267cc 	.word	0x200267cc

08006684 <__malloc_lock>:
 8006684:	4801      	ldr	r0, [pc, #4]	; (800668c <__malloc_lock+0x8>)
 8006686:	f000 b811 	b.w	80066ac <__retarget_lock_acquire_recursive>
 800668a:	bf00      	nop
 800668c:	200267d0 	.word	0x200267d0

08006690 <__malloc_unlock>:
 8006690:	4801      	ldr	r0, [pc, #4]	; (8006698 <__malloc_unlock+0x8>)
 8006692:	f000 b80c 	b.w	80066ae <__retarget_lock_release_recursive>
 8006696:	bf00      	nop
 8006698:	200267d0 	.word	0x200267d0

0800669c <_malloc_usable_size_r>:
 800669c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a0:	1f18      	subs	r0, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bfbc      	itt	lt
 80066a6:	580b      	ldrlt	r3, [r1, r0]
 80066a8:	18c0      	addlt	r0, r0, r3
 80066aa:	4770      	bx	lr

080066ac <__retarget_lock_acquire_recursive>:
 80066ac:	4770      	bx	lr

080066ae <__retarget_lock_release_recursive>:
 80066ae:	4770      	bx	lr

080066b0 <round>:
 80066b0:	ec51 0b10 	vmov	r0, r1, d0
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80066ba:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80066be:	2c13      	cmp	r4, #19
 80066c0:	ee10 2a10 	vmov	r2, s0
 80066c4:	460b      	mov	r3, r1
 80066c6:	dc19      	bgt.n	80066fc <round+0x4c>
 80066c8:	2c00      	cmp	r4, #0
 80066ca:	da09      	bge.n	80066e0 <round+0x30>
 80066cc:	3401      	adds	r4, #1
 80066ce:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80066d2:	d103      	bne.n	80066dc <round+0x2c>
 80066d4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066dc:	2200      	movs	r2, #0
 80066de:	e028      	b.n	8006732 <round+0x82>
 80066e0:	4d15      	ldr	r5, [pc, #84]	; (8006738 <round+0x88>)
 80066e2:	4125      	asrs	r5, r4
 80066e4:	ea01 0605 	and.w	r6, r1, r5
 80066e8:	4332      	orrs	r2, r6
 80066ea:	d00e      	beq.n	800670a <round+0x5a>
 80066ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80066f0:	fa42 f404 	asr.w	r4, r2, r4
 80066f4:	4423      	add	r3, r4
 80066f6:	ea23 0305 	bic.w	r3, r3, r5
 80066fa:	e7ef      	b.n	80066dc <round+0x2c>
 80066fc:	2c33      	cmp	r4, #51	; 0x33
 80066fe:	dd07      	ble.n	8006710 <round+0x60>
 8006700:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006704:	d101      	bne.n	800670a <round+0x5a>
 8006706:	f7f9 fdd1 	bl	80002ac <__adddf3>
 800670a:	ec41 0b10 	vmov	d0, r0, r1
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006714:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006718:	40f5      	lsrs	r5, r6
 800671a:	4228      	tst	r0, r5
 800671c:	d0f5      	beq.n	800670a <round+0x5a>
 800671e:	2101      	movs	r1, #1
 8006720:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006724:	fa01 f404 	lsl.w	r4, r1, r4
 8006728:	1912      	adds	r2, r2, r4
 800672a:	bf28      	it	cs
 800672c:	185b      	addcs	r3, r3, r1
 800672e:	ea22 0205 	bic.w	r2, r2, r5
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	e7e8      	b.n	800670a <round+0x5a>
 8006738:	000fffff 	.word	0x000fffff

0800673c <_init>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr

08006748 <_fini>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr
