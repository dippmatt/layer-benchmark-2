
TinyEngineTemplateCleanR5Zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b0  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bfc  08002bfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000010  08002c10  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08002c10  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167fa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc4  00000000  00000000  00036836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00039400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a28  00000000  00000000  00039f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bf1  00000000  00000000  0003b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016938  00000000  00000000  00065559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff525  00000000  00000000  0007be91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017b3b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020dc  00000000  00000000  0017b408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00010fdd  00000000  00000000  0017d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08002b58 	.word	0x08002b58

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08002b58 	.word	0x08002b58

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	0000      	movs	r0, r0
	...

08000508 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000508:	b500      	push	{lr}
 800050a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050c:	2244      	movs	r2, #68	; 0x44
 800050e:	2100      	movs	r1, #0
 8000510:	a805      	add	r0, sp, #20
 8000512:	f002 fb19 	bl	8002b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000516:	2000      	movs	r0, #0
 8000518:	e9cd 0000 	strd	r0, r0, [sp]
 800051c:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8000520:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000522:	f000 fd1d 	bl	8000f60 <HAL_PWREx_ControlVoltageScaling>
 8000526:	b108      	cbz	r0, 800052c <SystemClock_Config+0x24>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052a:	e7fe      	b.n	800052a <SystemClock_Config+0x22>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052c:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI;
 8000530:	2122      	movs	r1, #34	; 0x22
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000534:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI;
 8000538:	9105      	str	r1, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800053c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 30;
 800053e:	221e      	movs	r2, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000542:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000546:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054a:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000550:	910e      	str	r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f000 fe2f 	bl	80011b4 <HAL_RCC_OscConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	b108      	cbz	r0, 800055e <SystemClock_Config+0x56>
 800055a:	b672      	cpsid	i
  while (1)
 800055c:	e7fe      	b.n	800055c <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800055e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000588 <SystemClock_Config+0x80>
 8000562:	ed8d 7b00 	vstr	d7, [sp]
 8000566:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000590 <SystemClock_Config+0x88>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800056a:	2105      	movs	r1, #5
 800056c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800056e:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000574:	f001 f930 	bl	80017d8 <HAL_RCC_ClockConfig>
 8000578:	b108      	cbz	r0, 800057e <SystemClock_Config+0x76>
 800057a:	b672      	cpsid	i
  while (1)
 800057c:	e7fe      	b.n	800057c <SystemClock_Config+0x74>
}
 800057e:	b017      	add	sp, #92	; 0x5c
 8000580:	f85d fb04 	ldr.w	pc, [sp], #4
 8000584:	f3af 8000 	nop.w
 8000588:	0000000f 	.word	0x0000000f
 800058c:	00000003 	.word	0x00000003
 8000590:	00000000 	.word	0x00000000
 8000594:	00000400 	.word	0x00000400

08000598 <main>:
{
 8000598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	2500      	movs	r5, #0
{
 800059e:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80005a0:	f000 fa74 	bl	8000a8c <HAL_Init>
  SystemClock_Config();
 80005a4:	f7ff ffb0 	bl	8000508 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	e9cd 5506 	strd	r5, r5, [sp, #24]
 80005ac:	e9cd 5508 	strd	r5, r5, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	4c6e      	ldr	r4, [pc, #440]	; (800076c <main+0x1d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 80005bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80005ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	64e3      	str	r3, [r4, #76]	; 0x4c
 80005e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80005f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005f4:	f003 0308 	and.w	r3, r3, #8
 80005f8:	9303      	str	r3, [sp, #12]
 80005fa:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000602:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000604:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060a:	9304      	str	r3, [sp, #16]
 800060c:	9b04      	ldr	r3, [sp, #16]
  HAL_PWREx_EnableVddIO2();
 800060e:	f000 fd2d 	bl	800106c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000614:	4856      	ldr	r0, [pc, #344]	; (8000770 <main+0x1d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800061c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  hlpuart1.Instance = LPUART1;
 800061e:	4c55      	ldr	r4, [pc, #340]	; (8000774 <main+0x1dc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000624:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000628:	462a      	mov	r2, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	9305      	str	r3, [sp, #20]
 800062c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800062e:	f000 fbd3 	bl	8000dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000632:	4851      	ldr	r0, [pc, #324]	; (8000778 <main+0x1e0>)
 8000634:	462a      	mov	r2, r5
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	f000 fbce 	bl	8000dd8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800063c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000640:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000644:	484d      	ldr	r0, [pc, #308]	; (800077c <main+0x1e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000648:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = B1_Pin;
 800064a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 800064e:	2600      	movs	r6, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000650:	f000 faba 	bl	8000bc8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8000654:	2700      	movs	r7, #0
 8000656:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 800065a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	4844      	ldr	r0, [pc, #272]	; (8000770 <main+0x1d8>)
 800065e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8000660:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000664:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f000 faae 	bl	8000bc8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800066c:	2220      	movs	r2, #32
 800066e:	2300      	movs	r3, #0
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000670:	4841      	ldr	r0, [pc, #260]	; (8000778 <main+0x1e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000674:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000676:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800067a:	f000 faa5 	bl	8000bc8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800067e:	2301      	movs	r3, #1
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000680:	483d      	ldr	r0, [pc, #244]	; (8000778 <main+0x1e0>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000682:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000684:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000686:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800068a:	e9cd 6708 	strd	r6, r7, [sp, #32]
  hlpuart1.Init.BaudRate = 115200;
 800068e:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000692:	f000 fa99 	bl	8000bc8 <HAL_GPIO_Init>
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000696:	f04f 080c 	mov.w	r8, #12
  hlpuart1.Instance = LPUART1;
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <main+0x1e8>)
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	62a5      	str	r5, [r4, #40]	; 0x28
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069e:	e9c4 6708 	strd	r6, r7, [r4, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006a2:	4620      	mov	r0, r4
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a4:	e9c4 9501 	strd	r9, r5, [r4, #4]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006a8:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ac:	e9c4 8505 	strd	r8, r5, [r4, #20]
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006b0:	6665      	str	r5, [r4, #100]	; 0x64
  hlpuart1.Instance = LPUART1;
 80006b2:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006b4:	f001 ff7e 	bl	80025b4 <HAL_UART_Init>
 80006b8:	b108      	cbz	r0, 80006be <main+0x126>
 80006ba:	b672      	cpsid	i
  while (1)
 80006bc:	e7fe      	b.n	80006bc <main+0x124>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006be:	4601      	mov	r1, r0
 80006c0:	4620      	mov	r0, r4
 80006c2:	f002 f801 	bl	80026c8 <HAL_UARTEx_SetTxFifoThreshold>
 80006c6:	b108      	cbz	r0, 80006cc <main+0x134>
 80006c8:	b672      	cpsid	i
  while (1)
 80006ca:	e7fe      	b.n	80006ca <main+0x132>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006cc:	4601      	mov	r1, r0
 80006ce:	4620      	mov	r0, r4
 80006d0:	f002 f83c 	bl	800274c <HAL_UARTEx_SetRxFifoThreshold>
 80006d4:	b108      	cbz	r0, 80006da <main+0x142>
 80006d6:	b672      	cpsid	i
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x140>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006da:	4620      	mov	r0, r4
 80006dc:	f001 ffd6 	bl	800268c <HAL_UARTEx_DisableFifoMode>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b108      	cbz	r0, 80006e8 <main+0x150>
 80006e4:	b672      	cpsid	i
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <main+0x14e>
  huart3.Instance = USART3;
 80006e8:	4c26      	ldr	r4, [pc, #152]	; (8000784 <main+0x1ec>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	e9c4 9001 	strd	r9, r0, [r4, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f2:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f6:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fc:	4620      	mov	r0, r4
  huart3.Instance = USART3;
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <main+0x1f0>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000700:	f8c4 8014 	str.w	r8, [r4, #20]
  huart3.Instance = USART3;
 8000704:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000706:	f001 ff55 	bl	80025b4 <HAL_UART_Init>
 800070a:	4601      	mov	r1, r0
 800070c:	b108      	cbz	r0, 8000712 <main+0x17a>
 800070e:	b672      	cpsid	i
  while (1)
 8000710:	e7fe      	b.n	8000710 <main+0x178>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000712:	4620      	mov	r0, r4
 8000714:	f001 ffd8 	bl	80026c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000718:	4601      	mov	r1, r0
 800071a:	b108      	cbz	r0, 8000720 <main+0x188>
 800071c:	b672      	cpsid	i
  while (1)
 800071e:	e7fe      	b.n	800071e <main+0x186>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000720:	4620      	mov	r0, r4
 8000722:	f002 f813 	bl	800274c <HAL_UARTEx_SetRxFifoThreshold>
 8000726:	b108      	cbz	r0, 800072c <main+0x194>
 8000728:	b672      	cpsid	i
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0x192>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800072c:	4620      	mov	r0, r4
 800072e:	f001 ffad 	bl	800268c <HAL_UARTEx_DisableFifoMode>
 8000732:	4602      	mov	r2, r0
 8000734:	b108      	cbz	r0, 800073a <main+0x1a2>
 8000736:	b672      	cpsid	i
  while (1)
 8000738:	e7fe      	b.n	8000738 <main+0x1a0>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800073a:	4814      	ldr	r0, [pc, #80]	; (800078c <main+0x1f4>)
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800073c:	2401      	movs	r4, #1
 800073e:	2501      	movs	r5, #1
 8000740:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000744:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000748:	2402      	movs	r4, #2
 800074a:	2501      	movs	r5, #1
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800074c:	6001      	str	r1, [r0, #0]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800074e:	e9c0 6708 	strd	r6, r7, [r0, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000752:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000754:	e9c0 4506 	strd	r4, r5, [r0, #24]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000758:	6041      	str	r1, [r0, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800075a:	6302      	str	r2, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800075c:	f000 fb42 	bl	8000de4 <HAL_PCD_Init>
 8000760:	b108      	cbz	r0, 8000766 <main+0x1ce>
 8000762:	b672      	cpsid	i
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x1cc>
}
 8000766:	b00d      	add	sp, #52	; 0x34
 8000768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400
 8000774:	20000030 	.word	0x20000030
 8000778:	48001800 	.word	0x48001800
 800077c:	48000800 	.word	0x48000800
 8000780:	40008000 	.word	0x40008000
 8000784:	200005cc 	.word	0x200005cc
 8000788:	40004800 	.word	0x40004800
 800078c:	200000c0 	.word	0x200000c0

08000790 <Error_Handler>:
 8000790:	b672      	cpsid	i
  while (1)
 8000792:	e7fe      	b.n	8000792 <Error_Handler+0x2>

08000794 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_MspInit+0x2c>)
 8000796:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000798:	f042 0201 	orr.w	r2, r2, #1
 800079c:	661a      	str	r2, [r3, #96]	; 0x60
 800079e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80007a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	f002 0201 	and.w	r2, r2, #1
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007b0:	659a      	str	r2, [r3, #88]	; 0x58
 80007b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007bc:	b002      	add	sp, #8
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	00000000 	.word	0x00000000

080007c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c8:	b510      	push	{r4, lr}
 80007ca:	4604      	mov	r4, r0
 80007cc:	b0ae      	sub	sp, #184	; 0xb8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	2294      	movs	r2, #148	; 0x94
 80007d2:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80007d8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80007dc:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007de:	f002 f9b3 	bl	8002b48 <memset>
  if(huart->Instance==LPUART1)
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	4a38      	ldr	r2, [pc, #224]	; (80008c8 <HAL_UART_MspInit+0x100>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d004      	beq.n	80007f4 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80007ea:	4a38      	ldr	r2, [pc, #224]	; (80008cc <HAL_UART_MspInit+0x104>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d02d      	beq.n	800084c <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007f0:	b02e      	add	sp, #184	; 0xb8
 80007f2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007f4:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f6:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007f8:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fa:	f001 fa39 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d14d      	bne.n	800089e <HAL_UART_MspInit+0xd6>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000802:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <HAL_UART_MspInit+0x108>)
 8000804:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000806:	f042 0201 	orr.w	r2, r2, #1
 800080a:	65da      	str	r2, [r3, #92]	; 0x5c
 800080c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800080e:	f002 0201 	and.w	r2, r2, #1
 8000812:	9200      	str	r2, [sp, #0]
 8000814:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800081c:	64da      	str	r2, [r3, #76]	; 0x4c
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8000828:	f000 fc20 	bl	800106c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800082c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80008b0 <HAL_UART_MspInit+0xe8>
 8000830:	2200      	movs	r2, #0
 8000832:	2303      	movs	r3, #3
 8000834:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000838:	4826      	ldr	r0, [pc, #152]	; (80008d4 <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800083a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800083c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800083e:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000842:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000844:	f000 f9c0 	bl	8000bc8 <HAL_GPIO_Init>
}
 8000848:	b02e      	add	sp, #184	; 0xb8
 800084a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800084c:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084e:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000850:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000852:	f001 fa0d 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 8000856:	bb28      	cbnz	r0, 80008a4 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085a:	481f      	ldr	r0, [pc, #124]	; (80008d8 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800085c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800085e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000862:	659a      	str	r2, [r3, #88]	; 0x58
 8000864:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000866:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800086a:	9202      	str	r2, [sp, #8]
 800086c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000870:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80008b8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	f042 0208 	orr.w	r2, r2, #8
 8000878:	64da      	str	r2, [r3, #76]	; 0x4c
 800087a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800087c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000880:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80008c0 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800088c:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800088e:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000894:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000896:	f000 f997 	bl	8000bc8 <HAL_GPIO_Init>
}
 800089a:	b02e      	add	sp, #184	; 0xb8
 800089c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800089e:	f7ff ff77 	bl	8000790 <Error_Handler>
 80008a2:	e7ae      	b.n	8000802 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80008a4:	f7ff ff74 	bl	8000790 <Error_Handler>
 80008a8:	e7d6      	b.n	8000858 <HAL_UART_MspInit+0x90>
 80008aa:	bf00      	nop
 80008ac:	f3af 8000 	nop.w
 80008b0:	00000180 	.word	0x00000180
 80008b4:	00000002 	.word	0x00000002
 80008b8:	00000300 	.word	0x00000300
 80008bc:	00000002 	.word	0x00000002
 80008c0:	00000000 	.word	0x00000000
 80008c4:	00000003 	.word	0x00000003
 80008c8:	40008000 	.word	0x40008000
 80008cc:	40004800 	.word	0x40004800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48001800 	.word	0x48001800
 80008d8:	48000c00 	.word	0x48000c00
 80008dc:	00000000 	.word	0x00000000

080008e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008e0:	b510      	push	{r4, lr}
 80008e2:	4604      	mov	r4, r0
 80008e4:	b0ae      	sub	sp, #184	; 0xb8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e8:	2294      	movs	r2, #148	; 0x94
 80008ea:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80008f0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80008f4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f6:	f002 f927 	bl	8002b48 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000900:	d001      	beq.n	8000906 <HAL_PCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000902:	b02e      	add	sp, #184	; 0xb8
 8000904:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800090c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090e:	f001 f9af 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	2800      	cmp	r0, #0
 8000914:	d143      	bne.n	800099e <HAL_PCD_MspInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4c26      	ldr	r4, [pc, #152]	; (80009b0 <HAL_PCD_MspInit+0xd0>)
 8000918:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000920:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000928:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
 800092c:	2302      	movs	r3, #2
 800092e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000932:	2200      	movs	r2, #0
 8000934:	2303      	movs	r3, #3
 8000936:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800093c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000944:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f000 f93f 	bl	8000bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800094a:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80009a8 <HAL_PCD_MspInit+0xc8>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000950:	a904      	add	r1, sp, #16
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000958:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800095c:	f000 f934 	bl	8000bc8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000960:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000962:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000966:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000968:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800096a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000972:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	d40f      	bmi.n	8000998 <HAL_PCD_MspInit+0xb8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800097a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	9303      	str	r3, [sp, #12]
 8000988:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 800098a:	f000 fb67 	bl	800105c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800098e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000994:	65a3      	str	r3, [r4, #88]	; 0x58
 8000996:	e7b4      	b.n	8000902 <HAL_PCD_MspInit+0x22>
      HAL_PWREx_EnableVddUSB();
 8000998:	f000 fb60 	bl	800105c <HAL_PWREx_EnableVddUSB>
}
 800099c:	e7b1      	b.n	8000902 <HAL_PCD_MspInit+0x22>
      Error_Handler();
 800099e:	f7ff fef7 	bl	8000790 <Error_Handler>
 80009a2:	e7b8      	b.n	8000916 <HAL_PCD_MspInit+0x36>
 80009a4:	f3af 8000 	nop.w
 80009a8:	00000200 	.word	0x00000200
 80009ac:	00000000 	.word	0x00000000
 80009b0:	40021000 	.word	0x40021000

080009b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler>
 80009b6:	bf00      	nop

080009b8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <HardFault_Handler>
 80009ba:	bf00      	nop

080009bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler>
 80009be:	bf00      	nop

080009c0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <BusFault_Handler>
 80009c2:	bf00      	nop

080009c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler>
 80009c6:	bf00      	nop

080009c8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <DebugMon_Handler>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <PendSV_Handler>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 b86a 	b.w	8000aac <HAL_IncTick>

080009d8 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d8:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <SystemInit+0x10>)
 80009da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f0:	f7ff fff2 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f002 f871 	bl	8002b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fdbb 	bl	8000598 <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a30:	08002c04 	.word	0x08002c04
  ldr r2, =_sbss
 8000a34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a38:	20000660 	.word	0x20000660

08000a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_IRQHandler>
	...

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_InitTick+0x40>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b90b      	cbnz	r3, 8000a4c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a4c:	490d      	ldr	r1, [pc, #52]	; (8000a84 <HAL_InitTick+0x44>)
 8000a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a52:	4605      	mov	r5, r0
 8000a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a58:	6808      	ldr	r0, [r1, #0]
 8000a5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a5e:	f000 f899 	bl	8000b94 <HAL_SYSTICK_Config>
 8000a62:	4604      	mov	r4, r0
 8000a64:	2800      	cmp	r0, #0
 8000a66:	d1ef      	bne.n	8000a48 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a68:	2d0f      	cmp	r5, #15
 8000a6a:	d8ed      	bhi.n	8000a48 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	4629      	mov	r1, r5
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	f000 f850 	bl	8000b18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_InitTick+0x48>)
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	601d      	str	r5, [r3, #0]
}
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
 8000a80:	20000004 	.word	0x20000004
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_Init>:
{
 8000a8c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f000 f830 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff ffd3 	bl	8000a40 <HAL_InitTick>
 8000a9a:	b110      	cbz	r0, 8000aa2 <HAL_Init+0x16>
    status = HAL_ERROR;
 8000a9c:	2401      	movs	r4, #1
}
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	bd10      	pop	{r4, pc}
 8000aa2:	4604      	mov	r4, r0
    HAL_MspInit();
 8000aa4:	f7ff fe76 	bl	8000794 <HAL_MspInit>
}
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	bd10      	pop	{r4, pc}

08000aac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x10>)
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <HAL_IncTick+0x14>)
 8000ab0:	6811      	ldr	r1, [r2, #0]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	440b      	add	r3, r1
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2000065c 	.word	0x2000065c
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ac4:	4b01      	ldr	r3, [pc, #4]	; (8000acc <HAL_GetTick+0x8>)
 8000ac6:	6818      	ldr	r0, [r3, #0]
}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000065c 	.word	0x2000065c

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff fff6 	bl	8000ac4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000ada:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000adc:	d002      	beq.n	8000ae4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_Delay+0x20>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae4:	f7ff ffee 	bl	8000ac4 <HAL_GetTick>
 8000ae8:	1b43      	subs	r3, r0, r5
 8000aea:	42a3      	cmp	r3, r4
 8000aec:	d3fa      	bcc.n	8000ae4 <HAL_Delay+0x14>
  {
  }
}
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b06:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b0e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_NVIC_SetPriority+0x74>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b22:	f1c3 0e07 	rsb	lr, r3, #7
 8000b26:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2e:	bf28      	it	cs
 8000b30:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b34:	f1bc 0f06 	cmp.w	ip, #6
 8000b38:	d91b      	bls.n	8000b72 <HAL_NVIC_SetPriority+0x5a>
 8000b3a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b40:	fa0c fc03 	lsl.w	ip, ip, r3
 8000b44:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b4c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000b50:	ea21 010c 	bic.w	r1, r1, ip
 8000b54:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000b56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	db0c      	blt.n	8000b78 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b62:	0109      	lsls	r1, r1, #4
 8000b64:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b68:	b2c9      	uxtb	r1, r1
 8000b6a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b72:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b74:	4613      	mov	r3, r2
 8000b76:	e7e7      	b.n	8000b48 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_NVIC_SetPriority+0x78>)
 8000b7a:	f000 000f 	and.w	r0, r0, #15
 8000b7e:	0109      	lsls	r1, r1, #4
 8000b80:	4403      	add	r3, r0
 8000b82:	b2c9      	uxtb	r1, r1
 8000b84:	7619      	strb	r1, [r3, #24]
 8000b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00
 8000b90:	e000ecfc 	.word	0xe000ecfc

08000b94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	3801      	subs	r0, #1
 8000b96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9a:	d210      	bcs.n	8000bbe <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	4c08      	ldr	r4, [pc, #32]	; (8000bc4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8000baa:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8000bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	6119      	str	r1, [r3, #16]
 8000bbc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bcc:	680c      	ldr	r4, [r1, #0]
{
 8000bce:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd0:	2c00      	cmp	r4, #0
 8000bd2:	f000 808c 	beq.w	8000cee <HAL_GPIO_Init+0x126>
 8000bd6:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8000dd0 <HAL_GPIO_Init+0x208>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bde:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8000dd4 <HAL_GPIO_Init+0x20c>
  uint32_t position = 0x00u;
 8000be2:	4663      	mov	r3, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be4:	4688      	mov	r8, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be6:	2601      	movs	r6, #1
 8000be8:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000bea:	ea16 0904 	ands.w	r9, r6, r4
 8000bee:	d077      	beq.n	8000ce0 <HAL_GPIO_Init+0x118>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8000bf4:	f005 0203 	and.w	r2, r5, #3
 8000bf8:	1e51      	subs	r1, r2, #1
 8000bfa:	2901      	cmp	r1, #1
 8000bfc:	d97a      	bls.n	8000cf4 <HAL_GPIO_Init+0x12c>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfe:	2a03      	cmp	r2, #3
 8000c00:	f040 80b5 	bne.w	8000d6e <HAL_GPIO_Init+0x1a6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c04:	fa02 f20c 	lsl.w	r2, r2, ip
 8000c08:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8000c0a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c0c:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0e:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c10:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000c14:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c16:	d063      	beq.n	8000ce0 <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c18:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8000c1c:	f042 0201 	orr.w	r2, r2, #1
 8000c20:	f8cb 2060 	str.w	r2, [fp, #96]	; 0x60
 8000c24:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8000c28:	f002 0201 	and.w	r2, r2, #1
 8000c2c:	9203      	str	r2, [sp, #12]
 8000c2e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c30:	f023 0203 	bic.w	r2, r3, #3
 8000c34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000c38:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c3c:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c40:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c42:	00b6      	lsls	r6, r6, #2
 8000c44:	210f      	movs	r1, #15
 8000c46:	40b1      	lsls	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c48:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4c:	ea27 0101 	bic.w	r1, r7, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c50:	d01f      	beq.n	8000c92 <HAL_GPIO_Init+0xca>
 8000c52:	4f58      	ldr	r7, [pc, #352]	; (8000db4 <HAL_GPIO_Init+0x1ec>)
 8000c54:	42b8      	cmp	r0, r7
 8000c56:	f000 8094 	beq.w	8000d82 <HAL_GPIO_Init+0x1ba>
 8000c5a:	4f57      	ldr	r7, [pc, #348]	; (8000db8 <HAL_GPIO_Init+0x1f0>)
 8000c5c:	42b8      	cmp	r0, r7
 8000c5e:	f000 8095 	beq.w	8000d8c <HAL_GPIO_Init+0x1c4>
 8000c62:	4f56      	ldr	r7, [pc, #344]	; (8000dbc <HAL_GPIO_Init+0x1f4>)
 8000c64:	42b8      	cmp	r0, r7
 8000c66:	f000 8087 	beq.w	8000d78 <HAL_GPIO_Init+0x1b0>
 8000c6a:	4f55      	ldr	r7, [pc, #340]	; (8000dc0 <HAL_GPIO_Init+0x1f8>)
 8000c6c:	42b8      	cmp	r0, r7
 8000c6e:	f000 8097 	beq.w	8000da0 <HAL_GPIO_Init+0x1d8>
 8000c72:	4f54      	ldr	r7, [pc, #336]	; (8000dc4 <HAL_GPIO_Init+0x1fc>)
 8000c74:	42b8      	cmp	r0, r7
 8000c76:	f000 8098 	beq.w	8000daa <HAL_GPIO_Init+0x1e2>
 8000c7a:	4f53      	ldr	r7, [pc, #332]	; (8000dc8 <HAL_GPIO_Init+0x200>)
 8000c7c:	42b8      	cmp	r0, r7
 8000c7e:	f000 808a 	beq.w	8000d96 <HAL_GPIO_Init+0x1ce>
 8000c82:	4f52      	ldr	r7, [pc, #328]	; (8000dcc <HAL_GPIO_Init+0x204>)
 8000c84:	42b8      	cmp	r0, r7
 8000c86:	bf0c      	ite	eq
 8000c88:	2707      	moveq	r7, #7
 8000c8a:	2708      	movne	r7, #8
 8000c8c:	fa07 f606 	lsl.w	r6, r7, r6
 8000c90:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c92:	6091      	str	r1, [r2, #8]
        temp = EXTI->RTSR1;
 8000c94:	f8da 2008 	ldr.w	r2, [sl, #8]
        temp &= ~(iocurrent);
 8000c98:	ea6f 0609 	mvn.w	r6, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c9c:	02e9      	lsls	r1, r5, #11
        temp &= ~(iocurrent);
 8000c9e:	bf54      	ite	pl
 8000ca0:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8000ca2:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8000ca6:	f8ca 2008 	str.w	r2, [sl, #8]

        temp = EXTI->FTSR1;
 8000caa:	f8da 100c 	ldr.w	r1, [sl, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cae:	02aa      	lsls	r2, r5, #10
        temp &= ~(iocurrent);
 8000cb0:	bf54      	ite	pl
 8000cb2:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8000cb4:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->FTSR1 = temp;
 8000cb8:	f8ca 100c 	str.w	r1, [sl, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cbc:	f8da 1004 	ldr.w	r1, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc0:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8000cc2:	bf54      	ite	pl
 8000cc4:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8000cc6:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->EMR1 = temp;
 8000cca:	f8ca 1004 	str.w	r1, [sl, #4]

        temp = EXTI->IMR1;
 8000cce:	f8da 2000 	ldr.w	r2, [sl]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd2:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8000cd4:	bf54      	ite	pl
 8000cd6:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8000cd8:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8000cdc:	f8ca 2000 	str.w	r2, [sl]
      }
    }

    position++;
 8000ce0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	fa34 f203 	lsrs.w	r2, r4, r3
 8000ce6:	f10c 0c02 	add.w	ip, ip, #2
 8000cea:	f47f af7c 	bne.w	8000be6 <HAL_GPIO_Init+0x1e>
  }
}
 8000cee:	b005      	add	sp, #20
 8000cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8000cf4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf8:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cfc:	2703      	movs	r7, #3
 8000cfe:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d02:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d06:	fa01 f10c 	lsl.w	r1, r1, ip
 8000d0a:	ea41 010e 	orr.w	r1, r1, lr
        GPIOx->OSPEEDR = temp;
 8000d0e:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d10:	43f9      	mvns	r1, r7
        temp = GPIOx->OTYPER;
 8000d12:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d14:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d18:	f3c5 1600 	ubfx	r6, r5, #4, #1
 8000d1c:	409e      	lsls	r6, r3
 8000d1e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000d20:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d22:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d24:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d28:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d2e:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d30:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8000d32:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d34:	fa02 f20c 	lsl.w	r2, r2, ip
 8000d38:	f47f af67 	bne.w	8000c0a <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3u];
 8000d3c:	08df      	lsrs	r7, r3, #3
 8000d3e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d42:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000d46:	6a3e      	ldr	r6, [r7, #32]
 8000d48:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4a:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d4e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d52:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d56:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d58:	260f      	movs	r6, #15
 8000d5a:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000d5e:	9e00      	ldr	r6, [sp, #0]
 8000d60:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d64:	9e01      	ldr	r6, [sp, #4]
 8000d66:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000d6a:	623e      	str	r6, [r7, #32]
 8000d6c:	e74d      	b.n	8000c0a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d6e:	2103      	movs	r1, #3
 8000d70:	fa01 f10c 	lsl.w	r1, r1, ip
 8000d74:	43c9      	mvns	r1, r1
 8000d76:	e7d4      	b.n	8000d22 <HAL_GPIO_Init+0x15a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d78:	2703      	movs	r7, #3
 8000d7a:	fa07 f606 	lsl.w	r6, r7, r6
 8000d7e:	4331      	orrs	r1, r6
 8000d80:	e787      	b.n	8000c92 <HAL_GPIO_Init+0xca>
 8000d82:	2701      	movs	r7, #1
 8000d84:	fa07 f606 	lsl.w	r6, r7, r6
 8000d88:	4331      	orrs	r1, r6
 8000d8a:	e782      	b.n	8000c92 <HAL_GPIO_Init+0xca>
 8000d8c:	2702      	movs	r7, #2
 8000d8e:	fa07 f606 	lsl.w	r6, r7, r6
 8000d92:	4331      	orrs	r1, r6
 8000d94:	e77d      	b.n	8000c92 <HAL_GPIO_Init+0xca>
 8000d96:	2706      	movs	r7, #6
 8000d98:	fa07 f606 	lsl.w	r6, r7, r6
 8000d9c:	4331      	orrs	r1, r6
 8000d9e:	e778      	b.n	8000c92 <HAL_GPIO_Init+0xca>
 8000da0:	2704      	movs	r7, #4
 8000da2:	fa07 f606 	lsl.w	r6, r7, r6
 8000da6:	4331      	orrs	r1, r6
 8000da8:	e773      	b.n	8000c92 <HAL_GPIO_Init+0xca>
 8000daa:	2705      	movs	r7, #5
 8000dac:	fa07 f606 	lsl.w	r6, r7, r6
 8000db0:	4331      	orrs	r1, r6
 8000db2:	e76e      	b.n	8000c92 <HAL_GPIO_Init+0xca>
 8000db4:	48000400 	.word	0x48000400
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	48000c00 	.word	0x48000c00
 8000dc0:	48001000 	.word	0x48001000
 8000dc4:	48001400 	.word	0x48001400
 8000dc8:	48001800 	.word	0x48001800
 8000dcc:	48001c00 	.word	0x48001c00
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd8:	b10a      	cbz	r2, 8000dde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dda:	6181      	str	r1, [r0, #24]
 8000ddc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dde:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000de8:	2800      	cmp	r0, #0
 8000dea:	f000 8088 	beq.w	8000efe <HAL_PCD_Init+0x11a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dee:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8000df2:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000df4:	4605      	mov	r5, r0
 8000df6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d079      	beq.n	8000ef2 <HAL_PCD_Init+0x10e>
 8000dfe:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e00:	2303      	movs	r3, #3
 8000e02:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e06:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e08:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e0a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8000e0e:	bf08      	it	eq
 8000e10:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000e12:	f001 fd25 	bl	8002860 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e16:	f856 eb10 	ldr.w	lr, [r6], #16
 8000e1a:	46b4      	mov	ip, r6
 8000e1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e20:	466c      	mov	r4, sp
 8000e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000e2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e32:	1d2f      	adds	r7, r5, #4
 8000e34:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000e38:	4670      	mov	r0, lr
 8000e3a:	f001 fcc9 	bl	80027d0 <USB_CoreInit>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	b130      	cbz	r0, 8000e50 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8000e42:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e44:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000e46:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e48:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8000e4c:	b00b      	add	sp, #44	; 0x2c
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e50:	4601      	mov	r1, r0
 8000e52:	6828      	ldr	r0, [r5, #0]
 8000e54:	f001 fd0c 	bl	8002870 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e58:	6868      	ldr	r0, [r5, #4]
 8000e5a:	b358      	cbz	r0, 8000eb4 <HAL_PCD_Init+0xd0>
 8000e5c:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000e5e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e62:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000e64:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000e68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e6c:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8000e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e78:	fa5f f28c 	uxtb.w	r2, ip
 8000e7c:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e7e:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8000e82:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e86:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e8a:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8c:	d3ea      	bcc.n	8000e64 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8000e8e:	2200      	movs	r2, #0
 8000e90:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8000e94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e98:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8000e9a:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e9e:	b2cc      	uxtb	r4, r1
 8000ea0:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ea2:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8000ea6:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000eaa:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb2:	d3ed      	bcc.n	8000e90 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eb6:	466c      	mov	r4, sp
 8000eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8000ec2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ec6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000eca:	6828      	ldr	r0, [r5, #0]
 8000ecc:	f001 fd08 	bl	80028e0 <USB_DevInit>
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d1b5      	bne.n	8000e42 <HAL_PCD_Init+0x5e>
  if (hpcd->Init.lpm_enable == 1U)
 8000ed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8000ed8:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000edc:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8000ede:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8000ee0:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8000ee4:	d00f      	beq.n	8000f06 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8000ee6:	6828      	ldr	r0, [r5, #0]
 8000ee8:	f001 fdfa 	bl	8002ae0 <USB_DevDisconnect>
}
 8000eec:	4620      	mov	r0, r4
 8000eee:	b00b      	add	sp, #44	; 0x2c
 8000ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000ef2:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8000ef6:	f7ff fcf3 	bl	80008e0 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8000efa:	6828      	ldr	r0, [r5, #0]
 8000efc:	e780      	b.n	8000e00 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8000efe:	2401      	movs	r4, #1
}
 8000f00:	4620      	mov	r0, r4
 8000f02:	b00b      	add	sp, #44	; 0x2c
 8000f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f06:	4628      	mov	r0, r5
 8000f08:	f000 f802 	bl	8000f10 <HAL_PCDEx_ActivateLPM>
 8000f0c:	e7eb      	b.n	8000ee6 <HAL_PCD_Init+0x102>
 8000f0e:	bf00      	nop

08000f10 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f10:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8000f12:	2100      	movs	r1, #0
{
 8000f14:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8000f16:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000f1a:	6993      	ldr	r3, [r2, #24]
  hpcd->lpm_active = 1U;
 8000f1c:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  hpcd->lpm_active = 1U;
 8000f22:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000f26:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000f28:	6d53      	ldr	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	f043 0303 	orr.w	r3, r3, #3
}
 8000f36:	4608      	mov	r0, r1
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000f38:	6553      	str	r3, [r2, #84]	; 0x54
}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_PWREx_GetVoltageRange+0x20>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000f44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000f48:	d006      	beq.n	8000f58 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f4a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000f4e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8000f52:	bf18      	it	ne
 8000f54:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40007000 	.word	0x40007000

08000f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f60:	b410      	push	{r4}

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f62:	4a3b      	ldr	r2, [pc, #236]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f64:	b970      	cbnz	r0, 8000f84 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f66:	6813      	ldr	r3, [r2, #0]
 8000f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f70:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f74:	d023      	beq.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    }
  }
#endif

  return HAL_OK;
}
 8000f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8000f82:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000f88:	d009      	beq.n	8000f9e <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f8a:	6813      	ldr	r3, [r2, #0]
}
 8000f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8000f98:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fa8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fac:	d02f      	beq.n	800100e <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8000fb2:	2000      	movs	r0, #0
}
 8000fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8000fbc:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc6:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fc8:	4c22      	ldr	r4, [pc, #136]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000fca:	4823      	ldr	r0, [pc, #140]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8000fd0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000fd4:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	2132      	movs	r1, #50	; 0x32
 8000fda:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fde:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fe0:	fba0 0303 	umull	r0, r3, r0, r3
 8000fe4:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe6:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fe8:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fec:	d506      	bpl.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x9c>
 8000fee:	e000      	b.n	8000ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
 8000ff0:	b123      	cbz	r3, 8000ffc <HAL_PWREx_ControlVoltageScaling+0x9c>
 8000ff2:	6951      	ldr	r1, [r2, #20]
 8000ff4:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8000ff6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ffa:	d4f9      	bmi.n	8000ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8001002:	bf54      	ite	pl
 8001004:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8001006:	2003      	movmi	r0, #3
}
 8001008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800100c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001016:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001018:	4c0e      	ldr	r4, [pc, #56]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8001020:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001024:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	2132      	movs	r1, #50	; 0x32
 800102a:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001030:	fba0 0303 	umull	r0, r3, r0, r3
 8001034:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001036:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001038:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800103c:	d5de      	bpl.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x9c>
 800103e:	e001      	b.n	8001044 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0db      	beq.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x9c>
 8001044:	6951      	ldr	r1, [r2, #20]
 8001046:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8001048:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800104c:	d5d6      	bpl.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x9c>
 800104e:	e7f7      	b.n	8001040 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8001050:	40007000 	.word	0x40007000
 8001054:	20000000 	.word	0x20000000
 8001058:	431bde83 	.word	0x431bde83

0800105c <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800105c:	4a02      	ldr	r2, [pc, #8]	; (8001068 <HAL_PWREx_EnableVddUSB+0xc>)
 800105e:	6853      	ldr	r3, [r2, #4]
 8001060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001064:	6053      	str	r3, [r2, #4]
}
 8001066:	4770      	bx	lr
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800106c:	4a02      	ldr	r2, [pc, #8]	; (8001078 <HAL_PWREx_EnableVddIO2+0xc>)
 800106e:	6853      	ldr	r3, [r2, #4]
 8001070:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001074:	6053      	str	r3, [r2, #4]
}
 8001076:	4770      	bx	lr
 8001078:	40007000 	.word	0x40007000

0800107c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800107c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800107e:	4d1e      	ldr	r5, [pc, #120]	; (80010f8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001080:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001082:	00db      	lsls	r3, r3, #3
{
 8001084:	b083      	sub	sp, #12
 8001086:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001088:	d519      	bpl.n	80010be <RCC_SetFlashLatencyFromMSIRange+0x42>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800108a:	f7ff ff57 	bl	8000f3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800108e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001092:	d026      	beq.n	80010e2 <RCC_SetFlashLatencyFromMSIRange+0x66>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001094:	2c7f      	cmp	r4, #127	; 0x7f
 8001096:	d82b      	bhi.n	80010f0 <RCC_SetFlashLatencyFromMSIRange+0x74>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001098:	f1a4 0070 	sub.w	r0, r4, #112	; 0x70
 800109c:	fab0 f080 	clz	r0, r0
 80010a0:	0940      	lsrs	r0, r0, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80010a2:	4a16      	ldr	r2, [pc, #88]	; (80010fc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80010a4:	6813      	ldr	r3, [r2, #0]
 80010a6:	f023 030f 	bic.w	r3, r3, #15
 80010aa:	4303      	orrs	r3, r0
 80010ac:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80010ae:	6813      	ldr	r3, [r2, #0]
 80010b0:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80010b4:	1a18      	subs	r0, r3, r0
 80010b6:	bf18      	it	ne
 80010b8:	2001      	movne	r0, #1
 80010ba:	b003      	add	sp, #12
 80010bc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	65ab      	str	r3, [r5, #88]	; 0x58
 80010c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80010d0:	f7ff ff34 	bl	8000f3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80010d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80010da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010de:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e0:	d1d8      	bne.n	8001094 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80010e2:	2c80      	cmp	r4, #128	; 0x80
 80010e4:	d906      	bls.n	80010f4 <RCC_SetFlashLatencyFromMSIRange+0x78>
        latency = FLASH_LATENCY_1; /* 1WS */
 80010e6:	2ca0      	cmp	r4, #160	; 0xa0
 80010e8:	bf8c      	ite	hi
 80010ea:	2002      	movhi	r0, #2
 80010ec:	2001      	movls	r0, #1
 80010ee:	e7d8      	b.n	80010a2 <RCC_SetFlashLatencyFromMSIRange+0x26>
        latency = FLASH_LATENCY_2; /* 2WS */
 80010f0:	2002      	movs	r0, #2
 80010f2:	e7d6      	b.n	80010a2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80010f4:	2000      	movs	r0, #0
 80010f6:	e7d4      	b.n	80010a2 <RCC_SetFlashLatencyFromMSIRange+0x26>
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001100:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001102:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001104:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001106:	f013 030c 	ands.w	r3, r3, #12
 800110a:	d008      	beq.n	800111e <HAL_RCC_GetSysClockFreq+0x1e>
 800110c:	2b0c      	cmp	r3, #12
 800110e:	d038      	beq.n	8001182 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001110:	2b04      	cmp	r3, #4
 8001112:	d034      	beq.n	800117e <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001114:	2b08      	cmp	r3, #8
 8001116:	4824      	ldr	r0, [pc, #144]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001118:	bf18      	it	ne
 800111a:	2000      	movne	r0, #0
 800111c:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800111e:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001120:	6811      	ldr	r1, [r2, #0]
 8001122:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001124:	bf54      	ite	pl
 8001126:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800112a:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800112e:	bf54      	ite	pl
 8001130:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001134:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001138:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800113c:	b303      	cbz	r3, 8001180 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800113e:	2b0c      	cmp	r3, #12
 8001140:	d12d      	bne.n	800119e <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800114a:	2b02      	cmp	r3, #2
 800114c:	d025      	beq.n	800119a <HAL_RCC_GetSysClockFreq+0x9a>
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001150:	2b03      	cmp	r3, #3
 8001152:	bf08      	it	eq
 8001154:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001158:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800115a:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001162:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001166:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800116a:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800116c:	fb02 f000 	mul.w	r0, r2, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001170:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001172:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001174:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 8001178:	fbb0 f0f3 	udiv	r0, r0, r3
 800117c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8001180:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001182:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001186:	2a01      	cmp	r2, #1
 8001188:	d0c9      	beq.n	800111e <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001192:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001194:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8001198:	d1d9      	bne.n	800114e <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800119c:	e7db      	b.n	8001156 <HAL_RCC_GetSysClockFreq+0x56>
 800119e:	2000      	movs	r0, #0
  return sysclockfreq;
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	007a1200 	.word	0x007a1200
 80011ac:	08002b88 	.word	0x08002b88
 80011b0:	00f42400 	.word	0x00f42400

080011b4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80011b4:	2800      	cmp	r0, #0
 80011b6:	f000 828f 	beq.w	80016d8 <HAL_RCC_OscConfig+0x524>
{
 80011ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011be:	4a94      	ldr	r2, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c0:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c2:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c4:	68d6      	ldr	r6, [r2, #12]
 80011c6:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c8:	06d8      	lsls	r0, r3, #27
{
 80011ca:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011cc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d0:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011d4:	d52e      	bpl.n	8001234 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011d6:	2d00      	cmp	r5, #0
 80011d8:	f000 8123 	beq.w	8001422 <HAL_RCC_OscConfig+0x26e>
 80011dc:	2d0c      	cmp	r5, #12
 80011de:	f000 811d 	beq.w	800141c <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011e2:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80011e4:	4f8a      	ldr	r7, [pc, #552]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8193 	beq.w	8001512 <HAL_RCC_OscConfig+0x35e>
        __HAL_RCC_MSI_ENABLE();
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc66 	bl	8000ac4 <HAL_GetTick>
 80011f8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011fa:	e006      	b.n	800120a <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc62 	bl	8000ac4 <HAL_GetTick>
 8001200:	eba0 0008 	sub.w	r0, r0, r8
 8001204:	2802      	cmp	r0, #2
 8001206:	f200 8194 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	079b      	lsls	r3, r3, #30
 800120e:	d5f5      	bpl.n	80011fc <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	6a22      	ldr	r2, [r4, #32]
 800121c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001220:	4313      	orrs	r3, r2
 8001222:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69e2      	ldr	r2, [r4, #28]
 8001228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800122c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001230:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	07d9      	lsls	r1, r3, #31
 8001236:	f100 80c2 	bmi.w	80013be <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	0799      	lsls	r1, r3, #30
 800123c:	d523      	bpl.n	8001286 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800123e:	2d04      	cmp	r5, #4
 8001240:	f000 8157 	beq.w	80014f2 <HAL_RCC_OscConfig+0x33e>
 8001244:	2d0c      	cmp	r5, #12
 8001246:	f000 8151 	beq.w	80014ec <HAL_RCC_OscConfig+0x338>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800124c:	4e70      	ldr	r6, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 81dc 	beq.w	800160c <HAL_RCC_OscConfig+0x458>
        __HAL_RCC_HSI_ENABLE();
 8001254:	6833      	ldr	r3, [r6, #0]
 8001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800125c:	f7ff fc32 	bl	8000ac4 <HAL_GetTick>
 8001260:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001262:	e005      	b.n	8001270 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc2e 	bl	8000ac4 <HAL_GetTick>
 8001268:	1bc0      	subs	r0, r0, r7
 800126a:	2802      	cmp	r0, #2
 800126c:	f200 8161 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001270:	6833      	ldr	r3, [r6, #0]
 8001272:	055b      	lsls	r3, r3, #21
 8001274:	d5f6      	bpl.n	8001264 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	6873      	ldr	r3, [r6, #4]
 8001278:	6922      	ldr	r2, [r4, #16]
 800127a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800127e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001282:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	0719      	lsls	r1, r3, #28
 8001288:	d519      	bpl.n	80012be <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800128c:	4e60      	ldr	r6, [pc, #384]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8118 	beq.w	80014c4 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 8001294:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80012a0:	f7ff fc10 	bl	8000ac4 <HAL_GetTick>
 80012a4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012a6:	e005      	b.n	80012b4 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc0c 	bl	8000ac4 <HAL_GetTick>
 80012ac:	1bc0      	subs	r0, r0, r7
 80012ae:	2802      	cmp	r0, #2
 80012b0:	f200 813f 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012b4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80012b8:	079a      	lsls	r2, r3, #30
 80012ba:	d5f5      	bpl.n	80012a8 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	075e      	lsls	r6, r3, #29
 80012c0:	d53f      	bpl.n	8001342 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012c2:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
 80012c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012c6:	00d0      	lsls	r0, r2, #3
 80012c8:	f100 819e 	bmi.w	8001608 <HAL_RCC_OscConfig+0x454>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d2:	659a      	str	r2, [r3, #88]	; 0x58
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012de:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e0:	4f4c      	ldr	r7, [pc, #304]	; (8001414 <HAL_RCC_OscConfig+0x260>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	05d9      	lsls	r1, r3, #23
 80012e6:	f140 81f9 	bpl.w	80016dc <HAL_RCC_OscConfig+0x528>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ea:	68a3      	ldr	r3, [r4, #8]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f000 819f 	beq.w	8001630 <HAL_RCC_OscConfig+0x47c>
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	f000 821d 	beq.w	8001732 <HAL_RCC_OscConfig+0x57e>
 80012f8:	4f45      	ldr	r7, [pc, #276]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
 80012fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001306:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800130a:	f022 0204 	bic.w	r2, r2, #4
 800130e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 8193 	bne.w	800163e <HAL_RCC_OscConfig+0x48a>
      tickstart = HAL_GetTick();
 8001318:	f7ff fbd4 	bl	8000ac4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001320:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001322:	e006      	b.n	8001332 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f7ff fbce 	bl	8000ac4 <HAL_GetTick>
 8001328:	eba0 0008 	sub.w	r0, r0, r8
 800132c:	4548      	cmp	r0, r9
 800132e:	f200 8100 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001336:	0798      	lsls	r0, r3, #30
 8001338:	d4f4      	bmi.n	8001324 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800133a:	2e00      	cmp	r6, #0
 800133c:	f040 81e0 	bne.w	8001700 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	0699      	lsls	r1, r3, #26
 8001344:	d518      	bpl.n	8001378 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001346:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8001348:	4e31      	ldr	r6, [pc, #196]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 81a5 	beq.w	800169a <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSI48_ENABLE();
 8001350:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800135c:	f7ff fbb2 	bl	8000ac4 <HAL_GetTick>
 8001360:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001362:	e005      	b.n	8001370 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001364:	f7ff fbae 	bl	8000ac4 <HAL_GetTick>
 8001368:	1bc0      	subs	r0, r0, r7
 800136a:	2802      	cmp	r0, #2
 800136c:	f200 80e1 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001370:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8001374:	079a      	lsls	r2, r3, #30
 8001376:	d5f5      	bpl.n	8001364 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001378:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8142 	beq.w	8001604 <HAL_RCC_OscConfig+0x450>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001380:	2b02      	cmp	r3, #2
 8001382:	f000 80ef 	beq.w	8001564 <HAL_RCC_OscConfig+0x3b0>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001386:	2d0c      	cmp	r5, #12
 8001388:	f000 808c 	beq.w	80014a4 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 800138c:	4c20      	ldr	r4, [pc, #128]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001394:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001396:	f7ff fb95 	bl	8000ac4 <HAL_GetTick>
 800139a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139c:	e005      	b.n	80013aa <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff fb91 	bl	8000ac4 <HAL_GetTick>
 80013a2:	1b40      	subs	r0, r0, r5
 80013a4:	2802      	cmp	r0, #2
 80013a6:	f200 80c4 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80013b0:	d1f5      	bne.n	800139e <HAL_RCC_OscConfig+0x1ea>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013b2:	68e1      	ldr	r1, [r4, #12]
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <HAL_RCC_OscConfig+0x264>)
 80013b6:	400a      	ands	r2, r1
  return HAL_OK;
 80013b8:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013ba:	60e2      	str	r2, [r4, #12]
 80013bc:	e073      	b.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013be:	2d08      	cmp	r5, #8
 80013c0:	d076      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2fc>
 80013c2:	2d0c      	cmp	r5, #12
 80013c4:	d072      	beq.n	80014ac <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	f000 80b5 	beq.w	800153a <HAL_RCC_OscConfig+0x386>
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	f000 81a0 	beq.w	8001718 <HAL_RCC_OscConfig+0x564>
 80013d8:	4f0d      	ldr	r7, [pc, #52]	; (8001410 <HAL_RCC_OscConfig+0x25c>)
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013e0:	603a      	str	r2, [r7, #0]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013e8:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 80aa 	bne.w	8001544 <HAL_RCC_OscConfig+0x390>
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb68 	bl	8000ac4 <HAL_GetTick>
 80013f4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f6:	e006      	b.n	8001406 <HAL_RCC_OscConfig+0x252>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fb64 	bl	8000ac4 <HAL_GetTick>
 80013fc:	eba0 0008 	sub.w	r0, r0, r8
 8001400:	2864      	cmp	r0, #100	; 0x64
 8001402:	f200 8096 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	0398      	lsls	r0, r3, #14
 800140a:	d4f5      	bmi.n	80013f8 <HAL_RCC_OscConfig+0x244>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	e714      	b.n	800123a <HAL_RCC_OscConfig+0x86>
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
 8001418:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800141c:	2e01      	cmp	r6, #1
 800141e:	f47f aee0 	bne.w	80011e2 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001422:	4ba8      	ldr	r3, [pc, #672]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	0799      	lsls	r1, r3, #30
 8001428:	d439      	bmi.n	800149e <HAL_RCC_OscConfig+0x2ea>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800142a:	4ba6      	ldr	r3, [pc, #664]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 800142c:	6a20      	ldr	r0, [r4, #32]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	0712      	lsls	r2, r2, #28
 8001432:	bf56      	itet	pl
 8001434:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8001438:	681b      	ldrmi	r3, [r3, #0]
 800143a:	091b      	lsrpl	r3, r3, #4
 800143c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001440:	4298      	cmp	r0, r3
 8001442:	f200 8112 	bhi.w	800166a <HAL_RCC_OscConfig+0x4b6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001446:	4b9f      	ldr	r3, [pc, #636]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	f042 0208 	orr.w	r2, r2, #8
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001456:	4302      	orrs	r2, r0
 8001458:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	69e1      	ldr	r1, [r4, #28]
 800145e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001462:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001466:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001468:	2d00      	cmp	r5, #0
 800146a:	f000 814f 	beq.w	800170c <HAL_RCC_OscConfig+0x558>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800146e:	f7ff fe47 	bl	8001100 <HAL_RCC_GetSysClockFreq>
 8001472:	4b94      	ldr	r3, [pc, #592]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 8001474:	4a94      	ldr	r2, [pc, #592]	; (80016c8 <HAL_RCC_OscConfig+0x514>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800147c:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 800147e:	4a93      	ldr	r2, [pc, #588]	; (80016cc <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8001488:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800148a:	4a91      	ldr	r2, [pc, #580]	; (80016d0 <HAL_RCC_OscConfig+0x51c>)
 800148c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800148e:	f7ff fad7 	bl	8000a40 <HAL_InitTick>
        if(status != HAL_OK)
 8001492:	b940      	cbnz	r0, 80014a6 <HAL_RCC_OscConfig+0x2f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	07d9      	lsls	r1, r3, #31
 8001498:	f57f aecf 	bpl.w	800123a <HAL_RCC_OscConfig+0x86>
 800149c:	e78f      	b.n	80013be <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149e:	69a3      	ldr	r3, [r4, #24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1c2      	bne.n	800142a <HAL_RCC_OscConfig+0x276>
          return HAL_ERROR;
 80014a4:	2001      	movs	r0, #1
}
 80014a6:	b003      	add	sp, #12
 80014a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ac:	2e03      	cmp	r6, #3
 80014ae:	d18a      	bne.n	80013c6 <HAL_RCC_OscConfig+0x212>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	4a84      	ldr	r2, [pc, #528]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	0392      	lsls	r2, r2, #14
 80014b6:	f57f aec0 	bpl.w	800123a <HAL_RCC_OscConfig+0x86>
 80014ba:	6862      	ldr	r2, [r4, #4]
 80014bc:	2a00      	cmp	r2, #0
 80014be:	f47f aebc 	bne.w	800123a <HAL_RCC_OscConfig+0x86>
 80014c2:	e7ef      	b.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_DISABLE();
 80014c4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80014d0:	f7ff faf8 	bl	8000ac4 <HAL_GetTick>
 80014d4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d6:	e004      	b.n	80014e2 <HAL_RCC_OscConfig+0x32e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff faf4 	bl	8000ac4 <HAL_GetTick>
 80014dc:	1bc0      	subs	r0, r0, r7
 80014de:	2802      	cmp	r0, #2
 80014e0:	d827      	bhi.n	8001532 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e2:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80014e6:	079b      	lsls	r3, r3, #30
 80014e8:	d4f6      	bmi.n	80014d8 <HAL_RCC_OscConfig+0x324>
 80014ea:	e6e7      	b.n	80012bc <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ec:	2e02      	cmp	r6, #2
 80014ee:	f47f aeac 	bne.w	800124a <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f2:	4a74      	ldr	r2, [pc, #464]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	0552      	lsls	r2, r2, #21
 80014f8:	d502      	bpl.n	8001500 <HAL_RCC_OscConfig+0x34c>
 80014fa:	68e2      	ldr	r2, [r4, #12]
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d0d1      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001500:	4970      	ldr	r1, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 8001502:	6920      	ldr	r0, [r4, #16]
 8001504:	684a      	ldr	r2, [r1, #4]
 8001506:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800150a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800150e:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001510:	e6b9      	b.n	8001286 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800151a:	f7ff fad3 	bl	8000ac4 <HAL_GetTick>
 800151e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	0798      	lsls	r0, r3, #30
 8001524:	d5b6      	bpl.n	8001494 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001526:	f7ff facd 	bl	8000ac4 <HAL_GetTick>
 800152a:	eba0 0008 	sub.w	r0, r0, r8
 800152e:	2802      	cmp	r0, #2
 8001530:	d9f6      	bls.n	8001520 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 8001532:	2003      	movs	r0, #3
}
 8001534:	b003      	add	sp, #12
 8001536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	4a62      	ldr	r2, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001544:	f7ff fabe 	bl	8000ac4 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001548:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80016c4 <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 800154c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154e:	e004      	b.n	800155a <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fab8 	bl	8000ac4 <HAL_GetTick>
 8001554:	1bc0      	subs	r0, r0, r7
 8001556:	2864      	cmp	r0, #100	; 0x64
 8001558:	d8eb      	bhi.n	8001532 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	f8d8 3000 	ldr.w	r3, [r8]
 800155e:	039b      	lsls	r3, r3, #14
 8001560:	d5f6      	bpl.n	8001550 <HAL_RCC_OscConfig+0x39c>
 8001562:	e753      	b.n	800140c <HAL_RCC_OscConfig+0x258>
      pll_config = RCC->PLLCFGR;
 8001564:	4e57      	ldr	r6, [pc, #348]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8001568:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	f003 0103 	and.w	r1, r3, #3
 800156e:	4291      	cmp	r1, r2
 8001570:	f000 80ed 	beq.w	800174e <HAL_RCC_OscConfig+0x59a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001574:	2d0c      	cmp	r5, #12
 8001576:	d095      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001578:	4d52      	ldr	r5, [pc, #328]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 800157a:	682b      	ldr	r3, [r5, #0]
 800157c:	015f      	lsls	r7, r3, #5
 800157e:	d491      	bmi.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	00de      	lsls	r6, r3, #3
 8001584:	d48e      	bmi.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
            __HAL_RCC_PLL_DISABLE();
 8001586:	682b      	ldr	r3, [r5, #0]
 8001588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800158e:	f7ff fa99 	bl	8000ac4 <HAL_GetTick>
 8001592:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	e004      	b.n	80015a0 <HAL_RCC_OscConfig+0x3ec>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fa95 	bl	8000ac4 <HAL_GetTick>
 800159a:	1b80      	subs	r0, r0, r6
 800159c:	2802      	cmp	r0, #2
 800159e:	d8c8      	bhi.n	8001532 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	0198      	lsls	r0, r3, #6
 80015a4:	d4f7      	bmi.n	8001596 <HAL_RCC_OscConfig+0x3e2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a6:	68e9      	ldr	r1, [r5, #12]
 80015a8:	4b4a      	ldr	r3, [pc, #296]	; (80016d4 <HAL_RCC_OscConfig+0x520>)
 80015aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ae:	4e45      	ldr	r6, [pc, #276]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b0:	400b      	ands	r3, r1
 80015b2:	4313      	orrs	r3, r2
 80015b4:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 80015b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015bc:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80015c0:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80015c4:	3801      	subs	r0, #1
 80015c6:	0849      	lsrs	r1, r1, #1
 80015c8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80015cc:	3901      	subs	r1, #1
 80015ce:	0852      	lsrs	r2, r2, #1
 80015d0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80015d4:	3a01      	subs	r2, #1
 80015d6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80015da:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e2:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015e4:	68eb      	ldr	r3, [r5, #12]
 80015e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ea:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80015ec:	f7ff fa6a 	bl	8000ac4 <HAL_GetTick>
 80015f0:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f2:	e004      	b.n	80015fe <HAL_RCC_OscConfig+0x44a>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fa66 	bl	8000ac4 <HAL_GetTick>
 80015f8:	1b00      	subs	r0, r0, r4
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d899      	bhi.n	8001532 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fe:	6833      	ldr	r3, [r6, #0]
 8001600:	0199      	lsls	r1, r3, #6
 8001602:	d5f7      	bpl.n	80015f4 <HAL_RCC_OscConfig+0x440>
  return HAL_OK;
 8001604:	2000      	movs	r0, #0
 8001606:	e74e      	b.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2600      	movs	r6, #0
 800160a:	e669      	b.n	80012e0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 800160c:	6833      	ldr	r3, [r6, #0]
 800160e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001612:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001614:	f7ff fa56 	bl	8000ac4 <HAL_GetTick>
 8001618:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161a:	e004      	b.n	8001626 <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fa52 	bl	8000ac4 <HAL_GetTick>
 8001620:	1bc0      	subs	r0, r0, r7
 8001622:	2802      	cmp	r0, #2
 8001624:	d885      	bhi.n	8001532 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001626:	6833      	ldr	r3, [r6, #0]
 8001628:	0558      	lsls	r0, r3, #21
 800162a:	d4f7      	bmi.n	800161c <HAL_RCC_OscConfig+0x468>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	e62a      	b.n	8001286 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 8001632:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800163e:	f7ff fa41 	bl	8000ac4 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001642:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80016c4 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8001646:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164c:	e005      	b.n	800165a <HAL_RCC_OscConfig+0x4a6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fa39 	bl	8000ac4 <HAL_GetTick>
 8001652:	1bc0      	subs	r0, r0, r7
 8001654:	4548      	cmp	r0, r9
 8001656:	f63f af6c 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165a:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800165e:	079b      	lsls	r3, r3, #30
 8001660:	d5f5      	bpl.n	800164e <HAL_RCC_OscConfig+0x49a>
    if(pwrclkchanged == SET)
 8001662:	2e00      	cmp	r6, #0
 8001664:	f43f ae6c 	beq.w	8001340 <HAL_RCC_OscConfig+0x18c>
 8001668:	e04a      	b.n	8001700 <HAL_RCC_OscConfig+0x54c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800166a:	f7ff fd07 	bl	800107c <RCC_SetFlashLatencyFromMSIRange>
 800166e:	2800      	cmp	r0, #0
 8001670:	f47f af18 	bne.w	80014a4 <HAL_RCC_OscConfig+0x2f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_RCC_OscConfig+0x510>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	f042 0208 	orr.w	r2, r2, #8
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	6a21      	ldr	r1, [r4, #32]
 8001682:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	69e1      	ldr	r1, [r4, #28]
 800168e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001692:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	e6e9      	b.n	800146e <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 800169a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 80016a6:	f7ff fa0d 	bl	8000ac4 <HAL_GetTick>
 80016aa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ac:	e005      	b.n	80016ba <HAL_RCC_OscConfig+0x506>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ae:	f7ff fa09 	bl	8000ac4 <HAL_GetTick>
 80016b2:	1bc0      	subs	r0, r0, r7
 80016b4:	2802      	cmp	r0, #2
 80016b6:	f63f af3c 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ba:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80016be:	079b      	lsls	r3, r3, #30
 80016c0:	d4f5      	bmi.n	80016ae <HAL_RCC_OscConfig+0x4fa>
 80016c2:	e659      	b.n	8001378 <HAL_RCC_OscConfig+0x1c4>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	08002b70 	.word	0x08002b70
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000000 	.word	0x20000000
 80016d4:	019d800c 	.word	0x019d800c
    return HAL_ERROR;
 80016d8:	2001      	movs	r0, #1
}
 80016da:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80016e4:	f7ff f9ee 	bl	8000ac4 <HAL_GetTick>
 80016e8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	05da      	lsls	r2, r3, #23
 80016ee:	f53f adfc 	bmi.w	80012ea <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff f9e7 	bl	8000ac4 <HAL_GetTick>
 80016f6:	eba0 0008 	sub.w	r0, r0, r8
 80016fa:	2802      	cmp	r0, #2
 80016fc:	d9f5      	bls.n	80016ea <HAL_RCC_OscConfig+0x536>
 80016fe:	e718      	b.n	8001532 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001700:	4a34      	ldr	r2, [pc, #208]	; (80017d4 <HAL_RCC_OscConfig+0x620>)
 8001702:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	e619      	b.n	8001340 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170c:	f7ff fcb6 	bl	800107c <RCC_SetFlashLatencyFromMSIRange>
 8001710:	2800      	cmp	r0, #0
 8001712:	f43f aeac 	beq.w	800146e <HAL_RCC_OscConfig+0x2ba>
 8001716:	e6c5      	b.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800171c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800172e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001730:	e708      	b.n	8001544 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_RCC_OscConfig+0x620>)
 8001734:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001738:	f042 0204 	orr.w	r2, r2, #4
 800173c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001740:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174c:	e777      	b.n	800163e <HAL_RCC_OscConfig+0x48a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800174e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001750:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001754:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800175a:	f47f af0b 	bne.w	8001574 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800175e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001760:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001764:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001768:	f47f af04 	bne.w	8001574 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800176c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800176e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001772:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001776:	f47f aefd 	bne.w	8001574 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800177c:	0852      	lsrs	r2, r2, #1
 800177e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001782:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001784:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001788:	f47f aef4 	bne.w	8001574 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800178c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800178e:	0852      	lsrs	r2, r2, #1
 8001790:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001794:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001796:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800179a:	f47f aeeb 	bne.w	8001574 <HAL_RCC_OscConfig+0x3c0>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	6833      	ldr	r3, [r6, #0]
 80017a0:	019a      	lsls	r2, r3, #6
 80017a2:	f53f af2f 	bmi.w	8001604 <HAL_RCC_OscConfig+0x450>
          __HAL_RCC_PLL_ENABLE();
 80017a6:	6833      	ldr	r3, [r6, #0]
 80017a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ac:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017ae:	68f3      	ldr	r3, [r6, #12]
 80017b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b4:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 80017b6:	f7ff f985 	bl	8000ac4 <HAL_GetTick>
 80017ba:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017bc:	e005      	b.n	80017ca <HAL_RCC_OscConfig+0x616>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff f981 	bl	8000ac4 <HAL_GetTick>
 80017c2:	1b00      	subs	r0, r0, r4
 80017c4:	2802      	cmp	r0, #2
 80017c6:	f63f aeb4 	bhi.w	8001532 <HAL_RCC_OscConfig+0x37e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	6833      	ldr	r3, [r6, #0]
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	d5f6      	bpl.n	80017be <HAL_RCC_OscConfig+0x60a>
 80017d0:	e718      	b.n	8001604 <HAL_RCC_OscConfig+0x450>
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80017d8:	2800      	cmp	r0, #0
 80017da:	f000 80cd 	beq.w	8001978 <HAL_RCC_ClockConfig+0x1a0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017de:	4a8c      	ldr	r2, [pc, #560]	; (8001a10 <HAL_RCC_ClockConfig+0x238>)
{
 80017e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	428b      	cmp	r3, r1
 80017ec:	460d      	mov	r5, r1
 80017ee:	4604      	mov	r4, r0
 80017f0:	d20c      	bcs.n	800180c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	f023 030f 	bic.w	r3, r3, #15
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	428b      	cmp	r3, r1
 8001804:	d002      	beq.n	800180c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001806:	2001      	movs	r0, #1
}
 8001808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	079e      	lsls	r6, r3, #30
 8001810:	f140 8086 	bpl.w	8001920 <HAL_RCC_ClockConfig+0x148>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001814:	487f      	ldr	r0, [pc, #508]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 8001816:	68a1      	ldr	r1, [r4, #8]
 8001818:	6882      	ldr	r2, [r0, #8]
 800181a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800181e:	4291      	cmp	r1, r2
 8001820:	d904      	bls.n	800182c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001822:	6882      	ldr	r2, [r0, #8]
 8001824:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001828:	430a      	orrs	r2, r1
 800182a:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182c:	07da      	lsls	r2, r3, #31
 800182e:	f140 8091 	bpl.w	8001954 <HAL_RCC_ClockConfig+0x17c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001832:	6863      	ldr	r3, [r4, #4]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d078      	beq.n	800192a <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001838:	2b02      	cmp	r3, #2
 800183a:	f000 8097 	beq.w	800196c <HAL_RCC_ClockConfig+0x194>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 809e 	bne.w	8001980 <HAL_RCC_ClockConfig+0x1a8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001848:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	079b      	lsls	r3, r3, #30
 8001850:	d5d9      	bpl.n	8001806 <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001852:	f7ff fc55 	bl	8001100 <HAL_RCC_GetSysClockFreq>
 8001856:	4b70      	ldr	r3, [pc, #448]	; (8001a18 <HAL_RCC_ClockConfig+0x240>)
 8001858:	4298      	cmp	r0, r3
 800185a:	d905      	bls.n	8001868 <HAL_RCC_ClockConfig+0x90>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800185c:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8001864:	f000 8092 	beq.w	800198c <HAL_RCC_ClockConfig+0x1b4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001868:	6863      	ldr	r3, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800186a:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4e69      	ldr	r6, [pc, #420]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 8001870:	68b2      	ldr	r2, [r6, #8]
 8001872:	f022 0203 	bic.w	r2, r2, #3
 8001876:	4313      	orrs	r3, r2
 8001878:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800187a:	f7ff f923 	bl	8000ac4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001882:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001884:	e004      	b.n	8001890 <HAL_RCC_ClockConfig+0xb8>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f7ff f91d 	bl	8000ac4 <HAL_GetTick>
 800188a:	1bc0      	subs	r0, r0, r7
 800188c:	4540      	cmp	r0, r8
 800188e:	d875      	bhi.n	800197c <HAL_RCC_ClockConfig+0x1a4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001890:	68b3      	ldr	r3, [r6, #8]
 8001892:	6862      	ldr	r2, [r4, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800189c:	d1f3      	bne.n	8001886 <HAL_RCC_ClockConfig+0xae>
  if(hpre == RCC_SYSCLK_DIV2)
 800189e:	f1b9 0f00 	cmp.w	r9, #0
 80018a2:	d003      	beq.n	80018ac <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018a4:	68b3      	ldr	r3, [r6, #8]
 80018a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018aa:	60b3      	str	r3, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	079e      	lsls	r6, r3, #30
 80018b0:	d44f      	bmi.n	8001952 <HAL_RCC_ClockConfig+0x17a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b2:	4957      	ldr	r1, [pc, #348]	; (8001a10 <HAL_RCC_ClockConfig+0x238>)
 80018b4:	680a      	ldr	r2, [r1, #0]
 80018b6:	f002 020f 	and.w	r2, r2, #15
 80018ba:	42aa      	cmp	r2, r5
 80018bc:	d909      	bls.n	80018d2 <HAL_RCC_ClockConfig+0xfa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	680a      	ldr	r2, [r1, #0]
 80018c0:	f022 020f 	bic.w	r2, r2, #15
 80018c4:	432a      	orrs	r2, r5
 80018c6:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c8:	680a      	ldr	r2, [r1, #0]
 80018ca:	f002 020f 	and.w	r2, r2, #15
 80018ce:	42aa      	cmp	r2, r5
 80018d0:	d199      	bne.n	8001806 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d2:	075d      	lsls	r5, r3, #29
 80018d4:	d506      	bpl.n	80018e4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d6:	494f      	ldr	r1, [pc, #316]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 80018d8:	68e0      	ldr	r0, [r4, #12]
 80018da:	688a      	ldr	r2, [r1, #8]
 80018dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018e0:	4302      	orrs	r2, r0
 80018e2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e4:	0718      	lsls	r0, r3, #28
 80018e6:	d507      	bpl.n	80018f8 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e8:	4a4a      	ldr	r2, [pc, #296]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 80018ea:	6921      	ldr	r1, [r4, #16]
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80018f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018f8:	f7ff fc02 	bl	8001100 <HAL_RCC_GetSysClockFreq>
 80018fc:	4a45      	ldr	r2, [pc, #276]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 80018fe:	4c47      	ldr	r4, [pc, #284]	; (8001a1c <HAL_RCC_ClockConfig+0x244>)
 8001900:	6892      	ldr	r2, [r2, #8]
 8001902:	4947      	ldr	r1, [pc, #284]	; (8001a20 <HAL_RCC_ClockConfig+0x248>)
 8001904:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001908:	4603      	mov	r3, r0
 800190a:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 800190c:	4845      	ldr	r0, [pc, #276]	; (8001a24 <HAL_RCC_ClockConfig+0x24c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	40d3      	lsrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8001916:	6800      	ldr	r0, [r0, #0]
}
 8001918:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 800191c:	f7ff b890 	b.w	8000a40 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001920:	07d9      	lsls	r1, r3, #31
 8001922:	d5c6      	bpl.n	80018b2 <HAL_RCC_ClockConfig+0xda>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001924:	6863      	ldr	r3, [r4, #4]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d186      	bne.n	8001838 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192a:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 800192c:	6811      	ldr	r1, [r2, #0]
 800192e:	0188      	lsls	r0, r1, #6
 8001930:	f57f af69 	bpl.w	8001806 <HAL_RCC_ClockConfig+0x2e>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001934:	68d1      	ldr	r1, [r2, #12]
 8001936:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 800193a:	2902      	cmp	r1, #2
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x22e>
 800193e:	2903      	cmp	r1, #3
 8001940:	d02e      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x1c8>
 8001942:	2901      	cmp	r1, #1
 8001944:	d050      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x210>
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001946:	68d1      	ldr	r1, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001948:	68d1      	ldr	r1, [r2, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800194a:	68d2      	ldr	r2, [r2, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800194c:	f04f 0900 	mov.w	r9, #0
 8001950:	e78d      	b.n	800186e <HAL_RCC_ClockConfig+0x96>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001952:	68a1      	ldr	r1, [r4, #8]
 8001954:	482f      	ldr	r0, [pc, #188]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 8001956:	6882      	ldr	r2, [r0, #8]
 8001958:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800195c:	428a      	cmp	r2, r1
 800195e:	d9a8      	bls.n	80018b2 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	6882      	ldr	r2, [r0, #8]
 8001962:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001966:	4311      	orrs	r1, r2
 8001968:	6081      	str	r1, [r0, #8]
 800196a:	e7a2      	b.n	80018b2 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	039a      	lsls	r2, r3, #14
 8001972:	f53f af6e 	bmi.w	8001852 <HAL_RCC_ClockConfig+0x7a>
 8001976:	e746      	b.n	8001806 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001978:	2001      	movs	r0, #1
}
 800197a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800197c:	2003      	movs	r0, #3
 800197e:	e743      	b.n	8001808 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	055f      	lsls	r7, r3, #21
 8001986:	f57f af3e 	bpl.w	8001806 <HAL_RCC_ClockConfig+0x2e>
 800198a:	e762      	b.n	8001852 <HAL_RCC_ClockConfig+0x7a>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800198c:	689a      	ldr	r2, [r3, #8]
          hpre = RCC_SYSCLK_DIV2;
 800198e:	f04f 0980 	mov.w	r9, #128	; 0x80
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001992:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001996:	ea42 0209 	orr.w	r2, r2, r9
 800199a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	e766      	b.n	800186e <HAL_RCC_ClockConfig+0x96>
  switch (pllsource)
 80019a0:	4f21      	ldr	r7, [pc, #132]	; (8001a28 <HAL_RCC_ClockConfig+0x250>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019a2:	481c      	ldr	r0, [pc, #112]	; (8001a14 <HAL_RCC_ClockConfig+0x23c>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80019a4:	4e1c      	ldr	r6, [pc, #112]	; (8001a18 <HAL_RCC_ClockConfig+0x240>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019a6:	68c2      	ldr	r2, [r0, #12]
 80019a8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80019ac:	1c51      	adds	r1, r2, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019ae:	68c2      	ldr	r2, [r0, #12]
 80019b0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80019b4:	fb07 f202 	mul.w	r2, r7, r2
 80019b8:	fbb2 f2f1 	udiv	r2, r2, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019bc:	68c1      	ldr	r1, [r0, #12]
 80019be:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80019c2:	3101      	adds	r1, #1
 80019c4:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco / pllr;
 80019c6:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80019ca:	42b2      	cmp	r2, r6
 80019cc:	d91d      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x232>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019ce:	6882      	ldr	r2, [r0, #8]
 80019d0:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80019d4:	d119      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x232>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019d6:	6882      	ldr	r2, [r0, #8]
 80019d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e0:	6082      	str	r2, [r0, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019e2:	f04f 0980 	mov.w	r9, #128	; 0x80
 80019e6:	e742      	b.n	800186e <HAL_RCC_ClockConfig+0x96>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019e8:	6811      	ldr	r1, [r2, #0]
 80019ea:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019ec:	bf54      	ite	pl
 80019ee:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019f2:	6812      	ldrmi	r2, [r2, #0]
    pllvco = MSIRangeTable[msirange];
 80019f4:	490d      	ldr	r1, [pc, #52]	; (8001a2c <HAL_RCC_ClockConfig+0x254>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019f6:	bf54      	ite	pl
 80019f8:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019fc:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    pllvco = MSIRangeTable[msirange];
 8001a00:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
    break;
 8001a04:	e7cd      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ca>
    pllvco = HSI_VALUE;
 8001a06:	4f0a      	ldr	r7, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x258>)
 8001a08:	e7cb      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a0a:	f04f 0900 	mov.w	r9, #0
 8001a0e:	e72e      	b.n	800186e <HAL_RCC_ClockConfig+0x96>
 8001a10:	40022000 	.word	0x40022000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	04c4b400 	.word	0x04c4b400
 8001a1c:	08002b70 	.word	0x08002b70
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000008 	.word	0x20000008
 8001a28:	007a1200 	.word	0x007a1200
 8001a2c:	08002b88 	.word	0x08002b88
 8001a30:	00f42400 	.word	0x00f42400

08001a34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a36:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a38:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001a3a:	4906      	ldr	r1, [pc, #24]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a3c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a40:	6808      	ldr	r0, [r1, #0]
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	f003 031f 	and.w	r3, r3, #31
}
 8001a48:	40d8      	lsrs	r0, r3
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08002b80 	.word	0x08002b80
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001a5e:	4906      	ldr	r1, [pc, #24]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a60:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a64:	6808      	ldr	r0, [r1, #0]
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	f003 031f 	and.w	r3, r3, #31
}
 8001a6c:	40d8      	lsrs	r0, r3
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08002b80 	.word	0x08002b80
 8001a78:	20000000 	.word	0x20000000

08001a7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a7e:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <RCCEx_PLLSAI1_Config+0x114>)
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	0792      	lsls	r2, r2, #30
{
 8001a84:	4604      	mov	r4, r0
 8001a86:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a88:	d007      	beq.n	8001a9a <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	6802      	ldr	r2, [r0, #0]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d012      	beq.n	8001abc <RCCEx_PLLSAI1_Config+0x40>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8001a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001a9a:	6800      	ldr	r0, [r0, #0]
 8001a9c:	2802      	cmp	r0, #2
 8001a9e:	d04e      	beq.n	8001b3e <RCCEx_PLLSAI1_Config+0xc2>
 8001aa0:	2803      	cmp	r0, #3
 8001aa2:	d045      	beq.n	8001b30 <RCCEx_PLLSAI1_Config+0xb4>
 8001aa4:	2801      	cmp	r0, #1
 8001aa6:	d1f6      	bne.n	8001a96 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	079b      	lsls	r3, r3, #30
 8001aac:	d5f4      	bpl.n	8001a98 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8001aae:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <RCCEx_PLLSAI1_Config+0x114>)
 8001ab0:	68d3      	ldr	r3, [r2, #12]
 8001ab2:	f023 0303 	bic.w	r3, r3, #3
 8001ab6:	4318      	orrs	r0, r3
 8001ab8:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 8001aba:	e001      	b.n	8001ac0 <RCCEx_PLLSAI1_Config+0x44>
       ||
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ea      	beq.n	8001a96 <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 8001ac0:	4d33      	ldr	r5, [pc, #204]	; (8001b90 <RCCEx_PLLSAI1_Config+0x114>)
 8001ac2:	682b      	ldr	r3, [r5, #0]
 8001ac4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ac8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001aca:	f7fe fffb 	bl	8000ac4 <HAL_GetTick>
 8001ace:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ad0:	e004      	b.n	8001adc <RCCEx_PLLSAI1_Config+0x60>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ad2:	f7fe fff7 	bl	8000ac4 <HAL_GetTick>
 8001ad6:	1b83      	subs	r3, r0, r6
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d834      	bhi.n	8001b46 <RCCEx_PLLSAI1_Config+0xca>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	011a      	lsls	r2, r3, #4
 8001ae0:	d4f7      	bmi.n	8001ad2 <RCCEx_PLLSAI1_Config+0x56>
      if(Divider == DIVIDER_P_UPDATE)
 8001ae2:	2f00      	cmp	r7, #0
 8001ae4:	d131      	bne.n	8001b4a <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ae6:	68e3      	ldr	r3, [r4, #12]
 8001ae8:	68a1      	ldr	r1, [r4, #8]
 8001aea:	692a      	ldr	r2, [r5, #16]
 8001aec:	06db      	lsls	r3, r3, #27
 8001aee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001af2:	4928      	ldr	r1, [pc, #160]	; (8001b94 <RCCEx_PLLSAI1_Config+0x118>)
 8001af4:	4011      	ands	r1, r2
 8001af6:	6862      	ldr	r2, [r4, #4]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	3a01      	subs	r2, #1
 8001afc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001b00:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001b02:	4d23      	ldr	r5, [pc, #140]	; (8001b90 <RCCEx_PLLSAI1_Config+0x114>)
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b0a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b0c:	f7fe ffda 	bl	8000ac4 <HAL_GetTick>
 8001b10:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b12:	e004      	b.n	8001b1e <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b14:	f7fe ffd6 	bl	8000ac4 <HAL_GetTick>
 8001b18:	1b83      	subs	r3, r0, r6
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d813      	bhi.n	8001b46 <RCCEx_PLLSAI1_Config+0xca>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b1e:	682b      	ldr	r3, [r5, #0]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	d5f7      	bpl.n	8001b14 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001b24:	692b      	ldr	r3, [r5, #16]
 8001b26:	69a2      	ldr	r2, [r4, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	612b      	str	r3, [r5, #16]
}
 8001b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	0395      	lsls	r5, r2, #14
 8001b34:	d4bb      	bmi.n	8001aae <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0359      	lsls	r1, r3, #13
 8001b3a:	d5ac      	bpl.n	8001a96 <RCCEx_PLLSAI1_Config+0x1a>
 8001b3c:	e7b7      	b.n	8001aae <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	055e      	lsls	r6, r3, #21
 8001b42:	d5a8      	bpl.n	8001a96 <RCCEx_PLLSAI1_Config+0x1a>
 8001b44:	e7b3      	b.n	8001aae <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8001b46:	2003      	movs	r0, #3
}
 8001b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b4a:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b4c:	692a      	ldr	r2, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b4e:	d00f      	beq.n	8001b70 <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <RCCEx_PLLSAI1_Config+0x11c>)
 8001b52:	68a1      	ldr	r1, [r4, #8]
 8001b54:	4013      	ands	r3, r2
 8001b56:	6862      	ldr	r2, [r4, #4]
 8001b58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001b62:	6962      	ldr	r2, [r4, #20]
 8001b64:	0852      	lsrs	r2, r2, #1
 8001b66:	3a01      	subs	r2, #1
 8001b68:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001b6c:	612b      	str	r3, [r5, #16]
 8001b6e:	e7c8      	b.n	8001b02 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <RCCEx_PLLSAI1_Config+0x120>)
 8001b72:	68a1      	ldr	r1, [r4, #8]
 8001b74:	4013      	ands	r3, r2
 8001b76:	6862      	ldr	r2, [r4, #4]
 8001b78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b7c:	3a01      	subs	r2, #1
 8001b7e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001b82:	6922      	ldr	r2, [r4, #16]
 8001b84:	0852      	lsrs	r2, r2, #1
 8001b86:	3a01      	subs	r2, #1
 8001b88:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001b8c:	612b      	str	r3, [r5, #16]
 8001b8e:	e7b8      	b.n	8001b02 <RCCEx_PLLSAI1_Config+0x86>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	07ff800f 	.word	0x07ff800f
 8001b98:	f9ff800f 	.word	0xf9ff800f
 8001b9c:	ff9f800f 	.word	0xff9f800f

08001ba0 <RCCEx_PLLSAI2_Config.constprop.0>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ba0:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	0792      	lsls	r2, r2, #30
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 8001ba6:	b570      	push	{r4, r5, r6, lr}
 8001ba8:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001baa:	d007      	beq.n	8001bbc <RCCEx_PLLSAI2_Config.constprop.0+0x1c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	6802      	ldr	r2, [r0, #0]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d012      	beq.n	8001bde <RCCEx_PLLSAI2_Config.constprop.0+0x3e>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8001bb8:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
    switch(PllSai2->PLLSAI2Source)
 8001bbc:	6800      	ldr	r0, [r0, #0]
 8001bbe:	2802      	cmp	r0, #2
 8001bc0:	d04c      	beq.n	8001c5c <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
 8001bc2:	2803      	cmp	r0, #3
 8001bc4:	d043      	beq.n	8001c4e <RCCEx_PLLSAI2_Config.constprop.0+0xae>
 8001bc6:	2801      	cmp	r0, #1
 8001bc8:	d1f6      	bne.n	8001bb8 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	079b      	lsls	r3, r3, #30
 8001bce:	d5f4      	bpl.n	8001bba <RCCEx_PLLSAI2_Config.constprop.0+0x1a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8001bd0:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8001bd2:	68d3      	ldr	r3, [r2, #12]
 8001bd4:	f023 0303 	bic.w	r3, r3, #3
 8001bd8:	4318      	orrs	r0, r3
 8001bda:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 8001bdc:	e001      	b.n	8001be2 <RCCEx_PLLSAI2_Config.constprop.0+0x42>
       ||
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0ea      	beq.n	8001bb8 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
    __HAL_RCC_PLLSAI2_DISABLE();
 8001be2:	4c21      	ldr	r4, [pc, #132]	; (8001c68 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001bec:	f7fe ff6a 	bl	8000ac4 <HAL_GetTick>
 8001bf0:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bf2:	e004      	b.n	8001bfe <RCCEx_PLLSAI2_Config.constprop.0+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001bf4:	f7fe ff66 	bl	8000ac4 <HAL_GetTick>
 8001bf8:	1b83      	subs	r3, r0, r6
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d832      	bhi.n	8001c64 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	009a      	lsls	r2, r3, #2
 8001c02:	d4f7      	bmi.n	8001bf4 <RCCEx_PLLSAI2_Config.constprop.0+0x54>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001c04:	68eb      	ldr	r3, [r5, #12]
 8001c06:	68a9      	ldr	r1, [r5, #8]
 8001c08:	6962      	ldr	r2, [r4, #20]
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c0a:	4e17      	ldr	r6, [pc, #92]	; (8001c68 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001c0c:	06db      	lsls	r3, r3, #27
 8001c0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c12:	4916      	ldr	r1, [pc, #88]	; (8001c6c <RCCEx_PLLSAI2_Config.constprop.0+0xcc>)
 8001c14:	4011      	ands	r1, r2
 8001c16:	686a      	ldr	r2, [r5, #4]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	3a01      	subs	r2, #1
 8001c1c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001c20:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001c2a:	f7fe ff4b 	bl	8000ac4 <HAL_GetTick>
 8001c2e:	4604      	mov	r4, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c30:	e004      	b.n	8001c3c <RCCEx_PLLSAI2_Config.constprop.0+0x9c>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c32:	f7fe ff47 	bl	8000ac4 <HAL_GetTick>
 8001c36:	1b03      	subs	r3, r0, r4
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d813      	bhi.n	8001c64 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c3c:	6833      	ldr	r3, [r6, #0]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	d5f7      	bpl.n	8001c32 <RCCEx_PLLSAI2_Config.constprop.0+0x92>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001c42:	6973      	ldr	r3, [r6, #20]
 8001c44:	69aa      	ldr	r2, [r5, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	2000      	movs	r0, #0
 8001c4a:	6173      	str	r3, [r6, #20]
}
 8001c4c:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	0394      	lsls	r4, r2, #14
 8001c52:	d4bd      	bmi.n	8001bd0 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0359      	lsls	r1, r3, #13
 8001c58:	d5ae      	bpl.n	8001bb8 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8001c5a:	e7b9      	b.n	8001bd0 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	055e      	lsls	r6, r3, #21
 8001c60:	d5aa      	bpl.n	8001bb8 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8001c62:	e7b5      	b.n	8001bd0 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        status = HAL_TIMEOUT;
 8001c64:	2003      	movs	r0, #3
}
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	07ff800f 	.word	0x07ff800f

08001c70 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c74:	6803      	ldr	r3, [r0, #0]
 8001c76:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c7e:	d022      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c80:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8001c82:	2940      	cmp	r1, #64	; 0x40
 8001c84:	f000 8214 	beq.w	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8001c88:	d80f      	bhi.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001c8a:	2900      	cmp	r1, #0
 8001c8c:	f000 81d4 	beq.w	8002038 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8001c90:	2920      	cmp	r1, #32
 8001c92:	f040 8229 	bne.w	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c96:	3020      	adds	r0, #32
 8001c98:	f7ff ff82 	bl	8001ba0 <RCCEx_PLLSAI2_Config.constprop.0>
 8001c9c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001c9e:	2e00      	cmp	r6, #0
 8001ca0:	f040 81fd 	bne.w	800209e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	e004      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001caa:	2960      	cmp	r1, #96	; 0x60
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cae:	2980      	cmp	r1, #128	; 0x80
 8001cb0:	f040 821a 	bne.w	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cb4:	48a9      	ldr	r0, [pc, #676]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001cb6:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8001cba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 8001cc4:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001cc6:	04da      	lsls	r2, r3, #19
 8001cc8:	f140 8135 	bpl.w	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001ccc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001cce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001cd2:	f000 81e6 	beq.w	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001cd6:	f200 8120 	bhi.w	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8001cda:	2900      	cmp	r1, #0
 8001cdc:	f000 81b4 	beq.w	8002048 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8001ce0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001ce4:	f040 8204 	bne.w	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ce8:	f104 0020 	add.w	r0, r4, #32
 8001cec:	f7ff ff58 	bl	8001ba0 <RCCEx_PLLSAI2_Config.constprop.0>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cf0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cf2:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8001cf4:	f1b8 0f00 	cmp.w	r8, #0
 8001cf8:	f040 811b 	bne.w	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cfc:	4997      	ldr	r1, [pc, #604]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001cfe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001d00:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8001d04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d08:	4302      	orrs	r2, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d0a:	039f      	lsls	r7, r3, #14
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d0c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d10:	f100 8115 	bmi.w	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d14:	07d8      	lsls	r0, r3, #31
 8001d16:	d508      	bpl.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d18:	4990      	ldr	r1, [pc, #576]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001d1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d20:	f022 0203 	bic.w	r2, r2, #3
 8001d24:	4302      	orrs	r2, r0
 8001d26:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d2a:	0799      	lsls	r1, r3, #30
 8001d2c:	d508      	bpl.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d2e:	498b      	ldr	r1, [pc, #556]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d30:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001d32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d36:	f022 020c 	bic.w	r2, r2, #12
 8001d3a:	4302      	orrs	r2, r0
 8001d3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d40:	075a      	lsls	r2, r3, #29
 8001d42:	d508      	bpl.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d44:	4985      	ldr	r1, [pc, #532]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d46:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001d48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d4c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001d50:	4302      	orrs	r2, r0
 8001d52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d56:	071f      	lsls	r7, r3, #28
 8001d58:	d508      	bpl.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d5a:	4980      	ldr	r1, [pc, #512]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001d5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d62:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001d66:	4302      	orrs	r2, r0
 8001d68:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d6c:	06dd      	lsls	r5, r3, #27
 8001d6e:	d508      	bpl.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d70:	497a      	ldr	r1, [pc, #488]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d72:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001d74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d7c:	4302      	orrs	r2, r0
 8001d7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d82:	0698      	lsls	r0, r3, #26
 8001d84:	d508      	bpl.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d86:	4975      	ldr	r1, [pc, #468]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d88:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001d8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d92:	4302      	orrs	r2, r0
 8001d94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d98:	0599      	lsls	r1, r3, #22
 8001d9a:	d508      	bpl.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d9c:	496f      	ldr	r1, [pc, #444]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d9e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001da0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001da4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001da8:	4302      	orrs	r2, r0
 8001daa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001dae:	055a      	lsls	r2, r3, #21
 8001db0:	d508      	bpl.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001db2:	496a      	ldr	r1, [pc, #424]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001db4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001db6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dba:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc4:	065f      	lsls	r7, r3, #25
 8001dc6:	d508      	bpl.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dc8:	4964      	ldr	r1, [pc, #400]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001dca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001dcc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dd0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dda:	061d      	lsls	r5, r3, #24
 8001ddc:	d508      	bpl.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dde:	495f      	ldr	r1, [pc, #380]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001de2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001de6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001dea:	4302      	orrs	r2, r0
 8001dec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001df0:	05d8      	lsls	r0, r3, #23
 8001df2:	d508      	bpl.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001df4:	4959      	ldr	r1, [pc, #356]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001df6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001df8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dfc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001e00:	4302      	orrs	r2, r0
 8001e02:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e06:	02d9      	lsls	r1, r3, #11
 8001e08:	d508      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e0a:	4954      	ldr	r1, [pc, #336]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001e0c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001e0e:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8001e12:	f022 0203 	bic.w	r2, r2, #3
 8001e16:	4302      	orrs	r2, r0
 8001e18:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e1c:	049a      	lsls	r2, r3, #18
 8001e1e:	d510      	bpl.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e20:	494e      	ldr	r1, [pc, #312]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001e22:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001e24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e28:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001e2c:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e2e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e36:	f000 8115 	beq.w	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001e3a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8001e3e:	f000 813d 	beq.w	80020bc <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e42:	031f      	lsls	r7, r3, #12
 8001e44:	d51a      	bpl.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e46:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001e48:	4a44      	ldr	r2, [pc, #272]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001e4a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8001e4e:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8001e52:	f000 810c 	beq.w	800206e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8001e56:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001e5a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 8001e5e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8001e62:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8001e66:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e68:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e6c:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e70:	f040 80d2 	bne.w	8002018 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e74:	68d1      	ldr	r1, [r2, #12]
 8001e76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001e7a:	60d1      	str	r1, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e7c:	035d      	lsls	r5, r3, #13
 8001e7e:	d510      	bpl.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e80:	4936      	ldr	r1, [pc, #216]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001e82:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001e84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e88:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001e8c:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e8e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e96:	f000 80f3 	beq.w	8002080 <HAL_RCCEx_PeriphCLKConfig+0x410>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e9a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8001e9e:	f000 8117 	beq.w	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ea2:	0458      	lsls	r0, r3, #17
 8001ea4:	d50d      	bpl.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ea6:	482d      	ldr	r0, [pc, #180]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ea8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001eac:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb4:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001eb6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001ebe:	f000 80e4 	beq.w	800208a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ec2:	03d9      	lsls	r1, r3, #15
 8001ec4:	d509      	bpl.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ec6:	4925      	ldr	r1, [pc, #148]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ec8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001ecc:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8001ed0:	f022 0204 	bic.w	r2, r2, #4
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8001eda:	029a      	lsls	r2, r3, #10
 8001edc:	d509      	bpl.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ede:	491f      	ldr	r1, [pc, #124]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ee0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001ee4:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8001ee8:	f022 0218 	bic.w	r2, r2, #24
 8001eec:	4302      	orrs	r2, r0
 8001eee:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8001ef2:	01db      	lsls	r3, r3, #7
 8001ef4:	d50d      	bpl.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8001ef6:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ef8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001efc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8001f00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f04:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8001f06:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8001f0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8001f0e:	f000 80a1 	beq.w	8002054 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
}
 8001f12:	4630      	mov	r0, r6
 8001f14:	b003      	add	sp, #12
 8001f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8001f1a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001f1e:	d003      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8001f20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001f24:	f040 80e4 	bne.w	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001f28:	46b0      	mov	r8, r6
    if(ret == HAL_OK)
 8001f2a:	f1b8 0f00 	cmp.w	r8, #0
 8001f2e:	f43f aee5 	beq.w	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8001f32:	4646      	mov	r6, r8
 8001f34:	e000      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8001f36:	46b0      	mov	r8, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f38:	039f      	lsls	r7, r3, #14
 8001f3a:	f57f aeeb 	bpl.w	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f42:	00d5      	lsls	r5, r2, #3
 8001f44:	d55c      	bpl.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x390>
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f4a:	4d05      	ldr	r5, [pc, #20]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001f54:	f7fe fdb6 	bl	8000ac4 <HAL_GetTick>
 8001f58:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7fe fdae 	bl	8000ac4 <HAL_GetTick>
 8001f68:	1bc3      	subs	r3, r0, r7
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d862      	bhi.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f6e:	682b      	ldr	r3, [r5, #0]
 8001f70:	05d8      	lsls	r0, r3, #23
 8001f72:	d5f7      	bpl.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    if(ret == HAL_OK)
 8001f74:	f1b8 0f00 	cmp.w	r8, #0
 8001f78:	f040 80b4 	bne.w	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f7c:	4d5e      	ldr	r5, [pc, #376]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f7e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f82:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f86:	d027      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001f88:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d025      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f90:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f94:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fac:	f421 7340 	bic.w	r3, r1, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fb0:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8001fb2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fb6:	f140 8099 	bpl.w	80020ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        tickstart = HAL_GetTick();
 8001fba:	f7fe fd83 	bl	8000ac4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001fc2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc4:	e004      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fd7d 	bl	8000ac4 <HAL_GetTick>
 8001fca:	1bc0      	subs	r0, r0, r7
 8001fcc:	4540      	cmp	r0, r8
 8001fce:	d831      	bhi.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001fd4:	079b      	lsls	r3, r3, #30
 8001fd6:	d5f6      	bpl.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x356>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fdc:	4946      	ldr	r1, [pc, #280]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fde:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fe2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8001fec:	f1b9 0f00 	cmp.w	r9, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4a41      	ldr	r2, [pc, #260]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	e689      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002006:	659a      	str	r2, [r3, #88]	; 0x58
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002012:	f04f 0901 	mov.w	r9, #1
 8002016:	e798      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002018:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800201c:	f47f af2e 	bne.w	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002020:	2101      	movs	r1, #1
 8002022:	1d20      	adds	r0, r4, #4
 8002024:	f7ff fd2a 	bl	8001a7c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002028:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800202a:	2800      	cmp	r0, #0
 800202c:	f43f af26 	beq.w	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002030:	4606      	mov	r6, r0
 8002032:	e723      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        ret = HAL_TIMEOUT;
 8002034:	2603      	movs	r6, #3
 8002036:	e7d9      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002038:	3004      	adds	r0, #4
 800203a:	f7ff fd1f 	bl	8001a7c <RCCEx_PLLSAI1_Config>
 800203e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002040:	2e00      	cmp	r6, #0
 8002042:	f43f ae2f 	beq.w	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002046:	e02a      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002048:	1d20      	adds	r0, r4, #4
 800204a:	f7ff fd17 	bl	8001a7c <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800204e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002050:	4680      	mov	r8, r0
      break;
 8002052:	e64f      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002054:	68d3      	ldr	r3, [r2, #12]
}
 8002056:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800205c:	60d3      	str	r3, [r2, #12]
}
 800205e:	b003      	add	sp, #12
 8002060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002064:	68ca      	ldr	r2, [r1, #12]
 8002066:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800206a:	60ca      	str	r2, [r1, #12]
 800206c:	e6e9      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800206e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002072:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002076:	68d1      	ldr	r1, [r2, #12]
 8002078:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800207c:	60d1      	str	r1, [r2, #12]
 800207e:	e6fd      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002080:	68ca      	ldr	r2, [r1, #12]
 8002082:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002086:	60ca      	str	r2, [r1, #12]
 8002088:	e70b      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800208a:	2102      	movs	r1, #2
 800208c:	1d20      	adds	r0, r4, #4
 800208e:	f7ff fcf5 	bl	8001a7c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002092:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8002094:	2800      	cmp	r0, #0
 8002096:	f43f af14 	beq.w	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800209a:	4606      	mov	r6, r0
 800209c:	e711      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	e611      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020a2:	4915      	ldr	r1, [pc, #84]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a4:	68ca      	ldr	r2, [r1, #12]
 80020a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020aa:	60ca      	str	r2, [r1, #12]
      break;
 80020ac:	46b0      	mov	r8, r6
 80020ae:	e621      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020b0:	4811      	ldr	r0, [pc, #68]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b2:	68c2      	ldr	r2, [r0, #12]
 80020b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020b8:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 80020ba:	e5fb      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020bc:	2101      	movs	r1, #1
 80020be:	1d20      	adds	r0, r4, #4
 80020c0:	f7ff fcdc 	bl	8001a7c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020c4:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 80020c6:	2800      	cmp	r0, #0
 80020c8:	f43f aebb 	beq.w	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020cc:	4606      	mov	r6, r0
 80020ce:	e6b8      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020d0:	2101      	movs	r1, #1
 80020d2:	1d20      	adds	r0, r4, #4
 80020d4:	f7ff fcd2 	bl	8001a7c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020d8:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80020da:	2800      	cmp	r0, #0
 80020dc:	f43f aee1 	beq.w	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020e0:	4606      	mov	r6, r0
 80020e2:	e6de      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80020e4:	4646      	mov	r6, r8
 80020e6:	e781      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80020e8:	2601      	movs	r6, #1
 80020ea:	e5ec      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020ec:	4613      	mov	r3, r2
 80020ee:	e775      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80020f0:	2601      	movs	r6, #1
 80020f2:	46b0      	mov	r8, r6
 80020f4:	e720      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000

080020fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020fc:	b538      	push	{r3, r4, r5, lr}
 80020fe:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002100:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002102:	6882      	ldr	r2, [r0, #8]
 8002104:	6900      	ldr	r0, [r0, #16]
 8002106:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002108:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800210a:	4302      	orrs	r2, r0
 800210c:	430a      	orrs	r2, r1
 800210e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002110:	49b3      	ldr	r1, [pc, #716]	; (80023e0 <UART_SetConfig+0x2e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002112:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002114:	4029      	ands	r1, r5
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	68e1      	ldr	r1, [r4, #12]
 800211e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002122:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002124:	49af      	ldr	r1, [pc, #700]	; (80023e4 <UART_SetConfig+0x2e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002126:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002128:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800212a:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800212c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800212e:	f000 8081 	beq.w	8002234 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 8002132:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002134:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8002138:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800213c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800213e:	430a      	orrs	r2, r1
 8002140:	609a      	str	r2, [r3, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002146:	f022 020f 	bic.w	r2, r2, #15
 800214a:	430a      	orrs	r2, r1
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800214e:	4aa6      	ldr	r2, [pc, #664]	; (80023e8 <UART_SetConfig+0x2ec>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d027      	beq.n	80021a4 <UART_SetConfig+0xa8>
 8002154:	4aa5      	ldr	r2, [pc, #660]	; (80023ec <UART_SetConfig+0x2f0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04b      	beq.n	80021f2 <UART_SetConfig+0xf6>
 800215a:	4aa5      	ldr	r2, [pc, #660]	; (80023f0 <UART_SetConfig+0x2f4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	f000 8113 	beq.w	8002388 <UART_SetConfig+0x28c>
 8002162:	4aa4      	ldr	r2, [pc, #656]	; (80023f4 <UART_SetConfig+0x2f8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f000 80ba 	beq.w	80022de <UART_SetConfig+0x1e2>
 800216a:	4aa3      	ldr	r2, [pc, #652]	; (80023f8 <UART_SetConfig+0x2fc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d111      	bne.n	8002194 <UART_SetConfig+0x98>
 8002170:	4ba2      	ldr	r3, [pc, #648]	; (80023fc <UART_SetConfig+0x300>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800217e:	f000 8128 	beq.w	80023d2 <UART_SetConfig+0x2d6>
 8002182:	f200 80d7 	bhi.w	8002334 <UART_SetConfig+0x238>
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80db 	beq.w	8002342 <UART_SetConfig+0x246>
 800218c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002190:	f000 80b1 	beq.w	80022f6 <UART_SetConfig+0x1fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8002194:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002196:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8002198:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 800219c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80021a0:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021a4:	4b95      	ldr	r3, [pc, #596]	; (80023fc <UART_SetConfig+0x300>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	f240 808e 	bls.w	80022d2 <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80021ba:	f000 8105 	beq.w	80023c8 <UART_SetConfig+0x2cc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80021be:	f7ff fc4b 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80021c2:	2800      	cmp	r0, #0
 80021c4:	f000 80de 	beq.w	8002384 <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021ca:	6862      	ldr	r2, [r4, #4]
 80021cc:	4b8c      	ldr	r3, [pc, #560]	; (8002400 <UART_SetConfig+0x304>)
 80021ce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80021d2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021d6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021da:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80021de:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021e2:	f1a3 0210 	sub.w	r2, r3, #16
 80021e6:	428a      	cmp	r2, r1
 80021e8:	d8d4      	bhi.n	8002194 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80021ea:	6822      	ldr	r2, [r4, #0]
 80021ec:	2000      	movs	r0, #0
 80021ee:	60d3      	str	r3, [r2, #12]
 80021f0:	e7d1      	b.n	8002196 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021f2:	4b82      	ldr	r3, [pc, #520]	; (80023fc <UART_SetConfig+0x300>)
 80021f4:	4a83      	ldr	r2, [pc, #524]	; (8002404 <UART_SetConfig+0x308>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002200:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002204:	d07d      	beq.n	8002302 <UART_SetConfig+0x206>
    switch (clocksource)
 8002206:	2b08      	cmp	r3, #8
 8002208:	d8c4      	bhi.n	8002194 <UART_SetConfig+0x98>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <UART_SetConfig+0x114>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	0800233d 	.word	0x0800233d
 8002214:	080021bf 	.word	0x080021bf
 8002218:	080023bf 	.word	0x080023bf
 800221c:	08002195 	.word	0x08002195
 8002220:	080022fd 	.word	0x080022fd
 8002224:	08002195 	.word	0x08002195
 8002228:	08002195 	.word	0x08002195
 800222c:	08002195 	.word	0x08002195
 8002230:	080023af 	.word	0x080023af
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002234:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8002238:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002242:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002244:	486d      	ldr	r0, [pc, #436]	; (80023fc <UART_SetConfig+0x300>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002246:	f022 020f 	bic.w	r2, r2, #15
 800224a:	430a      	orrs	r2, r1
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800224e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8002252:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800225a:	f000 80ae 	beq.w	80023ba <UART_SetConfig+0x2be>
 800225e:	d80b      	bhi.n	8002278 <UART_SetConfig+0x17c>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d039      	beq.n	80022d8 <UART_SetConfig+0x1dc>
 8002264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002268:	d194      	bne.n	8002194 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 800226a:	f7fe ff49 	bl	8001100 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800226e:	2800      	cmp	r0, #0
 8002270:	f000 8088 	beq.w	8002384 <UART_SetConfig+0x288>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002274:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002276:	e004      	b.n	8002282 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800227c:	d18a      	bne.n	8002194 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 800227e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002282:	4b5f      	ldr	r3, [pc, #380]	; (8002400 <UART_SetConfig+0x304>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002284:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002286:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800228a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800228e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8002292:	4299      	cmp	r1, r3
 8002294:	f63f af7e 	bhi.w	8002194 <UART_SetConfig+0x98>
 8002298:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800229c:	f63f af7a 	bhi.w	8002194 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022a0:	2300      	movs	r3, #0
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fd ffac 	bl	8000200 <__aeabi_uldivmod>
 80022a8:	0209      	lsls	r1, r1, #8
 80022aa:	0203      	lsls	r3, r0, #8
 80022ac:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80022b0:	0868      	lsrs	r0, r5, #1
 80022b2:	1818      	adds	r0, r3, r0
 80022b4:	462a      	mov	r2, r5
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	f141 0100 	adc.w	r1, r1, #0
 80022be:	f7fd ff9f 	bl	8000200 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022c2:	4a51      	ldr	r2, [pc, #324]	; (8002408 <UART_SetConfig+0x30c>)
 80022c4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80022c8:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022ca:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022cc:	f63f af62 	bhi.w	8002194 <UART_SetConfig+0x98>
 80022d0:	e78b      	b.n	80021ea <UART_SetConfig+0xee>
 80022d2:	4a4e      	ldr	r2, [pc, #312]	; (800240c <UART_SetConfig+0x310>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80022d6:	e793      	b.n	8002200 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022d8:	f7ff fbac 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
        break;
 80022dc:	e7c7      	b.n	800226e <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <UART_SetConfig+0x300>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d072      	beq.n	80023d2 <UART_SetConfig+0x2d6>
 80022ec:	d862      	bhi.n	80023b4 <UART_SetConfig+0x2b8>
 80022ee:	b343      	cbz	r3, 8002342 <UART_SetConfig+0x246>
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	f47f af4f 	bne.w	8002194 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80022fa:	d062      	beq.n	80023c2 <UART_SetConfig+0x2c6>
        pclk = HAL_RCC_GetSysClockFreq();
 80022fc:	f7fe ff00 	bl	8001100 <HAL_RCC_GetSysClockFreq>
        break;
 8002300:	e75f      	b.n	80021c2 <UART_SetConfig+0xc6>
    switch (clocksource)
 8002302:	2b08      	cmp	r3, #8
 8002304:	f63f af46 	bhi.w	8002194 <UART_SetConfig+0x98>
 8002308:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <UART_SetConfig+0x214>)
 800230a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230e:	bf00      	nop
 8002310:	08002349 	.word	0x08002349
 8002314:	080023c9 	.word	0x080023c9
 8002318:	080023cf 	.word	0x080023cf
 800231c:	08002195 	.word	0x08002195
 8002320:	080023c3 	.word	0x080023c3
 8002324:	08002195 	.word	0x08002195
 8002328:	08002195 	.word	0x08002195
 800232c:	08002195 	.word	0x08002195
 8002330:	08002351 	.word	0x08002351
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002338:	d036      	beq.n	80023a8 <UART_SetConfig+0x2ac>
 800233a:	e72b      	b.n	8002194 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 800233c:	f7ff fb7a 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
        break;
 8002340:	e73f      	b.n	80021c2 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002342:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002346:	d1f9      	bne.n	800233c <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002348:	f7ff fb74 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800234c:	b1d0      	cbz	r0, 8002384 <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800234e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002350:	6862      	ldr	r2, [r4, #4]
 8002352:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <UART_SetConfig+0x304>)
 8002354:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002358:	fbb0 f0f1 	udiv	r0, r0, r1
 800235c:	0853      	lsrs	r3, r2, #1
 800235e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002362:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002366:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800236a:	f1a0 0210 	sub.w	r2, r0, #16
 800236e:	429a      	cmp	r2, r3
 8002370:	f63f af10 	bhi.w	8002194 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002374:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8002378:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800237a:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800237c:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8002380:	4318      	orrs	r0, r3
 8002382:	60d0      	str	r0, [r2, #12]
 8002384:	2000      	movs	r0, #0
 8002386:	e706      	b.n	8002196 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002388:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <UART_SetConfig+0x300>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002392:	2b20      	cmp	r3, #32
 8002394:	d01d      	beq.n	80023d2 <UART_SetConfig+0x2d6>
 8002396:	d804      	bhi.n	80023a2 <UART_SetConfig+0x2a6>
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0d2      	beq.n	8002342 <UART_SetConfig+0x246>
 800239c:	2b10      	cmp	r3, #16
 800239e:	d0aa      	beq.n	80022f6 <UART_SetConfig+0x1fa>
 80023a0:	e6f8      	b.n	8002194 <UART_SetConfig+0x98>
 80023a2:	2b30      	cmp	r3, #48	; 0x30
 80023a4:	f47f aef6 	bne.w	8002194 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80023ac:	d0d0      	beq.n	8002350 <UART_SetConfig+0x254>
    switch (clocksource)
 80023ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023b2:	e70a      	b.n	80021ca <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023b4:	2bc0      	cmp	r3, #192	; 0xc0
 80023b6:	d0f7      	beq.n	80023a8 <UART_SetConfig+0x2ac>
 80023b8:	e6ec      	b.n	8002194 <UART_SetConfig+0x98>
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <UART_SetConfig+0x314>)
 80023bc:	e761      	b.n	8002282 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 80023be:	4814      	ldr	r0, [pc, #80]	; (8002410 <UART_SetConfig+0x314>)
 80023c0:	e703      	b.n	80021ca <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80023c2:	f7fe fe9d 	bl	8001100 <HAL_RCC_GetSysClockFreq>
        break;
 80023c6:	e7c1      	b.n	800234c <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 80023c8:	f7ff fb46 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
        break;
 80023cc:	e7be      	b.n	800234c <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 80023ce:	4810      	ldr	r0, [pc, #64]	; (8002410 <UART_SetConfig+0x314>)
 80023d0:	e7be      	b.n	8002350 <UART_SetConfig+0x254>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80023d6:	480e      	ldr	r0, [pc, #56]	; (8002410 <UART_SetConfig+0x314>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d8:	f47f aef7 	bne.w	80021ca <UART_SetConfig+0xce>
 80023dc:	e7b8      	b.n	8002350 <UART_SetConfig+0x254>
 80023de:	bf00      	nop
 80023e0:	cfff69f3 	.word	0xcfff69f3
 80023e4:	40008000 	.word	0x40008000
 80023e8:	40013800 	.word	0x40013800
 80023ec:	40004400 	.word	0x40004400
 80023f0:	40004800 	.word	0x40004800
 80023f4:	40004c00 	.word	0x40004c00
 80023f8:	40005000 	.word	0x40005000
 80023fc:	40021000 	.word	0x40021000
 8002400:	08002bcc 	.word	0x08002bcc
 8002404:	08002bbc 	.word	0x08002bbc
 8002408:	000ffcff 	.word	0x000ffcff
 800240c:	08002bb8 	.word	0x08002bb8
 8002410:	00f42400 	.word	0x00f42400

08002414 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002414:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002416:	07da      	lsls	r2, r3, #31
{
 8002418:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800241a:	d506      	bpl.n	800242a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800241c:	6801      	ldr	r1, [r0, #0]
 800241e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002420:	684a      	ldr	r2, [r1, #4]
 8002422:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002426:	4322      	orrs	r2, r4
 8002428:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800242a:	079c      	lsls	r4, r3, #30
 800242c:	d506      	bpl.n	800243c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800242e:	6801      	ldr	r1, [r0, #0]
 8002430:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002432:	684a      	ldr	r2, [r1, #4]
 8002434:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002438:	4322      	orrs	r2, r4
 800243a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800243c:	0759      	lsls	r1, r3, #29
 800243e:	d506      	bpl.n	800244e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002440:	6801      	ldr	r1, [r0, #0]
 8002442:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002444:	684a      	ldr	r2, [r1, #4]
 8002446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800244a:	4322      	orrs	r2, r4
 800244c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800244e:	071a      	lsls	r2, r3, #28
 8002450:	d506      	bpl.n	8002460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002452:	6801      	ldr	r1, [r0, #0]
 8002454:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002456:	684a      	ldr	r2, [r1, #4]
 8002458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800245c:	4322      	orrs	r2, r4
 800245e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002460:	06dc      	lsls	r4, r3, #27
 8002462:	d506      	bpl.n	8002472 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002464:	6801      	ldr	r1, [r0, #0]
 8002466:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002468:	688a      	ldr	r2, [r1, #8]
 800246a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800246e:	4322      	orrs	r2, r4
 8002470:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002472:	0699      	lsls	r1, r3, #26
 8002474:	d506      	bpl.n	8002484 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002476:	6801      	ldr	r1, [r0, #0]
 8002478:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800247a:	688a      	ldr	r2, [r1, #8]
 800247c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002480:	4322      	orrs	r2, r4
 8002482:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002484:	065a      	lsls	r2, r3, #25
 8002486:	d509      	bpl.n	800249c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002488:	6801      	ldr	r1, [r0, #0]
 800248a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800248c:	684a      	ldr	r2, [r1, #4]
 800248e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002492:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002494:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002498:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800249a:	d00b      	beq.n	80024b4 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	d506      	bpl.n	80024ae <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024a0:	6802      	ldr	r2, [r0, #0]
 80024a2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80024a4:	6853      	ldr	r3, [r2, #4]
 80024a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80024aa:	430b      	orrs	r3, r1
 80024ac:	6053      	str	r3, [r2, #4]
  }
}
 80024ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024b2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024b4:	684a      	ldr	r2, [r1, #4]
 80024b6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80024b8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80024bc:	4322      	orrs	r2, r4
 80024be:	604a      	str	r2, [r1, #4]
 80024c0:	e7ec      	b.n	800249c <UART_AdvFeatureConfig+0x88>
 80024c2:	bf00      	nop

080024c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024cc:	6804      	ldr	r4, [r0, #0]
{
 80024ce:	4607      	mov	r7, r0
 80024d0:	460e      	mov	r6, r1
 80024d2:	4615      	mov	r5, r2
 80024d4:	4699      	mov	r9, r3
 80024d6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80024da:	d10a      	bne.n	80024f2 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024dc:	69e3      	ldr	r3, [r4, #28]
 80024de:	ea36 0303 	bics.w	r3, r6, r3
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	429d      	cmp	r5, r3
 80024ea:	d0f7      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80024ec:	2000      	movs	r0, #0
}
 80024ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f2:	69e3      	ldr	r3, [r4, #28]
 80024f4:	ea36 0303 	bics.w	r3, r6, r3
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	42ab      	cmp	r3, r5
 8002500:	d1f4      	bne.n	80024ec <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7fe fadf 	bl	8000ac4 <HAL_GetTick>
 8002506:	eba0 0009 	sub.w	r0, r0, r9
 800250a:	4540      	cmp	r0, r8
 800250c:	d833      	bhi.n	8002576 <UART_WaitOnFlagUntilTimeout+0xb2>
 800250e:	f1b8 0f00 	cmp.w	r8, #0
 8002512:	d030      	beq.n	8002576 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002514:	683c      	ldr	r4, [r7, #0]
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	0759      	lsls	r1, r3, #29
 800251a:	4622      	mov	r2, r4
 800251c:	d5db      	bpl.n	80024d6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800251e:	69e3      	ldr	r3, [r4, #28]
 8002520:	051b      	lsls	r3, r3, #20
 8002522:	d5d8      	bpl.n	80024d6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002528:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800252e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002532:	e844 3100 	strex	r1, r3, [r4]
 8002536:	b139      	cbz	r1, 8002548 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002538:	e852 3f00 	ldrex	r3, [r2]
 800253c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	e842 3100 	strex	r1, r3, [r2]
 8002544:	2900      	cmp	r1, #0
 8002546:	d1f7      	bne.n	8002538 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	f102 0308 	add.w	r3, r2, #8
 800254c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002550:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	f102 0008 	add.w	r0, r2, #8
 8002558:	e840 3100 	strex	r1, r3, [r0]
 800255c:	2900      	cmp	r1, #0
 800255e:	d1f3      	bne.n	8002548 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8002560:	2320      	movs	r3, #32
 8002562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8002566:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800256a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800256e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8002574:	e7bb      	b.n	80024ee <UART_WaitOnFlagUntilTimeout+0x2a>
 8002576:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002578:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800257c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002580:	e842 3100 	strex	r1, r3, [r2]
 8002584:	2900      	cmp	r1, #0
 8002586:	d1f7      	bne.n	8002578 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002588:	f102 0308 	add.w	r3, r2, #8
 800258c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002590:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002594:	f102 0008 	add.w	r0, r2, #8
 8002598:	e840 3100 	strex	r1, r3, [r0]
 800259c:	2900      	cmp	r1, #0
 800259e:	d1f3      	bne.n	8002588 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 80025a0:	2320      	movs	r3, #32
 80025a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80025a6:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80025aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80025ae:	2003      	movs	r0, #3
 80025b0:	e79d      	b.n	80024ee <UART_WaitOnFlagUntilTimeout+0x2a>
 80025b2:	bf00      	nop

080025b4 <HAL_UART_Init>:
  if (huart == NULL)
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d066      	beq.n	8002686 <HAL_UART_Init+0xd2>
{
 80025b8:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80025ba:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80025be:	b082      	sub	sp, #8
 80025c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d04c      	beq.n	8002660 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80025c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025c8:	2324      	movs	r3, #36	; 0x24
 80025ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80025d6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d8:	f7ff fd90 	bl	80020fc <UART_SetConfig>
 80025dc:	2801      	cmp	r0, #1
 80025de:	d03c      	beq.n	800265a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d135      	bne.n	8002652 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80025ee:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80025f6:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025f8:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fa:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80025fc:	f041 0101 	orr.w	r1, r1, #1
 8002600:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002602:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8002606:	f7fe fa5d 	bl	8000ac4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8002610:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002612:	d40e      	bmi.n	8002632 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	075b      	lsls	r3, r3, #29
 8002618:	d427      	bmi.n	800266a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800261c:	2220      	movs	r2, #32
 800261e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8002622:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002626:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800262a:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800262e:	b002      	add	sp, #8
 8002630:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002632:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	462a      	mov	r2, r5
 800263a:	4603      	mov	r3, r0
 800263c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002640:	4620      	mov	r0, r4
 8002642:	f7ff ff3f 	bl	80024c4 <UART_WaitOnFlagUntilTimeout>
 8002646:	b9e0      	cbnz	r0, 8002682 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	075b      	lsls	r3, r3, #29
 800264e:	d40c      	bmi.n	800266a <HAL_UART_Init+0xb6>
 8002650:	e7e3      	b.n	800261a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff fede 	bl	8002414 <UART_AdvFeatureConfig>
 8002658:	e7c5      	b.n	80025e6 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800265a:	2001      	movs	r0, #1
}
 800265c:	b002      	add	sp, #8
 800265e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8002660:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8002664:	f7fe f8b0 	bl	80007c8 <HAL_UART_MspInit>
 8002668:	e7ad      	b.n	80025c6 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800266a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	4633      	mov	r3, r6
 8002674:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff ff23 	bl	80024c4 <UART_WaitOnFlagUntilTimeout>
 800267e:	2800      	cmp	r0, #0
 8002680:	d0cb      	beq.n	800261a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8002682:	2003      	movs	r0, #3
 8002684:	e7d3      	b.n	800262e <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8002686:	2001      	movs	r0, #1
}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800268c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002690:	2b01      	cmp	r3, #1
 8002692:	d017      	beq.n	80026c4 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002694:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002696:	2324      	movs	r3, #36	; 0x24
{
 8002698:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800269a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800269e:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80026a0:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80026a2:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80026a4:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80026a8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80026ac:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80026ae:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80026b0:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80026b6:	2220      	movs	r2, #32
 80026b8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 80026bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80026c0:	4618      	mov	r0, r3
}
 80026c2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80026c4:	2002      	movs	r0, #2
}
 80026c6:	4770      	bx	lr

080026c8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80026c8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80026cc:	2a01      	cmp	r2, #1
 80026ce:	d037      	beq.n	8002740 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80026d0:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026d2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026d4:	2024      	movs	r0, #36	; 0x24
{
 80026d6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80026d8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026dc:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80026de:	6810      	ldr	r0, [r2, #0]
 80026e0:	f020 0001 	bic.w	r0, r0, #1
 80026e4:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80026e6:	6890      	ldr	r0, [r2, #8]
 80026e8:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80026ec:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80026ee:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80026f0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80026f2:	b310      	cbz	r0, 800273a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80026f4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80026f6:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80026f8:	4d12      	ldr	r5, [pc, #72]	; (8002744 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80026fa:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80026fe:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002702:	4911      	ldr	r1, [pc, #68]	; (8002748 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8002704:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002708:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800270c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002710:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002714:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002716:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002718:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800271c:	fbb1 f1f5 	udiv	r1, r1, r5
 8002720:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8002724:	2100      	movs	r1, #0
 8002726:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800272a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800272c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800272e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8002732:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8002734:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8002738:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800273a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800273c:	4608      	mov	r0, r1
 800273e:	e7ef      	b.n	8002720 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8002740:	2002      	movs	r0, #2
}
 8002742:	4770      	bx	lr
 8002744:	08002be4 	.word	0x08002be4
 8002748:	08002bec 	.word	0x08002bec

0800274c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800274c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8002750:	2a01      	cmp	r2, #1
 8002752:	d037      	beq.n	80027c4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8002754:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002756:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002758:	2024      	movs	r0, #36	; 0x24
{
 800275a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002760:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002762:	6810      	ldr	r0, [r2, #0]
 8002764:	f020 0001 	bic.w	r0, r0, #1
 8002768:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800276a:	6890      	ldr	r0, [r2, #8]
 800276c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8002770:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002772:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002774:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002776:	b310      	cbz	r0, 80027be <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002778:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800277a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800277c:	4d12      	ldr	r5, [pc, #72]	; (80027c8 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800277e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002782:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002786:	4911      	ldr	r1, [pc, #68]	; (80027cc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002788:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800278c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002790:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002794:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002798:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800279a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800279c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80027a0:	fbb1 f1f5 	udiv	r1, r1, r5
 80027a4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80027a8:	2100      	movs	r1, #0
 80027aa:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80027ae:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80027b0:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80027b2:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80027b6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80027bc:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80027be:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80027c0:	4608      	mov	r0, r1
 80027c2:	e7ef      	b.n	80027a4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80027c4:	2002      	movs	r0, #2
}
 80027c6:	4770      	bx	lr
 80027c8:	08002be4 	.word	0x08002be4
 80027cc:	08002bec 	.word	0x08002bec

080027d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80027d0:	b084      	sub	sp, #16
 80027d2:	4684      	mov	ip, r0
 80027d4:	b082      	sub	sp, #8
 80027d6:	a803      	add	r0, sp, #12
 80027d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027dc:	f8dc 300c 	ldr.w	r3, [ip, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <USB_CoreInit+0x8c>)
  __IO uint32_t count = 0U;
 80027e2:	2100      	movs	r1, #0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e8:	f8cc 300c 	str.w	r3, [ip, #12]
  __IO uint32_t count = 0U;
 80027ec:	9101      	str	r1, [sp, #4]
 80027ee:	e003      	b.n	80027f8 <USB_CoreInit+0x28>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80027f0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db1a      	blt.n	800282e <USB_CoreInit+0x5e>
    count++;
 80027f8:	9b01      	ldr	r3, [sp, #4]
 80027fa:	3301      	adds	r3, #1
 80027fc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80027fe:	9b01      	ldr	r3, [sp, #4]
 8002800:	4293      	cmp	r3, r2
 8002802:	d9f5      	bls.n	80027f0 <USB_CoreInit+0x20>
      return HAL_TIMEOUT;
 8002804:	2003      	movs	r0, #3
  if (cfg.battery_charging_enable == 0U)
 8002806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002808:	b943      	cbnz	r3, 800281c <USB_CoreInit+0x4c>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800280a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800280e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002812:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 8002816:	b002      	add	sp, #8
 8002818:	b004      	add	sp, #16
 800281a:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800281c:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 8002828:	b002      	add	sp, #8
 800282a:	b004      	add	sp, #16
 800282c:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002832:	f8dc 3010 	ldr.w	r3, [ip, #16]

  do
  {
    count++;

    if (count > 200000U)
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <USB_CoreInit+0x8c>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8cc 3010 	str.w	r3, [ip, #16]
 8002840:	e004      	b.n	800284c <USB_CoreInit+0x7c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002842:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8002846:	f010 0001 	ands.w	r0, r0, #1
 800284a:	d0dc      	beq.n	8002806 <USB_CoreInit+0x36>
    count++;
 800284c:	9b01      	ldr	r3, [sp, #4]
 800284e:	3301      	adds	r3, #1
 8002850:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002852:	9b01      	ldr	r3, [sp, #4]
 8002854:	4293      	cmp	r3, r2
 8002856:	d9f4      	bls.n	8002842 <USB_CoreInit+0x72>
 8002858:	e7d4      	b.n	8002804 <USB_CoreInit+0x34>
 800285a:	bf00      	nop
 800285c:	00030d40 	.word	0x00030d40

08002860 <USB_DisableGlobalInt>:
{
 8002860:	4603      	mov	r3, r0
}
 8002862:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop

08002870 <USB_SetCurrentMode>:
{
 8002870:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002872:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002874:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002876:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 800287a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800287c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800287e:	d018      	beq.n	80028b2 <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8002880:	b9a9      	cbnz	r1, 80028ae <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002882:	68c3      	ldr	r3, [r0, #12]
 8002884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t ms = 0U;
 8002888:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800288a:	60c3      	str	r3, [r0, #12]
 800288c:	e001      	b.n	8002892 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800288e:	2c32      	cmp	r4, #50	; 0x32
 8002890:	d00d      	beq.n	80028ae <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8002892:	2001      	movs	r0, #1
 8002894:	f7fe f91c 	bl	8000ad0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8002898:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800289a:	07db      	lsls	r3, r3, #31
      ms++;
 800289c:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80028a0:	d4f5      	bmi.n	800288e <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80028a2:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80028a6:	fab0 f080 	clz	r0, r0
 80028aa:	0940      	lsrs	r0, r0, #5
}
 80028ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80028ae:	2001      	movs	r0, #1
}
 80028b0:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80028b2:	68c3      	ldr	r3, [r0, #12]
 80028b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  uint32_t ms = 0U;
 80028b8:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80028ba:	60c3      	str	r3, [r0, #12]
 80028bc:	e001      	b.n	80028c2 <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80028be:	2c32      	cmp	r4, #50	; 0x32
 80028c0:	d0f5      	beq.n	80028ae <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 80028c2:	2001      	movs	r0, #1
 80028c4:	f7fe f904 	bl	8000ad0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80028c8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80028ca:	07da      	lsls	r2, r3, #31
      ms++;
 80028cc:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80028d0:	d5f5      	bpl.n	80028be <USB_SetCurrentMode+0x4e>
    return HAL_ERROR;
 80028d2:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80028d6:	fab0 f080 	clz	r0, r0
 80028da:	0940      	lsrs	r0, r0, #5
 80028dc:	e7e6      	b.n	80028ac <USB_SetCurrentMode+0x3c>
 80028de:	bf00      	nop

080028e0 <USB_DevInit>:
{
 80028e0:	b084      	sub	sp, #16
 80028e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028e6:	b083      	sub	sp, #12
 80028e8:	ac0b      	add	r4, sp, #44	; 0x2c
 80028ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80028ec:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80028f6:	460c      	mov	r4, r1
 80028f8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80028fc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8002900:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8002904:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8002908:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800290c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8002910:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8002914:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8002918:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800291c:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8002920:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8002924:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 8002928:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800292c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8002930:	2d00      	cmp	r5, #0
 8002932:	f040 80a7 	bne.w	8002a84 <USB_DevInit+0x1a4>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002936:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800293a:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800293e:	f043 0302 	orr.w	r3, r3, #2
 8002942:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002946:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002948:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800294c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800294e:	6803      	ldr	r3, [r0, #0]
 8002950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002954:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800295e:	2200      	movs	r2, #0
 8002960:	f8c0 2e00 	str.w	r2, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002964:	f8dc 3000 	ldr.w	r3, [ip]
 8002968:	f8cc 3000 	str.w	r3, [ip]
  USBx_DEVICE->DCFG |= speed;
 800296c:	f8dc 3000 	ldr.w	r3, [ip]
 8002970:	f043 0303 	orr.w	r3, r3, #3
 8002974:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 8002978:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 800297a:	4a57      	ldr	r2, [pc, #348]	; (8002ad8 <USB_DevInit+0x1f8>)
 800297c:	e003      	b.n	8002986 <USB_DevInit+0xa6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800297e:	6903      	ldr	r3, [r0, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f2c0 8096 	blt.w	8002ab2 <USB_DevInit+0x1d2>
    count++;
 8002986:	9b00      	ldr	r3, [sp, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800298c:	9b00      	ldr	r3, [sp, #0]
 800298e:	4293      	cmp	r3, r2
 8002990:	d9f5      	bls.n	800297e <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 8002992:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 8002994:	2300      	movs	r3, #0
    if (count > 200000U)
 8002996:	4a50      	ldr	r2, [pc, #320]	; (8002ad8 <USB_DevInit+0x1f8>)
  __IO uint32_t count = 0U;
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	e002      	b.n	80029a2 <USB_DevInit+0xc2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800299c:	6903      	ldr	r3, [r0, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db77      	blt.n	8002a92 <USB_DevInit+0x1b2>
    count++;
 80029a2:	9b01      	ldr	r3, [sp, #4]
 80029a4:	3301      	adds	r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80029a8:	9b01      	ldr	r3, [sp, #4]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d9f6      	bls.n	800299c <USB_DevInit+0xbc>
    ret = HAL_ERROR;
 80029ae:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80029b0:	2200      	movs	r2, #0
 80029b2:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80029b6:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80029ba:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80029be:	b1e4      	cbz	r4, 80029fa <USB_DevInit+0x11a>
 80029c0:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(i)->DIEPCTL = 0U;
 80029c4:	4617      	mov	r7, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80029c6:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80029ca:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80029ce:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80029d2:	e008      	b.n	80029e6 <USB_DevInit+0x106>
      USBx_INEP(i)->DIEPCTL = 0U;
 80029d4:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80029d6:	3201      	adds	r2, #1
 80029d8:	4294      	cmp	r4, r2
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80029da:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80029dc:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80029e0:	f103 0320 	add.w	r3, r3, #32
 80029e4:	d030      	beq.n	8002a48 <USB_DevInit+0x168>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80029e6:	681e      	ldr	r6, [r3, #0]
 80029e8:	2e00      	cmp	r6, #0
 80029ea:	daf3      	bge.n	80029d4 <USB_DevInit+0xf4>
      if (i == 0U)
 80029ec:	b112      	cbz	r2, 80029f4 <USB_DevInit+0x114>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80029ee:	f8c3 8000 	str.w	r8, [r3]
 80029f2:	e7f0      	b.n	80029d6 <USB_DevInit+0xf6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80029f4:	f8c3 9000 	str.w	r9, [r3]
 80029f8:	e7ed      	b.n	80029d6 <USB_DevInit+0xf6>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80029fa:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80029fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a02:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8002a06:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002a08:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8002a0c:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002a0e:	6143      	str	r3, [r0, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002a10:	6982      	ldr	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002a12:	4b32      	ldr	r3, [pc, #200]	; (8002adc <USB_DevInit+0x1fc>)
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002a14:	f042 0210 	orr.w	r2, r2, #16
 8002a18:	6182      	str	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002a1a:	6982      	ldr	r2, [r0, #24]
 8002a1c:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8002a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002a20:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 8002a22:	b11a      	cbz	r2, 8002a2c <USB_DevInit+0x14c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002a24:	6983      	ldr	r3, [r0, #24]
 8002a26:	f043 0308 	orr.w	r3, r3, #8
 8002a2a:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002a2c:	2d01      	cmp	r5, #1
 8002a2e:	d105      	bne.n	8002a3c <USB_DevInit+0x15c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002a30:	6983      	ldr	r3, [r0, #24]
 8002a32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	6183      	str	r3, [r0, #24]
}
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	b003      	add	sp, #12
 8002a40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a44:	b004      	add	sp, #16
 8002a46:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002a4e:	4617      	mov	r7, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002a50:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002a54:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002a58:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8002a5c:	e008      	b.n	8002a70 <USB_DevInit+0x190>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002a5e:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a60:	3201      	adds	r2, #1
 8002a62:	4294      	cmp	r4, r2
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002a64:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002a66:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a6a:	f103 0320 	add.w	r3, r3, #32
 8002a6e:	d0c4      	beq.n	80029fa <USB_DevInit+0x11a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002a70:	681e      	ldr	r6, [r3, #0]
 8002a72:	2e00      	cmp	r6, #0
 8002a74:	daf3      	bge.n	8002a5e <USB_DevInit+0x17e>
      if (i == 0U)
 8002a76:	b112      	cbz	r2, 8002a7e <USB_DevInit+0x19e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002a78:	f8c3 8000 	str.w	r8, [r3]
 8002a7c:	e7f0      	b.n	8002a60 <USB_DevInit+0x180>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002a7e:	f8c3 9000 	str.w	r9, [r3]
 8002a82:	e7ed      	b.n	8002a60 <USB_DevInit+0x180>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002a84:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a8a:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002a8e:	6383      	str	r3, [r0, #56]	; 0x38
 8002a90:	e765      	b.n	800295e <USB_DevInit+0x7e>
  count = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a96:	2310      	movs	r3, #16
    if (count > 200000U)
 8002a98:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <USB_DevInit+0x1f8>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a9a:	6103      	str	r3, [r0, #16]
 8002a9c:	e002      	b.n	8002aa4 <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002a9e:	6903      	ldr	r3, [r0, #16]
 8002aa0:	06db      	lsls	r3, r3, #27
 8002aa2:	d585      	bpl.n	80029b0 <USB_DevInit+0xd0>
    count++;
 8002aa4:	9b01      	ldr	r3, [sp, #4]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002aaa:	9b01      	ldr	r3, [sp, #4]
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d9f6      	bls.n	8002a9e <USB_DevInit+0x1be>
 8002ab0:	e77d      	b.n	80029ae <USB_DevInit+0xce>
  count = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ab6:	f44f 6384 	mov.w	r3, #1056	; 0x420
    if (count > 200000U)
 8002aba:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <USB_DevInit+0x1f8>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002abc:	6103      	str	r3, [r0, #16]
 8002abe:	e004      	b.n	8002aca <USB_DevInit+0x1ea>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ac0:	6901      	ldr	r1, [r0, #16]
 8002ac2:	f011 0120 	ands.w	r1, r1, #32
 8002ac6:	f43f af65 	beq.w	8002994 <USB_DevInit+0xb4>
    count++;
 8002aca:	9b00      	ldr	r3, [sp, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8002ad0:	9b00      	ldr	r3, [sp, #0]
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d9f4      	bls.n	8002ac0 <USB_DevInit+0x1e0>
 8002ad6:	e75c      	b.n	8002992 <USB_DevInit+0xb2>
 8002ad8:	00030d40 	.word	0x00030d40
 8002adc:	803c3800 	.word	0x803c3800

08002ae0 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002ae0:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 8002ae4:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002ae6:	f022 0203 	bic.w	r2, r2, #3
 8002aea:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002aee:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002af2:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 8002af6:	f043 0302 	orr.w	r3, r3, #2
}
 8002afa:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002afc:	604b      	str	r3, [r1, #4]
}
 8002afe:	4770      	bx	lr

08002b00 <__libc_init_array>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	4d0d      	ldr	r5, [pc, #52]	; (8002b38 <__libc_init_array+0x38>)
 8002b04:	4c0d      	ldr	r4, [pc, #52]	; (8002b3c <__libc_init_array+0x3c>)
 8002b06:	1b64      	subs	r4, r4, r5
 8002b08:	10a4      	asrs	r4, r4, #2
 8002b0a:	2600      	movs	r6, #0
 8002b0c:	42a6      	cmp	r6, r4
 8002b0e:	d109      	bne.n	8002b24 <__libc_init_array+0x24>
 8002b10:	4d0b      	ldr	r5, [pc, #44]	; (8002b40 <__libc_init_array+0x40>)
 8002b12:	4c0c      	ldr	r4, [pc, #48]	; (8002b44 <__libc_init_array+0x44>)
 8002b14:	f000 f820 	bl	8002b58 <_init>
 8002b18:	1b64      	subs	r4, r4, r5
 8002b1a:	10a4      	asrs	r4, r4, #2
 8002b1c:	2600      	movs	r6, #0
 8002b1e:	42a6      	cmp	r6, r4
 8002b20:	d105      	bne.n	8002b2e <__libc_init_array+0x2e>
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b28:	4798      	blx	r3
 8002b2a:	3601      	adds	r6, #1
 8002b2c:	e7ee      	b.n	8002b0c <__libc_init_array+0xc>
 8002b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b32:	4798      	blx	r3
 8002b34:	3601      	adds	r6, #1
 8002b36:	e7f2      	b.n	8002b1e <__libc_init_array+0x1e>
 8002b38:	08002bfc 	.word	0x08002bfc
 8002b3c:	08002bfc 	.word	0x08002bfc
 8002b40:	08002bfc 	.word	0x08002bfc
 8002b44:	08002c00 	.word	0x08002c00

08002b48 <memset>:
 8002b48:	4402      	add	r2, r0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	f803 1b01 	strb.w	r1, [r3], #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <_init>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr

08002b64 <_fini>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	bf00      	nop
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr
